dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",5,0,0,0,2,1,0,0,1,4,66,3,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,1,4,0,4,0,1,4,39,5,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",3,0,0,0,2,2,0,1,1,5,53,8,0.5,1,1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,1,0,0,1,2,0,3,0,1,5,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,1,0,0,1,2,0,3,0,1,5,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",2,0,0,0,2,1,0,0,0,3,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",2,0,0,0,2,1,0,0,0,3,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",3,0,0,0,2,2,0,1,1,5,53,8,0.5,1,1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,2,0,0,1,2,2,0,0,1,5,26,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,2,0,0,1,2,2,0,0,1,5,28,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,3,0,1,5,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,3,2,0,2,4,1,2,0,0,6,40,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,4,2,0,0,0,1,0,0,0,3,28,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,2,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,2,1,0,0,0,0,0,0,1,3,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,4,2,0,0,0,0,0,0,1,3,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,2,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,1,1,0,2,6,1,3,0,1,7,35,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,1,0,0,1,2,2,1,0,2,6,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,1,0,0,2,4,2,3,0,2,6,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,1,1,0,1,5,2,6,0,2,7,79,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,0,2,1,4,0,1,4,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,2,2,0,1,3,1,0,0,0,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,1,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,3,1,0,1,3,1,0,0,0,5,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,1,0,1,0,4,4,0,0,1,5,42,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,3,1,0,0,0,2,0,0,1,4,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,4,2,0,1,2,2,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,3,1,0,0,0,2,0,0,1,4,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,4,2,0,1,2,2,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,2,1,1,0,2,0,0,0,1,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,3,5,1,0,5,2,0,0,1,6,53,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,2,0,0,0,0,0,0,0,1,2,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,1,0,1,0,2,2,0,0,1,5,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,1,0,1,0,2,1,0,0,0,4,34,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,91,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,99,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,113,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,292,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,294,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,296,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,43,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,44,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,2,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,56,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,58,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,63,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,69,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,37,    public MathInternalError() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,1,4,0,3,0,1,5,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,0,2,1,0,0,1,4,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,0,0,1,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,2,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},1,0,0,1,4,1,0,0,1,5,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,3,0,0,0,4,3,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,87,        for (int i = 0; i < arr.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,88,            newArr[i] = arr[i] * val;,1,1,1,0,4,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,90,        return newArr;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,120,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,125,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,128,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,143,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,146,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,148,            result[i] -= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,150,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,164,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,170,            result[i] *= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,172,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,190,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,192,            result[i] /= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,194,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,207,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,209,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,221,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,224,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,256,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,271,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,282,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,286,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,311,        T previous = val[0];,1,0,1,0,2,0,0,1,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,1,0,1,1,4,0,2,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,324,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,329,                comp = val[i].compareTo(previous);,1,0,1,1,4,0,2,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,330,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,332,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,335,                    if (comp > 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,336,                       return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,347,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",0,0,0,0,2,1,4,0,2,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,377,        final int max = val.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,381,        for (index = 1; index < max; index++) {,4,1,0,1,3,1,0,0,2,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,1,1,1,1,5,1,0,0,0,6,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,1,1,1,1,5,1,0,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,1,1,1,1,5,1,0,0,0,6,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,397,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,1,1,1,1,5,1,0,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,1,0,1,0,2,0,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,415,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,419,        if (abort) {,1,0,0,1,3,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",4,0,1,0,4,2,0,1,1,6,82,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,422,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,437,"        checkOrder(val, dir, strict, true);",0,0,0,0,2,0,4,0,2,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,438,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,449,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,462,        for (int i = 1; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,2,1,1,1,7,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,464,                throw new DimensionMismatchException(,0,0,0,0,1,2,0,1,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,469,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,0,1,1,1,5,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,483,                throw new NotStrictlyPositiveException(in[i]);,0,0,1,1,4,2,0,1,1,6,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,486,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0,1,1,1,5,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,499,                throw new NotPositiveException(in[i]);,0,0,1,1,4,2,0,1,1,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,502,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,513,        for (int i = 0; i < in.length; i ++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,514,            for (int j = 0; j < in[i].length; j++) {,4,1,1,1,5,2,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,515,                if (in[i][j] < 0) {,0,1,1,1,7,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,0,0,1,1,6,2,0,1,1,6,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,520,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,585,        double s1 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,587,        double s3 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,3,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,4,3,0,1,3,1,0,0,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,2,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,600,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,603,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,609,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,610,                        if (xabs != 0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,611,                            double r = xabs / x3max;,3,1,0,0,0,1,0,0,0,3,24,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,612,                            s3 += r * r;,3,1,0,0,0,0,0,0,1,3,12,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,613,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,3,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,6,4,0,2,4,0,2,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,627,                if (s2 >= x3max) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,6,5,0,3,8,0,2,0,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,6,4,0,3,8,0,2,0,1,6,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,634,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",2,0,0,0,2,0,3,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,683,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,3,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,687,        final int len = x.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,689,        for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,690,            final double[] y = yList[j];,1,0,1,0,4,2,0,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,691,            if (y == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,692,                throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,3,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,695,"                throw new DimensionMismatchException(y.length, len);",3,0,0,0,2,2,0,1,1,5,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",1,0,0,0,0,1,0,4,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,702,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,703,"            list.add(new Pair<Double, Integer>(x[i], i));",1,0,1,0,6,1,2,3,1,7,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,707,"        final Comparator<Pair<Double, Integer>> comp",1,0,0,0,0,1,0,4,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,722,"        Collections.sort(list, comp);",0,0,0,0,2,0,4,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,727,        final int[] indices = new int[len];,1,0,1,0,4,4,0,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",1,0,0,1,2,1,3,3,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0,0,1,1,4,0,2,0,1,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,731,            indices[i] = e.getValue();,0,0,1,1,4,0,2,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,1,0,1,0,4,2,0,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,1,0,0,1,4,2,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,0,0,1,0,6,0,0,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,745,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,779,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,793,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,794,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,818,"            throw new DimensionMismatchException(len, b.length);",3,0,0,0,2,2,0,1,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,848,        double sPrime = sHighPrev - prodHighNext;,3,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,849,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,6,4,0,2,6,1,0,0,0,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,2,1,0,0,0,2,0,0,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,2,1,1,0,2,0,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,854,            final double sHighCur = sHighPrev + prodHighNext;,3,1,0,0,0,2,0,0,1,4,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,3,1,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,6,4,0,2,6,0,0,0,1,5,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,2,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,4,2,0,1,2,1,0,0,0,5,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,1,1,1,0,4,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,871,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,910,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,913,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,919,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,922,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,925,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,926,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,927,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,940,        double result = s12High + (prod1Low + prod2Low + s12Low);,5,2,0,1,2,1,0,0,0,5,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,5,3,0,0,0,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,948,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,991,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,995,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1006,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1014,        final double ca3        = SPLIT_FACTOR * a3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1031,        final double s123High   = s12High + prod3High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,6,4,0,2,6,2,0,0,1,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,7,2,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1039,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,7,5,0,0,0,0,0,0,1,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1045,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1101,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1106,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1116,        final double ca3        = SPLIT_FACTOR * a3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1119,        final double cb3        = SPLIT_FACTOR * b3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1128,        final double ca4        = SPLIT_FACTOR * a4;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1137,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1142,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,6,4,0,2,6,2,0,0,1,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1150,        final double s1234High  = s123High + prod4High;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,6,4,0,2,6,2,0,0,1,6,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,9,2,0,1,2,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,9,7,0,0,0,0,0,0,1,3,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1164,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1178,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1181,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1186,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1189,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1208,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1212,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1215,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1233,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1237,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1240,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1255,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1259,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1261,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1262,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1263,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1266,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,2,0,0,1,2,2,0,1,1,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1302,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",3,0,1,0,4,2,0,1,1,6,94,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1306,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1313,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1315,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1320,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",1,0,0,1,10,0,5,2,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",0,0,0,1,4,0,5,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1337,         return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1356,"             T[] dummyRow = buildArray(field, 0);",1,0,0,0,4,0,2,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",1,0,0,1,10,0,5,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1358,         } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1359,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",1,0,0,1,9,0,4,1,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1363,             for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0,0,1,1,6,0,4,0,0,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1367,         return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1395,         MathUtils.checkNotNull(x);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1396,         MathUtils.checkNotNull(h);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,3,0,0,0,0,2,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,3,0,0,0,0,2,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1401,         if (xLen == 0 || hLen == 0) {,2,3,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0,0,0,1,2,2,0,1,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,3,2,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1407,         final double[] y = new double[totalLength];,1,0,1,0,4,4,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",3,2,0,0,2,1,2,0,0,5,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,3,1,0,0,0,1,0,0,0,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1414,             while (k < hLen && j >= 0) {,3,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,3,1,1,0,4,0,0,0,3,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,1,0,1,0,2,0,0,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1420,         return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,709,"            new Comparator<Pair<Double, Integer>>() {",0,0,0,1,3,1,0,4,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0,0,0,2,6,1,5,0,0,4,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",0,0,0,1,4,1,0,4,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,717,                return o2.getKey().compareTo(o1.getKey());,0,0,0,2,6,1,5,0,0,4,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,1,0,0,1,4,0,1,2,1,6,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,1,0,0,1,4,0,2,2,0,5,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,1,0,0,1,2,0,3,1,0,5,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,1,0,0,2,6,0,5,1,1,6,71,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,2,6,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,3,0,0,1,2,0,2,1,0,5,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,1,0,0,2,4,0,5,1,0,5,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,1,0,1,2,1,2,0,1,6,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,1,0,0,1,2,1,3,1,1,7,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",3,0,0,1,4,2,3,2,3,7,77,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,2,0,0,4,19,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,56,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,3,2,0,0,0,2,0,0,1,4,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,3,1,0,1,3,1,0,0,0,5,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,3,0,0,1,2,1,2,1,1,7,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,1,0,0,1,2,2,3,0,1,6,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,58,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",6,3,0,1,4,2,0,1,1,7,59,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,1,0,0,1,2,1,2,1,2,7,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,1,0,0,1,2,1,3,0,0,5,47,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,3,6,58,3,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",3,0,0,0,2,2,0,2,2,5,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,1,5,2,4,1,1,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,1,4,1,5,0,0,4,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,1,0,0,3,6,2,1,2,2,7,51,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,1,0,0,0,0,1,0,2,1,4,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",1,0,0,0,1,2,0,2,1,5,41,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,1,0,0,1,3,1,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,6,3,0,1,4,1,0,0,0,5,54,8,0.02439,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,4,1,0,2,5,1,0,0,1,6,62,9,21.33333,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,2,1,0,1,3,1,0,0,0,5,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,1,0,1,0,2,1,0,0,0,4,19,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,5,2,0,1,3,2,0,0,1,6,33,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,2,0,0,0,0,1,0,0,0,2,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,2,1,1,0,2,0,0,0,1,5,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,3,3,0,1,4,0,0,0,1,5,50,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,4,4,1,1,8,0,0,0,1,6,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,6,3,0,1,3,2,0,0,1,6,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,2,0,0,0,0,1,0,0,0,2,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,2,1,1,0,2,0,0,0,1,5,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,3,3,0,1,4,0,0,0,1,5,50,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,5,5,1,1,10,0,0,0,1,6,53,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,2,3,1,1,6,0,0,0,1,6,49,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,4,5,1,1,8,0,0,0,1,6,51,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,1,0,0,0,0,0,0,0,1,2,8,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,2,0,1,0,2,0,0,0,2,4,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,2,1,0,0,0,0,0,0,1,3,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,2,2,0,1,2,0,0,0,1,5,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,2,2,0,1,2,0,0,0,1,5,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,2,1,0,0,0,0,0,0,1,3,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",3,0,0,0,3,2,0,0,0,3,38,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,2,0,0,0,0,1,0,0,1,3,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,2,0,0,0,0,1,0,0,1,3,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,0,2,1,3,0,0,4,38,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,1,0,0,0,1,4,0,2,2,5,69,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,1,0,0,1,3,1,0,0,1,5,26,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,1,0,0,0,0,0,0,0,1,2,15,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,1,0,0,0,0,0,0,0,2,2,20,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,1,0,0,1,3,1,0,0,0,4,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,1,0,0,1,4,1,2,0,1,6,34,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,2,1,0,1,2,1,2,0,1,7,61,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,3,0,0,0,0,1,0,0,1,3,35,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,2,0,0,0,0,1,0,0,1,3,29,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,2,0,0,1,4,3,1,0,1,6,56,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,2,0,0,1,4,3,1,0,1,6,56,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,3,0,0,0,4,4,0,0,1,4,47,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,0,1,1,1,7,1,0,0,0,5,19,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,1,1,1,8,2,0,0,0,5,26,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,1,0,4,0,0,0,1,3,19,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,1,0,0,0,0,1,0,0,0,2,16,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,1,0,0,0,0,1,0,0,0,2,19,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,1,1,1,1,6,1,2,0,0,7,43,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,3,1,0,0,0,0,0,0,1,3,29,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,3,0,0,0,0,1,0,0,1,3,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,1,0,0,0,1,2,0,0,1,4,31,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,3,0,0,1,4,0,2,0,2,5,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,1,0,0,1,2,2,0,2,2,6,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,1,0,0,1,4,2,1,0,2,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,3,0,0,0,0,0,0,0,1,2,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,2,0,1,4,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,1,0,0,0,0,0,0,0,1,2,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,1,0,0,1,2,1,3,0,0,5,39,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",0,0,0,0,2,0,3,0,1,3,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,1,0,0,0,0,0,0,1,0,2,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,1,0,0,0,0,0,0,1,0,2,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,4,1,0,1,3,1,0,0,2,6,65,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",1,0,0,0,2,1,3,1,2,6,49,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",1,0,0,0,2,1,3,1,2,6,48,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,1,0,1,0,4,4,0,0,1,5,44,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,4,1,0,1,3,2,0,0,1,6,34,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,1,0,0,0,0,0,0,1,0,2,23,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,4,2,0,1,3,2,0,0,1,6,50,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,1,1,0,1,3,1,0,0,0,5,24,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,2,2,0,0,1,1,0,0,0,4,30,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,0,2,0,4,0,1,3,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,1,2,6,0,5,0,1,5,63,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,1,0,0,1,4,2,2,0,2,6,45,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),2,0,0,1,4,2,0,1,1,6,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",1,0,0,0,4,1,6,1,2,6,78,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,1,0,0,1,2,0,3,0,1,5,34,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",1,0,0,0,4,1,6,1,2,6,78,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,1,0,0,1,2,1,3,1,1,7,51,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",1,0,0,0,2,2,3,0,2,5,55,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,1,1,0,1,3,1,0,0,0,5,24,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",5,4,0,1,6,0,4,0,1,6,63,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,1,0,1,0,4,2,0,0,1,5,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,3,1,1,0,4,2,0,0,1,6,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,2,1,0,1,3,1,0,0,0,5,30,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,0,0,0,0,0,0,0,1,2,24,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,2,0,0,0,0,0,0,0,1,2,21,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",1,0,0,2,5,1,4,1,2,7,65,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,2,0,1,3,1,1,0,1,6,38,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,1,1,0,1,3,2,0,0,0,5,57,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,1,0,0,1,6,2,3,0,2,6,52,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,1,0,0,1,4,2,2,0,1,6,39,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,1,0,1,3,2,0,0,1,6,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",2,2,1,1,11,1,4,0,0,7,68,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,4,1,0,1,3,2,0,0,1,6,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,2,2,1,1,5,1,0,0,0,6,40,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,1,0,0,1,2,2,2,0,2,6,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,1,0,0,1,2,2,2,0,2,6,48,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,1,2,0,0,1,1,0,0,0,4,21,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,3,2,0,0,1,1,0,0,0,4,41,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,2,7,1,4,0,2,6,36,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,0,1,0,2,5,1,1,0,1,6,38,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,2,3,1,2,11,2,0,0,0,6,58,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",1,4,0,0,3,1,4,0,0,5,59,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,0,2,0,3,0,1,3,33,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,2,1,0,1,2,0,2,0,0,5,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,1,0,0,1,3,1,0,0,0,4,25,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,1,0,0,0,0,1,0,0,0,2,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,3,0,0,0,8,4,0,0,1,4,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,1,0,6,0,0,0,1,3,33,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",2,0,0,0,2,2,0,2,3,5,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,1,0,0,1,2,0,2,0,2,5,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,1,1,0,1,2,0,2,0,2,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,1,1,0,1,2,0,2,0,2,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,1,0,0,0,0,0,0,0,1,2,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,1,0,0,0,0,0,0,0,1,2,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,1,0,0,0,1,0,0,1,4,62,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,2,1,0,1,2,0,2,0,1,6,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",1,0,0,1,8,0,6,0,4,5,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,1,0,0,0,0,1,0,0,0,2,16,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,1,0,0,0,0,1,0,0,0,2,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",1,0,0,0,2,1,3,0,0,4,34,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,2,0,0,0,0,0,0,0,1,2,10,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,3,1,0,0,0,0,0,0,1,3,15,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,2,1,0,1,2,0,2,0,1,6,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,4,2,0,0,0,0,0,0,1,3,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,3,3,0,1,2,0,0,0,1,5,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,4,3,0,1,4,0,0,0,1,5,44,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",2,7,0,1,5,0,4,0,1,6,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,4,5,0,2,6,0,0,0,1,5,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",4,6,0,1,3,0,2,0,1,6,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",3,3,0,1,4,0,2,0,1,6,54,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",4,4,0,1,4,0,2,0,1,6,64,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,1,1,0,1,2,0,3,0,1,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,1,0,0,1,2,0,3,0,1,5,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,2,1,0,1,2,0,2,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,1,0,0,1,2,0,2,0,2,5,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",1,0,0,0,2,1,2,0,2,5,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",1,0,0,0,2,0,2,0,2,4,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,1,0,0,1,2,0,2,0,1,5,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",1,0,0,0,2,0,3,0,2,4,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",1,0,0,0,2,0,2,0,2,4,57,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",1,0,0,1,6,0,6,0,3,5,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,1,0,0,3,10,0,8,0,3,5,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,3,3,0,2,6,2,0,0,1,6,64,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,1,0,1,0,2,2,0,0,1,5,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,4,1,0,1,3,2,0,0,1,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,2,0,1,0,2,0,0,0,1,4,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,2,1,0,1,3,0,3,0,1,6,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,1,0,0,1,2,0,2,0,1,5,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,2,2,0,0,0,2,0,0,1,4,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,2,1,0,1,2,0,2,0,1,6,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,1,0,0,1,3,1,0,0,0,4,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,5,3,0,4,10,0,8,0,1,6,91,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,1,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,5,2,0,1,3,2,0,0,1,6,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,1,1,1,0,4,0,0,0,1,5,20,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,1,0,1,0,2,0,0,0,1,4,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,3,0,0,0,4,2,0,2,1,5,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",1,0,1,0,6,1,0,1,2,6,40,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,3,0,0,3,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,3,0,0,0,4,4,0,0,1,4,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,1,0,1,0,4,0,0,0,1,4,26,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,1,0,0,0,0,1,0,0,0,2,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,1,0,0,1,12,4,4,0,1,6,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",0,0,1,0,8,0,6,0,1,4,37,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,1,0,0,1,12,4,4,0,1,6,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,0,8,0,6,0,1,4,38,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,1,0,0,1,12,4,4,0,1,6,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",1,0,0,0,2,1,4,0,0,4,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,2,1,1,0,4,0,0,0,1,5,16,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,1,0,0,1,12,4,4,0,1,6,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,0,8,0,8,0,1,5,46,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,3,0,0,1,10,4,2,0,1,6,66,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,5,1,0,1,3,2,0,0,1,6,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,1,0,8,0,3,0,1,4,33,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,1,2,0,0,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,1,0,0,1,12,4,4,0,1,6,74,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,3,1,0,2,5,2,2,0,1,7,47,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",0,0,1,0,6,0,3,0,1,4,27,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,3,1,0,2,5,2,2,0,1,7,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,0,4,0,8,0,0,2,43,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,1,0,1,0,8,4,0,0,1,5,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,4,1,0,1,3,2,0,0,1,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,1,0,4,0,2,0,0,3,21,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,1,0,1,0,8,4,0,0,1,5,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,4,1,0,1,3,2,0,0,1,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,2,1,0,1,3,1,0,0,0,5,12,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,0,4,0,0,0,1,3,12,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",2,0,0,0,2,2,0,1,1,5,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,1,0,0,1,2,2,2,0,1,6,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,5,2,0,0,8,4,0,0,1,5,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,5,2,0,1,3,2,0,0,1,6,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,5,2,0,1,3,2,0,0,1,6,34,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",4,2,1,0,6,0,2,0,1,6,39,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,4,3,0,2,6,3,0,0,1,6,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,1,0,1,0,8,4,0,0,1,5,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,2,0,0,0,0,1,0,0,0,2,21,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,4,1,0,1,3,2,0,0,1,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,1,0,1,0,4,0,0,0,1,4,16,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,2,0,0,0,0,0,0,0,1,2,14,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,3,0,0,0,0,1,0,0,1,3,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",1,0,0,0,2,1,4,0,0,4,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,2,1,0,1,3,1,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,2,0,0,0,0,0,0,0,1,2,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,3,1,0,2,5,2,2,0,1,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,3,1,0,2,5,2,2,0,1,7,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",1,0,0,0,2,1,4,0,0,4,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,2,1,0,1,3,1,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,2,0,0,0,0,0,0,0,1,2,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,3,0,0,0,0,1,0,0,1,3,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,5,1,0,1,3,2,0,0,1,6,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,1,1,1,1,5,1,0,0,0,6,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,1,0,1,0,2,0,0,0,1,4,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,5,1,0,1,3,2,0,0,1,6,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,1,1,1,1,5,1,0,0,0,6,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,1,0,1,0,2,0,0,0,1,4,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,1,0,1,0,8,4,0,0,1,5,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,4,1,0,1,3,2,0,0,1,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,4,1,0,1,3,2,0,0,1,6,35,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,1,6,0,2,0,1,5,32,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,1,0,0,0,0,2,0,0,1,3,27,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",1,1,0,0,4,0,7,0,1,5,47,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,1,0,0,0,0,0,0,0,1,2,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,1,1,0,1,3,1,0,0,0,5,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,1,0,0,1,10,4,2,0,1,6,56,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,3,1,0,2,5,2,2,0,1,7,50,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,1,0,6,0,4,0,1,4,27,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",1,0,0,0,2,2,0,1,2,5,42,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,0,4,0,0,0,1,3,29,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,1,0,4,0,0,0,1,3,20,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,1,1,1,1,4,1,2,0,0,7,49,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,2,2,1,2,7,1,2,0,0,7,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,2,1,0,1,3,1,0,0,0,5,21,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,1,0,0,0,0,0,0,0,1,2,6,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,2,4,1,1,10,1,0,0,0,6,70,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,3,2,0,1,2,1,2,0,0,6,36,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,3,4,1,1,8,0,0,0,1,6,61,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,3,4,1,1,8,0,0,0,1,6,61,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,1,0,0,0,0,1,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,1,0,0,0,0,1,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,1,0,0,0,0,1,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,5,2,0,1,3,1,0,0,2,6,30,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,2,1,1,0,2,1,0,0,0,5,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,2,1,1,0,2,1,0,0,0,5,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,0,1,0,2,7,1,6,0,0,5,41,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,3,1,0,0,0,0,0,0,1,3,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,3,2,0,1,2,0,2,0,1,6,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,3,2,1,0,2,0,0,0,1,5,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,2,1,0,0,0,0,0,0,1,3,12,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,3,1,0,0,0,0,0,0,1,3,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,3,1,0,0,0,0,0,0,1,3,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,3,2,0,1,2,0,2,0,1,6,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,3,2,1,0,2,0,0,0,1,5,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,2,1,0,0,0,0,0,0,1,3,12,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,3,1,0,0,0,0,0,0,1,3,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,1,2,1,1,5,1,0,0,0,6,22,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,3,2,1,0,2,0,0,0,1,5,31,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,5,4,1,1,4,0,0,0,1,6,47,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,3,1,0,0,0,0,0,0,1,3,10,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,3,2,1,0,2,0,0,0,1,5,31,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,4,2,0,0,0,0,0,0,1,3,14,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,4,1,0,1,3,2,0,0,1,6,32,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,2,1,1,0,4,0,0,0,1,5,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,4,4,1,0,8,0,0,0,1,5,36,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,3,3,1,0,8,0,0,0,1,5,32,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,3,3,0,1,3,1,0,0,0,5,25,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,1,0,1,0,2,0,0,0,1,4,24,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,1,0,1,0,2,0,0,0,1,4,9,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,0,2,0,0,0,1,3,11,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,1,1,1,1,5,1,0,0,0,6,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,2,0,0,0,0,0,0,0,1,2,6,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,1,0,1,0,2,0,0,0,1,4,23,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,0,4,0,0,0,1,3,40,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,1,0,1,0,2,0,0,0,1,4,23,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,4,1,0,1,3,2,0,0,1,6,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,1,0,1,0,4,0,0,0,1,4,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,0,8,0,0,0,1,3,18,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,1,0,1,0,4,0,0,0,1,4,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,2,1,1,0,4,2,0,0,1,6,46,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,0,4,0,0,0,1,3,14,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,1,5,1,0,0,0,5,19,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,2,3,1,1,6,2,0,0,1,7,52,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,2,2,1,0,2,1,0,0,0,5,37,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,1,2,1,0,6,0,0,0,1,5,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,1,1,1,0,6,0,0,0,1,5,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,5,2,0,1,3,2,0,0,1,6,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,1,0,0,0,0,0,0,0,1,2,9,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,1,1,1,0,6,0,0,0,1,5,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,2,0,0,0,0,0,0,0,1,2,12,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,1,1,1,0,6,0,0,0,1,5,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,1,1,1,0,6,0,0,0,1,5,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,1,0,1,0,4,2,0,0,1,5,42,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,1,0,4,0,0,0,1,3,16,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,1,0,0,0,0,1,0,0,0,2,20,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,5,2,0,1,3,2,0,0,1,6,33,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,1,0,1,0,2,2,0,0,1,5,23,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,3,1,0,0,0,0,0,0,1,3,18,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,2,2,1,1,8,2,6,0,2,8,86,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,1,0,1,0,2,0,0,0,1,4,17,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,2,1,1,0,2,0,0,0,1,5,15,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,3,3,1,1,4,2,0,0,2,7,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",1,1,0,0,2,0,4,0,0,4,28,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,1,0,1,0,4,2,0,0,1,5,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,1,0,1,0,2,2,0,0,1,5,25,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,2,1,1,0,2,1,0,0,0,5,24,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,5,2,0,1,3,2,0,0,1,6,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,1,0,1,0,2,2,0,0,1,5,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,2,1,1,0,2,0,0,0,1,5,20,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,2,1,1,0,2,0,0,0,1,5,18,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,2,2,1,1,6,0,0,0,1,6,26,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,1,0,0,0,0,1,0,0,0,2,17,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,1,1,1,0,4,0,0,0,1,5,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,2,1,0,0,0,0,0,0,1,3,18,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,1,1,1,0,4,0,0,0,1,5,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,5,2,0,1,3,2,0,0,1,6,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,1,0,1,0,4,2,0,0,1,5,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,5,1,0,1,3,2,0,0,1,6,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,3,1,0,10,0,0,0,1,4,37,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",1,0,0,0,2,2,4,0,1,5,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",1,0,0,0,2,2,4,0,1,5,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,2,2,0,1,3,1,2,0,0,6,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",0,0,0,0,2,0,4,0,0,2,45,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,1,0,0,0,0,1,0,0,0,2,10,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,3,1,0,0,0,2,0,0,1,4,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,2,2,0,1,2,2,0,0,1,6,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,2,1,0,0,0,2,0,0,1,4,29,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,8,5,0,1,4,0,0,0,1,5,81,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,2,1,0,1,4,2,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,2,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,1,0,0,1,2,0,3,0,1,5,25,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,1,0,0,0,0,0,0,0,1,2,9,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,1,0,0,0,0,0,0,0,1,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",0,0,0,0,2,0,4,0,0,2,25,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,1,6,0,1,0,2,5,35,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,0,7,1,2,0,0,4,37,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,1,7,1,0,0,0,5,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,1,0,0,0,0,0,0,0,1,2,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,1,0,0,0,0,0,0,0,1,2,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,4,4,0,2,7,1,0,0,0,5,50,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,3,1,0,1,4,2,0,0,0,5,35,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",3,2,0,0,2,0,5,0,0,4,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,1,0,1,0,2,0,0,0,1,4,27,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",3,2,0,0,2,0,5,0,0,4,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,1,0,1,0,2,0,0,0,1,4,27,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,1,0,0,0,0,0,0,0,1,2,11,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,2,2,0,1,3,1,0,0,0,5,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,2,0,0,0,0,0,0,0,1,2,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,2,0,0,0,0,0,0,0,1,2,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,1,0,0,1,2,0,3,0,1,5,25,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,1,0,0,0,0,0,0,0,1,2,9,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },0,0,0,0,1,0,0,0,0,1,1,2,0.1,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,0,2,0,4,0,0,3,44,9,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,0,2,0,4,0,1,3,36,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,1,0,0,0,0,0,0,0,2,2,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,2,0,0,1,3,2,0,1,1,6,51,8,0.07692,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,1,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,5,1,0,1,3,2,0,0,1,6,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,1,0,1,0,2,0,0,0,1,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,2,1,0,1,3,1,0,0,0,5,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,0,0,0,1,2,1,3,0,0,4,25,9,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",2,0,0,1,4,2,0,1,1,6,50,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,1,0,0,1,2,1,0,0,1,5,11,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,4,1,0,1,3,1,0,0,0,5,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",3,0,0,1,2,1,0,8,1,6,92,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,5,1,0,1,3,2,0,0,1,6,45,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,1,0,8,1,2,3,1,6,71,7,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",3,0,0,0,2,1,0,2,2,5,67,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,1,0,0,0,0,0,0,0,0,1,11,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,2,0,0,0,0,2,0,0,1,3,73,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,2,0,0,1,3,1,0,1,1,6,57,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,2,0,0,0,0,0,0,0,1,2,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",3,0,0,0,3,1,0,2,1,5,23,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,2,0,0,0,0,0,0,0,1,2,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,2,0,0,0,0,0,0,0,1,2,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,1,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",3,0,0,0,1,1,0,0,0,3,84,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,2,0,0,0,0,0,0,0,1,2,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,1,0,0,2,4,1,2,2,2,7,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,1,0,0,1,6,4,2,0,1,6,50,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",1,0,0,1,2,1,3,3,1,7,46,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,4,0,0,3,32,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,1,2,0,0,5,28,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,1,1,4,0,2,0,1,5,29,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",1,0,0,0,2,0,3,0,1,4,54,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",4,0,0,0,2,1,0,0,1,4,21,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,0,2,1,0,0,0,3,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",6,0,0,0,5,11,0,0,6,4,97,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,1,0,0,0,0,2,0,0,1,3,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,4,3,0,1,2,2,0,0,1,6,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,1,0,1,0,2,3,0,0,1,5,25,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,1,0,0,0,0,1,0,0,1,3,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,4,1,0,1,3,2,0,0,1,6,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,5,0,1,6,68,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,156,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",4,0,0,0,4,0,6,0,0,3,65,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,161,        if (seed.length < v.length) {,4,1,0,1,3,1,0,0,0,5,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,162,            for (int i = seed.length; i < v.length; ++i) {,7,1,0,1,3,2,0,0,1,6,46,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,4,1,1,0,2,2,0,0,1,6,34,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,3,5,1,4,12,1,0,0,1,7,65,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,1,0,1,4,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,171,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,132,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,1,0,0,1,2,1,0,1,2,6,37,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",4,0,0,0,3,4,0,2,3,5,87,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,0,2,0,3,0,1,3,14,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,1,0,0,1,2,1,3,1,1,7,39,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,1,0,0,1,2,2,2,0,1,6,39,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",2,1,0,1,4,2,3,1,2,8,65,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",4,1,0,1,4,1,3,1,3,8,67,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,6,5,0,0,0,1,0,0,0,3,29,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",5,0,0,0,2,1,4,0,1,5,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",5,0,0,0,2,1,4,0,1,5,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",5,0,0,0,2,1,4,0,1,5,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,1,0,0,1,6,3,1,0,1,6,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,0,2,0,6,0,1,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,1,0,0,1,6,3,1,0,1,6,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,0,2,0,6,0,1,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",0,0,0,0,2,0,4,0,1,3,60,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",0,0,0,1,4,0,3,0,1,4,70,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,1,5,1,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,0,2,0,5,0,1,3,52,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,1,4,0,5,0,1,4,57,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,2,6,0,3,0,1,4,64,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),2,2,1,2,8,0,0,0,1,6,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,1,1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,4,0,0,1,2,0,1,0,0,4,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,3,0,0,1,2,2,0,2,2,6,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",8,0,0,0,2,0,1,0,0,3,55,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,1,0,0,0,0,1,0,0,0,2,13,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,3,3,1,0,4,0,0,0,2,5,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,4,2,0,1,3,2,0,0,1,6,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,3,2,1,0,2,0,0,0,1,5,18,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,1,1,0,1,3,1,0,0,0,5,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,1,1,0,1,4,2,0,0,0,5,20,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,1,2,0,2,5,1,0,0,0,5,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,2,0,0,0,0,0,0,0,1,2,7,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,2,0,0,0,0,0,0,0,1,2,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,2,1,1,0,2,0,0,0,1,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,2,1,0,0,4,3,0,0,0,4,42,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,1,0,1,0,2,2,0,0,1,5,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,0,0,1,1,4,0,3,0,1,5,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,1,0,1,0,4,4,0,0,1,5,37,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,1,0,2,0,0,0,1,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,3,1,0,0,0,2,0,0,1,4,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,2,2,0,1,2,2,0,0,1,6,36,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,2,0,0,0,0,1,0,0,0,2,17,7,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,1,1,1,0,4,0,0,0,1,5,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,4,1,0,1,3,2,0,0,1,6,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,0,2,0,6,0,1,3,64,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,3,1,0,1,3,1,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",3,3,0,0,2,1,2,0,1,6,48,4,0.5,1,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,3,0,0,0,4,4,0,0,1,4,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,5,1,0,1,3,2,0,0,1,6,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,1,1,1,8,0,1,0,2,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,1,0,0,1,4,2,3,0,1,6,77,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,5,1,0,1,3,2,0,0,1,6,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,1,1,1,0,4,0,0,0,1,5,38,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,1,1,0,1,2,1,2,0,1,7,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,2,0,0,1,4,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,2,0,0,1,6,65,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,3,1,1,0,4,2,0,0,1,6,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,1,0,1,0,4,2,0,0,1,5,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,0,0,0,1,2,1,3,0,0,4,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,3,0,0,1,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,2,0,0,1,6,95,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,1,0,0,0,9,6,0,0,3,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,2,0,0,4,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,2,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,1,4,0,3,0,1,4,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,2,1,0,0,0,2,0,0,1,4,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,1,2,0,2,4,2,3,0,1,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,1,0,0,1,2,2,2,0,1,6,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,7,7,0,1,6,2,0,0,1,6,57,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,3,1,0,0,0,2,0,0,1,4,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,37,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,3,3,0,1,3,1,0,0,0,5,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,3,1,0,0,0,1,0,0,0,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,3,6,0,3,9,1,6,0,0,6,65,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,3,1,0,0,0,1,0,0,0,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,1,0,0,1,2,2,2,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,3,2,0,1,2,1,2,0,0,6,39,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,1,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,1,1,0,2,6,2,4,1,2,8,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },0,0,0,0,1,0,0,0,0,1,1,2,0.31034,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,1,0,0,1,2,1,0,0,1,5,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,1,0,0,0,0,0,0,0,2,2,82,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,55,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,3,0,0,3,26,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,3,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,2,4,1,2,9,1,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,1,0,1,0,2,3,0,0,1,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",1,0,0,0,2,1,4,0,0,4,48,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,0,2,1,3,0,1,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,1,0,0,0,1,4,0,1,2,5,72,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,3,0,0,3,37,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,3,0,0,0,0,1,0,0,0,2,28,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,2,1,1,0,2,1,0,0,0,5,36,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,4,2,0,1,3,2,0,0,1,6,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",2,0,0,0,2,1,3,0,1,5,47,4,0.05,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,1,0,0,1,2,1,0,0,1,5,17,3,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,55,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,3,0,0,3,26,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,3,0,0,0,0,1,0,0,0,2,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,2,4,1,2,9,1,0,0,0,6,36,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,1,0,1,0,2,3,0,0,1,5,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",1,0,0,0,2,1,4,0,0,4,48,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,0,2,1,3,0,1,4,33,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,1,0,0,0,1,4,0,1,2,5,72,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,3,0,0,3,37,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,3,0,0,0,0,1,0,0,0,2,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,2,1,1,0,2,1,0,0,0,5,36,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,4,2,0,1,3,2,0,0,1,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",2,0,0,0,2,1,3,0,1,5,47,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,2,0,0,0,0,1,0,0,1,3,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,49,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",1,0,0,0,2,0,3,0,2,4,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,1.0,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,2,0,0,1,3,2,0,0,1,5,35,2,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,1,0,1,0,2,2,0,0,1,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",1,0,0,0,4,4,0,0,3,4,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,2,0,0,0,0,1,0,0,0,2,19,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,20,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,4,1,0,1,3,1,0,0,2,6,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,4,5,0,3,6,0,0,0,1,5,71,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,22,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,1,0,1,4,38,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,1,0,1,4,18,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",5,1,0,0,5,2,3,0,1,6,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,5,5,1,4,10,1,0,0,0,6,76,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,1,1,1,1,6,1,0,0,1,7,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,2,0,0,0,0,0,0,0,2,2,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,3,1,0,1,3,1,0,0,0,5,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,1,0,0,0,0,0,0,0,1,2,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,4,2,0,1,3,2,0,0,1,6,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,5,5,0,4,8,1,0,0,0,5,69,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,1,1,1,1,6,1,0,0,1,7,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,1,0,0,0,0,0,0,0,1,2,4,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,0,2,0,0,0,1,3,64,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,1,0,1,4,38,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,6,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,1,1,0,1,2,1,1,0,2,7,21,6,0.09091,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,2,0,0,1,3,2,0,0,1,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,1,0,1,0,2,2,0,0,1,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,1,2,0,0,4,16,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,1,0,0,0,0,1,0,0,0,2,9,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,9,6,0,1,5,1,0,0,0,5,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,1,0,0,1,2,1,1,0,2,6,27,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,5,1,0,1,4,1,0,0,1,6,37,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,2,0,0,1,2,0,2,0,0,4,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,2,0,0,0,0,1,0,0,0,2,30,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",1,0,0,0,2,0,5,0,2,4,53,6,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,5,1,0,0,0,0,0,0,1,3,36,5,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,1,0,0,2,4,0,2,0,3,5,29,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,4,0,0,0,0,0,0,0,1,2,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,3,0,0,0,0,0,0,0,1,2,20,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,1,2,0,2,6,1,3,0,1,7,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,2,0,0,0,0,0,0,0,1,2,20,10,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,1,0,0,0,3,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",3,0,0,0,1,1,0,0,0,3,62,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,1,2,1,1,10,0,0,0,1,6,42,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,1,2,1,0,8,0,0,0,1,5,40,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,1,0,0,1,4,1,2,0,1,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,1,0,0,0,0,0,0,1,3,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,3,0,0,0,4,3,0,0,0,3,41,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,1,5,1,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,1,1,1,6,2,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,1,0,4,0,0,0,1,3,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,1,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,1,1,1,1,6,1,2,0,0,7,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,3,1,0,0,0,0,0,0,1,3,29,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,3,0,0,0,0,1,0,0,1,3,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,1,0,0,0,0,1,0,0,0,2,21,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,1,0,0,0,3,8,2,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",3,0,0,0,1,1,0,0,0,3,62,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,1,2,0,2,6,1,3,0,1,7,46,6,1.0,1,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,1,2,1,1,10,0,0,0,1,6,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,1,2,1,0,8,0,0,0,1,5,40,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,1,0,0,1,4,1,2,0,1,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,2,1,0,0,0,0,0,0,1,3,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,3,0,0,0,4,3,0,0,0,3,41,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,1,5,1,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,0,1,1,1,6,2,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,0,4,0,0,0,1,3,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,1,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,1,0,0,0,4,2,0,0,1,4,29,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,1,0,1,0,2,0,0,0,1,4,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,1,0,1,0,2,0,0,0,1,4,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,1,0,0,0,0,1,0,0,0,2,21,13,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,0,1,0,2,0,0,0,1,3,18,10,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,1,2,1,1,10,0,0,0,1,6,42,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,3,0,0,0,4,3,0,0,0,3,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,1,1,1,0,8,1,0,0,0,5,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,1,2,1,0,8,0,0,0,1,5,40,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,1,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,1,0,0,1,4,1,2,0,1,6,34,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,2,1,0,0,0,0,0,0,1,3,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,3,0,0,0,4,3,0,0,0,3,41,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,0,1,1,1,5,1,0,0,0,5,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,1,6,2,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,1,0,4,0,0,0,1,3,19,10,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,1,0,0,0,0,1,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,1,1,1,1,6,1,2,0,0,7,43,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,3,1,0,0,0,0,0,0,1,3,29,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,3,0,0,0,0,1,0,0,1,3,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,1,0,0,0,4,2,0,0,1,4,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,1,0,1,0,2,0,0,0,1,4,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,1,0,1,0,2,0,0,0,1,4,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,1,2,0,0,1,1,0,0,0,4,19,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },0,0,0,0,1,0,0,0,0,1,1,2,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,2,0,0,0,0,1,0,0,1,3,21,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,2,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,1,0,0,1,2,0,3,0,1,5,33,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,2,1,0,1,3,1,0,0,0,5,20,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",1,0,0,0,2,0,4,0,1,4,47,12,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,1,0,0,0,0,0,0,0,1,2,14,12,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },0,0,0,0,1,0,0,0,0,1,1,2,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,10,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,1,0,0,0,1,1,0,0,0,3,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,43,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,1,0,0,1,6,2,2,0,1,6,38,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,1,0,1,0,8,4,0,0,1,5,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,1,0,1,0,4,3,0,0,0,4,29,5,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,1,0,1,0,4,3,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,1,0,1,0,2,0,0,0,1,4,13,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,1,0,0,0,0,1,0,0,0,2,10,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,2,0,0,1,3,2,0,0,1,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,1,0,1,0,2,0,0,0,1,4,12,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,5,2,0,1,3,2,0,0,1,6,37,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,1,0,1,0,2,1,0,0,0,4,19,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,1,0,1,0,4,1,0,0,0,4,25,9,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,0,1,1,1,11,1,0,0,0,5,30,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,1,0,1,0,2,0,0,0,1,4,12,10,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,1,1,1,1,5,1,0,0,0,6,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,1,0,1,0,2,1,0,0,0,4,19,9,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,0,0,1,0,6,0,0,0,1,3,26,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,1,0,1,0,4,0,0,0,1,4,21,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,1,0,1,0,2,1,0,0,0,4,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,1,1,1,1,7,1,0,0,0,6,24,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,1,0,1,1,6,2,2,0,1,7,45,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,1,0,1,0,4,0,0,0,1,4,15,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,2,1,0,0,0,2,0,0,1,4,33,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,5,2,0,1,3,2,0,0,1,6,37,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,1,0,1,0,2,2,0,0,1,5,24,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,2,1,1,0,4,2,0,0,1,6,37,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,1,0,1,0,4,0,0,0,1,4,12,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,2,1,1,0,4,0,0,0,1,5,19,10,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,5,2,0,1,3,2,0,0,1,6,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,1,0,1,0,2,2,0,0,1,5,24,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,2,2,1,0,8,2,0,0,1,6,41,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,1,0,1,0,4,0,0,0,1,4,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,1,0,1,0,4,0,0,0,1,4,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,3,1,0,0,0,0,0,0,2,3,19,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,2,0,0,0,0,0,0,0,1,2,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",1,0,0,0,2,0,4,0,1,4,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,1,0,8,0,3,0,0,3,36,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,1,0,0,0,0,1,0,0,0,2,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,1.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,1.0,1,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,1.0,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,2,1,0,0,0,2,0,0,1,4,51,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,2,1,0,0,0,2,0,0,1,4,53,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,1,0,0,1,2,2,3,0,1,6,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,1,0,0,1,2,2,3,0,1,6,60,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,1,0,0,1,2,2,3,0,1,6,62,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,3,2,0,0,1,2,2,0,1,6,66,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,5,8,0,0,1,1,2,0,0,5,56,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,4,3,0,1,3,1,0,0,0,5,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,2,2,0,1,2,1,0,0,0,5,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,1,0,0,0,0,1,0,0,0,2,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,3,0,0,0,0,2,0,0,1,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,4,1,0,1,3,1,0,0,2,6,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,1,1,1,1,5,1,0,0,0,6,29,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,1,0,1,0,2,0,0,0,1,4,22,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,2,1,0,1,3,1,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,0,2,0,4,0,2,3,35,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,2,0,1,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,2,0,1,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,1,0,1,1,4,1,2,0,0,6,25,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,1,0,1,1,4,0,2,0,1,6,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,1,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,1,0,0,0,1,0,0,0,0,2,28,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,1,2,0,0,1,1,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,2,2,0,0,1,1,0,0,0,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,4,1,0,1,3,1,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,3,0,0,3,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,1,0,0,1,2,0,3,0,1,5,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,1,0,0,1,2,0,3,0,1,5,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",1,0,0,0,2,1,4,0,0,4,45,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,1,0,0,0,0,1,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,1,1,0,1,3,1,0,0,1,6,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,2,1,1,0,2,0,0,0,2,5,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,1,1,0,1,4,2,0,0,0,5,24,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,1,0,1,0,2,0,0,0,1,4,17,7,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,1,0,0,0,0,1,0,0,0,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,2,0,0,0,0,0,0,0,2,2,10,16,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",1,0,0,0,1,3,0,2,1,5,88,1,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",1,0,0,0,1,3,0,2,1,5,88,1,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,2,1,0,1,3,1,0,0,0,5,13,14,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,2,0,0,0,0,0,0,0,1,2,9,16,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",3,0,0,0,2,2,0,2,2,5,43,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,1,0,0,0,2,1,0,0,0,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,2,0,0,0,0,1,0,0,1,3,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,2,0,0,0,0,1,0,0,1,3,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,2,0,0,0,0,1,0,0,1,3,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,1,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,1,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,1,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,3,1,0,0,0,0,0,0,1,3,13,12,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,2,0,0,0,0,0,0,0,1,2,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,2,0,0,0,0,0,0,0,1,2,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,0,0,0,1,2,1,2,0,0,4,30,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,3,1,0,1,2,0,2,0,1,6,27,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,3,1,0,1,2,0,2,0,1,6,31,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,1,0,0,1,2,1,2,0,1,6,41,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,1,0,1,4,19,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,1,0,1,4,14,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,0,0,0,1,2,0,1,0,1,4,11,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",3,0,0,0,4,3,0,0,0,3,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,1,0,1,0,2,0,0,1,0,4,45,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,2,0,0,0,0,0,0,1,0,2,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,1,0,1,0,2,0,0,0,1,4,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,1,0,2,7,1,4,0,0,5,32,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,1,0,1,1,4,1,1,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,1,0,1,1,4,1,1,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,1,0,0,0,0,1,0,0,0,2,22,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,1,0,0,0,0,1,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,2,0,0,0,0,2,0,0,1,3,31,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,2,0,0,0,0,2,0,0,1,3,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,2,0,0,0,0,2,0,0,1,3,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,1,0,1,1,4,0,1,0,1,6,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,1,0,1,1,4,0,1,0,1,6,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,3,1,0,0,0,2,0,0,1,4,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,3,1,0,0,0,2,0,0,1,4,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,1,0,0,0,0,2,0,0,1,3,29,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,4,2,0,0,0,2,0,0,1,4,48,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,3,1,0,0,0,2,0,0,1,4,35,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,2,0,0,0,0,0,0,0,1,2,29,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,2,0,0,0,0,0,0,0,1,2,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,3,1,0,0,0,0,0,0,1,3,13,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,3,1,0,0,0,0,0,0,1,3,31,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,3,1,0,0,0,0,0,0,1,3,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,3,1,0,0,0,0,0,0,1,3,27,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,3,1,0,0,0,0,0,0,1,3,36,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,5,3,0,0,0,1,0,0,0,3,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,5,3,0,0,0,1,0,0,0,3,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,5,3,0,0,0,1,0,0,0,3,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,4,5,0,2,7,1,0,0,0,5,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,1,0,0,0,0,1,0,0,0,2,18,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,1,0,0,0,0,1,0,0,0,2,18,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,1,0,1,1,4,1,1,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,1,0,1,1,4,1,1,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,2,0,0,0,0,2,0,0,1,3,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,2,0,0,0,0,2,0,0,1,3,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,1,0,1,1,4,0,1,0,1,6,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,1,0,1,1,4,0,1,0,1,6,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,347,                final double currentYPrime = (currentY - previousY) / (currentX - previousX);,5,3,0,1,4,2,0,0,1,6,77,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,3,1,0,0,0,1,0,0,0,3,33,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,1,0,0,1,2,1,3,0,0,5,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,1,0,0,1,2,1,3,0,0,5,35,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,6,3,0,0,0,0,0,0,1,3,59,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,6,3,0,0,0,0,0,0,1,3,59,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",2,0,0,0,2,0,3,0,2,4,38,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,357,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,2,0,0,1,5,1,0,1,1,6,63,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,2,1,0,1,3,1,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",4,0,0,0,3,7,0,0,4,4,83,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,48,        this.weight = weight;,2,0,0,0,0,1,0,0,1,3,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,2,0,0,0,0,1,0,0,1,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,2,0,0,0,0,1,0,0,1,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",0,0,0,1,4,0,4,0,1,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,1,4,1,2,0,1,5,35,5,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",3,1,0,0,2,2,0,1,1,6,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,2,1,0,1,4,3,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,1,0,0,0,0,0,0,1,0,2,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,1,0,0,1,2,1,2,0,0,5,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,2,0,0,1,3,1,0,1,0,5,39,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,1,0,0,1,2,1,2,0,0,5,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,4,4,0,2,5,1,2,0,1,7,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,1,1,0,2,5,1,3,0,0,6,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,2,1,0,1,3,1,0,0,0,5,19,13,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,2,0,0,0,0,0,0,0,1,2,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,2,0,0,0,0,0,0,0,1,2,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,1,0,0,0,0,1,0,0,0,2,14,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,1,0,0,1,2,2,0,2,1,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,1,0,0,1,2,0,2,1,0,5,35,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,2,10,0,10,0,0,4,64,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,1,0,0,0,0,1,0,0,0,2,11,4,2.0,1,1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",1,0,0,0,2,0,3,0,2,4,22,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,3,1,0,0,0,0,0,0,1,3,17,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,2,0,0,0,0,0,0,0,1,2,26,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,2,3,1,1,7,1,0,0,0,6,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,1,0,0,0,0,1,0,0,0,2,13,6,1.8,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,1,0,0,0,3,4,0,0,3,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,3,2,0,1,2,4,2,0,3,7,82,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,1,3,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",3,1,0,0,2,2,2,0,1,6,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,3,1,0,0,0,1,0,0,1,4,26,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,5,1,0,0,4,4,0,0,1,5,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",2,0,0,0,2,0,4,0,0,3,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",4,0,0,0,2,0,4,0,0,3,46,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,1,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",0,0,0,0,2,0,3,0,1,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",1,0,0,0,4,2,3,0,2,5,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,1,0,0,1,4,2,3,0,1,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,1,0,0,0,0,1,0,0,0,2,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,1,0,1,0,2,0,0,0,1,4,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,6,4,0,2,4,2,0,0,1,6,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,6,2,0,0,0,2,0,0,1,4,43,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",0,0,0,0,2,1,4,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,3,1,0,0,0,2,0,0,1,4,29,4,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,2,1,0,0,0,2,0,0,1,4,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,4,3,0,1,2,2,0,0,1,6,52,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,3,2,0,1,4,2,3,0,1,7,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",1,0,0,0,2,2,0,2,2,5,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,0,1,0,1,2,1,3,0,0,5,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",1,0,0,0,2,2,3,0,2,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,6,2,0,0,0,2,0,0,1,4,47,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",4,0,0,0,2,1,2,0,1,5,59,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",3,0,0,0,3,3,0,0,1,4,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,2,0,0,0,0,1,0,0,1,3,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,2,0,0,0,0,1,0,0,1,3,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",2,0,0,0,2,1,3,0,0,4,42,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,1,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,1,0,0,0,1,4,0,2,2,5,74,2,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,1,0,0,1,3,1,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,1,0,0,1,3,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,3,0,0,0,4,1,0,2,0,4,55,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",1,0,1,0,6,1,0,1,2,6,41,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,1,0,0,0,0,0,0,2,0,2,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,1,0,0,1,3,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,1,0,0,1,2,0,2,0,2,5,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,1,0,0,0,1,6,2,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,0,0,0,1,2,0,3,0,0,3,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,3,0,0,0,4,3,0,0,0,3,40,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,1,0,0,0,0,1,0,0,0,2,41,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,1,0,1,1,6,0,1,0,1,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,1,0,0,1,2,1,0,4,1,6,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,0,0,1,2,6,0,3,0,0,4,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",1,2,1,1,13,1,4,0,0,7,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,2,1,0,0,0,0,0,0,1,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,1,0,2,5,2,2,0,0,5,61,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,1,0,0,1,2,1,0,2,2,6,37,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,1,2,6,0,3,0,0,4,38,9,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,1,0,1,1,6,0,1,0,1,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,1,0,2,5,1,2,0,0,5,58,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,3,1,0,1,3,1,0,0,0,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,0,2,0,3,0,1,3,31,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,1,2,7,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,1,0,0,1,2,1,0,4,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,3,9,1,3,0,0,5,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },1,0,0,1,4,1,0,0,1,5,40,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,1,0,0,1,2,3,0,2,3,6,65,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,2,0,0,0,0,2,0,0,1,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,1,0,0,0,1,1,0,0,0,3,37,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,1,1,0,1,3,1,0,0,0,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,2,0,0,0,0,1,0,0,1,3,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,2,0,0,0,0,0,0,0,1,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,0,0,0,1,2,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,3,1,0,1,2,4,2,0,3,7,69,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,1,0,0,1,2,4,2,0,3,6,55,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,3,1,0,0,0,2,0,0,1,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,1,2,0,2,5,1,3,0,0,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,3,4,0,3,6,1,2,0,0,6,62,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,1,0,0,1,2,2,2,0,1,6,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,1,0,0,1,2,2,0,2,2,6,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",1,1,0,1,4,0,7,0,1,6,58,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,0,0,0,1,2,0,3,0,0,3,18,7,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,1,0,0,0,0,0,0,0,1,2,4,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,1,0,0,1,2,0,2,0,1,5,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,1,0,0,0,9,6,0,0,3,4,58,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,2,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,2,0,0,0,5,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,1,0,0,0,5,89,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,1,0,0,0,3,37,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,1,0,0,0,5,59,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3367,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3796,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,1,0,0,0,0,2,0,0,1,3,41,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,1,0,0,0,0,2,0,0,1,3,37,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,2,0,0,0,0,2,0,0,1,3,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,1,0,0,0,0,2,0,0,1,3,33,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,1,0,0,0,0,2,0,0,1,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,1,0,0,0,0,2,0,0,1,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,2,0,0,1,3,2,0,0,1,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,161,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,2,0,1,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,2,0,0,0,2,3,0,0,1,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,1,0,0,0,0,0,0,0,1,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,4,2,0,2,5,1,0,0,0,5,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0,0,0,1,2,0,1,0,1,4,9,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,3,2,1,1,4,0,0,0,1,6,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0,0,0,2,5,1,1,0,1,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,307,            contract();,0,0,0,1,2,0,1,0,1,4,11,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,309,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,2,1,0,0,4,3,0,0,0,4,49,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,0,2,0,6,0,0,2,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,2,0,0,0,0,0,0,0,1,2,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,1,0,0,0,0,0,0,0,1,2,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,440,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,2,1,0,1,3,1,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,4,1,0,1,4,1,2,0,1,7,70,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,1,0,1,0,4,3,0,0,0,4,41,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",2,0,0,0,2,0,4,0,0,3,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,2,0,0,0,0,0,0,0,1,2,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,1,0,1,0,4,3,0,0,0,4,48,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",0,0,0,0,1,0,5,0,0,2,61,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,1,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,1,1,0,1,3,1,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,756,            synchronized(this) {,0,0,0,1,3,2,0,0,0,3,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,2,0,0,0,0,1,0,0,1,3,39,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,764,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,2,1,0,1,3,1,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,4,2,0,3,6,2,0,0,0,5,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3743,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,1,0,0,0,5,5,0,0,2,4,45,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,1,0,0,1,3,1,0,0,1,5,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",3,0,0,0,1,1,0,1,2,5,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,74,        if (x == null ||,1,2,0,0,1,1,0,0,0,4,16,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,2,2,0,0,1,1,0,0,0,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",0,0,0,0,2,0,3,0,1,3,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,36,public enum NaNStrategy {,1,0,0,0,1,2,0,0,1,4,25,1,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,1,0,0,0,0,0,0,0,0,1,5,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,39,public enum TiesStrategy {,1,0,0,0,1,2,0,0,1,4,26,1,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",1,0,0,0,0,0,0,0,0,1,11,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",1,0,0,0,0,0,0,0,0,1,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,1,0,0,0,0,0,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,129,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,2,0,0,0,0,1,0,0,1,3,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,2,0,0,0,0,1,0,0,1,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,1,0,0,1,2,1,0,1,2,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,3,0,0,0,0,3,0,1,3,4,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,3,0,0,0,0,3,0,1,3,4,78,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,182,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,201,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,2,2,0,1,6,3,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,213,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,216,        for (int i = 0; i < randomBytes.length; i++) {,5,1,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,1,0,1,1,4,0,2,1,0,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,243,        return (int) FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,1,0,0,1,2,0,1,1,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",1,0,0,1,2,0,2,0,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,286,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,287,        alg.reset();,0,0,0,1,2,0,2,0,0,3,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,2,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,4,2,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,1,0,0,0,4,3,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,295,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,296,            alg.update(randomBytes);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,1,0,0,1,4,1,2,0,0,5,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,302,            for (int i = 0; i < hash.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,1,0,1,1,4,0,2,1,0,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,319,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,1,0,0,1,2,1,2,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,331,        return (int)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,1,0,0,1,2,1,2,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",3,0,0,0,2,2,0,1,1,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,2,0,0,1,2,1,2,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,2,2,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,1,0,0,0,0,0,0,0,1,2,4,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,1,0,0,1,2,2,3,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,3,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,1,0,0,1,2,2,3,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,2,0,0,2,4,3,2,0,1,6,77,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,4,1,0,1,2,2,2,0,2,7,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,5,4,0,2,4,2,4,0,1,7,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,2,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,3,2,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,5,4,0,1,4,2,4,0,1,7,85,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,6,5,0,2,6,2,2,0,2,7,81,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,3,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,2,2,0,1,2,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",1,0,0,0,2,2,1,0,2,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,2,1,0,1,3,1,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",1,0,0,0,2,2,1,0,2,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,4,3,0,1,2,0,2,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,4,3,0,1,3,1,0,0,1,6,31,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,2,1,0,1,4,0,6,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,1,0,0,1,2,2,1,0,2,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,5,4,0,1,2,0,0,0,2,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,3,2,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,4,3,0,1,4,0,1,0,2,6,51,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,1,0,0,1,2,0,3,0,1,5,21,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,4,4,0,1,4,0,1,0,3,6,52,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,427,                a = x < 0 ? 1 : 0;,2,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,4,4,0,1,4,0,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,3,3,0,1,3,1,0,0,1,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,4,6,0,2,6,0,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,7,7,0,3,8,0,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,437,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,440,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,6,5,0,3,9,2,2,0,0,6,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,444,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,446,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,2,1,0,1,2,2,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",3,0,0,0,2,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,2,2,0,1,4,1,2,0,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",3,0,0,0,2,2,0,1,1,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,478,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",1,0,0,0,2,2,1,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,1,0,1,0,2,0,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,2,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,1,1,1,1,5,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,3,2,0,1,2,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",1,0,0,0,0,2,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",1,0,0,0,2,2,1,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",1,0,0,0,2,1,1,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,2,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,2,0,0,0,0,0,0,0,1,2,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,1,1,1,1,7,1,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,3,3,1,1,4,1,0,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",0,0,0,0,2,1,3,0,2,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,0,1,0,2,7,1,6,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,2,0,0,1,2,2,0,1,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,2,0,0,1,2,2,0,1,1,6,73,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,2,2,0,1,3,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,4,4,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",2,0,0,0,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",2,0,0,0,4,2,1,1,2,6,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",2,0,0,0,4,2,1,1,2,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,1,0,0,2,4,2,1,1,2,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",2,0,0,0,4,2,1,1,2,6,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",1,0,0,0,2,3,1,0,1,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,4,2,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,3,1,0,0,0,2,0,0,1,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,675,                if (p <= 1) {,1,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",2,1,0,0,2,2,3,0,1,6,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",1,0,0,0,2,3,1,0,1,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,1,2,0,1,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,685,                        return scale*x;,2,1,0,0,0,1,0,0,0,3,15,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,4,3,0,2,4,2,2,0,2,7,50,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",1,0,0,0,2,3,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",2,2,0,0,5,1,3,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,695,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,2,1,0,0,0,1,0,0,0,3,15,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,1,0,0,1,2,2,1,1,1,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,2,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,1,2,0,2,4,2,3,0,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,1,0,0,1,2,2,2,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,7,7,0,1,6,2,0,0,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,3,1,0,0,0,2,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",1,0,0,0,2,3,1,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,3,3,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,3,1,0,0,0,1,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,3,6,0,3,9,1,6,0,0,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,3,1,0,0,0,1,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,728,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",3,0,0,0,4,2,1,1,2,6,107,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",2,0,0,0,4,2,1,1,2,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,1,0,0,2,4,2,1,1,2,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",2,0,0,0,4,2,1,1,2,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",2,0,0,0,4,2,1,1,2,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,813,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,1,1,0,2,6,2,4,1,2,8,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,824,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,6,0,0,5,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,854,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,887,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,895,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,6,0,0,5,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,898,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",1,0,0,0,2,0,4,0,1,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,923,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",2,0,0,0,1,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",2,0,0,0,1,2,0,1,1,5,73,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,1,0,0,1,4,1,2,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",2,1,0,0,2,0,2,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,1,0,1,0,4,3,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,2,1,1,0,4,0,0,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,1,0,0,1,2,1,2,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,974,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",3,0,0,0,2,2,0,1,1,5,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,1,0,0,1,4,0,2,1,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",1,0,0,0,4,1,3,0,1,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,1,0,1,0,4,1,0,2,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0,0,1,0,6,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",1,0,0,0,2,0,2,0,2,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,1,0,1,0,2,1,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1032,            list[target] = list[i];,0,0,1,0,4,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1035,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,1,0,1,0,4,3,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1047,            natural[i] = i;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,1,4,0,3,0,1,5,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,0,2,1,0,0,1,4,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,3,4,0,2,4,1,0,0,0,5,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,3,2,0,1,2,1,0,0,0,5,19,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,45,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0,0,0,0,2,1,4,0,1,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",1,0,0,0,2,1,2,0,1,5,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,2,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,2,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",1,0,0,0,2,2,3,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",1,0,0,0,2,2,3,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,4,2,0,0,0,1,0,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,4,2,0,0,0,1,0,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,146,"            if (Precision.equals(cN, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,150,            dN = 1 / dN;,2,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,3,1,0,0,0,2,0,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,0,0,0,2,5,1,3,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",2,0,0,0,1,2,0,1,1,5,87,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,0,0,0,2,5,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",2,0,0,0,1,2,0,1,1,5,82,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,2,2,0,2,5,1,2,0,0,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,164,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,171,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,178,        return hN;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},1,0,0,1,4,1,0,0,1,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,1,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,1,0,0,1,2,1,2,0,1,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,100,            double tmp = x + g + .5;,3,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,2,2,0,1,4,2,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,1,0,0,0,0,1,0,0,0,2,40,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,2,1,0,0,0,1,0,0,0,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,2,0,0,0,0,1,0,0,0,2,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,168,                   n < maxIterations &&,2,1,0,0,0,0,0,0,0,2,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,5,3,0,2,4,0,0,0,1,5,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,51,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,2,3,0,0,4,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,4,4,0,3,8,0,7,0,3,6,67,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,236,        } else if (x < a + 1.0) {,2,2,0,1,4,2,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,4,4,0,3,8,0,7,0,3,6,67,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,2,2,0,0,0,1,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,4,10,0,2,8,1,3,0,0,6,86,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,2,3,0,1,2,1,1,0,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,2,2,0,1,2,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,318,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,6,12,0,2,4,1,0,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,3,4,0,1,4,1,1,0,1,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,1,1,1,0,2,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,54,"        getContext().addMessage(specific, max, args);",0,0,0,1,4,0,5,0,1,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,44,    private Erf() {},1,0,0,1,4,1,0,0,1,5,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,1,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,1,3,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,1,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",3,1,0,0,2,2,2,0,1,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,3,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,0,2,1,3,0,2,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,120,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},1,0,0,1,4,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,362,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,383,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,1,1,0,1,2,1,1,0,2,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,402,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,404,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,406,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,410,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,426,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,444,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,1,1,0,1,2,1,1,0,3,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,465,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,471,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,478,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,483,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,485,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,497,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,498,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,506,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,509,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,519,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,520,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,521,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,549,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,578,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,581,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,583,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,587,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,600,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,607,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,623,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,628,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,646,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,648,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,656,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,673,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,691,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,692,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,702,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,704,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,720,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,722,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,783,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,807,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,831,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,840,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,844,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,864,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,939,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,949,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,955,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,956,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,962,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,974,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,984,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,999,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1002,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1005,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1008,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1016,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1017,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1035,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1050,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1053,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1114,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1160,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1162,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1164,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1174,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1176,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1193,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1349,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1377,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1379,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1427,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1433,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1442,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1458,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1463,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1468,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1473,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1485,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1493,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1539,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1548,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1614,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1633,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1638,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1640,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1673,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1684,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1735,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1740,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1776,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1777,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1783,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1787,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1822,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1843,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1844,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1850,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1851,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1859,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1896,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1929,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1961,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1971,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1974,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2014,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2036,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2043,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2061,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2063,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2086,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2099,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2113,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2121,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2138,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2141,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2143,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2144,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2151,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2167,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2175,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2190,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2202,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2203,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2210,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2233,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2238,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2247,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2282,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2290,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2300,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2302,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2322,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2331,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2348,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2351,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2367,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2378,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2384,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2385,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2386,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2388,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2394,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2398,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2410,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,8,3,0,1,6,1,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2458,            final double oneOverXa = 1 / xa;,2,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,4,4,0,3,8,1,0,0,3,6,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2483,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2484,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,2,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,3,1,0,1,2,1,0,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,3,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2543,        yb += epsB / (1d + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2548,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,4,1,0,1,2,1,0,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2560,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2570,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2573,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,4,3,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,2,3,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,2,3,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2613,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2618,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2622,            return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2639,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,0,0,0,0,0,1,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,2,4,0,1,3,1,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2671,        final double r = y / x;,3,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2677,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",1,0,0,0,2,0,2,0,2,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",2,1,0,0,2,2,3,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2696,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2721,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2938,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3376,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3394,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3551,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3705,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,1,0,0,1,3,1,0,0,1,5,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,1,0,1,0,2,2,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,2,0,0,1,5,2,0,0,1,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,1,0,1,0,2,3,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,3,0,0,0,2,3,0,0,1,4,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",3,0,0,0,2,1,3,0,0,4,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,3,0,0,0,0,0,0,0,1,2,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,3,0,0,0,0,0,0,0,1,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",3,0,0,0,3,3,0,0,1,4,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,2,0,0,0,0,1,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,2,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,1,0,1,0,2,2,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,1,1,0,1,2,0,1,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,1,0,0,0,2,1,0,0,0,3,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,2,0,0,0,0,1,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,2,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,2,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,1,0,1,0,2,2,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",2,0,0,0,2,2,0,0,0,3,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,2,0,0,0,0,1,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,2,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,2,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,0,1,2,0,2,0,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,1,0,1,0,2,2,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,1,0,0,0,1,1,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0,0,0,1,2,0,3,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",0,0,0,0,2,1,2,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,4,1,0,0,4,4,0,0,1,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,0,2,0,6,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",2,0,0,0,2,0,5,0,0,3,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,2,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,3,0,0,0,0,0,0,0,1,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,1,0,1,0,2,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,4,3,0,3,7,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0,0,0,1,2,0,1,0,1,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,1,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,3,2,1,1,4,0,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,1,1,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0,0,0,1,2,0,1,0,1,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,2,0,1,1,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,3,2,1,1,4,1,0,0,0,6,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,3,2,1,1,4,0,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,1,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,1,0,1,0,2,2,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,0,2,0,2,0,2,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0,0,0,0,2,0,2,0,2,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,2,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,1,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,2,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,1,0,0,1,3,1,0,0,0,4,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,0,0,0,2,5,1,1,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0,0,0,1,2,0,1,0,1,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,3,1,0,1,2,0,3,0,1,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,1,0,1,0,4,3,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",2,0,0,0,2,0,4,0,0,3,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,2,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,1,0,0,1,2,2,0,1,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,2,1,1,0,2,1,0,0,0,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,1,0,0,1,2,2,0,1,1,6,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,2,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0,0,0,1,4,0,3,0,2,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0,0,0,1,3,2,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,2,0,0,0,0,1,0,0,1,3,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,1,0,0,1,2,2,0,1,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,2,2,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,2,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,4,2,0,2,5,1,0,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,2,2,0,2,4,0,1,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,3,1,1,0,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0,0,0,1,4,0,3,0,2,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0,0,0,1,3,2,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,2,0,0,0,0,1,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,2,2,0,0,1,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0,0,0,1,3,2,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,2,0,0,0,0,1,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,4,2,0,2,5,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,2,1,0,1,2,0,1,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,4,2,0,1,2,1,0,0,0,5,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,0,0,0,1,2,0,3,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,0,0,0,1,2,0,3,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,1,0,0,1,3,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,1,0,0,1,3,1,0,0,0,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,4,0,0,0,0,0,0,0,1,2,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,4,0,0,0,0,0,0,0,1,2,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,4,0,0,0,0,0,0,0,1,2,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,4,0,0,0,0,0,0,0,1,2,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,5,0,0,0,2,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",4,0,0,0,1,0,2,0,0,3,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,4,0,0,0,0,0,0,0,1,2,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,4,0,0,0,0,0,0,0,1,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,1,0,0,1,2,1,0,2,1,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",0,0,0,0,2,1,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,1,1,0,1,3,2,0,1,1,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0,0,0,1,3,2,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,1,0,0,1,3,1,0,0,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,1,0,0,0,0,1,0,0,1,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,2,0,0,1,2,0,0,2,0,4,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,5,2,0,1,2,0,0,0,1,5,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,5,2,0,1,2,0,0,0,1,5,70,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,5,2,0,1,2,0,0,0,1,5,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,5,2,0,1,2,0,0,0,1,5,58,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,5,2,0,1,2,0,0,0,1,5,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,5,2,0,1,2,0,0,0,1,5,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,1,0,0,1,3,1,0,0,1,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",2,0,0,0,2,1,3,0,0,4,57,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,1,0,0,0,4,3,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,1,0,1,1,6,1,1,1,2,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,1,0,1,1,6,1,1,1,2,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,1,0,1,0,2,0,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,1,1,4,0,3,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,1,0,1,0,2,0,0,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,1,0,1,0,2,0,0,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,1,0,1,0,2,0,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,0,0,1,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",4,0,0,0,2,2,0,1,1,5,79,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,0,2,1,4,0,0,4,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,0,2,0,4,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",6,3,0,1,4,0,1,0,2,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,0,2,0,4,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,0,2,0,4,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0,0,0,1,2,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0,1,0,3,6,1,7,0,0,5,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,6,3,0,2,7,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,8,0,1,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,8,0,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",4,0,0,0,2,2,0,1,1,5,82,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,0,0,0,2,2,0,1,2,5,80,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,0,2,0,2,0,3,4,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",1,0,0,0,2,0,4,0,2,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",3,0,0,0,2,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,3,5,0,3,8,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,2,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,1,0,0,0,2,1,0,1,1,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",3,0,0,0,2,1,0,1,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0,0,0,1,2,2,0,1,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,2,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,2,0,0,0,0,0,0,0,1,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,2,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,2,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,1,0,0,1,2,1,0,1,2,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,2,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,2,0,0,0,0,0,0,0,1,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,3,0,0,0,0,1,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,2,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,2,0,0,1,2,1,0,1,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,2,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,3,0,0,0,0,1,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,2,0,0,1,2,1,0,1,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",2,0,0,0,2,0,2,0,1,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",2,0,0,0,2,0,2,0,1,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,1,0,0,1,2,0,2,0,2,5,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0,0,0,0,2,0,3,0,1,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,2,6,0,3,0,0,4,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0,0,0,0,2,0,3,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,0,0,0,2,5,1,2,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,3,0,0,0,4,1,0,2,0,4,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,3,9,1,3,0,0,5,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,6,2,0,1,3,2,0,0,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,1,0,3,1,0,1,2,5,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,1,0,3,1,0,1,2,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,1,0,1,0,4,1,0,2,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0,0,0,0,2,0,5,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,3,9,1,3,0,0,5,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,1,0,3,1,0,1,2,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,3,9,1,3,0,0,5,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,1,0,1,1,4,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",2,4,0,1,4,0,3,0,1,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",2,2,0,0,2,0,3,0,1,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,0,2,0,4,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,1,0,0,1,2,0,2,2,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,1,0,0,1,2,1,3,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,1,1,4,0,2,0,1,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,1,0,0,1,2,0,2,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,1,0,0,1,2,0,3,0,1,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,1,0,0,0,0,1,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,2,1,1,1,4,0,2,0,2,7,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,1,0,0,1,2,0,2,2,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,1,0,1,1,4,0,2,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,1,0,0,1,2,0,2,2,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,2,0,1,1,6,0,3,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,5,0,0,3,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,1,1,0,1,2,1,2,0,1,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,1,4,1,4,0,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",1,0,0,0,2,2,0,1,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,1,0,0,1,2,1,1,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,1,0,0,1,2,1,1,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,1,0,0,1,2,2,1,0,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,1,0,0,2,4,2,3,0,2,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,1,1,0,1,5,0,6,0,2,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,5,4,0,2,4,0,2,0,1,6,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,1,0,0,0,0,0,0,0,2,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,1,1,0,2,5,1,2,0,1,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,1,0,0,0,0,0,0,0,1,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,5,4,0,2,4,0,2,0,1,6,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,1,1,0,2,5,1,2,0,1,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,1,0,0,0,0,0,0,0,1,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",1,0,0,0,1,1,3,0,0,4,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,1,1,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,1,0,0,1,2,2,1,0,2,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,2,2,0,2,5,1,1,0,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,1,0,0,1,2,1,2,0,1,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,3,2,0,2,5,1,1,0,1,7,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,2,0,0,0,0,0,0,0,1,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,3,2,0,1,3,1,0,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,3,2,0,1,2,2,0,0,1,6,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,1,1,0,2,5,1,2,0,1,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,2,0,0,0,0,0,0,0,1,2,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,2,0,0,0,0,0,0,0,1,2,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,1,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,2,2,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",2,0,0,0,1,2,0,1,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,1,0,1,0,4,3,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0,0,1,1,4,0,1,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",3,0,0,0,2,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",0,0,0,0,2,1,0,0,0,2,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,3,1,0,0,0,2,0,0,1,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,4,3,0,1,4,1,2,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,1,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,0,2,1,4,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,1,0,0,1,2,2,1,0,2,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,0,2,1,4,0,0,3,56,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",5,0,0,0,2,1,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",4,0,0,0,2,1,0,0,1,4,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,2,2,0,1,2,1,0,0,0,5,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,1,0,0,1,2,2,1,0,2,6,58,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,2,1,0,0,0,2,0,0,1,4,49,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,4,5,0,2,6,1,0,0,0,5,84,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,1,0,0,0,0,0,0,0,1,2,8,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,1,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,1,0,0,1,2,2,1,0,2,6,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,1,1,0,1,3,1,0,0,0,5,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,1,0,0,1,3,1,0,0,1,5,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,1,0,0,1,2,0,1,0,2,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,1,0,0,0,0,0,0,0,2,2,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,1,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,1,0,0,1,2,2,1,0,2,6,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,1,1,0,1,3,1,0,0,0,5,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,2,1,0,0,0,1,0,0,0,3,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,2,0,0,0,0,2,0,0,1,3,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,3,2,0,1,2,1,0,0,0,5,36,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,2,1,0,0,0,1,0,0,0,3,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,2,1,0,0,0,1,0,0,0,3,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",1,0,0,2,8,1,7,0,0,5,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,3,0,0,1,2,1,3,1,1,7,72,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,4,0,0,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,4,0,0,3,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,5,1,0,2,4,1,2,0,2,7,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,2,1,0,3,8,1,2,1,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,1,0,0,1,2,2,3,0,1,6,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,8,2,0,2,6,1,0,0,1,6,88,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,1,0,0,1,2,2,3,0,1,6,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,1,1,0,1,2,1,0,0,1,6,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,1,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0,0,0,1,5,2,3,1,2,6,73,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,0,0,0,1,2,0,3,0,0,3,21,9,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.25,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,1,0,0,1,2,1,2,0,0,5,40,5,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,2,0,0,4,30,5,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,1,2,0,2,7,1,4,0,0,6,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,1,0,0,1,2,1,0,0,1,5,22,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,2,0,0,0,4,40,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,2,3,0,1,3,1,0,0,0,5,20,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,2,0,0,1,2,1,0,4,1,6,53,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,0,0,0,2,6,0,5,0,0,3,60,7,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,1,0,0,0,0,1,0,0,0,2,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,1,0,0,0,0,2,0,0,1,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",3,0,0,0,3,4,0,2,3,5,86,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,1,1,0,2,5,1,2,0,0,6,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,0,1,3,31,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,0,0,0,0,1,0,0,1,3,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",2,0,0,0,2,1,0,0,1,4,36,3,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,2,0,0,0,0,1,0,0,1,3,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,2,0,0,1,3,3,0,0,2,5,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,2,0,0,0,0,1,0,0,1,3,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,2,0,0,1,2,2,0,2,2,6,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,1,0,0,1,2,1,0,0,1,5,23,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,2,0,0,0,0,1,0,0,1,3,31,4,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.4,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,1,1,0,1,4,1,4,0,0,6,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",3,0,0,0,3,1,0,2,1,5,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",2,0,0,0,2,0,3,0,0,3,56,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",2,0,0,0,2,0,3,0,0,3,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,2,0,0,2,5,1,2,0,0,5,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,2,0,0,2,5,1,2,0,0,5,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,3,0,0,0,0,0,0,0,1,2,30,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,3,0,0,0,0,0,0,0,1,2,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,1,0,0,1,2,1,3,1,1,7,36,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,2,1,0,2,5,1,2,0,0,6,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,1,0,0,1,2,0,3,0,1,5,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,1,0,0,1,2,0,3,0,1,5,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,2,1,0,2,5,1,2,0,0,6,41,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,2,0,0,0,0,0,0,0,1,2,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,1,2,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",2,0,0,1,4,1,3,0,0,5,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,1,6,1,6,0,0,4,55,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,1,0,0,1,2,4,0,2,4,6,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,1,0,0,1,2,4,0,2,4,6,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,1,0,0,1,2,4,0,2,4,6,58,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,1,0,0,1,2,4,0,2,5,6,64,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",1,0,0,0,2,4,0,2,4,5,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",1,0,0,0,2,4,0,2,4,5,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",1,0,0,0,2,4,0,2,4,5,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",1,0,0,0,2,4,0,2,4,5,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",1,0,0,0,2,4,0,2,4,5,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",1,0,0,0,2,4,0,2,4,5,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",1,0,0,0,2,4,0,2,4,5,71,2,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",1,0,0,0,2,4,0,2,4,5,67,2,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",1,0,0,0,2,4,0,2,4,5,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",1,0,0,0,2,4,0,2,4,5,67,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,1,0,0,1,2,3,2,1,3,7,70,2,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",1,0,0,2,6,0,0,0,1,4,29,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",1,0,0,0,8,1,0,0,1,4,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,46,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",1,0,0,1,2,0,0,0,1,4,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",1,0,0,2,6,0,0,0,1,4,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",1,0,0,1,2,0,0,0,1,4,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",1,0,0,1,10,0,0,0,1,4,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",1,0,0,1,2,0,0,0,1,4,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",1,0,0,2,6,0,0,0,1,4,35,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",1,0,0,1,2,0,0,0,1,4,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",1,0,0,1,24,2,0,0,1,5,175,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",1,0,0,1,4,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",1,0,0,1,4,0,0,0,1,4,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",1,0,0,1,2,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",1,0,0,1,6,1,0,0,1,5,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",1,0,0,1,6,1,0,0,1,5,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",1,0,0,1,4,0,0,0,1,4,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",1,0,0,1,4,0,0,0,1,4,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",1,0,0,1,2,0,0,0,1,4,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",1,0,0,1,2,0,0,0,1,4,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",1,0,0,1,2,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",1,0,0,1,8,0,0,0,1,4,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",1,0,0,1,6,0,0,0,1,4,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",1,0,0,1,2,0,0,0,1,4,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",1,0,0,2,6,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",1,0,0,2,6,0,0,0,1,4,37,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",1,0,0,2,6,0,0,0,1,4,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",1,0,0,2,8,1,0,0,1,5,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",1,0,0,1,2,0,0,0,1,4,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",1,0,0,2,8,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",1,0,0,1,2,0,0,0,1,4,26,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",1,0,0,1,2,0,0,0,1,4,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",1,0,0,1,14,0,0,0,1,4,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",1,0,0,1,2,0,0,0,1,4,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",1,0,0,1,2,0,0,0,1,4,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",1,0,0,2,8,0,0,0,1,4,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",1,0,0,1,4,0,0,0,1,4,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",1,0,0,0,16,0,0,0,1,3,134,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",1,0,0,1,4,0,0,0,1,4,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",1,0,0,1,2,0,0,0,1,4,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",1,0,0,1,2,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",1,0,0,1,2,0,0,0,1,4,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",1,0,0,1,2,0,0,0,1,4,80,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",1,0,0,1,2,0,0,0,1,4,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",1,0,0,1,2,0,0,0,1,4,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",1,0,0,2,6,0,0,0,1,4,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",1,0,0,0,10,0,0,0,1,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",1,0,0,0,10,0,0,0,1,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",1,0,0,1,2,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",1,0,0,1,2,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",1,0,0,1,2,0,0,0,1,4,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",1,0,0,2,10,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",1,0,0,1,2,0,0,0,1,4,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",1,0,0,1,8,0,0,0,1,4,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",1,0,0,1,2,0,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",1,0,0,1,4,0,0,0,1,4,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",1,0,0,1,2,0,0,0,1,4,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",1,0,0,2,10,0,0,0,1,4,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",1,0,0,1,2,0,0,0,1,4,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",1,0,0,1,2,0,0,0,1,4,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,0.04706,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,1,0,1,3,1,3,0,0,5,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",2,0,0,0,2,2,0,1,1,5,44,4,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,1.77778,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,2,1,0,0,0,0,0,0,1,3,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,1,0,0,1,2,0,2,0,1,5,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,1,0,0,1,2,0,2,0,1,5,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,1,0,1,0,2,2,0,0,1,5,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,1,0,1,0,2,2,0,0,1,5,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,2,1,0,1,3,1,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,3,1,0,1,3,1,0,0,0,5,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,1,0,1,0,2,2,0,0,1,5,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,1,0,1,0,2,2,0,0,1,5,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,2,1,0,1,3,1,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,3,1,0,1,3,1,0,0,0,5,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,3,0,1,1,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",7,0,0,0,2,1,0,0,0,3,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,3,0,0,0,0,2,0,0,1,3,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,1,0,0,0,4,2,0,0,1,4,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,5,1,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,1,0,4,2,0,0,1,4,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,2,0,0,1,2,1,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,1,2,7,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",4,0,0,0,1,1,0,0,2,4,54,3,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,1,0,0,1,4,8,3,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,1,0,0,0,5,4,0,0,3,4,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,1,0,0,0,5,4,0,0,3,4,44,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,2,0.03125,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,1,0,0,1,2,1,0,0,1,5,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,2,0,0,1,4,0,2,0,1,5,54,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",3,0,0,0,2,1,0,0,0,3,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,1,4,0,5,0,1,4,45,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,0,0,0,1,2,0,3,0,0,3,39,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,1,0,0,1,2,2,0,1,1,6,41,9,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,2,0,0,0,0,1,0,0,1,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",6,0,0,0,2,2,0,0,0,3,53,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,1,0,0,1,4,1,0,1,0,5,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,2,2,1,1,6,50,7,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,2,0,0,0,0,1,0,0,1,3,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,3,0,0,0,0,1,0,0,1,3,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",3,0,0,0,2,1,0,0,1,4,65,3,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,1,1,0,1,3,1,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",3,0,0,0,2,1,0,0,1,4,65,3,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",2,0,0,0,2,1,3,0,1,5,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",0,0,0,0,2,1,5,0,2,4,51,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,4,1,0,1,3,1,0,0,0,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,1,0,0,0,0,1,0,0,1,3,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,6,2,0,1,3,2,0,0,1,6,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,1,2,7,1,2,0,0,5,31,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,0,0,1,2,7,1,2,0,0,5,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,1,5,1,0,0,0,5,21,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,1,2,1,1,5,1,0,0,1,7,50,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,1,0,0,0,0,0,0,0,2,2,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,1,0,0,1,3,1,0,0,1,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,0,2,1,5,0,1,4,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,0,5,1,5,0,1,4,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,0,0,0,1,2,0,1,0,1,4,8,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,1,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,1,1,0,1,4,2,0,0,0,5,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,1,0,0,1,2,1,0,2,1,6,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",1,0,0,0,2,1,6,0,0,4,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",1,0,0,0,2,0,6,0,2,4,50,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",0,0,0,0,5,1,5,0,1,4,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,1,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,1,1,0,1,4,2,0,0,0,5,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,1,0,0,0,0,1,0,0,0,2,19,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,1,0,0,0,0,1,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,1,0,0,0,0,1,0,0,0,2,20,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,6,2,0,1,3,2,0,0,1,6,46,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,2,1,1,0,2,0,0,0,1,5,23,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,3,2,1,1,4,0,0,0,1,6,34,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,2,1,1,0,2,0,0,0,1,5,27,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,1,0,0,0,0,1,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,9,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,1,0,1,0,2,0,0,0,1,4,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,1,0,0,1,3,1,0,0,0,4,22,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,6,5,0,2,6,0,0,0,1,5,60,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",0,0,0,0,5,1,5,0,1,4,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,1,0,0,1,2,1,0,2,1,6,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",1,0,0,0,2,1,5,0,0,4,49,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",2,1,0,0,2,1,6,0,0,5,67,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,1,0,0,0,0,1,0,0,0,2,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,6,2,0,1,3,2,0,0,1,6,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,2,2,1,1,6,0,0,0,1,6,47,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,3,2,0,1,2,1,0,0,0,5,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,0,5,1,5,0,2,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,6,2,0,1,3,2,0,0,1,6,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,1,1,1,0,4,0,0,0,1,5,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,1,0,0,1,3,1,0,0,0,4,16,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,2,0,0,3,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01563,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,1,1,0,1,4,1,2,0,0,6,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,0,0,0,1,2,0,3,0,0,3,23,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",3,0,0,0,1,1,0,0,0,3,75,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,3,0,0,3,34,7,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,1,0,0,1,2,1,0,4,1,6,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,0,0,0,1,2,0,2,0,0,3,21,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,3,1,0,2,7,2,2,0,3,7,82,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",1,0,0,0,2,2,3,0,1,5,44,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,3,1,0,2,5,2,1,0,2,7,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,2,1,0,1,2,1,1,0,1,7,44,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,1,0,2,5,1,2,0,1,6,31,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,1,2,0,1,14,3,4,0,2,7,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,3,1,0,2,5,2,1,0,2,7,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,1,0,0,0,0,1,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,3,1,0,2,5,2,1,0,2,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,1,3,0,1,5,33,8,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",2,1,1,0,6,0,4,0,2,6,46,10,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,3,2,0,2,5,2,2,0,1,7,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,0,0,0,2,6,1,5,0,0,4,48,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,2,0,0,1,2,2,0,1,2,6,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,1,0,0,0,0,1,0,0,1,3,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0625,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },0,0,0,0,1,0,0,0,0,1,1,2,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,1.28571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,4,3,0,2,7,1,0,0,0,5,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,2,0,0,0,0,0,0,0,1,2,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,3,0,0,0,0,1,0,0,1,3,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,0,2,0,4,0,0,2,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,2,0,0,0,0,1,0,0,1,3,25,4,0.03333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,2,0,0,0,0,1,0,0,1,3,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,1,0,0,1,2,2,0,1,2,6,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,1,1,0,1,3,1,0,0,0,5,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",3,0,0,0,3,5,0,0,3,4,81,2,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,3,0,0,0,0,1,0,0,0,2,26,7,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",2,1,0,0,2,1,0,0,3,5,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,2,8,3,6,0,0,4,49,6,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,1,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,2,8,3,6,0,0,4,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,1,0,0,0,1,3,0,1,1,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,1,0,0,1,2,2,0,4,2,6,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,1,0,0,1,6,2,0,4,2,6,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",1,0,0,1,2,2,0,6,2,6,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,3,0,0,3,25,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,5,0,0,3,46,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",1,0,0,2,6,0,0,0,1,4,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",1,0,0,0,8,1,0,0,1,4,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",1,0,0,1,4,0,0,0,1,4,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",1,0,0,1,2,0,0,0,1,4,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",1,0,0,1,10,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",1,0,0,1,2,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",1,0,0,1,4,1,0,0,1,5,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",1,0,0,1,24,2,0,0,1,5,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",1,0,0,1,4,0,0,0,1,4,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",1,0,0,1,6,1,0,0,1,5,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",1,0,0,1,6,1,0,0,1,5,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",1,0,0,1,4,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",1,0,0,1,4,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",1,0,0,1,8,0,0,0,1,4,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",1,0,0,1,6,0,0,0,1,4,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",1,0,0,1,2,0,0,0,1,4,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",1,0,0,2,6,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",1,0,0,2,6,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",1,0,0,2,8,1,0,0,1,5,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",1,0,0,1,2,0,0,0,1,4,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",1,0,0,2,8,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",1,0,0,1,2,0,0,0,1,4,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",1,0,0,1,2,0,0,0,1,4,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",1,0,0,1,2,0,0,0,1,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",1,0,0,0,10,0,0,0,1,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",1,0,0,1,2,0,0,0,1,4,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",1,0,0,1,2,0,0,0,1,4,80,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",1,0,0,2,8,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",1,0,0,1,4,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",1,0,0,0,16,0,0,0,1,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",1,0,0,1,4,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",1,0,0,1,2,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",1,0,0,1,2,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",1,0,0,1,2,0,0,0,1,4,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",1,0,0,1,2,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",1,0,0,2,6,0,0,0,1,4,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",1,0,0,1,2,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",1,0,0,1,2,0,0,0,1,4,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",1,0,0,1,8,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",1,0,0,1,2,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",1,0,0,2,10,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",1,0,0,1,2,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,1,0,0,1,2,2,0,4,2,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,2,0,0,1,3,1,0,1,0,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,1,0,0,1,5,2,0,1,0,5,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,2,0,0,3,9,1,1,2,1,7,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,0,0,0,1,2,0,3,0,0,3,12,11,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,2,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.16667,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,1,0,0,1,2,2,0,2,1,6,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,2,10,0,10,0,0,4,64,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,1,1,1,1,5,1,0,0,0,6,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,1,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,1,0,0,1,2,2,2,0,2,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,3,1,0,0,0,1,0,0,0,3,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",0,0,0,0,5,1,3,0,1,4,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,2,0,1,5,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,0,0,1,0,2,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,1,0,1,0,2,0,0,0,1,4,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,1,0,1,0,2,2,0,0,1,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,1,0,1,0,2,0,0,0,1,4,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,1,0,0,0,0,0,0,0,1,2,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,1,0,0,0,0,0,0,0,1,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,1,0,0,1,2,1,1,0,1,6,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,2,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,2,3,0,0,4,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,3,0,0,3,22,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,1,0,0,1,2,2,2,0,2,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,3,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,0,5,1,3,0,1,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,1,0,0,0,0,3,0,1,1,4,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,1,0,0,0,0,1,0,0,0,2,10,9,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,2,1,0,1,3,1,0,0,0,5,14,9,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",2,0,0,0,2,1,6,0,1,5,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,1,0,0,1,3,1,0,0,0,4,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,2,0,0,0,0,0,0,0,1,2,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,2,0,0,0,0,0,0,0,1,2,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,2,0,0,0,0,0,0,0,2,2,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,1,0,0,1,3,1,0,0,0,4,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,2,0,0,0,0,0,0,0,1,2,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,2,0,0,0,0,0,0,0,1,2,8,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,1,1,0,2,5,1,3,0,0,6,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",3,3,0,1,6,1,7,0,0,6,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",3,3,0,1,4,1,5,0,1,7,60,4,0.04762,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",5,0,0,0,3,1,0,4,1,5,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,4,5,0,2,11,1,0,0,0,5,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",4,1,0,1,4,1,2,1,2,8,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,3,1,0,0,0,1,0,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,3,1,0,0,0,1,0,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,7,5,0,2,6,1,2,0,0,6,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,4,2,0,0,0,1,0,0,0,3,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",5,0,0,0,2,1,0,1,2,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,0,0,1,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,2,0,0,0,0,0,0,1,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,1,0,0,1,2,0,3,1,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,1,0,0,1,2,0,3,1,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,1,0,0,1,2,0,3,1,0,5,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,1,0,0,1,2,0,3,1,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,1,0,0,1,2,0,3,0,1,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,3,2,0,1,2,1,0,0,0,5,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",3,3,0,1,5,1,4,1,2,8,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,1,2,0,2,6,0,5,0,1,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,1,0,0,0,0,1,0,0,0,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,6,5,0,0,0,1,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,1,0,0,0,2,1,0,0,0,3,29,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,1,0,0,1,3,1,0,0,0,4,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },0,0,0,0,1,0,0,0,0,1,1,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",1,0,0,0,2,4,0,2,5,5,80,2,0.07143,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,3,0,0,3,28,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",1,1,0,1,3,1,3,0,1,7,42,4,0.05263,1,1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,1,0,0,0,0,1,0,0,0,2,13,4,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,1,0,1,0,2,0,0,0,3,4,18,6,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,4,0,0,0,0,0,0,0,1,2,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,1,0,0,0,0,0,0,0,1,2,11,6,0.05556,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",24,9,0,0,2,2,0,1,1,6,101,4,0.33333,1,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,0,3,4,0,0,1,4,47,2,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",7,0,0,0,2,4,0,2,4,5,84,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,1,0,0,0,0,3,0,1,3,4,52,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,40,4,0.01266,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,1,0,0,1,3,0,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,1,0,1,0,4,5,0,0,2,5,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,1,0,0,0,0,2,0,0,2,3,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,0,0,1,0,2,0,0,0,2,3,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,0,2,1,0,0,0,3,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,        return new Iterator();,0,0,0,1,2,2,0,1,1,5,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,1,2,0,0,1,1,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,1,1,1,0,2,1,0,0,0,5,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,1,0,0,0,1,3,0,2,1,5,67,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,        if (c.length != dimension) {,3,1,0,1,3,1,0,0,0,5,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,        for (int i = 0; i < dimension; i++) {,4,1,0,1,3,2,0,0,1,6,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,            final int index = c[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,            if (index < 0 ||,1,2,0,0,1,1,0,0,0,4,16,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,1,1,1,0,4,0,0,0,1,5,36,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,2,0,0,1,3,2,0,0,1,5,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,3,0,0,0,0,0,0,0,1,2,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,1,0,0,1,2,1,3,0,1,6,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,1,0,1,0,2,2,0,0,1,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,        last = dimension - 1;,2,1,0,0,0,0,0,0,1,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,1,0,1,0,2,1,0,0,0,4,20,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,            int count = 1;,1,0,0,0,0,1,0,0,0,2,14,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,5,2,0,1,3,2,0,0,1,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,1,0,1,0,2,0,0,0,1,4,17,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,1,0,1,0,2,0,0,0,1,4,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,1,0,1,0,2,0,0,0,1,4,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,0,0,1,0,2,0,0,0,1,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,2,0,0,0,0,0,0,0,1,2,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,188,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3784,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",3,0,0,0,2,1,0,0,0,3,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,7,0.5,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,3,1,0,2,5,2,2,0,1,7,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,1,0,0,1,2,1,3,1,1,7,28,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",1,0,0,0,2,1,3,2,2,6,59,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,1,0,0,2,4,2,4,0,1,6,53,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,3,1,0,0,0,0,0,0,1,3,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,1,0,1,0,2,0,0,0,1,4,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,2,1,0,1,2,2,2,0,1,7,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,1,1,1,1,5,1,0,0,0,6,18,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,1,0,0,1,2,1,3,1,1,7,31,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,1,0,0,2,4,1,2,2,1,7,33,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,277,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,2,0,0,1,5,3,0,0,2,5,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,2,0,0,0,0,1,0,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,1,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,1,4,1,5,0,0,4,47,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,1,0,0,2,5,2,0,1,1,6,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,80,        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();,2,0,0,2,8,2,1,1,1,7,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,4,1,0,1,3,1,0,0,0,5,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,85,            if (point[i] != otherPoint[i]) {,0,1,1,1,7,1,0,0,0,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,86,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,1,0,0,0,1,3,0,0,2,4,41,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",1,0,0,0,0,0,0,0,0,1,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",1,0,0,0,0,0,0,0,0,1,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",1,0,0,0,0,0,0,0,0,1,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,51,        ERROR,1,0,0,0,0,0,0,0,0,1,5,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,78,"    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {",3,0,0,0,3,3,0,2,3,5,95,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,79,        this.random        = random;,2,0,0,0,0,1,0,0,1,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,2,0,0,0,0,1,0,0,1,3,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,95,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",1,0,0,0,2,0,4,3,1,5,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,96,"        assignPointsToClusters(clusters, points);",0,0,0,0,2,0,3,0,1,3,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,5,1,0,1,2,2,0,0,1,6,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,100,        for (int count = 0; count < max; count++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,146,        for (final T p : points) {,2,0,0,1,3,2,0,1,1,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",1,0,0,0,2,0,3,2,1,5,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,148,            cluster.addPoint(p);,0,0,0,1,2,0,3,0,0,3,20,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,149,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,150,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,2,0,0,1,2,2,0,4,2,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,165,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,1,0,0,1,2,2,0,6,2,6,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,168,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,1,0,0,3,6,1,6,1,1,7,70,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,1,0,0,2,4,1,2,2,1,7,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,171,        final double[] dx2 = new double[pointSet.size()];,1,0,0,1,6,4,2,0,1,6,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,172,        while (resultSet.size() < k) {,1,1,0,2,5,1,2,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,196,        return resultSet;,1,0,0,0,0,1,0,0,0,2,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,321,        double minDistance = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,38,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,1,0,0,0,0,0,0,2,0,2,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,2,0,0,1,3,2,0,2,1,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,324,            final double distance = point.distanceFrom(c.getCenter());,1,0,0,2,4,2,4,0,1,6,58,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,2,1,0,1,3,1,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,326,                minDistance = distance;,2,0,0,0,0,0,0,0,1,2,23,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,327,                minCluster = c;,2,0,0,0,0,0,0,0,1,2,15,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,329,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,1,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,45,    public Cluster(final T center) {,2,0,0,1,3,2,0,1,2,6,32,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,2,0,0,0,0,1,0,0,1,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,1,0,0,1,2,1,0,2,2,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,55,        points.add(point);,0,0,0,1,2,0,3,0,0,3,18,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,1,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1916,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,102,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,116,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,117,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",4,0,0,0,2,2,0,1,1,5,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,120,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,0,2,1,3,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,150,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,152,"            ret = addAndCheck(b, a, pattern);",1,0,0,0,2,0,4,0,2,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,159,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,162,"                        throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,174,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,180,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,209,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,210,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,211,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,213,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,214,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,217,        if (k > n / 2),2,2,0,1,2,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,228,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,230,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,231,                i++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,244,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,245,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,248,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,253,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,254,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",6,3,0,1,4,0,1,0,2,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,259,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,285,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,287,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,289,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,292,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,293,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,295,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,296,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,299,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,300,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,304,        return FastMath.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,326,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,327,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,0,0,0,1,2,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,338,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,346,        if (n < 1030) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,360,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,361,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,366,            logSum -= FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,369,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,381,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,385,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",3,0,0,0,2,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,388,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,401,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,402,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,403,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,404,          return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,406,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,429,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,497,        int xInt = Float.floatToIntBits(x);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,502,            xInt = SGN_MASK_FLOAT - xInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,504,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,505,            yInt = SGN_MASK_FLOAT - yInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,1,1,0,1,4,1,6,0,2,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,540,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,543,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,544,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,546,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,548,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,551,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,566,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,570,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,573,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,574,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,577,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,589,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,658,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,661,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,662,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,703,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,704,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,707,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,708,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,711,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,727,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,730,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,733,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,734,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,769,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,772,        return FACTORIALS[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,807,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,811,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,812,            return FastMath.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,815,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,818,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,851,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,858,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,868,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,875,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,877,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,885,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,891,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,895,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,938,        long u = p;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,941,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,6,3,0,2,7,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,952,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,953,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,955,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,956,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,963,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,964,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,966,        if (k == 63) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,978,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,982,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,988,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,992,        return -u * (1L << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1002,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1013,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1024,        return (x >= ZB) ? PB : NB;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1036,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1037,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,1,1,0,1,2,1,0,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1050,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1051,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,1,1,0,1,2,1,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,1,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,1,1,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1111,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1114,        if (lcm == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1118,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1145,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1147,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1152,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,0,1,0,1,4,1,6,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1188,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1210,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1222,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1229,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1237,                    throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1241,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1259,"        return FastMath.scalb(d, scaleFactor);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1307,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1308,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,2,0,0,1,2,2,0,1,1,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1310,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1311,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1314,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1315,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1316,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1317,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1318,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",3,0,1,0,4,2,0,1,1,6,94,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1320,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1325,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1327,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1328,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1334,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1364,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1368,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1369,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1374,        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,1,0,0,1,2,2,0,1,1,6,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,2,3,0,0,6,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1424,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1427,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1429,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1431,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1434,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1437,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1439,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1441,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1443,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1444,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1445,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1450,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1454,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1456,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1460,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1462,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1467,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1470,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1472,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1473,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1475,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1477,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1480,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1481,                throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1486,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1488,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,2,0,1,1,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1499,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1513,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1529,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,2,2,0,1,4,1,0,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1547,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,2,2,0,1,4,1,0,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,2,2,0,1,4,1,0,0,1,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,2,0,1,4,1,0,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1589,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1600,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1615,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1616,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",4,0,0,0,2,2,0,1,1,5,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1618,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1634,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1635,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1637,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,0,0,0,2,2,0,1,2,5,80,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,0,2,0,2,0,3,4,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1643,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1659,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1662,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1665,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1681,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1682,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1685,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1687,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1688,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1689,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1692,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1695,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1707,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1708,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1712,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1713,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1718,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1733,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1734,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1738,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1740,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1741,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1744,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1759,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1760,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1775,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1776,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1779,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1780,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1782,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1802,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1806,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1809,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1810,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1813,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1827,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1842,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1846,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1857,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1858,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1859,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1862,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1889,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1890,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1893,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1904,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1906,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1935,        boolean ok = true;,1,0,0,0,0,1,0,0,1,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1937,        int max = val.length;,3,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1941,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1943,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1946,                    if (val[i] < previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1947,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1952,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1957,                    if (val[i] > previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1958,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1964,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1967,            if (!ok &&,1,1,0,0,1,1,0,0,1,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1969,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",4,0,1,0,4,2,0,1,1,6,75,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1974,        return ok;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1988,"        checkOrder(val, dir, strict, true);",0,0,0,0,2,0,4,0,2,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1989,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1999,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2000,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2010,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,1,0,0,1,2,2,0,1,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2013,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2023,        for (int i = 0; i < val.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2024,            final double x = val[i];,1,0,1,0,2,2,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2026,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",4,0,0,0,2,2,0,1,1,5,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2029,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2095,        double s2 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2096,        double s3 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2097,        double x1max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2098,        double x3max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2099,        double floatn = (double) v.length;,3,0,0,1,2,2,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2101,        for (int i = 0; i < v.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,4,3,0,1,3,1,0,0,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,2,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2107,                        s1= 1 + s1 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2109,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2111,                        s1 += r * r;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2112,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2114,                    if (xabs > x3max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2117,                        x3max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2118,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2119,                        if (xabs != 0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,3,1,0,0,0,1,0,0,0,3,24,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2121,                            s3 += r * r;,3,1,0,0,0,0,0,0,1,3,12,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2122,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2126,                s2 += xabs * xabs;,3,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2131,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,6,4,0,2,4,0,2,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2134,                norm = x3max * Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,6,5,0,3,8,0,2,0,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,6,4,0,3,8,0,2,0,1,6,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2143,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2158,"        sortInPlace(x, OrderDirection.INCREASING, yList);",2,0,0,0,2,0,3,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2174,        if (x == null ||,1,2,0,0,1,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2176,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2180,"        final List<Pair<Double, double[]>> list",1,0,0,0,2,2,0,3,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,3,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,1,0,1,0,4,4,0,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,1,0,1,0,4,1,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2188,                if (y.length != len) {,3,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2189,"                    throw new DimensionMismatchException(y.length, len);",3,0,0,0,2,2,0,1,1,5,52,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2191,                yValues[j] = y[i];,0,0,1,0,4,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",1,0,1,0,8,2,2,2,1,7,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2196,"        final Comparator<Pair<Double, double[]>> comp",1,0,0,0,2,2,0,3,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2216,"        Collections.sort(list, comp);",0,0,0,0,2,0,4,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2218,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",1,0,0,1,4,2,3,2,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2220,            x[i] = e.getKey();,0,0,1,1,4,0,2,0,1,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2221,            final double[] yValues = e.getValue();,1,0,0,1,4,2,2,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2222,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2223,                yList[j][i] = yValues[j];,0,0,1,0,6,0,0,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2226,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2235,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2273,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2274,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2275,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2289,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",2,0,0,0,2,2,0,1,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2292,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2302,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2304,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,58,    public MathRuntimeException() {},1,0,0,1,4,1,0,0,1,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,48,"    private List<SerializablePair<Localizable, Object[]>> messages",1,0,0,0,2,1,0,4,1,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",1,0,0,1,2,2,0,6,2,6,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,66,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",1,0,0,1,10,1,2,4,1,7,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",1,0,0,0,4,1,2,3,1,6,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,83,"        context.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,88,        return context.get(key);,0,0,0,1,2,1,3,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,93,        return context.keySet();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,103,"        return buildMessage(locale, "": "");",0,0,0,0,2,1,2,0,2,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,115,"        return buildMessage(locale, separator);",0,0,0,0,2,1,3,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,127,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,1,0,0,1,2,2,0,2,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,1,0,0,1,2,2,2,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,142,"        for (SerializablePair<Localizable, Object[]> pair : messages) {",2,0,0,0,5,1,0,3,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",1,0,0,1,5,2,4,2,2,7,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,145,            sb.append(fmt.format(pair.getValue()));,0,0,0,3,6,0,6,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,2,1,0,1,3,1,0,0,1,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,148,                sb.append(separator);,0,0,0,1,2,0,3,0,0,3,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,150,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,152,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,163,        serializeMessages(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,164,        serializeContext(out);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,165,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,176,        deSerializeMessages(in);,0,0,0,1,2,0,2,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,177,        deSerializeContext(in);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,1,0,0,1,2,2,2,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,0,0,0,1,2,0,3,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,193,"            SerializablePair<Localizable, Object[]> pair = messages.get(i);",1,0,0,1,4,0,3,3,0,5,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,195,            out.writeObject(pair.getKey());,0,0,0,2,4,0,4,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,1,0,0,1,4,1,2,1,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,199,            out.writeInt(aLen);,0,0,0,1,2,0,3,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,200,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,201,                if (args[j] instanceof Serializable) {,0,0,1,1,5,2,0,1,0,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,203,                    out.writeObject(args[j]);,0,0,1,1,4,0,2,0,0,4,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,206,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,2,6,0,3,0,1,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,210,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,1,0,0,1,2,2,2,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,224,"        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);",2,0,0,1,4,1,0,4,2,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,1,0,0,1,4,1,2,2,1,7,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,1,0,0,1,2,2,2,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,1,0,1,0,4,2,0,2,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,232,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,234,                args[j] = in.readObject();,0,0,1,1,4,0,2,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,236,"            messages.add(new SerializablePair<Localizable, Object[]>(key, args));",2,0,0,0,6,1,2,3,1,6,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,238,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,1,0,0,1,4,2,3,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,250,        out.writeInt(len);,0,0,0,1,2,0,3,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,1,0,0,2,5,1,2,1,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,253,            out.writeObject(key);,0,0,0,1,2,0,3,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,1,0,0,1,2,1,3,1,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,255,            if (value instanceof Serializable) {,1,0,0,1,3,2,0,1,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,257,                out.writeObject(value);,0,0,0,1,2,0,3,0,0,3,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,260,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,4,0,1,4,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,262,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,263,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,276,        final int len = in.readInt();,1,0,0,1,2,2,2,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,277,"        context = new HashMap<String, Object>();",1,0,0,1,2,1,0,3,2,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,1,0,0,1,4,1,2,2,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,1,0,0,1,2,1,2,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,283,"            context.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,295,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,1,6,1,3,0,2,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,41,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",2,0,0,0,2,1,0,0,0,3,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,0,0,0,2,1,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",3,0,0,0,2,1,0,0,1,4,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,90,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,92,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,105,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,119,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,38,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,1,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,51,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,266,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,268,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,285,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,286,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,289,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,294,          return exp(-x)/2.0;,1,1,0,1,2,1,1,0,2,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,297,      double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,298,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,299,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,303,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,306,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,308,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,311,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,312,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,313,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,314,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,322,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,324,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,325,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,326,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,327,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,329,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,331,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,339,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,341,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,344,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,345,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,348,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,349,          return -exp(-x)/2.0;,1,1,0,1,2,1,1,0,3,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,352,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,353,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,356,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,357,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,363,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,364,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,365,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,367,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,371,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,377,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,378,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,383,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,385,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,386,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,389,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,390,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,391,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,392,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,393,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,394,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,396,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,397,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,398,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,400,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,403,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,408,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,409,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,411,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,412,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,413,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,415,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,423,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,426,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,427,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,429,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,430,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,431,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,433,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,437,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,438,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,441,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,449,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,451,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,455,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,456,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,459,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,460,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,463,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,464,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,467,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,468,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,473,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,474,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,483,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,484,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,489,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,490,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,492,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,493,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,496,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,497,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,502,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,503,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,509,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,511,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,513,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,514,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,516,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,518,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,520,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,525,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,529,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,530,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,531,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,532,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,535,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,536,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,539,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,541,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,542,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,548,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,550,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,552,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,555,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,556,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,559,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,576,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,578,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,579,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,583,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,586,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,587,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,589,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,591,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,598,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,610,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,618,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,10,25,0,9,18,0,0,0,1,5,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,621,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,8,19,0,7,14,0,0,0,1,5,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,6,13,0,5,10,0,0,0,1,5,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,4,7,0,3,6,0,0,0,1,5,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,673,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,697,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,716,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,717,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,721,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,724,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,730,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,731,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,732,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,741,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,742,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,744,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,752,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,757,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,759,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,761,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,789,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,790,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,792,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,807,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,809,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,812,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,815,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,817,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,821,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,829,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,838,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,845,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,846,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,847,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,850,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,852,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,853,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,863,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,864,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,868,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,1,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,1,0,0,0,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,874,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,876,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,878,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,880,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,885,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,886,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,887,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,888,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,890,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,893,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,894,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,895,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,898,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,900,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,903,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,906,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,909,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,911,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,913,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,914,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,915,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,919,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,920,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,921,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,923,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,925,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,926,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,928,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,930,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,931,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,933,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,935,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,936,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,938,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,940,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,941,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,942,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,943,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,944,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,945,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,946,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,948,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,949,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,950,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,963,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,964,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,967,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,968,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,971,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,972,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,973,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,976,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1026,            final double a = d * 9.31322574615478515625E-10;,2,1,0,0,0,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1027,            split[0] = (d + a - d) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1028,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1099,            in[0] = in[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1100,            in[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1231,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1241,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1242,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1244,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1248,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1249,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1250,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1253,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1258,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1259,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1263,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1267,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1269,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1271,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1273,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1277,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1281,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1282,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1283,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1284,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1289,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1295,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1296,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1297,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1298,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1299,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1300,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1301,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1304,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1308,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1309,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1311,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1312,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1313,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1316,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1317,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1319,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1320,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1321,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1325,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1326,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1328,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1329,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1330,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1332,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,2,1,2,10,2,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,1,0,0,0,5,89,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1350,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1351,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1353,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1355,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1356,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1357,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1358,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1359,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1362,            double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,1,0,0,0,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,1,0,0,0,5,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1364,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1365,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1373,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1374,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1376,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1377,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1378,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1384,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1385,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1386,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1390,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1391,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1399,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1400,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1401,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1404,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1405,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1406,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1407,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1408,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1409,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1410,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1427,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1428,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1429,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1430,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1431,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1432,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1434,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1435,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1436,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1437,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1439,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1440,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1441,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1442,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1444,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1445,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1446,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1447,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1449,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1450,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1451,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1452,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1454,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1455,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1456,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1459,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1467,        double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1468,        double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1470,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1471,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1474,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1475,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1478,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1479,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1481,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1483,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1488,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1490,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1491,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1493,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1497,        double y = x * 0.333333333333333 - 0.5;,2,2,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1498,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1499,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1501,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1509,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1511,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1512,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1513,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1516,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1517,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1520,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1521,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1534,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1536,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1537,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1540,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1541,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1545,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1546,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1547,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1549,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1552,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1556,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1559,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1560,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1564,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1565,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1567,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1568,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1571,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1574,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1575,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1576,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1578,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1579,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1581,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1585,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1586,            if (x * x == 1.0),2,2,0,1,2,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1587,              return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1589,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1590,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1592,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1596,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1597,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1598,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1601,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1602,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1603,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1604,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1607,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1610,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1611,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1612,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1613,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1616,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1620,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1622,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1623,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1626,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1627,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1629,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1634,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1637,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1640,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1644,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1651,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1652,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1653,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1654,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1655,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1656,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1659,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1663,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1665,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1668,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1669,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1672,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1673,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1674,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1675,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1678,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1681,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1682,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1684,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1685,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1686,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1687,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1688,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1689,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1691,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1693,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1948,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1950,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1951,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1952,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1953,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1956,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1958,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1968,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1970,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1971,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1972,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1973,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1974,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1976,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1987,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1991,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1992,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1993,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1994,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1997,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1998,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1999,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2000,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2003,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2004,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2005,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2006,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2032,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2033,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2035,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2036,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2037,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2038,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2039,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2041,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2042,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2043,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2044,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2045,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2089,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2092,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2093,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2094,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2095,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2098,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2100,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2111,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2112,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2114,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2115,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2116,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2118,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2131,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2135,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2136,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2137,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2138,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2141,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2142,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2143,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2144,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2147,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2148,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2149,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2150,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2175,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2176,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2179,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2180,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2181,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2182,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2183,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2185,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2186,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2187,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2188,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2189,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2194,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2195,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2199,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2201,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2202,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2203,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2204,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2205,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2207,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2208,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2209,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2210,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2211,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2216,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2217,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2219,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2221,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2236,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2239,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2240,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2241,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2243,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2244,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2245,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2249,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2252,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2255,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2256,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2257,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2260,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2263,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2280,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2284,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2285,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2288,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2289,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2295,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2296,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2298,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2305,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2306,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2310,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2311,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2313,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2314,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2316,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2317,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2318,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2319,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2321,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2322,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2329,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2331,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2334,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2335,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2337,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2338,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2343,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2345,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2349,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2350,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2351,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2352,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2353,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2356,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2358,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2360,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2363,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2365,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2369,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2370,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2372,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2373,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2374,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2376,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2388,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2391,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2392,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2393,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2396,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2397,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2399,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2402,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2403,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2404,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2405,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2407,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2408,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2410,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2411,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2415,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2417,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2421,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2423,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2424,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2429,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2431,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2435,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2437,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2438,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2439,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2442,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2446,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2449,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2451,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2455,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2456,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2457,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2459,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2460,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2461,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2464,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2468,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2471,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2473,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2480,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2481,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2484,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2485,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2486,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2487,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2495,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2496,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2498,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2501,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2502,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2503,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2504,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2508,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2509,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2510,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2511,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2513,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2517,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2521,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2525,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2526,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2527,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2528,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2529,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2530,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2535,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2541,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2542,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2543,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2545,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2546,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2547,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2548,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2550,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2551,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2552,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2553,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2555,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2556,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2561,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2562,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2563,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2564,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2565,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2568,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2569,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2572,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2574,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2576,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2578,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2580,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2582,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2592,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2595,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2596,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2597,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2601,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2605,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2606,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2610,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2611,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2612,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2613,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2614,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2615,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2620,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2626,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2627,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2628,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2630,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2631,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2632,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2633,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2635,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2636,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2637,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2638,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2640,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2641,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2646,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2647,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2648,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2649,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2650,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2656,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2658,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2660,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2662,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2664,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2666,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2676,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2677,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2680,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2681,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2682,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2683,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2687,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2688,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2689,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2690,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2692,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2696,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2700,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2701,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2705,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2706,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2707,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2708,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2709,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2710,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2715,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2721,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2722,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2723,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2725,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2726,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2727,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2728,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2730,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2731,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2732,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2733,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2735,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2736,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2741,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2742,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2743,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2744,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2745,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2748,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2750,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2751,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2753,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2754,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2755,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2757,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2758,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2759,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2760,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2764,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2765,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2767,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2770,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2771,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2774,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2783,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2793,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2800,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2802,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2803,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2804,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2807,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,3,0,1,6,1,0,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2812,        if (xa < 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2815,            double temp = 1.0/xa;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,4,4,0,3,8,1,0,0,3,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2820,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2822,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2823,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2824,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2827,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2828,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2829,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2830,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2831,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2834,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,1,0,0,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2839,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2840,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2841,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2843,            double za = 1.0 + temp2;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2844,            double zb = -(za - 1.0 - temp2);,3,1,0,1,2,1,0,0,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2846,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2847,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2848,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2850,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2851,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2853,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2854,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2855,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2857,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2858,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2859,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2864,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2865,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2869,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2870,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2873,        double epsA2 = epsA*epsA;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2884,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2885,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2886,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2887,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2888,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2889,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2890,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2893,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2895,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2896,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2897,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2900,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2906,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2907,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2908,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2909,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2910,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2912,        result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2913,        resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2915,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2917,            final double pia = 1.5707963267948966*2.0;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2918,            final double pib = 6.123233995736766E-17*2.0;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2920,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2921,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2922,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2924,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2925,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2929,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2930,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2933,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2943,        if (x !=x || y != y) {,4,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2944,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2947,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2948,            double result = x*y;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2949,            double invx = 1.0/x;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2950,            double invy = 1.0/y;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2952,            if (invx == 0.0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2953,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2954,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2956,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2960,            if (x < 0.0 || invx < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2961,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2962,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2964,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2967,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2973,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2974,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2975,                return Math.PI/4.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2978,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2979,                return Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2982,            return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2985,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2986,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2987,                return -Math.PI/4.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2990,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2991,                return -Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2994,            return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2997,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2998,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2999,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3002,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3003,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3007,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3009,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3010,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3013,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3014,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3020,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3021,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3022,                return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3025,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3026,                return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3031,        final double r = y/x;,3,1,0,0,0,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3032,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3033,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3036,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3037,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3040,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3041,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3045,        double temp = ra + rb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3046,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3047,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3050,"            ra = copySign(0.0, y);",1,0,0,0,2,0,2,0,2,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3054,"        double result = atan(ra, rb, x < 0);",2,1,0,0,2,1,3,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3056,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3064,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3065,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3068,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3069,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3072,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3073,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3076,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3077,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3081,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3087,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3088,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3089,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3092,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3093,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3096,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3097,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3099,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3100,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3102,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3103,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3104,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3108,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3109,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3110,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3111,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3117,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3120,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3121,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3122,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3123,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3128,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3129,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3130,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3132,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3140,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3141,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3144,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3145,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3148,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3149,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3152,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3153,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3156,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3157,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3163,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3164,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3165,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3168,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3169,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3172,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3173,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3175,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3176,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3178,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3179,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3180,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3183,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3184,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3185,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3186,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3192,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3193,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3194,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3197,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3200,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3201,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3204,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3205,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3210,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3211,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3212,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3214,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3223,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3225,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3227,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3228,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3229,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3233,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3234,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3235,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3239,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3241,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3245,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3255,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3256,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3257,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3258,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3259,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3261,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3266,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3267,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3268,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3271,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3272,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3273,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3275,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3276,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3277,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3278,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3279,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3280,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3282,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3283,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3285,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3286,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3287,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3289,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3292,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3294,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3295,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3298,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3309,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3313,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3314,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3316,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3317,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3320,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3321,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3323,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3334,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3338,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3339,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3341,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3342,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3353,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3362,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3389,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3390,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3401,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3402,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3404,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3416,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3422,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3424,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3425,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3427,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3432,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3433,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3435,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3438,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3440,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3442,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3445,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3449,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3453,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3454,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3456,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3458,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3462,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3466,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3469,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3470,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3471,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3473,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3474,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3476,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3482,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3500,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3506,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3508,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3509,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3511,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3516,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3517,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3518,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3519,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3522,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3524,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3526,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3529,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3533,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3537,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3538,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3540,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3542,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3546,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3550,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3553,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3554,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3555,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3557,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3558,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3560,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3566,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3610,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3611,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3612,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3613,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3615,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3621,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3622,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3623,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3666,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3667,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3668,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3669,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3671,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3677,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3678,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3679,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3694,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3695,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3699,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3702,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3703,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3704,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3707,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3708,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3711,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3721,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3722,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3725,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3726,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3727,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3730,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3732,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3733,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3736,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3744,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3745,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3747,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3748,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3749,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3751,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3753,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3754,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3758,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3759,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3767,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3775,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3784,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3793,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3802,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3803,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3805,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3806,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3809,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3810,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3814,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3815,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3816,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3818,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3827,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3828,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3830,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3831,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3834,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3835,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3839,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3840,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3841,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3843,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3852,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3861,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3870,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3871,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3873,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3874,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3877,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3878,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3882,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3883,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3884,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3886,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3895,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3896,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3898,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3899,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3902,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3903,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3907,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3908,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3909,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3911,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3930,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3932,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3935,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3936,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3937,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3939,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3940,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3942,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3946,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3949,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3950,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3956,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3996,        long m = Double.doubleToLongBits(magnitude);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3997,        long s = Double.doubleToLongBits(sign);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3999,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4001,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4013,        int m = Float.floatToIntBits(magnitude);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4014,        int s = Float.floatToIntBits(sign);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4016,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4018,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2197,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,1,5,2,0,3,1,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2201,                switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2203,                    val = o1.getKey().compareTo(o2.getKey());,1,0,0,2,6,0,5,0,1,5,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2204,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2206,                    val = o2.getKey().compareTo(o1.getKey());,1,0,0,2,6,0,5,0,1,5,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2207,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2210,                    throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2212,                return val;,1,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,62,        int[] centroid = new int[getPoint().length];,2,0,0,1,6,3,1,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,63,        for (EuclideanIntegerPoint p : points) {,2,0,0,1,3,1,0,1,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,64,            for (int i = 0; i < centroid.length; i++) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,65,                centroid[i] += p.getPoint()[i];,0,0,1,1,6,0,2,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,67,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,68,        for (int i = 0; i < centroid.length; i++) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,69,            centroid[i] /= points.size();,0,0,1,1,4,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,71,        return new EuclideanIntegerPoint(centroid);,1,0,0,1,2,2,0,1,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,78,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,82,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,89,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,95,        int hashCode = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,96,        for (Integer i : point) {,2,0,0,1,3,1,0,1,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,97,            hashCode += i.hashCode() * 13 + 7;,1,2,0,1,2,0,2,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,99,        return hashCode;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,108,"        final StringBuilder buff = new StringBuilder(""("");",1,0,0,1,3,2,0,2,3,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,109,        final int[] coordinates = getPoint();,1,0,0,1,4,2,1,0,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,110,        for (int i = 0; i < coordinates.length; i++) {,5,1,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,111,            buff.append(coordinates[i]);,0,0,1,1,4,0,2,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,112,            if (i < coordinates.length - 1) {,3,2,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,113,"                buff.append("","");",0,0,0,0,2,0,2,0,1,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,116,"        buff.append("")"");",0,0,0,1,3,0,2,0,1,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,117,        return buff.toString();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",1,0,0,0,1,3,0,3,1,5,96,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,101,            boolean clusteringChanged = false;,1,0,0,0,0,1,0,0,1,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,102,            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();,1,0,0,1,2,1,0,6,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,103,            for (final Cluster<T> cluster : clusters) {,2,0,0,1,3,2,0,2,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,105,                if (cluster.getPoints().isEmpty()) {,0,0,0,2,7,1,3,0,0,4,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,1,0,0,1,3,1,0,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,108,                            newCenter = getPointFromLargestVarianceCluster(clusters);,1,0,0,1,2,0,2,0,2,5,57,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,109,                            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,111,                            newCenter = getPointFromLargestNumberCluster(clusters);,1,0,0,1,2,0,2,0,2,5,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,112,                            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,114,                            newCenter = getFarthestPoint(clusters);,1,0,0,1,2,0,2,0,2,5,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,115,                            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,117,                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,2,0,0,1,2,2,0,1,1,6,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,119,                    clusteringChanged = true;,1,0,0,0,0,0,0,0,2,2,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,121,                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());,1,0,0,2,6,0,5,0,1,5,64,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,122,                    if (!newCenter.equals(cluster.getCenter())) {,0,0,0,3,7,1,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,123,                        clusteringChanged = true;,1,0,0,0,0,0,0,0,2,2,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,126,                newClusters.add(new Cluster<T>(newCenter));,1,0,0,2,4,1,2,2,1,7,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,127,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,128,            if (!clusteringChanged) {,1,0,0,1,3,1,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,129,                return clusters;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,131,"            assignPointsToClusters(newClusters, points);",0,0,0,0,2,0,3,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,132,            clusters = newClusters;,2,0,0,0,0,0,0,0,1,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,208,        double maxVariance = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,209,        Cluster<T> selected = null;,1,0,0,0,0,0,0,2,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,210,        for (final Cluster<T> cluster : clusters) {,2,0,0,1,3,2,0,2,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,211,            if (!cluster.getPoints().isEmpty()) {,0,0,0,2,7,1,3,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,214,                final T center = cluster.getCenter();,1,0,0,1,2,1,2,1,1,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,215,                final Variance stat = new Variance();,1,0,0,1,2,2,0,2,2,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,216,                for (final T point : cluster.getPoints()) {,1,0,0,2,5,2,2,1,1,7,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,217,                    stat.increment(point.distanceFrom(center));,0,0,0,2,4,0,5,0,0,3,43,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,218,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,219,                final double variance = stat.getResult();,1,0,0,1,2,2,2,0,1,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,222,                if (variance > maxVariance) {,2,1,0,1,3,1,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,223,                    maxVariance = variance;,2,0,0,0,0,0,0,0,1,2,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,224,                    selected = cluster;,2,0,0,0,0,0,0,0,1,2,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,228,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,231,        if (selected == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,232,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,2,0,0,1,2,2,0,1,1,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,236,        final List<T> selectedPoints = selected.getPoints();,1,0,0,1,2,1,2,2,1,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,237,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,6,0,0,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,249,        int maxNumber = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,250,        Cluster<T> selected = null;,1,0,0,0,0,0,0,2,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,251,        for (final Cluster<T> cluster : clusters) {,2,0,0,1,3,2,0,2,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,254,            final int number = cluster.getPoints().size();,1,0,0,1,4,2,3,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,257,            if (number > maxNumber) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,258,                maxNumber = number;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,259,                selected = cluster;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,262,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,265,        if (selected == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,266,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,2,0,0,1,2,2,0,1,1,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,270,        final List<T> selectedPoints = selected.getPoints();,1,0,0,1,2,1,2,2,1,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,271,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,6,0,0,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,283,        double maxDistance = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,284,        Cluster<T> selectedCluster = null;,1,0,0,0,0,0,0,2,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,285,        int selectedPoint = -1;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,286,        for (final Cluster<T> cluster : clusters) {,2,0,0,1,3,2,0,2,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,289,            final T center = cluster.getCenter();,1,0,0,1,2,1,2,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,290,            final List<T> points = cluster.getPoints();,1,0,0,1,2,1,2,2,1,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,291,            for (int i = 0; i < points.size(); ++i) {,3,1,0,2,5,2,2,0,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,292,                final double distance = points.get(i).distanceFrom(center);,1,0,0,1,4,2,5,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,293,                if (distance > maxDistance) {,2,1,0,1,3,1,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,294,                    maxDistance     = distance;,2,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,295,                    selectedCluster = cluster;,2,0,0,0,0,0,0,0,1,2,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,296,                    selectedPoint   = i;,2,0,0,0,0,0,0,0,1,2,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,300,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,303,        if (selectedCluster == null) {,1,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,304,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,2,0,0,1,2,2,0,1,1,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,307,        return selectedCluster.getPoints().remove(selectedPoint);,0,0,0,1,4,1,4,0,0,4,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,1,0,0,1,3,1,0,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,63,        return points;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,37,        this(null);,0,0,0,1,2,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,45,"        this(specific,",1,0,0,0,1,1,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,57,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,40,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,41,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,54,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,55,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,61,    public MathIllegalStateException() {,1,0,0,1,3,1,0,0,1,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,62,        addMessage(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,0,1,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,3,2,1,1,8,0,2,0,1,7,65,8,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,            for (final WeightedObservedPoint point : points) {,2,0,0,1,3,2,0,1,1,6,50,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());",1,0,0,1,4,0,5,0,1,5,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());",1,0,0,1,4,0,5,0,1,5,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);",3,0,0,0,2,2,0,1,1,5,45,5,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);",3,0,0,0,2,1,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",3,0,0,0,1,1,0,0,1,4,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,2,0,0,0,0,1,0,0,1,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,2,0,0,0,0,1,0,0,1,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",3,0,0,0,2,1,0,0,1,4,37,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,        this.arguments = ArgUtils.flatten(arguments);,1,0,0,1,2,1,3,0,1,6,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",4,0,0,0,2,1,0,0,1,4,43,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",1,0,0,2,6,0,0,0,1,4,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",1,0,0,0,8,1,0,0,1,4,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",1,0,0,1,4,0,0,0,1,4,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",1,0,0,1,10,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",1,0,0,1,2,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",1,0,0,1,4,1,0,0,1,5,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",1,0,0,1,24,2,0,0,1,5,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",1,0,0,1,4,0,0,0,1,4,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,119,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",1,0,0,1,6,1,0,0,1,5,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",1,0,0,1,6,1,0,0,1,5,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",1,0,0,1,4,0,0,0,1,4,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",1,0,0,1,8,0,0,0,1,4,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",1,0,0,1,2,0,0,0,1,4,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",1,0,0,2,6,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,151,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",1,0,0,2,6,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",1,0,0,2,8,1,0,0,1,5,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",1,0,0,1,6,0,0,0,1,4,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",1,0,0,1,2,0,0,0,1,4,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",1,0,0,1,2,0,0,0,1,4,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",1,0,0,1,2,0,0,0,1,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,186,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",1,0,0,0,10,0,0,0,1,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,194,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,206,"    SCALE(""scale ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",1,0,0,0,16,0,0,0,1,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",1,0,0,1,4,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",1,0,0,1,2,0,0,0,1,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",1,0,0,1,2,0,0,0,1,4,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",1,0,0,1,2,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,285,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,287,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,289,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,293,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,296,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,297,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,298,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,299,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,300,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,301,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,302,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",1,0,0,2,10,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,303,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,304,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,305,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,306,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,307,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,308,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,309,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,310,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",1,0,0,1,2,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,311,"    ILLEGAL_STATE(""illegal state""), /* keep */",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,312,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,313,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,314,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,315,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,316,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,317,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,318,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,319,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,320,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,321,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,322,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,323,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,324,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,325,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,326,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,327,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,42,        final List<Object> list = new ArrayList<Object>();,1,0,0,1,2,2,0,4,2,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,43,        if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,44,            for (Object o : array) {,2,0,0,1,3,1,0,1,0,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,45,                if (o instanceof Object[]) {,1,0,0,1,5,2,0,1,0,5,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,46,                    for (Object oR : flatten((Object[]) o)) {,2,0,0,3,9,1,1,2,1,7,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,47,                        list.add(oR);,0,0,0,1,2,0,3,0,0,3,13,13,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,50,                    list.add(o);,0,0,0,1,2,0,3,0,0,3,12,11,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,54,        return list.toArray();,0,0,0,1,2,1,2,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",3,0,0,0,7,5,0,0,3,4,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,47,        this.point = (point == null) ? null : point.clone();,2,1,0,1,4,1,2,0,1,7,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,48,        this.value = (value == null) ? null : value.clone();,2,1,0,1,4,1,2,0,1,7,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,97,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,57,        return weight;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,64,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,71,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,147,            this.observations = observations.clone();,1,0,0,1,2,1,2,0,1,6,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,148,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,156,            if (parameters == null) {,1,1,0,1,3,1,0,0,0,5,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,157,                parameters = basicGuess(observations);,1,0,0,1,2,0,2,0,2,5,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,159,            return parameters.clone();,0,0,0,1,2,1,2,0,0,4,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,169,"            Arrays.sort(points, createWeightedObservedPointComparator());",0,0,0,1,4,0,4,0,1,4,61,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,170,            double[] params = new double[3];,1,0,0,0,4,3,0,0,0,3,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,172,            int maxYIdx = findMaxY(points);,1,0,0,1,2,1,2,0,1,6,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,173,            params[0] = points[maxYIdx].getY();,0,0,1,1,6,0,1,0,1,5,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,174,            params[1] = points[maxYIdx].getX();,0,0,1,1,6,0,1,0,1,5,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,178,                double halfY = params[0] + ((params[1] - params[0]) / 2.0);,1,3,1,2,10,1,0,0,0,6,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,179,"                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);",1,0,0,0,2,1,4,0,2,5,60,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,185,            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));,1,3,1,3,8,0,4,0,1,7,64,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,187,            return params;,1,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,197,            int maxYIdx = 0;,1,0,0,0,0,1,0,0,0,2,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,198,            for (int i = 1; i < points.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,199,                if (points[i].getY() > points[maxYIdx].getY()) {,0,1,1,2,11,1,2,0,0,6,48,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,200,                    maxYIdx = i;,2,0,0,0,0,0,0,0,1,2,12,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,203,            return maxYIdx;,1,0,0,0,0,1,0,0,0,2,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,223,            if (idxStep == 0) {,1,1,0,1,3,1,0,0,0,5,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,226,"            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);",1,0,0,0,4,0,5,1,1,5,93,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,258,            if (idxStep == 0) {,1,1,0,1,3,1,0,0,0,5,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,261,            for (int i = startIdx;,2,0,0,0,1,2,0,0,0,3,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,262,                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);,7,5,0,1,6,0,0,0,0,4,67,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,264,"                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {",2,1,1,1,13,1,4,0,1,8,65,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,263,                 i += idxStep) {,2,0,0,0,2,0,0,0,1,3,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,291,            return (value >= boundary1 && value <= boundary2) ||,4,4,0,1,2,1,0,0,0,5,52,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,2,0,2,1,5,48,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,45,4,0.2,1,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,126,"        return fit(Integer.MAX_VALUE, f, initialGuess);",2,0,0,0,2,1,3,0,1,5,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,150,        double[] target  = new double[observations.size()];,1,0,0,1,6,3,2,0,0,5,51,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,151,        double[] weights = new double[observations.size()];,1,0,0,1,6,3,2,0,0,5,51,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,152,        int i = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,153,        for (WeightedObservedPoint point : observations) {,2,0,0,1,3,1,0,1,0,5,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,154,            target[i]  = point.getY();,0,0,1,1,4,0,2,0,1,5,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,155,            weights[i] = point.getWeight();,0,0,1,1,4,0,2,0,1,5,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,156,            ++i;,1,0,0,0,0,0,0,0,1,2,4,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,157,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,160,        VectorialPointValuePair optimum =,1,0,0,0,0,0,0,1,0,2,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,42,public class CurveFitter {,1,0,0,0,1,2,0,0,1,4,26,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,177,        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {,2,0,0,1,3,2,0,1,2,6,76,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,178,            this.f = f;,2,0,0,0,0,1,0,0,1,3,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,179,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,2,0,1,1,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,200,            final double[] values = new double[observations.size()];,1,0,0,1,6,4,2,0,1,6,56,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,201,            int i = 0;,1,0,0,0,0,1,0,0,0,2,10,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,202,            for (WeightedObservedPoint observed : observations) {,2,0,0,1,3,1,0,1,0,5,53,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,203,"                values[i++] = f.value(observed.getX(), point);",1,0,1,1,6,0,5,0,2,6,46,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,204,            },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,206,            return values;,1,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,169,    private class TheoreticalValuesFunction,1,0,0,0,0,2,0,0,1,3,39,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,2,0,2,1,5,48,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,304,                    if (p1 == null && p2 == null) {,2,3,0,1,3,1,0,0,0,5,31,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,307,                    if (p1 == null) {,1,1,0,1,3,1,0,0,0,5,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,310,                    if (p2 == null) {,1,1,0,1,3,1,0,0,0,5,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,313,                    if (p1.getX() < p2.getX()) {,0,1,0,2,7,1,4,0,0,5,28,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,316,                    if (p1.getX() > p2.getX()) {,0,1,0,2,7,1,4,0,0,5,28,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,317,                        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,2,0,1,1,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,185,                    final double[][] jacobian = new double[observations.size()][];,1,0,0,1,10,4,2,0,1,6,62,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,187,                    int i = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,188,                    for (WeightedObservedPoint observed : observations) {,2,0,0,1,3,1,0,1,0,5,53,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,189,"                        jacobian[i++] = f.gradient(observed.getX(), point);",1,0,1,1,6,0,5,0,2,6,51,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,190,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,192,                    return jacobian;,1,0,0,0,0,1,0,0,0,2,16,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,88,        return checker;,1,0,0,0,0,1,0,0,0,2,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,103,            evaluations.incrementCount();,0,0,0,1,2,0,2,0,0,3,29,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,106,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,107,        return function.value(point);,0,0,0,1,2,1,3,0,0,4,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,114,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,117,        if (t == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,120,        if (w == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,123,        if (startPoint == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,126,        if (t.length != w.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,131,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,3,0,0,3,37,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,132,        evaluations.resetCount();,0,0,0,1,2,0,2,0,0,3,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,135,        function = f;,2,0,0,0,0,0,0,0,1,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,136,        target = t.clone();,1,0,0,1,2,0,2,0,1,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,137,        weight = w.clone();,1,0,0,1,2,0,2,0,1,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,138,        start = startPoint.clone();,1,0,0,1,2,0,2,0,1,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,141,        return doOptimize();,0,0,0,1,2,1,1,0,1,5,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,165,        return target;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,171,        return weight;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,220,"        solvedCols  = FastMath.min(rows, cols);",1,0,0,0,2,0,4,0,1,4,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,221,        diagR       = new double[cols];,1,0,1,0,2,2,0,0,1,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,222,        jacNorm     = new double[cols];,1,0,1,0,2,2,0,0,1,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,223,        beta        = new double[cols];,1,0,1,0,2,2,0,0,1,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,224,        permutation = new int[cols];,1,0,1,0,2,2,0,0,1,5,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,225,        lmDir       = new double[cols];,1,0,1,0,2,2,0,0,1,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,228,        double   delta   = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,229,        double   xNorm   = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,230,        double[] diag    = new double[cols];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,231,        double[] oldX    = new double[cols];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,232,        double[] oldRes  = new double[rows];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,233,        double[] oldObj  = new double[rows];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,234,        double[] qtf     = new double[rows];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,235,        double[] work1   = new double[cols];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,236,        double[] work2   = new double[cols];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,237,        double[] work3   = new double[cols];,1,0,1,0,4,3,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,240,        updateResidualsAndCost();,0,0,0,1,2,0,1,0,1,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,243,        lmPar = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,244,        boolean firstIteration = true;,1,0,0,0,0,1,0,0,1,3,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,245,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",3,0,0,0,2,1,0,2,1,5,80,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,246,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,247,        final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();,1,0,0,1,2,1,1,2,2,7,84,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,249,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,251,            for (int i=0;i<rows;i++) {,4,1,0,1,3,2,0,0,1,6,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,252,                qtf[i]=weightedResiduals[i];,0,0,1,0,4,0,0,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,256,            VectorialPointValuePair previous = current;,2,0,0,0,0,0,0,1,0,2,43,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,257,            updateJacobian();,0,0,0,1,2,0,1,0,1,4,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,258,            qrDecomposition();,0,0,0,1,2,0,1,0,1,4,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,261,            qTy(qtf);,0,0,0,1,2,0,2,0,1,4,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,264,            for (int k = 0; k < solvedCols; ++k) {,4,1,0,1,3,2,0,0,1,6,38,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,265,                int pk = permutation[k];,1,0,1,0,2,1,0,0,0,4,24,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,266,                weightedResidualJacobian[k][pk] = diagR[pk];,0,0,1,0,6,0,0,0,1,3,44,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,269,            if (firstIteration) {,1,0,0,1,3,1,0,0,0,4,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,272,                xNorm = 0;,1,0,0,0,0,0,0,0,1,2,10,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,273,                for (int k = 0; k < cols; ++k) {,4,1,0,1,3,2,0,0,1,6,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,274,                    double dk = jacNorm[k];,1,0,1,0,2,1,0,0,0,4,23,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,275,                    if (dk == 0) {,1,1,0,1,3,1,0,0,0,5,14,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,278,                    double xk = dk * point[k];,2,1,1,0,2,1,0,0,0,5,26,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,279,                    xNorm  += xk * xk;,3,1,0,0,0,0,0,0,1,3,18,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,280,                    diag[k] = dk;,1,0,1,0,2,0,0,0,1,4,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,282,                xNorm = FastMath.sqrt(xNorm);,1,0,0,1,2,0,3,0,1,5,29,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,285,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,5,2,0,1,4,0,0,0,1,5,81,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,289,            double maxCosine = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,290,            if (cost != 0) {,1,1,0,1,3,1,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,291,                for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,292,                    int    pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,27,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,293,                    double s  = jacNorm[pj];,1,0,1,0,2,1,0,0,0,4,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,294,                    if (s != 0) {,1,1,0,1,3,1,0,0,0,5,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,295,                        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,296,                        for (int i = 0; i <= j; ++i) {,4,1,0,1,3,2,0,0,1,6,30,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,297,                            sum += weightedResidualJacobian[i][pj] * qtf[i];,1,1,1,0,6,0,0,0,1,5,48,14,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,299,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));",3,2,0,1,6,0,6,0,1,6,68,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,303,            if (maxCosine <= orthoTolerance) {,2,1,0,1,3,1,0,0,0,5,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,311,            for (int j = 0; j < cols; ++j) {,4,1,0,1,3,2,0,0,1,6,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,312,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",0,0,1,0,8,0,2,0,1,4,44,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,316,            for (double ratio = 0; ratio < 1.0e-4;) {,2,1,0,1,3,2,0,0,0,5,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,319,                for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,320,                    int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,321,                    oldX[pj] = point[pj];,0,0,1,0,4,0,0,0,1,3,21,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,323,                double previousCost = cost;,2,0,0,0,0,1,0,0,0,2,27,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,324,                double[] tmpVec = weightedResiduals;,2,0,0,0,2,1,0,0,0,3,36,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,325,                weightedResiduals = oldRes;,2,0,0,0,0,0,0,0,1,2,27,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,326,                oldRes    = tmpVec;,2,0,0,0,0,0,0,0,1,2,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,327,                tmpVec    = objective;,2,0,0,0,0,0,0,0,1,2,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,328,                objective = oldObj;,2,0,0,0,0,0,0,0,1,2,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,329,                oldObj    = tmpVec;,2,0,0,0,0,0,0,0,1,2,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,332,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0,0,0,0,2,0,7,0,1,3,60,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,335,                double lmNorm = 0;,1,0,0,0,0,1,0,0,0,2,18,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,336,                for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,337,                    int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,338,                    lmDir[pj] = -lmDir[pj];,0,0,1,0,4,0,0,0,2,3,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,339,                    point[pj] = oldX[pj] + lmDir[pj];,0,1,1,0,6,0,0,0,1,4,33,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,340,                    double s = diag[pj] * lmDir[pj];,1,1,1,0,4,1,0,0,0,5,32,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,341,                    lmNorm  += s * s;,3,1,0,0,0,0,0,0,1,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,343,                lmNorm = FastMath.sqrt(lmNorm);,1,0,0,1,2,0,3,0,1,5,31,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,345,                if (firstIteration) {,1,0,0,1,3,1,0,0,0,4,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,346,"                    delta = FastMath.min(delta, lmNorm);",1,0,0,0,2,0,4,0,1,4,36,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,350,                updateResidualsAndCost();,0,0,0,1,2,0,1,0,1,4,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,353,                double actRed = -1.0;,1,0,0,0,0,1,0,0,1,3,21,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,354,                if (0.1 * cost < previousCost) {,2,2,0,1,3,1,0,0,0,5,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,355,                    double r = cost / previousCost;,3,1,0,0,0,1,0,0,0,3,31,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,356,                    actRed = 1.0 - r * r;,3,2,0,0,0,0,0,0,1,3,21,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,361,                for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,362,                    int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,363,                    double dirJ = lmDir[pj];,1,0,1,0,2,1,0,0,0,4,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,364,                    work1[j] = 0;,0,0,1,0,2,0,0,0,1,3,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,365,                    for (int i = 0; i <= j; ++i) {,4,1,0,1,3,2,0,0,1,6,30,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,366,                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;,1,1,1,0,6,0,0,0,1,5,51,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,369,                double coeff1 = 0;,1,0,0,0,0,1,0,0,0,2,18,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,370,                for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,371,                    coeff1 += work1[j] * work1[j];,1,1,1,0,4,0,0,0,1,5,30,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,373,                double pc2 = previousCost * previousCost;,3,1,0,0,0,1,0,0,0,3,41,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,374,                coeff1 = coeff1 / pc2;,3,1,0,0,0,0,0,0,1,3,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,375,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,5,2,0,0,0,1,0,0,0,3,46,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,376,                double preRed = coeff1 + 2 * coeff2;,3,2,0,0,0,1,0,0,0,3,36,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,377,                double dirDer = -(coeff1 + coeff2);,3,1,0,1,2,1,0,0,1,6,35,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,380,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,4,2,0,1,4,0,0,0,1,5,46,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,383,                if (ratio <= 0.25) {,1,1,0,1,3,1,0,0,0,5,20,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,392,                    delta = 2 * lmNorm;,2,1,0,0,0,0,0,0,1,3,19,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,393,                    lmPar *= 0.5;,1,0,0,0,0,0,0,0,1,2,13,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,397,                if (ratio >= 1.0e-4) {,1,1,0,1,3,1,0,0,0,5,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,399,                    firstIteration = false;,1,0,0,0,0,0,0,0,2,2,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,400,                    xNorm = 0;,1,0,0,0,0,0,0,0,1,2,10,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,401,                    for (int k = 0; k < cols; ++k) {,4,1,0,1,3,2,0,0,1,6,32,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,402,                        double xK = diag[k] * point[k];,1,1,1,0,4,1,0,0,0,5,31,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,403,                        xNorm += xK * xK;,3,1,0,0,0,0,0,0,1,3,17,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,405,                    xNorm = FastMath.sqrt(xNorm);,1,0,0,1,2,0,3,0,1,5,29,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,406,"                    current = new VectorialPointValuePair(point, objective);",3,0,0,0,2,1,0,1,2,5,56,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,409,                    if (checker != null) {,1,1,0,1,3,1,0,0,0,5,22,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,411,"                        if (checker.converged(iter, previous, current)) {",0,0,0,0,5,1,5,0,0,3,49,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,431,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,1,4,0,1,4,1,3,0,0,6,53,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,440,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,2,4,0,3,11,1,3,0,0,6,87,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,443,                } else if (delta <= 2.2204e-16 * xNorm) {,2,2,0,1,4,2,0,0,0,5,41,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,446,                } else if (maxCosine <= 2.2204e-16)  {,1,1,0,1,4,2,0,0,0,5,38,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,450,            },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,451,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,481,        for (int j = 0; j < rank; ++j) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,482,            lmDir[permutation[j]] = qy[j];,0,0,1,0,6,0,0,0,1,3,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,484,        for (int j = rank; j < cols; ++j) {,5,1,0,1,3,2,0,0,1,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,487,        for (int k = rank - 1; k >= 0; --k) {,4,2,0,1,3,2,0,0,1,6,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,488,            int pk = permutation[k];,1,0,1,0,2,1,0,0,0,4,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,489,            double ypk = lmDir[pk] / diagR[pk];,1,1,1,0,4,1,0,0,0,5,35,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,490,            for (int i = 0; i < k; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,491,                lmDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];,1,1,1,0,8,0,0,0,1,5,63,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,493,            lmDir[pk] = ypk;,1,0,1,0,2,0,0,0,1,4,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,498,        double dxNorm = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,499,        for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,500,            int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,501,            double s = diag[pj] * lmDir[pj];,1,1,1,0,4,1,0,0,0,5,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,502,            work1[pj] = s;,1,0,1,0,2,0,0,0,1,4,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,503,            dxNorm += s * s;,3,1,0,0,0,0,0,0,1,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,505,        dxNorm = FastMath.sqrt(dxNorm);,1,0,0,1,2,0,3,0,1,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,506,        double fp = dxNorm - delta;,3,1,0,0,0,1,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,507,        if (fp <= 0.1 * delta) {,2,2,0,1,3,1,0,0,0,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,508,            lmPar = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,509,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,771,        for (int k = 0; k < cols; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,772,            permutation[k] = k;,1,0,1,0,2,0,0,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,773,            double norm2 = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,774,            for (int i = 0; i < weightedResidualJacobian.length; ++i) {,5,1,0,1,3,2,0,0,1,6,59,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,775,                double akk = weightedResidualJacobian[i][k];,1,0,1,0,4,1,0,0,0,4,44,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,776,                norm2 += akk * akk;,3,1,0,0,0,0,0,0,1,3,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,778,            jacNorm[k] = FastMath.sqrt(norm2);,0,0,1,1,4,0,3,0,1,5,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,782,        for (int k = 0; k < cols; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,785,            int nextColumn = -1;,1,0,0,0,0,1,0,0,1,3,20,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,786,            double ak2 = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,787,            for (int i = k; i < cols; ++i) {,5,1,0,1,3,2,0,0,1,6,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,788,                double norm2 = 0;,1,0,0,0,0,1,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,789,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,6,1,0,1,3,2,0,0,1,6,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,790,                    double aki = weightedResidualJacobian[j][permutation[i]];,1,0,1,0,6,1,0,0,0,4,57,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,791,                    norm2 += aki * aki;,3,1,0,0,0,0,0,0,1,3,19,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,793,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0,1,0,2,7,1,6,0,0,5,54,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,797,                if (norm2 > ak2) {,2,1,0,1,3,1,0,0,0,5,18,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,798,                    nextColumn = i;,2,0,0,0,0,0,0,0,1,2,15,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,799,                    ak2        = norm2;,2,0,0,0,0,0,0,0,1,2,19,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,802,            if (ak2 <= qrRankingThreshold) {,2,1,0,1,3,1,0,0,0,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,806,            int pk                  = permutation[nextColumn];,1,0,1,0,2,1,0,0,0,4,50,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,807,            permutation[nextColumn] = permutation[k];,0,0,1,0,4,0,0,0,1,3,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,808,            permutation[k]          = pk;,1,0,1,0,2,0,0,0,1,4,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,811,            double akk   = weightedResidualJacobian[k][pk];,1,0,1,0,4,1,0,0,0,4,47,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,812,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,2,1,0,1,6,1,6,0,1,7,68,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,813,            double betak = 1.0 / (ak2 - akk * alpha);,4,3,0,1,2,1,0,0,0,5,41,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,814,            beta[pk]     = betak;,1,0,1,0,2,0,0,0,1,4,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,817,            diagR[pk]        = alpha;,1,0,1,0,2,0,0,0,1,4,25,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,818,            weightedResidualJacobian[k][pk] -= alpha;,1,0,1,0,4,0,0,0,1,4,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,821,            for (int dk = cols - 1 - k; dk > 0; --dk) {,5,2,0,1,3,2,0,0,1,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,822,                double gamma = 0;,1,0,0,0,0,1,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,823,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,6,1,0,1,3,2,0,0,1,6,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,824,                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];,3,2,1,0,10,0,0,0,1,5,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,826,                gamma *= betak;,2,0,0,0,0,0,0,0,1,2,15,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,827,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,6,1,0,1,3,2,0,0,1,6,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,828,                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];,3,2,1,0,10,0,0,0,1,5,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,832,        rank = solvedCols;,2,0,0,0,0,0,0,0,1,2,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,833,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,841,        for (int k = 0; k < cols; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,842,            int pk = permutation[k];,1,0,1,0,2,1,0,0,0,4,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,843,            double gamma = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,844,            for (int i = k; i < rows; ++i) {,5,1,0,1,3,2,0,0,1,6,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,845,                gamma += weightedResidualJacobian[i][pk] * y[i];,1,1,1,0,6,0,0,0,1,5,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,847,            gamma *= beta[pk];,1,0,1,0,2,0,0,0,1,4,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,848,            for (int i = k; i < rows; ++i) {,5,1,0,1,3,2,0,0,1,6,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,849,                y[i] -= gamma * weightedResidualJacobian[i][pk];,1,1,1,0,6,0,0,0,1,5,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,852,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,102,        ++jacobianEvaluations;,1,0,0,0,0,0,0,0,1,2,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,103,        weightedResidualJacobian = jF.value(point);,1,0,0,1,2,0,3,0,1,5,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,104,        if (weightedResidualJacobian.length != rows) {,3,1,0,1,3,1,0,0,0,5,46,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,108,        final double[] residualsWeights = getWeightRef();,1,0,0,1,4,2,1,0,2,6,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,110,        for (int i = 0; i < rows; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,111,            final double[] ji = weightedResidualJacobian[i];,1,0,1,0,4,2,0,0,1,5,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,112,            double wi = FastMath.sqrt(residualsWeights[i]);,1,0,1,1,4,1,2,0,0,6,47,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,113,            for (int j = 0; j < cols; ++j) {,4,1,0,1,3,2,0,0,1,6,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,115,                weightedResidualJacobian[i][j] = -ji[j]*wi;,1,1,1,0,6,0,0,0,2,5,43,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,118,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,128,        objective = computeObjectiveValue(point);,1,0,0,1,2,0,2,0,2,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,129,        if (objective.length != rows) {,3,1,0,1,3,1,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,133,        final double[] targetValues = getTargetRef();,1,0,0,1,4,2,1,0,2,6,45,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,134,        final double[] residualsWeights = getWeightRef();,1,0,0,1,4,2,1,0,2,6,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,136,        cost = 0;,1,0,0,0,0,0,0,0,1,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,137,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,138,        for (int i = 0; i < rows; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,139,            final double residual = targetValues[i] - objective[i];,1,1,1,0,4,2,0,0,1,6,55,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);,1,1,1,1,6,0,2,0,1,7,66,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,            cost += residualsWeights[i] * residual * residual;,3,1,1,0,2,0,0,0,1,5,50,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,            index += cols;,2,0,0,0,0,0,0,0,1,2,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,144,        cost = FastMath.sqrt(cost);,1,0,0,1,2,0,3,0,1,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,145,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,237,        jacobianEvaluations = 0;,1,0,0,0,0,0,0,0,1,2,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,        jF = f.jacobian();,1,0,0,1,2,0,2,0,1,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,        this.residuals = new double[target.length];,3,0,0,0,2,3,0,0,1,4,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,        point = startPoint.clone();,1,0,0,1,2,0,2,0,1,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,245,        rows = target.length;,3,0,0,0,0,0,0,0,1,2,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,246,        cols = point.length;,3,0,0,0,0,0,0,0,1,2,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,        weightedResidualJacobian = new double[rows][cols];,1,0,1,0,4,2,0,0,1,5,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,        this.weightedResiduals = new double[rows];,1,0,1,0,2,3,0,0,1,5,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,        cost = Double.POSITIVE_INFINITY;,3,0,0,0,0,0,0,0,1,2,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);",6,0,0,0,2,2,0,0,0,3,63,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,public abstract class AbstractLeastSquaresOptimizer,1,0,0,0,0,3,0,0,2,3,51,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,        return relativeThreshold;,1,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,        return absoluteThreshold;,1,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,        final double[] p = previous.getValueRef();,1,0,0,1,4,2,2,0,1,6,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,        final double[] c = current.getValueRef();,1,0,0,1,4,2,2,0,1,6,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,        for (int i = 0; i < p.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,            final double pi         = p[i];,1,0,1,0,2,2,0,0,1,5,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,            final double ci         = c[i];,1,0,1,0,2,2,0,0,1,5,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,            final double difference = FastMath.abs(pi - ci);,3,1,0,1,2,2,2,0,1,7,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,82,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));",1,0,0,1,6,2,8,0,1,6,75,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,            if (difference > size * getRelativeThreshold() &&,2,3,0,1,3,1,1,0,1,7,49,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,85,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,34,public class SimpleVectorialValueChecker,1,0,0,0,0,2,0,0,1,3,40,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,        maximalCount = max;,2,0,0,0,0,0,0,0,1,2,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,        if (++count > maximalCount) {,2,1,0,1,3,1,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,        count = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,697,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,717,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,737,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,756,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,790,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,791,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,792,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,800,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,809,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,815,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,821,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3827,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3828,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3899,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3908,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3911,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,197,        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);,4,2,0,1,2,1,2,0,1,7,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,public class Gaussian implements DifferentiableUnivariateRealFunction {,1,0,0,0,1,3,0,1,1,5,71,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,114,    public static class Parametric implements ParametricUnivariateRealFunction {,1,0,0,0,1,4,0,1,2,5,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,128,            validateParameters(param);,0,0,0,1,2,0,2,0,1,4,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,            final double diff = x - param[1];,2,1,1,0,2,2,0,0,1,6,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,            final double i2s2 = 1 / (2 * param[2] * param[2]);,1,2,1,1,6,2,0,0,1,7,50,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);",0,0,1,0,4,1,4,0,0,4,44,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,150,            validateParameters(param);,0,0,0,1,2,0,2,0,1,4,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,152,            final double norm = param[0];,1,0,1,0,2,2,0,0,1,5,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,153,            final double diff = x - param[1];,2,1,1,0,2,2,0,0,1,6,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,            final double sigma = param[2];,1,0,1,0,2,2,0,0,1,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,            final double i2s2 = 1 / (2 * sigma * sigma);,3,2,0,1,2,2,0,0,1,6,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);",1,0,0,0,2,2,4,0,1,5,47,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,158,            final double m = norm * n * 2 * i2s2 * diff;,5,1,0,0,0,2,0,0,1,4,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,            final double s = m * diff / sigma;,4,2,0,0,0,2,0,0,1,4,34,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,161,"            return new double[] { n, m, s };",3,0,0,0,4,3,0,0,0,3,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,            if (param == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,            if (param.length != 3) {,2,1,0,1,3,1,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,            if (param[2] <= 0) {,0,1,1,1,5,1,0,0,0,5,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,185,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",1,0,0,0,2,1,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",3,0,0,0,3,5,0,0,3,4,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,3,3,0,1,4,1,0,0,1,6,70,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,3,0,0,0,0,1,0,0,1,3,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,1,0,0,0,0,1,0,0,1,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,1,0,0,1,3,1,0,0,0,4,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,0,0,0,1,3,2,0,1,0,4,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,2,2,0,2,6,0,1,0,1,6,73,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,1,0,0,1,2,0,2,0,2,5,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",2,0,0,0,2,2,0,1,2,5,53,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",2,0,0,0,2,2,0,1,2,5,53,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",2,0,0,0,2,2,0,1,2,5,41,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,1,0,0,1,2,0,2,0,2,5,33,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",2,0,0,0,2,2,0,1,2,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,1,0,0,1,2,0,2,0,2,5,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",2,0,0,0,2,2,0,1,2,5,42,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,1,0,0,1,2,0,2,0,2,5,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",2,0,0,0,2,2,0,1,2,5,42,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,1,0,0,1,2,0,2,0,2,5,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,            ln10           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,1,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,7,2,0,1,2,0,0,0,1,5,99,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,1,0,0,0,0,1,0,0,0,2,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,      Dfp result[] = new Dfp[2];,1,0,0,0,4,1,0,2,0,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,1,0,0,0,0,1,0,0,1,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,1,0,0,0,0,1,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,1,0,0,1,6,3,2,0,0,5,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,0,0,1,1,4,0,3,0,1,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,1,7,1,0,0,2,6,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,1,0,0,0,0,0,0,0,2,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,1,1,1,5,1,0,0,1,6,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,2,2,0,1,2,0,0,0,1,5,23,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,          leading = false;,1,0,0,0,0,0,0,0,2,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,        if (sig == (radixDigits / 2) * 4) {,2,3,0,2,5,1,0,0,0,5,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,          break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,1,4,1,1,7,1,0,0,3,7,49,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,1,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",2,0,1,0,6,3,0,2,3,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,0,0,1,1,4,0,3,0,1,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,2,5,1,1,7,1,0,0,2,7,47,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,0,2,0,0,0,2,3,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",1,0,1,1,6,3,0,2,3,7,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,2,4,0,2,5,1,2,0,0,6,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",2,0,0,0,2,2,0,2,3,5,84,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,1,0,0,1,2,1,2,1,1,7,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,            sqr2String           = highPrecisionSqr2.toString();,1,0,0,1,2,0,2,0,1,5,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,1,0,0,1,4,0,4,0,1,5,77,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,1,0,0,1,2,1,2,1,1,7,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,1,0,0,1,2,0,2,0,1,5,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,1,0,0,1,4,0,4,0,1,5,77,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",1,0,0,1,4,0,5,0,2,5,90,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",1,0,0,1,4,0,4,0,2,5,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",1,0,0,1,4,0,5,0,2,5,88,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",2,0,0,1,6,1,4,1,3,7,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",2,0,0,1,6,1,4,1,3,7,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,        Dfp sqrt2   = two.sqrt();,1,0,0,1,2,0,2,1,0,5,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,1,0,0,1,2,0,3,1,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,        Dfp four    = two.add(two);,1,0,0,1,2,0,3,1,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,2,0,0,0,0,0,0,1,0,2,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,1,0,0,3,6,0,7,1,0,5,64,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,1,0,1,1,4,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,1,0,0,1,2,1,3,1,1,7,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,1,0,0,2,4,1,5,1,1,7,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,1,0,0,1,4,1,3,1,1,7,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,1,0,0,2,6,0,7,0,1,5,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,1,0,0,1,2,0,3,0,1,5,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,1,0,0,1,2,1,3,1,1,7,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,1,0,0,1,2,1,3,1,1,7,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,1,0,0,4,16,0,17,0,1,5,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,        return one.divide(ak);,0,0,0,1,2,1,3,0,0,4,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,3,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,1,0,0,1,2,0,3,0,1,5,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,1,0,0,2,4,0,5,0,1,5,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,1,0,0,1,2,0,3,0,1,5,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,1,0,0,1,2,0,3,0,1,5,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,0,0,0,2,5,1,3,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,2,0,0,1,2,1,0,1,2,6,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",1,0,0,2,10,1,8,2,2,7,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,2,0,0,1,2,1,0,2,1,6,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,        Dfp num = new Dfp(x);,2,0,0,1,2,1,0,2,1,6,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,2,0,0,1,2,1,0,2,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,3,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,1,0,0,1,2,0,3,0,1,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,1,0,0,1,2,0,3,0,1,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,2,1,0,0,0,0,0,0,1,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,1,0,0,1,2,0,3,1,0,5,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,1,0,0,1,2,0,3,0,1,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,            if (y.equals(py)) {,0,0,0,2,5,1,3,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,2,0,0,1,2,1,0,1,2,6,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,0,0,1,2,1,3,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,1,0,0,0,1,2,0,0,1,4,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",1,0,0,0,0,0,0,0,0,1,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",1,0,0,0,0,0,0,0,0,1,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",1,0,0,0,0,0,0,0,0,1,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",1,0,0,0,0,0,0,0,0,1,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",1,0,0,0,0,0,0,0,0,1,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",1,0,0,0,0,0,0,0,0,1,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",1,0,0,0,0,0,0,0,0,1,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,1,0,0,0,0,0,0,0,0,1,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",2,0,0,1,4,2,0,0,0,4,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",3,0,0,0,3,3,0,1,2,5,45,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,1,0,0,1,4,2,2,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,2,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,1,0,0,0,0,0,0,0,2,2,10,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,1,0,0,0,0,0,0,0,1,2,9,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,1,0,0,0,0,0,0,0,1,2,8,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",6,2,0,0,2,0,5,0,0,4,76,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,4,2,1,1,6,1,0,0,1,7,42,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,2,0,0,0,0,0,0,0,1,2,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,1,0,0,0,0,0,0,0,1,2,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,1,0,0,1,3,1,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,2,0,0,1,3,2,0,1,2,6,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,3,0,0,1,2,0,1,0,1,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,3,0,0,0,0,0,0,0,1,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,3,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,3,0,0,0,0,0,0,0,1,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,3,0,0,0,0,0,0,0,1,2,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",3,0,0,0,3,3,0,2,3,5,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,1,0,0,1,4,2,2,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,1,0,0,0,0,0,0,0,1,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,1,0,0,0,0,0,0,0,1,2,8,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,2,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,1,0,0,0,0,1,0,0,1,3,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,1,0,0,0,0,2,0,0,1,3,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,1,0,0,0,0,2,0,0,1,3,54,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,3,3,0,1,6,4,1,0,2,7,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,1,3,0,0,4,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,1,3,0,0,4,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",1,0,0,1,2,1,2,0,1,6,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,1,1,0,1,3,3,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",1,0,0,1,2,0,2,0,2,5,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,2,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,1,2,0,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,2,7,1,6,0,2,6,63,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,1,2,0,2,5,1,3,0,1,7,49,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,1,0,0,0,0,0,0,0,1,2,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,1,3,0,1,6,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,1,0,0,0,0,0,0,0,2,2,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,2,0,0,0,0,1,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,1,0,0,0,0,1,0,0,0,2,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,1,1,0,3,7,1,2,0,0,6,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,5,4,0,1,3,1,0,0,0,5,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,1,3,0,1,6,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,1,0,0,0,0,0,0,0,2,2,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,2,0,0,0,0,0,0,0,1,2,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,1,0,0,0,0,0,0,0,1,2,4,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,2,7,1,6,0,2,6,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,1,4,0,3,0,1,5,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,1,0,0,0,0,0,0,0,1,2,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,3,2,0,1,3,1,0,0,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,1,0,0,0,0,0,0,0,1,2,4,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,2,1,0,1,3,1,0,0,0,5,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,1,5,1,0,0,1,6,24,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,1,0,0,0,0,0,0,0,1,2,20,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,2,2,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,1,0,0,1,3,1,0,0,1,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,2,0,0,0,0,0,0,0,1,2,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,3,2,0,0,0,0,0,0,1,3,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,2,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,1,1,1,5,1,0,0,1,6,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,6,4,0,2,4,1,0,0,0,5,62,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,2,0,0,0,0,0,0,0,1,2,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,2,0,0,0,0,0,0,0,1,2,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,5,3,0,2,7,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,4,1,0,1,3,1,0,0,2,6,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,1,0,1,0,2,0,0,0,3,4,19,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,1,0,0,2,6,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,1,6,0,0,0,2,5,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,1,0,0,0,0,0,0,0,1,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,4,2,0,1,2,0,0,0,1,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,3,1,0,1,3,1,0,0,0,5,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,2,1,2,6,0,1,0,2,6,31,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,1,0,0,1,2,2,0,1,1,6,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,2,0,0,4,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,2,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,5,2,0,1,3,2,0,0,1,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,1,1,1,0,4,0,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,0,2,0,0,0,1,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,1,1,1,0,4,0,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,2,1,1,0,2,0,0,0,1,5,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,1,0,0,0,0,1,0,0,1,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,3,1,0,0,0,1,0,0,0,3,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,2,0,0,0,0,1,0,0,0,2,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,2,0,0,0,0,0,0,0,2,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,3,2,0,2,5,1,0,0,0,5,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",0,0,0,0,2,0,3,0,0,2,21,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,2,0,0,0,0,0,0,0,1,2,8,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",2,0,0,0,2,2,2,0,1,5,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,1,1,0,1,3,1,0,0,0,5,21,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,1,0,0,0,0,0,0,0,2,2,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,1,0,1,0,2,0,0,0,1,4,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,1,0,1,4,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,1,0,0,1,3,1,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",2,0,0,0,2,2,2,0,1,5,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,1,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,0,2,7,1,3,0,1,6,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,0,2,2,2,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,0,1,0,2,7,1,3,0,1,6,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,1,0,0,2,2,2,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,4,3,0,1,4,1,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,1,0,0,1,3,2,0,1,0,5,27,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,2,0,0,1,2,1,0,2,1,6,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,2,2,0,2,11,1,6,0,1,7,81,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,0,2,2,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,2,2,0,2,11,1,6,0,1,7,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,0,1,0,1,4,1,4,0,2,6,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,10,7,0,0,5,1,0,0,0,4,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,4,1,0,1,3,1,0,0,0,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,6,3,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,6,3,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,6,3,0,1,3,1,0,0,0,5,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,10,5,0,1,7,1,0,0,0,5,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,4,1,0,1,3,1,0,0,0,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,2,0,0,0,0,1,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,4,1,0,1,3,1,0,0,0,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,2,0,0,0,0,1,0,0,0,2,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,4,1,1,1,7,1,0,0,0,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,2,0,0,0,0,1,0,0,0,2,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,4,1,1,1,7,1,0,0,0,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,2,0,0,0,0,1,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,3,1,0,0,0,0,0,0,1,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,1,1,1,0,4,0,0,0,1,5,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,3,1,0,0,0,1,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,4,2,0,0,0,0,0,0,1,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,2,1,1,0,2,2,0,0,1,6,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,1,0,0,1,2,1,1,1,1,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,1,0,0,1,2,0,2,1,1,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,3,0,0,0,0,2,0,0,1,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,3,0,0,0,0,2,0,0,1,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,2,0,0,0,0,0,0,0,1,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,2,0,0,0,0,0,0,0,1,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,2,0,0,0,0,1,0,0,0,2,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,1,0,0,5,1,3,0,1,5,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,2,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,4,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,4,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,3,0,0,1,2,0,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,3,0,0,1,2,0,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,2,1,0,1,3,1,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,1,0,0,1,2,0,3,0,1,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,1,0,0,1,2,0,3,0,1,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,1,0,0,0,0,1,0,0,0,2,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,6,1,1,0,4,2,0,0,1,6,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,5,2,1,0,2,0,0,0,1,5,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,4,0,0,0,0,0,0,0,1,2,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,3,0,0,0,0,0,0,0,1,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,3,3,0,2,5,1,0,0,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,3,0,0,0,2,2,0,0,1,4,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,0,0,0,1,2,0,2,0,0,3,20,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,5,1,0,0,2,0,0,0,1,4,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,1,0,0,1,2,2,3,0,1,6,41,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,4,2,0,1,5,1,0,0,0,5,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,0,0,0,1,2,0,2,0,0,3,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,4,1,0,0,2,0,0,0,1,4,41,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,1,0,0,0,0,0,0,0,1,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,1,0,0,0,0,0,0,0,1,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,2,1,0,1,3,1,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,2,0,0,0,0,0,0,0,1,2,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,3,1,0,1,2,2,2,0,1,7,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,1,0,0,1,2,1,1,1,1,7,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,4,0,0,1,2,1,0,0,2,5,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,3,0,1,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,1,0,0,0,0,1,0,0,1,3,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,0,0,0,2,5,1,2,0,0,4,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,3,6,1,2,6,0,0,0,1,6,72,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,1,0,0,1,3,1,0,0,0,4,10,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,1,0,0,0,0,1,0,0,0,2,11,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,2,1,1,0,2,2,0,0,1,6,27,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,25,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,2,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,2,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,2,0,0,0,0,1,0,0,0,2,29,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,3,1,0,0,4,3,0,0,0,4,86,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,1,0,0,0,0,1,0,0,0,2,31,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,5,1,0,1,3,2,0,0,1,6,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,3,1,1,0,4,1,0,0,0,5,56,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,5,2,1,0,2,0,0,0,1,5,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,5,3,1,0,2,0,0,0,1,5,30,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,4,1,1,0,2,0,0,0,1,5,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",3,2,0,0,0,3,0,0,0,3,65,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,5,3,0,1,3,2,0,0,1,6,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,1,5,1,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,7,2,1,0,4,0,0,0,1,5,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,8,4,0,0,0,0,0,0,1,3,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,5,1,0,2,6,1,0,0,2,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,3,2,0,2,5,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,4,1,1,1,4,0,2,0,1,7,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,1,0,0,0,0,1,0,0,0,2,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,1,0,0,0,0,1,0,0,0,2,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,63,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,3,1,0,0,2,2,0,0,1,5,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",3,1,0,0,2,4,0,0,1,5,93,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,3,1,0,0,2,2,0,0,1,5,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,2,1,1,0,2,0,0,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,0,0,1,0,4,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,0,0,1,0,2,0,0,0,1,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,1,0,2,0,0,0,1,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,1,0,0,0,0,0,0,0,1,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,5,2,0,1,3,1,0,0,2,6,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,6,3,1,0,4,2,0,0,1,6,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,6,3,0,1,4,1,0,0,0,5,57,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,6,3,0,1,4,1,0,0,0,5,53,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,1,0,0,0,0,0,0,0,2,2,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,1,0,0,1,3,1,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,3,2,0,1,2,0,0,0,1,5,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,1,0,0,0,0,1,0,0,0,2,11,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,6,1,1,1,4,1,0,0,0,6,43,11,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,4,2,0,1,2,2,0,0,1,6,32,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,30,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,1,0,0,0,0,0,0,0,1,2,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,3,3,1,2,8,2,0,0,1,7,60,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,30,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,1,1,0,1,3,1,0,0,0,5,14,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,2,1,0,0,0,0,0,0,1,3,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,6,3,1,1,6,0,0,0,1,6,67,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,6,3,0,1,4,0,0,0,1,5,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,1,1,0,1,3,1,0,0,0,5,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,3,1,0,0,0,0,0,0,1,3,42,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,                trialgood = false;  // assume false,1,0,0,0,0,0,0,0,2,2,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,                for (int i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,2,1,1,1,7,1,0,0,0,6,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,1,0,0,0,0,0,0,0,2,2,17,12,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,2,1,1,1,7,1,0,0,0,6,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,2,1,1,1,5,1,0,0,0,6,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,1,0,0,0,0,0,0,0,2,2,18,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,                if (trialgood == false) {,1,1,0,1,3,1,0,0,1,6,25,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,2,1,0,0,0,0,0,0,1,3,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,1,0,1,0,2,0,0,0,1,4,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,2,3,0,1,3,1,0,0,0,5,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,                nsqd++;,1,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,6,3,0,2,5,1,2,0,0,6,89,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,3,1,0,1,3,1,0,0,0,5,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,            dividend[0] = 0;,0,0,1,0,2,0,0,0,1,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,1,1,1,0,4,0,0,0,1,5,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,3,0,0,0,0,0,0,0,1,2,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,0,1,1,1,5,1,0,0,0,5,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,7,2,1,0,4,0,0,0,1,5,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,8,3,0,0,0,0,0,0,1,3,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,5,1,0,2,6,1,0,0,2,6,55,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",4,2,0,1,5,2,0,0,0,5,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,3,2,0,2,5,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,            excp = result.round(quotient[md-mant.length]);,4,1,1,1,4,0,2,0,1,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",1,0,0,0,2,0,5,0,2,4,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,3,3,0,1,3,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,1,0,0,1,2,1,1,1,1,7,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,1,0,0,0,0,1,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,5,2,1,0,2,2,0,0,1,6,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,            final int rh = r / divisor;,3,1,0,0,0,2,0,0,1,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,4,2,0,0,0,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,3,0,1,0,2,0,0,0,1,4,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,0,0,0,1,2,0,2,0,0,3,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,3,1,0,0,0,2,0,0,1,4,72,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,            final int rh = r / divisor;,3,1,0,0,0,2,0,0,1,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,4,2,0,0,0,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,3,0,0,0,2,0,0,0,1,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,4,2,0,1,2,3,2,0,1,7,72,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",1,0,0,0,2,0,5,0,2,4,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,4,4,1,1,5,1,0,0,0,6,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,        Dfp x = newInstance(this);,1,0,0,1,2,1,1,1,1,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,4,3,0,1,3,1,0,0,1,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,4,2,0,1,5,1,0,0,0,5,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,8,4,0,0,4,0,0,0,1,4,50,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,4,1,0,0,2,0,0,0,1,4,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,1,0,0,1,2,0,2,1,1,6,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,1,0,0,1,2,0,1,1,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,1,0,0,1,2,0,1,1,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,0,0,0,2,5,1,3,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,1,0,0,1,2,0,2,0,2,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,2,0,0,0,0,0,0,0,2,2,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,1,0,0,2,4,1,4,0,1,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,            dx = dx.divide(2);,1,0,0,1,2,0,2,0,1,5,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,2,0,0,0,0,0,0,0,1,2,9,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,2,0,0,0,0,0,0,0,1,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,1,0,0,1,2,0,3,0,1,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,            if (x.equals(ppx)) {,0,0,0,2,5,1,3,0,0,4,20,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,        if (exp > mant.length || exp < -1) {,4,3,0,1,3,1,0,0,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,        return dfp2string();,0,0,0,1,2,1,1,0,1,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,        char buffer[] = new char[mant.length*4 + 20];,3,2,0,0,4,3,0,0,0,4,45,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,2,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,1,0,0,0,0,1,0,0,1,3,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,0,0,1,0,2,0,0,0,2,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,            buffer[p++] = '0';,1,0,1,0,2,0,0,0,3,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,1,0,1,0,2,0,0,0,3,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,1,0,0,0,0,0,0,0,2,2,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,        while (e < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,1,2,1,2,10,1,0,0,3,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,1,3,1,3,12,1,0,0,3,7,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,1,3,1,3,12,1,0,0,3,7,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,1,2,1,3,12,1,0,0,3,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,            if (--e == 0) {,1,1,0,1,3,1,0,0,1,6,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,1,0,1,0,2,0,0,0,3,4,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,1,0,0,0,0,0,0,0,2,2,21,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,1,0,0,1,3,1,0,0,1,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,        q = 1;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,0,1,1,1,5,1,0,0,1,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,1,5,1,0,0,1,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,        while (buffer[p-1] == '0') {,1,2,1,1,5,1,0,0,1,7,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);",4,1,0,0,2,2,0,1,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,2,0,0,0,0,0,0,1,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,1,0,0,1,3,1,0,0,0,4,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,2,0,0,0,0,2,0,0,2,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",0,0,0,0,2,1,6,0,1,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,        return def;,1,0,0,0,0,1,0,0,0,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,1,0,0,1,3,1,0,0,0,4,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,2,0,0,1,3,2,0,0,1,5,35,2,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,1,0,1,0,2,2,0,0,1,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,    public BitsStreamGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,36,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",1,0,0,0,4,4,0,0,3,4,55,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,        long longMT = seed;,2,0,0,0,0,1,0,0,0,2,19,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,145,        mt[0]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,20,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,        for (mti = 1; mti < N; ++mti) {,4,1,0,1,3,1,0,0,2,6,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,4,5,0,3,6,0,0,0,1,5,71,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,            mt[mti]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,22,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,168,        setSeed(19650218);,0,0,0,1,2,0,1,0,1,4,18,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,        int i = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,        int j = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",5,1,0,0,5,2,3,0,1,6,57,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,5,5,1,4,10,1,0,0,0,6,76,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,176,            mt[i]   = (int) (l & 0xffffffffl);,1,1,1,1,6,1,0,0,1,7,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,            i++; j++;,2,0,0,0,0,0,0,0,2,2,9,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,180,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,182,            if (j >= seed.length) {,3,1,0,1,3,1,0,0,0,5,23,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,                j = 0;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,        for (int k = N - 1; k != 0; k--) {,4,2,0,1,3,2,0,0,1,6,34,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,5,5,0,4,8,1,0,0,0,5,69,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,            mt[i]   = (int) (l & 0xffffffffL);,1,1,1,1,6,1,0,0,1,7,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,192,            i++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,194,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,199,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,0,2,0,0,0,1,3,64,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,211,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3464,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.00602,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,24,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,28,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,1,0,0,0,0,2,0,0,1,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",1,0,0,0,2,2,4,0,1,5,39,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,1,1,0,1,3,1,0,0,0,5,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,1,0,0,0,0,0,0,0,2,2,16,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,4,1,0,1,3,2,0,0,1,6,36,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,2,0,0,0,0,0,0,0,1,2,30,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,2,0,0,0,0,0,0,0,1,2,21,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,3,3,0,1,3,1,0,0,0,5,24,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,1,1,0,1,4,0,6,0,1,6,58,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,1,0,0,1,3,1,0,0,1,5,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,648,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,8,2,0,2,6,1,2,0,0,6,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,2,0,0,0,0,0,0,0,2,2,11,6,0.16667,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",1,0,0,0,6,0,0,0,1,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",1,0,0,0,8,1,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",1,0,0,1,4,0,0,0,1,4,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",1,0,0,1,10,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",1,0,0,1,4,1,0,0,1,5,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",1,0,0,1,24,2,0,0,1,5,175,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",1,0,0,1,6,1,0,0,1,5,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",1,0,0,1,6,1,0,0,1,5,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",1,0,0,1,4,0,0,0,1,4,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",1,0,0,1,8,0,0,0,1,4,141,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",1,0,0,1,2,0,0,0,1,4,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",1,0,0,2,6,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",1,0,0,0,4,0,0,0,1,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",1,0,0,1,4,1,0,0,1,5,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",1,0,0,1,6,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",1,0,0,1,2,0,0,0,1,4,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",1,0,0,1,4,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",1,0,0,1,2,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",1,0,0,1,2,0,0,0,1,4,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,227,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",1,0,0,1,2,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,242,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",1,0,0,0,8,0,0,0,1,3,174,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,275,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,279,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,281,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,282,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,286,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,288,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,290,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,292,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,293,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,297,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,299,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,301,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,302,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,53,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,56,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,65,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,85,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,98,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,108,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,111,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,114,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,117,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,120,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,123,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,126,    private static long RECIP_2PI[] = new long[] {,1,0,0,0,5,5,0,0,2,4,46,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,147,    private static long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,5,0,0,2,4,48,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,127,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,169,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,170,        for (i = 1; i < 20; i++) {,3,1,0,1,3,1,0,0,2,6,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,171,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,174,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,175,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,178,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,179,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,183,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,185,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,186,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,187,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,192,        for (i = 0; i < 1025; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,193,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,199,        for (i = 0; i < 1024; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,201,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,205,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,206,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,219,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,680,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,681,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,682,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,683,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,684,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,685,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,687,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,688,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,689,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,690,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,692,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,693,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,695,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,696,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,697,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,700,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,701,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,702,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,705,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,714,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,715,            final double a = d * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,716,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,717,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,718,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,723,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,730,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,731,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,733,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,734,            double z = c * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,735,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,736,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,737,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,738,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,739,            a[0] = (c + z - c) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,740,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,742,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,750,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,754,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,755,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,763,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,764,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,766,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,767,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,788,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,789,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,791,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,796,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,800,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,804,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,806,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,811,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,813,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,815,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,823,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,824,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,825,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,828,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,829,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,830,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,832,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,833,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,836,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,837,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,839,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,841,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,842,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,844,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,847,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,848,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,849,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,851,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,853,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,854,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,856,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,859,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,860,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,861,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,863,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,865,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,866,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,868,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,869,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,878,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,879,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,880,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,889,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,892,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,894,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,895,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,896,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,900,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,903,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,906,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,907,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,908,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,910,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,913,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1396,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1397,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1398,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1399,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1401,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1404,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1405,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1406,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1407,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1408,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1409,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1410,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1411,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1414,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1424,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1425,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1426,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1428,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1429,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1432,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1433,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1434,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1436,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1446,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1447,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1448,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1449,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1450,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1451,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1453,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1454,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1457,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1458,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1461,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1462,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1464,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1465,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1466,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1469,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1473,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1474,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1475,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1478,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1489,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1490,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1491,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1492,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1493,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1494,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1496,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1497,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1500,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1501,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1504,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1505,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1507,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1508,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1509,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1512,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1516,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1517,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1518,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1521,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1527,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1530,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1531,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1533,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1535,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1537,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1538,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1539,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1543,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1544,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1545,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1546,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1547,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1548,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1550,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1552,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1553,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1554,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1555,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1558,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1563,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1564,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1565,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1566,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1567,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1568,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1571,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1572,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1573,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1574,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1575,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1576,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1581,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1582,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1583,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1584,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1585,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1588,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1589,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1590,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1591,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1592,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1593,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1594,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1599,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1600,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1601,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1602,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1604,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1607,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1612,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1618,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,52,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,46,    protected final RandomDataImpl randomData = new RandomDataImpl();,1,0,0,1,2,3,0,2,3,6,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,40,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,62,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,50,    protected final RandomDataImpl randomData = new RandomDataImpl();,1,0,0,1,2,3,0,2,3,6,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,56,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,3,0,0,0,0,2,0,0,1,3,78,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,65,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,78,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,51,    private double mean = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,54,    private double standardDeviation = 1;,1,0,0,0,0,2,0,0,1,3,37,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,79,        setMeanInternal(mean);,0,0,0,1,2,0,2,0,1,4,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,80,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,2,0,1,4,33,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,81,        solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,0,0,0,1,2,44,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,48,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,3,1,0,1,2,4,2,0,3,7,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,114,        this.mean = newMean;,2,0,0,0,0,1,0,0,1,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,141,        if (sd <= 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,146,        standardDeviation = sd;,2,0,0,0,0,0,0,0,1,2,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,147,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,80,"        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);",3,0,0,0,2,1,0,0,0,3,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,92,"    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {",4,0,0,0,3,4,0,0,1,4,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,65,    private int maxIterations = DEFAULT_MAX_ITERATIONS;,2,0,0,0,0,2,0,0,1,3,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,70,    private double epsilon = DEFAULT_EPSILON;,2,0,0,0,0,2,0,0,1,3,41,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,93,        if (p <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,96,        mean = p;,2,0,0,0,0,0,0,0,1,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,97,"        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",2,0,0,1,4,1,3,1,2,7,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,98,        this.epsilon = epsilon;,2,0,0,0,0,1,0,0,1,3,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,99,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,100,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,119,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,111,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,114,    private SecureRandom secRand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,120,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,667,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,673,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,64,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",3,0,0,0,3,3,0,2,3,5,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,76,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,88,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,107,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,121,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,122,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,146,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,155,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,163,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,173,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,176,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,182,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,188,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,196,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,206,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,207,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,208,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,210,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,211,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,360,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,416,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,417,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,2,0,1,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,595,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,643,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,3,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,685,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,1,0,0,1,3,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,39,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",3,0,0,0,2,1,0,0,1,4,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,46,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,73,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,74,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,81,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,2,0,0,1,2,1,0,0,1,5,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,51,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,62,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,70,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,84,"        this(cause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,96,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,57,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,59,"        this.arguments = new Object[] { """" };",1,0,0,0,4,2,0,1,2,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,83,"    public MathException(Localizable pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,84,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,96,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,128,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,129,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,141,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,150,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,159,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,170,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,173,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,179,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,193,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,203,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,204,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,205,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,207,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,208,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,209,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,61,                                           Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,62,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,63,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,64,        arguments = ArgUtils.flatten(args);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,72,"        this(null, general, args);",2,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,0,2,1,6,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,89,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,52,"        this(null, wrong, min, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,67,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,73,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,74,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,81,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,88,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,50,"        super(specific, general, wrong, arguments);",4,0,0,0,2,1,0,0,1,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,51,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,64,"        super(general, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,65,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,72,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,32,    private ArgUtils() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,42,        final List<Object> list = new ArrayList<Object>();,1,0,0,1,2,2,0,4,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,43,        if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,44,            for (Object o : array) {,2,0,0,1,3,1,0,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,45,                if (o instanceof Object[]) {,1,0,0,1,5,2,0,1,0,5,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,46,                    for (Object oR : flatten((Object[]) o)) {,2,0,0,3,9,1,1,2,1,7,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,47,                        list.add(oR);,0,0,0,1,2,0,3,0,0,3,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,50,                    list.add(o);,0,0,0,1,2,0,3,0,0,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,54,        return list.toArray();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,322,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,328,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,330,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,332,                return bundle.getString(toString());,0,0,0,2,4,1,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,337,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,335,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,341,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,52,"        this(null, wrong, max, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,66,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,72,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,73,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,80,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,87,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,2,0,1,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,572,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,578,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,540,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,496,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,452,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,395,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,334,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,290,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,246,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,1,0,0,1,3,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,695,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,0,2,1,2,0,1,5,74,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,701,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",2,0,0,1,4,1,4,0,1,6,84,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,617,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,623,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,211,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,236,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,237,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,238,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,239,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,243,        if (a > 0.3) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,2,2,0,2,6,0,5,0,2,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,246,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,247,            if (a > 0.05) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,7,15,0,5,10,0,0,0,1,5,93,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,5,9,0,3,6,0,0,0,1,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,254,        return negative ? -absSinh : absSinh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,264,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,265,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,266,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,267,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,271,        if (a > 0.074) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,272,            final double twoA = 2 * a;,2,1,0,0,0,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,1,2,0,2,6,0,6,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,274,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,275,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,276,            if (a > 0.016) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,7,16,0,5,10,0,0,0,1,5,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,5,10,0,3,6,0,0,0,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,283,        return negative ? -absTanh : absTanh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,301,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,302,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,303,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,304,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,308,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,311,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,312,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,314,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,316,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,323,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,333,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,334,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,335,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,336,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,340,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,343,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,344,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,10,25,0,9,18,0,0,0,1,5,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,346,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,8,19,0,7,14,0,0,0,1,5,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,348,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,6,13,0,5,10,0,0,0,1,5,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,4,7,0,3,6,0,0,0,1,5,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,355,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,4,2,0,3,10,1,3,0,1,7,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,380,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,404,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,423,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,424,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,426,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,427,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,428,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,429,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,431,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,434,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,437,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,439,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,441,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,444,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,447,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,448,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,451,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,454,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,459,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,461,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,463,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,464,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,466,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,468,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,496,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,497,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,498,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,499,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,500,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,507,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,514,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,516,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,519,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,522,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,524,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,528,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,536,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,537,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,540,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,543,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,544,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,545,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,546,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,548,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,549,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,550,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,551,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,558,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,560,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,561,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,562,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,566,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,1,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,1,0,0,0,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,570,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,571,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,572,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,574,            temp = tempA * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,575,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,576,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,578,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,583,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,584,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,585,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,586,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,587,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,588,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,590,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,591,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,592,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,593,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,595,        temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,596,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,597,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,598,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,601,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,603,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,604,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,605,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,607,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,608,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,609,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,611,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,612,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,613,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,617,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,618,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,619,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,621,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,623,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,624,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,626,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,628,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,629,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,631,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,633,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,634,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,636,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,638,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,639,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,640,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,641,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,642,            temp = ratio * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,643,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,644,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,646,            temp = denom * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,647,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,648,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,661,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,662,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,665,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,666,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,669,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,719,            final double a = d * 9.31322574615478515625E-10;,2,1,0,0,0,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,720,            split[0] = (d + a - d) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,721,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,792,            in[0] = in[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,793,            in[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,924,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,934,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,938,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,939,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,940,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,943,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,948,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,949,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,953,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,957,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,959,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,961,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,963,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,967,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,971,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,972,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,973,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,974,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,979,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,985,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,986,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,987,                double tmp = xa * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,988,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,989,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,990,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,991,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,998,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,999,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1001,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1002,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1003,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1006,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1007,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1009,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1010,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1011,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1015,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1016,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1018,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1019,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1020,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1022,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,2,1,2,10,2,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,3,4,0,2,8,2,0,0,0,5,103,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1040,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1041,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1043,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1045,            double tmp = epsilon * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1046,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1047,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1048,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1049,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1052,            double numer = (double)(bits & 0x3ffffffffffL);,2,1,0,1,4,2,0,0,0,5,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,2,2,0,1,2,1,0,0,0,5,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1054,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1055,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1063,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1064,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1066,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1067,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1068,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1074,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1075,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1076,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1080,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1081,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1089,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1090,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1091,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1094,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1095,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1096,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1097,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1098,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1099,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1100,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1117,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1118,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1119,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1120,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1121,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1122,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1124,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1125,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1126,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1127,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1129,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1130,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1131,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1132,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1134,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1135,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1136,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1137,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1139,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1140,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1141,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1142,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1144,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1145,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1146,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1149,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1157,        double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1158,        double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1160,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1161,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1165,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1168,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1169,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1171,"            log(xpa, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1175,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1177,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1178,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1180,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1184,        double y = x * 0.333333333333333 - 0.5;,2,2,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1185,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1186,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1188,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1196,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1198,"        log(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1200,        final double tmp = hiPrec[0] * 1073741824.0;,1,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1201,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1204,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1205,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1218,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1220,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1221,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1224,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1225,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1229,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1230,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1231,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1233,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1236,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1240,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1244,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1248,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1249,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1251,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1255,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1258,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1259,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1260,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1262,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1263,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1265,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1269,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1270,            if (x * x == 1.0),2,2,0,1,2,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1271,              return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1273,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1274,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1276,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1280,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1281,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1282,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1285,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1286,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1287,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1288,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1291,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1294,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1295,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1296,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1297,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1300,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1304,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1306,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1307,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1310,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1311,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1313,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1318,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,2,3,0,1,3,1,0,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1321,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1324,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1328,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1335,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1336,            double tmp1 = y * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1337,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1338,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1339,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1340,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,4,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1343,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1347,"        log(x, lns);",0,0,0,0,2,0,3,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1348,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1349,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1352,        double tmp1 = lna * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1353,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1354,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1355,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1358,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1361,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1362,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1364,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1365,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1366,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1367,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1368,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1369,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1371,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1373,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1628,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1630,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1631,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1632,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1633,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1636,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1638,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1648,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1650,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1651,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1652,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1653,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1654,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1656,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1667,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1671,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1672,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1673,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1674,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1677,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1678,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1679,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1680,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1683,        final double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1684,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1685,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1686,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1712,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1713,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1715,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1716,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1717,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1718,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1719,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1721,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1722,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1723,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1724,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1725,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1769,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1772,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1773,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1774,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1775,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1778,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1780,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1791,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1792,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1794,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1795,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1796,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1798,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1811,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1815,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1816,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1817,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1818,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1821,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1822,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1823,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1824,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1827,        double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1828,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1829,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1830,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1855,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1856,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1859,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1860,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1861,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1862,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1863,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1865,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1866,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1867,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1868,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1869,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1874,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1875,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1879,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1881,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1882,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1883,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1884,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1885,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1887,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1888,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1889,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1890,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1891,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1896,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1897,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1899,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1901,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1916,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1919,        temp = est * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1920,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1921,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1923,        temp = cosa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1924,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1925,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1929,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1932,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1935,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1936,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1937,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1940,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1943,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1960,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1964,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1965,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1968,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1969,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1975,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1976,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1978,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1985,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1986,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1990,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1991,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1993,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1994,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1996,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1997,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1998,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1999,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2001,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2002,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2009,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2011,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2014,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2015,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2017,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2018,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2023,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2025,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2029,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2030,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2031,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2032,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2033,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2036,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2038,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2040,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2043,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2045,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2049,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2050,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2052,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2053,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2054,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2056,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2068,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2071,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2072,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2073,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2076,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2077,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2079,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2082,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2083,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2084,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2085,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2087,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2088,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2090,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2091,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2095,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2097,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2101,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2103,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2104,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2109,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2111,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2115,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2117,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2118,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2119,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2122,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2126,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2129,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2131,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2135,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2136,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2137,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2139,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2140,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2141,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2144,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2148,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2151,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2153,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,2,2,0,1,2,1,0,0,0,5,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,3,5,0,3,8,1,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2160,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2161,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2164,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2165,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2166,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2175,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2176,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2178,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2181,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2182,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2183,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2184,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2188,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2189,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2190,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2191,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2193,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2197,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2201,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2205,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2207,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2208,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2209,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2210,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2215,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2221,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2222,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2223,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2225,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2226,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2227,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2228,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2230,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2231,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2232,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2233,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2235,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2236,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2241,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2242,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2243,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2244,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2245,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2248,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2249,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2252,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2254,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2256,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2258,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2260,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2262,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2272,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2275,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2276,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2277,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2281,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2285,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2286,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2290,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2291,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2292,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2293,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2294,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2295,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2300,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2306,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2307,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2308,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2310,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2311,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2312,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2313,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2315,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2316,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2317,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2318,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2320,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2321,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2326,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2327,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2328,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2329,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2330,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2336,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2338,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2340,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2342,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2344,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2346,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2356,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2357,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2360,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2361,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2362,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2363,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2367,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2368,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2369,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2370,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2372,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2376,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2380,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2381,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2385,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2386,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2387,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2388,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2389,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2390,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2395,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2401,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2402,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2403,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2405,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2406,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2407,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2408,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2410,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2411,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2412,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2413,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2415,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2416,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2421,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2422,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2423,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2424,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2425,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2428,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2430,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2431,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2433,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2434,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2435,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2437,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2438,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2439,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2440,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2444,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2445,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2447,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2450,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2451,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2454,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2463,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2473,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2476,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2478,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2479,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2480,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2483,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,3,0,1,6,1,0,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2488,        if (xa < 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2491,            double temp = 1.0/xa;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,4,4,0,3,8,1,0,0,3,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2496,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2498,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2499,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2500,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2503,        temp = xa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2504,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2505,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2506,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2507,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2510,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,1,0,0,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2515,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2516,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2517,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2519,            double za = 1.0 + temp2;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2520,            double zb = -(za - 1.0 - temp2);,3,1,0,1,2,1,0,0,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2522,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2523,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2524,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2526,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2527,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2529,            temp = ya * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2530,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2531,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2533,            temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2534,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2535,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2540,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2541,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2545,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2546,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2549,        double epsA2 = epsA*epsA;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2560,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2561,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2562,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2563,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2564,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2565,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2566,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2569,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2571,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2572,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2573,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2576,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2582,        double za = EIGHTHES[idx] + ya;,2,1,1,0,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2583,        double zb = -(za - EIGHTHES[idx] - ya);,3,1,1,1,4,1,0,0,1,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2584,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2585,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2586,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2588,        result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2589,        resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2591,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2593,            final double pia = 1.5707963267948966*2.0;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2594,            final double pib = 6.123233995736766E-17*2.0;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2596,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2597,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2598,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2600,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2601,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2605,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2606,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2609,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2619,        if (x !=x || y != y) {,4,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2620,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2623,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2624,            double result = x*y;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2625,            double invx = 1.0/x;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2626,            double invy = 1.0/y;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2628,            if (invx == 0.0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2629,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2632,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2636,            if (result != result) { // y must be infinite,2,1,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2637,                return x/y;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2640,            if (x < 0.0 || invx < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2641,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2642,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2644,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2647,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2651,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2652,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2653,                return Math.PI/4.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2656,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2657,                return Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2660,            return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2663,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2664,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2665,                return -Math.PI/4.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2668,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2669,                return -Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2672,            return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2675,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2676,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2677,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2680,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2681,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2685,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2687,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2688,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2691,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2692,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2696,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2697,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2698,                return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2701,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2702,                return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,2,3,0,1,3,1,0,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2707,            x *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2708,            y *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2712,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2713,        final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2714,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2717,        final double r = y/x;,3,1,0,0,0,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2718,        temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2719,        double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2720,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2724,        temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2725,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2726,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2729,"        double result = atan(ra, rb, x < 0);",2,1,0,0,2,1,3,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2731,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2739,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2740,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2743,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2744,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2747,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2748,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2751,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2752,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2758,      double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2759,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2760,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2763,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2764,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2767,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2768,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2770,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2771,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2773,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2774,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2775,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2779,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2780,      temp = y * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2781,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2782,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2788,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2791,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2792,      temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2793,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2794,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2799,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2800,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2801,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2803,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2811,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2812,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2815,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2816,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2819,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2820,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2823,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2827,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2828,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2834,      double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2835,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2836,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2839,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2840,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2843,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2844,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2846,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2847,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2849,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2850,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2851,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2854,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2855,      temp = y * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2856,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2857,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2863,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2864,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2865,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2868,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2869,      temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2870,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2871,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2876,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2877,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2878,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2880,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2889,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2891,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2893,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2894,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2895,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2899,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2900,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2901,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2905,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2907,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2911,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2921,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2922,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2923,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2924,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2925,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2927,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2932,      final double xs = x / (p2*p2*p2); ,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2933,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2934,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2937,      double temp = est * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2938,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2939,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2941,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2942,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2943,      temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2944,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2945,      zb += (za - temp2);,3,1,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2946,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2948,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2949,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2951,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2952,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2953,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2955,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2958,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2960,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2961,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2964,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2974,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2975,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2977,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2978,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2979,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2991,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2992,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2994,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2995,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2996,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3007,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3016,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3025,        return (x < 0.0f) ? -x : x;,3,1,0,1,2,1,0,0,1,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3034,        return (x < 0.0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3067,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3068,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3075,        long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3076,        long sign     = bits & 0x8000000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3077,        long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3078,        long mantissa = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3080,        if (d * (direction - d) >= 0) {,3,3,0,2,5,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3082,            if (mantissa == 0x000fffffffffffffL) {,1,1,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3083,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3086,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3091,            if (mantissa == 0L) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3092,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3096,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3110,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3111,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,3,0,1,3,1,0,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3115,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3118,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3119,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3120,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3123,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3124,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3127,        return (double) y;,1,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3137,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3138,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3141,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3142,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3143,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3146,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3148,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3149,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3152,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3160,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3161,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3163,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3164,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3166,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3167,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3171,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3172,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3180,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3188,        return Math.round(x);,0,0,0,1,2,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3197,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3206,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,8,2,0,2,6,1,2,0,0,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3233,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3242,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,8,2,0,2,6,1,2,0,0,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,71,        return cumulativeProbability((int) FastMath.floor(x));,0,0,0,2,6,2,4,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,90,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,94,        if (FastMath.floor(x0) < x0) {,1,1,0,2,5,1,3,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,95,"            return cumulativeProbability(((int) FastMath.floor(x0)) + 1,",0,1,0,2,7,2,4,0,1,6,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,98,"            return cumulativeProbability((int) FastMath.floor(x0),",0,0,0,1,5,2,4,0,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,127,        double fl = FastMath.floor(x);,1,0,0,1,2,1,3,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,128,        if (fl == x) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,129,            return this.probability((int) x);,1,0,0,2,4,3,1,0,0,5,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,131,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,147,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,148,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,151,        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);,1,2,0,1,4,1,3,0,2,7,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,166,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,167,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,173,        int x0 = getDomainLowerBound(p);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,174,        int x1 = getDomainUpperBound(p);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,176,        while (x0 < x1) {,2,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,177,            int xm = x0 + (x1 - x0) / 2;,4,3,0,1,2,1,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,178,            pm = checkedCumulativeProbability(xm);,1,0,0,1,2,0,2,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,179,            if (pm > p) {,2,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,181,                if (xm == x1) {,2,1,0,1,3,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,184,                    --x1;,1,0,0,0,0,0,0,0,1,2,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,187,                    x1 = xm;,2,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,191,                if (xm == x0) {,2,1,0,1,3,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,194,                    ++x0;,1,0,0,0,0,0,0,0,1,2,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,197,                    x0 = xm;,2,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,200,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,203,        pm = checkedCumulativeProbability(x0);,1,0,0,1,2,0,2,0,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,204,        while (pm > p) {,2,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,205,            --x0;,1,0,0,0,0,0,0,0,1,2,5,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,206,            pm = checkedCumulativeProbability(x0);,1,0,0,1,2,0,2,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,209,        return x0;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,219,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,220,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,232,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,2,2,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,246,        if (sampleSize <= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,247,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",2,0,0,0,2,0,3,0,0,3,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,249,        int[] out = new int[sampleSize];,1,0,1,0,4,3,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,250,        for (int i = 0; i < sampleSize; i++) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,251,            out[i] = sample();,0,0,1,1,4,0,1,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,253,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,267,        double result = Double.NaN;,3,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,269,            result = cumulativeProbability(argument);,1,0,0,1,2,0,2,0,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,272,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,270,        } catch (MathException ex) {,1,0,0,1,4,1,0,1,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,271,"            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());",2,0,0,1,6,2,4,1,1,7,99,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,273,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,274,"            throw new FunctionEvaluationException(argument,",1,0,0,0,1,2,0,1,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,277,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,62,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,63,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,67,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,1,4,1,4,0,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,73,"        throw new MathRuntimeException(new UnsupportedOperationException(),",0,0,0,1,3,3,0,2,2,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,90,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,97,        UnivariateRealFunction rootFindingFunction =,1,0,0,0,0,0,0,1,0,2,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,115,        double lowerBound = getDomainLowerBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,116,        double upperBound = getDomainUpperBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,117,        double[] bracket = null;,1,0,0,0,2,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,119,            bracket = UnivariateRealSolverUtils.bracket(,1,0,0,0,1,0,2,0,1,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,136,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,122,        }  catch (ConvergenceException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,128,            if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,3,9,1,6,0,1,6,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,129,                return lowerBound;,1,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,131,            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,3,9,1,6,0,1,6,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,132,                return upperBound;,1,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,135,            throw new MathException(ex);,1,0,0,1,2,2,0,1,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,139,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",1,0,0,0,1,1,3,0,0,4,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,143,        return root;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,153,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,166,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,2,2,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,180,        if (sampleSize <= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,181,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",2,0,0,0,2,0,3,0,0,3,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,183,        double[] out = new double[sampleSize];,1,0,1,0,4,3,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,184,        for (int i = 0; i < sampleSize; i++) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,185,            out[i] = sample();,0,0,1,1,4,0,1,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,187,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,229,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,89,"        this(0.0, 1.0);",0,0,0,0,2,1,0,0,0,2,15,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,97,        return mean;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,107,        setMeanInternal(mean);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,122,        return standardDeviation;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,133,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,142,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,157,        return density(x.doubleValue());,0,0,0,2,4,1,3,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,168,        double x0 = x - mean;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,169,        return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);,6,5,0,2,6,1,2,0,1,7,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,182,            return 0.5 * (1.0 + Erf.erf((x - mean) /,2,4,0,1,4,1,2,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,184,        } catch (MaxIterationsExceededException ex) {,1,0,0,1,4,1,0,1,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,185,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,3,3,0,2,5,1,0,0,0,5,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,186,                return 0.0d;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,187,            } else if (x > (mean + 20 * standardDeviation)) {,3,3,0,2,6,2,0,0,0,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,188,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,190,                throw ex;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,204,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,224,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,225,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,227,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,228,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,230,        return super.inverseCumulativeProbability(p);,2,0,0,1,2,2,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,242,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,0,2,1,4,0,0,3,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,258,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,259,            ret = -Double.MAX_VALUE;,3,0,0,0,0,0,0,0,2,2,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,261,            ret = mean;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,264,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,280,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,281,            ret = mean;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,283,            ret = Double.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,286,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,301,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,302,            ret = mean - standardDeviation;,3,1,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,303,        } else if (p > .5) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,304,            ret = mean + standardDeviation;,3,1,0,0,0,0,0,0,1,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,306,            ret = mean;,2,0,0,0,0,0,0,0,1,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,309,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,35,public class NormalDistributionImpl extends AbstractContinuousDistribution,1,0,0,0,0,3,0,1,1,4,74,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,98,            new UnivariateRealFunction() {,0,0,0,1,3,1,0,1,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,100,                double ret = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,102,                    ret = cumulativeProbability(x) - p;,2,1,0,1,2,0,2,0,2,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,105,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,103,                } catch (MathException ex) {,1,0,0,1,4,1,0,1,0,5,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,104,"                    throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(), ex.getArguments());",2,0,0,1,6,2,4,1,1,7,92,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,106,                if (Double.isNaN(ret)) {,0,0,0,2,5,1,3,0,0,4,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,107,"                    throw new FunctionEvaluationException(x,",1,0,0,0,1,2,0,1,1,5,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,110,                return ret;,1,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",3,0,0,0,2,1,0,0,1,4,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,48,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",3,0,0,1,4,2,0,1,2,6,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,60,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,73,"        this(argument, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,86,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,87,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,100,"        this(argument, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,113,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,114,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,125,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,126,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,137,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,138,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",4,0,0,1,4,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,168,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,169,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",4,0,0,1,4,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,199,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,200,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,209,        return argument.clone();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",2,0,0,0,2,1,3,0,0,4,105,7,0.0,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,110,"        this(p, epsilon, DEFAULT_MAX_ITERATIONS);",3,0,0,0,2,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,121,"        this(p, DEFAULT_EPSILON, maxIterations);",3,0,0,0,2,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,130,        return mean;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,142,        if (x < 0 || x == Integer.MAX_VALUE) {,4,3,0,1,3,1,0,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,143,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,144,        } else if (x == 0) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,145,            ret = FastMath.exp(-mean);,2,0,0,1,2,0,2,0,2,5,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,147,            ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -,1,2,0,1,3,0,5,0,2,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,151,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,165,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,166,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,168,        if (x == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,169,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,171,"        return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);",1,1,0,1,4,2,5,0,0,6,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,191,        return normal.cumulativeProbability(x + 0.5);,1,1,0,1,2,1,2,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,213,"        return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);",2,0,0,1,6,2,5,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,226,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,239,        return Integer.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,131,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,132,        this.rand = rand;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,154,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,155,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,159,        RandomGenerator ran = getRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,162,        StringBuffer outBuffer = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,165,        byte[] randomBytes = new byte[(len / 2) + 1];,2,2,0,1,6,3,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,166,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,169,        for (int i = 0; i < randomBytes.length; i++) {,5,1,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,170,            Integer c = Integer.valueOf(randomBytes[i]);,1,0,1,1,4,0,2,1,0,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,177,            String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,180,            if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,181,"                hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,183,            outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,185,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,200,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,201,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,204,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,205,        return (int) ((r * upper) + ((1.0 - r) * lower) + r);,5,4,0,3,10,2,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,220,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,221,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,224,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,225,        return (long) ((r * upper) + ((1.0 - r) * lower) + r);,5,4,0,3,10,2,0,0,0,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,250,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,251,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,255,        SecureRandom secRan = getSecRan();,1,0,0,1,2,0,1,1,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,256,        MessageDigest alg = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,258,"            alg = MessageDigest.getInstance(""SHA-1"");",1,0,0,1,2,0,2,0,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,262,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,259,        } catch (NoSuchAlgorithmException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,261,            throw MathRuntimeException.createInternalError(ex);,0,0,0,1,2,1,3,0,0,4,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,263,        alg.reset();,0,0,0,1,2,0,2,0,0,3,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,266,        int numIter = (len / 40) + 1;,2,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,268,        StringBuffer outBuffer = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,269,        for (int iter = 1; iter < numIter + 1; iter++) {,4,2,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,270,            byte[] randomBytes = new byte[40];,1,0,0,0,4,3,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,271,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,272,            alg.update(randomBytes);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,275,            byte hash[] = alg.digest();,1,0,0,1,4,1,2,0,0,5,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,278,            for (int i = 0; i < hash.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,279,                Integer c = Integer.valueOf(hash[i]);,1,0,1,1,4,0,2,1,0,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,286,                String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,289,                if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,290,"                    hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,292,                outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,295,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,311,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,312,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,315,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,316,        return lower + (int) (sec.nextDouble() * (upper - lower + 1));,3,4,0,2,8,2,2,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,332,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,333,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,336,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,337,        return lower + (long) (sec.nextDouble() * (upper - lower + 1));,3,4,0,2,8,2,2,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,358,        if (mean <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,359,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",3,0,0,0,2,2,0,1,1,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,362,        final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,364,        final double pivot = 40.0d;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,365,        if (mean < pivot) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,366,            double p = FastMath.exp(-mean);,2,0,0,1,2,1,2,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,367,            long n = 0;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,368,            double r = 1.0d;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,369,            double rnd = 1.0d;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,371,            while (n < 1000 * mean) {,2,2,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,372,                rnd = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,373,                r = r * rnd;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,374,                if (r >= p) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,375,                    n++;,1,0,0,0,0,0,0,0,1,2,4,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,377,                    return n;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,380,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,382,            final double lambda = FastMath.floor(mean);,1,0,0,1,2,2,3,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,383,            final double lambdaFractional = mean - lambda;,3,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,384,            final double logLambda = FastMath.log(lambda);,1,0,0,1,2,2,3,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,385,            final double logLambdaFactorial = MathUtils.factorialLog((int) lambda);,2,0,0,2,4,3,2,0,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,386,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,4,1,0,1,2,2,2,0,2,7,88,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,387,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,5,4,0,2,4,2,4,0,1,7,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,388,            final double halfDelta = delta / 2;,2,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,389,            final double twolpd = 2 * lambda + delta;,3,2,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,390,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,5,4,0,1,4,2,4,0,1,7,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,391,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,6,5,0,2,6,2,2,0,2,7,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,392,            final double aSum = a1 + a2 + 1;,3,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,393,            final double p1 = a1 / aSum;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,394,            final double p2 = a2 / aSum;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,395,            final double c1 = 1 / (8 * lambda);,2,2,0,1,2,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,397,            double x = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,398,            double y = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,399,            double v = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,400,            int a = 0;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,401,            double t = 0;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,402,            double qr = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,403,            double qa = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,405,"                final double u = nextUniform(0.0, 1);",1,0,0,0,2,2,1,0,2,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,406,                if (u <= p1) {,2,1,0,1,3,1,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,407,"                    final double n = nextGaussian(0d, 1d);",1,0,0,0,2,2,1,0,2,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,408,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,4,3,0,1,2,0,2,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,409,                    if (x > delta || x < -lambda) {,4,3,0,1,3,1,0,0,1,6,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,410,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,412,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,2,1,0,1,4,0,6,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,413,                    final double e = nextExponential(1d);,1,0,0,1,2,2,1,0,2,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,414,                    v = -e - (n * n / 2) + c1;,5,4,0,1,2,0,0,0,2,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,415,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,416,                    if (u > p1 + p2) {,3,2,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,417,                        y = lambda;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,418,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,420,                        x = delta + (twolpd / delta) * nextExponential(1d);,4,3,0,1,4,0,1,0,2,6,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,421,                        y = FastMath.ceil(x);,1,0,0,1,2,0,3,0,1,5,21,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,422,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,4,4,0,1,4,0,1,0,3,6,52,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,425,                a = x < 0 ? 1 : 0;,2,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,426,                t = y * (y + 1) / (2 * lambda);,4,4,0,1,4,0,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,427,                if (v < -t && a == 0) {,3,3,0,1,3,1,0,0,1,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,428,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,429,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,431,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,4,6,0,2,6,0,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,432,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,7,7,0,3,8,0,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,433,                if (v < qa) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,434,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,435,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,437,                if (v > qr) {,2,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,438,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,440,                if (v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,6,5,0,3,9,2,2,0,0,6,90,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,441,                    y = lambda + y;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,442,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,444,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,445,            return y2 + (long) y;,2,1,0,1,2,2,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,462,        if (sigma <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,463,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",3,0,0,0,2,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,465,        return sigma * getRan().nextGaussian() + mu;,2,2,0,1,4,1,2,0,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,483,        if (mean <= 0.0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,484,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",3,0,0,0,2,2,0,1,1,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,486,        final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,487,        double unif = generator.nextDouble();,1,0,0,1,2,1,2,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,488,        while (unif == 0.0d) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,489,            unif = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,491,        return -mean * FastMath.log(unif);,1,1,0,1,2,1,3,0,1,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,512,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,513,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,516,        final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,519,        double u = generator.nextDouble();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,520,        while (u <= 0.0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,521,            u = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,524,        return lower + u * (upper - lower);,4,3,0,1,2,1,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,539,"        return nextInversionDeviate(new BetaDistributionImpl(alpha, beta));",2,0,0,0,4,2,1,1,2,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,554,"        return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));",2,0,0,0,4,2,1,1,2,6,96,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,569,"        return nextInversionDeviate(new CauchyDistributionImpl(median, scale));",2,0,0,0,4,2,1,1,2,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,583,        return nextInversionDeviate(new ChiSquaredDistributionImpl(df));,1,0,0,2,4,2,1,1,2,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,598,"        return nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));",2,0,0,0,4,2,1,1,2,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,613,"        return nextInversionDeviate(new GammaDistributionImpl(shape, scale));",2,0,0,0,4,2,1,1,2,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,629,"        return nextInversionDeviate(new HypergeometricDistributionImpl(populationSize, numberOfSuccesses, sampleSize));",3,0,0,0,4,2,1,1,2,6,111,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,644,"        return nextInversionDeviate(new PascalDistributionImpl(r, p));",2,0,0,0,4,2,1,1,2,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,658,        return nextInversionDeviate(new TDistributionImpl(df));,1,0,0,2,4,2,1,1,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,673,"        return nextInversionDeviate(new WeibullDistributionImpl(shape, scale));",2,0,0,0,4,2,1,1,2,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,688,"        return nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));",2,0,0,0,4,2,1,1,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,701,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,702,            rand = new JDKRandomGenerator();,1,0,0,1,2,1,0,1,2,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,703,            rand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,4,0,0,3,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,705,        return rand;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,717,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,718,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,719,            secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,4,0,0,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,721,        return secRand;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,734,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,735,            rand = new JDKRandomGenerator();,1,0,0,1,2,1,0,1,2,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,737,        rand.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,738,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,748,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,749,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,751,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,752,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,764,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,765,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,767,        secRand.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,768,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,775,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,776,            rand = new JDKRandomGenerator();,1,0,0,1,2,1,0,1,2,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,778,        rand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,4,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,779,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,803,"        secRand = SecureRandom.getInstance(algorithm, provider);",1,0,0,0,2,0,4,0,1,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,804,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,837,        if (k > n) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,838,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",2,0,0,0,1,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,841,        if (k == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,842,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",2,0,0,0,1,2,0,1,1,5,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,846,        int[] index = getNatural(n);,1,0,0,1,4,1,2,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,847,"        shuffle(index, n - k);",2,1,0,0,2,0,2,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,848,        int[] result = new int[k];,1,0,1,0,4,3,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,849,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,850,            result[i] = index[n - i - 1];,2,1,1,0,4,0,0,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,853,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,875,        int len = c.size();,1,0,0,1,2,1,2,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,876,        if (k > len) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,877,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,880,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,881,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",3,0,0,0,2,2,0,1,1,5,78,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,884,        Object[] objects = c.toArray();,1,0,0,1,4,0,2,1,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,885,"        int[] index = nextPermutation(len, k);",1,0,0,0,4,1,3,0,1,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,886,        Object[] result = new Object[k];,1,0,1,0,4,1,0,2,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,887,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,888,            result[i] = objects[index[i]];,0,0,1,0,6,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,890,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,903,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,917,"        final double target = nextUniform(0, 1);",1,0,0,0,2,2,1,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,918,        final int glb = distribution.inverseCumulativeProbability(target);,1,0,0,1,2,2,3,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,919,        if (distribution.cumulativeProbability(glb) == 1.0d) { // No mass above,0,1,0,2,5,1,3,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,920,            return glb;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,922,            return glb + 1;,1,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,938,        int target = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,939,        for (int i = list.length - 1; i >= end; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,940,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,941,                target = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,943,"                target = nextInt(0, i);",1,0,0,0,2,0,2,0,2,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,945,            int temp = list[target];,1,0,1,0,2,1,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,946,            list[target] = list[i];,0,0,1,0,4,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,947,            list[i] = temp;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,949,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,959,        int[] natural = new int[n];,1,0,1,0,4,3,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,960,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,961,            natural[i] = i;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,963,        return natural;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,123,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,1,0,0,0,5,5,0,0,2,4,46,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,147,    private static long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,5,0,0,2,4,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,3,1,0,1,3,1,0,0,2,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,175,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,186,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,187,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,193,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,199,        for (i = 0; i < 1024; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,201,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,206,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,219,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,680,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,681,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,682,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,683,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,688,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,689,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,692,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,693,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,701,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,705,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,714,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,716,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,717,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,718,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,723,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,731,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,733,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,734,            double z = c * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,735,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,736,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,737,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,738,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,739,            a[0] = (c + z - c) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,742,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,750,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,754,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,755,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,764,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,766,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,767,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,788,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,796,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,800,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,804,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,806,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,815,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,823,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,825,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,828,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,829,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,830,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,832,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,833,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,836,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,837,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,841,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,842,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,847,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,848,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,851,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,853,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,854,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,856,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,859,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,860,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,861,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,863,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,865,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,866,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,869,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,878,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,879,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,889,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,894,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,895,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,896,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,900,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,903,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,907,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,913,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1396,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1397,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1399,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1401,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1404,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1405,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1406,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1407,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1408,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1409,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1410,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1411,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1414,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1424,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1426,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1428,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1429,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1432,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1433,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1434,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1446,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1447,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1450,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1451,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1454,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1457,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1458,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1474,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1478,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1493,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1501,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1507,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1512,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1517,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1533,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1535,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1537,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1539,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1543,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1545,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1546,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1547,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1548,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1550,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1555,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1558,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1563,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1564,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1565,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1566,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1568,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1571,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1574,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1575,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1576,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1581,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1582,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1583,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1584,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1585,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1588,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1589,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1590,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1591,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1592,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1593,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1594,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1599,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1604,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1607,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1618,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3016,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,8,2,0,2,6,1,2,0,0,6,61,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,8,2,0,2,6,1,2,0,0,6,61,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,1,0,0,0,1,2,0,0,1,4,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,2,0,0,0,0,0,0,0,1,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,45,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,53,        return maximalCount;,1,0,0,0,0,1,0,0,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,1,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,84,        if (++count > maximalCount) {,2,1,0,1,3,1,0,0,1,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,87,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,1,0,0,0,0,0,0,0,1,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,33,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,417,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,481,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,485,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,1,0,0,0,1,4,0,2,1,5,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",0,0,0,1,4,1,3,2,1,6,68,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,1,1,0,1,3,1,0,0,0,5,17,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,1,1,0,1,4,2,0,0,0,5,24,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,200,                    final double v2 = o2.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,3,1,0,1,2,1,0,0,0,5,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,1,0,0,0,2,1,0,1,1,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,2,0,0,0,0,1,0,0,1,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,2,0,0,0,0,1,0,0,1,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,75,        this.generator = generator;,2,0,0,0,0,1,0,0,1,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,76,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",0,0,0,0,2,1,5,0,1,4,38,4,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,1,0,1,0,2,1,0,1,1,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,1,0,0,0,0,0,0,0,1,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,4,1,0,1,3,2,0,0,1,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,0,8,0,12,0,1,4,100,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,167,            },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,1,0,0,1,2,2,2,0,1,6,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,1,1,0,2,4,0,4,0,0,5,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,171,            totalEvaluations += usedEvaluations;,2,0,0,0,0,0,0,0,1,2,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,174,        sortPairs(goal);,0,0,0,1,2,0,2,0,1,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,1,5,1,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,182,        return optima[0];,0,0,1,0,2,1,0,0,0,3,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",0,0,0,1,4,1,3,2,1,6,68,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,205,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,1,0,0,0,2,2,0,0,1,4,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,46,        this.point = point;,2,0,0,0,0,1,0,0,1,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,2,0,0,0,0,1,0,0,1,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,48,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,1,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,1,0,0,0,0,3,0,0,2,3,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,41,    private final Incrementor evaluations = new Incrementor();,1,0,0,1,2,3,0,2,3,6,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,55,        evaluations.setMaximalCount(maxEvaluations);,0,0,0,1,2,0,3,0,0,3,44,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,56,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,60,        return evaluations.getMaximalCount();,0,0,0,1,2,1,2,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,65,        return evaluations.getCount();,0,0,0,1,2,1,2,0,0,4,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,1,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,90,        return searchStart;,1,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,106,            evaluations.incrementCount();,0,0,0,1,2,0,2,0,0,3,29,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,109,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,110,        return function.value(point);,0,0,0,1,2,1,3,0,0,4,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,120,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,123,        if (goalType == null) {,1,1,0,1,3,1,0,0,0,5,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,2,0,0,0,0,0,0,0,1,2,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,2,0,0,0,0,0,0,0,1,2,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,2,0,0,0,0,0,0,0,1,2,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,2,0,0,0,0,0,0,0,1,2,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,132,        function = f;,2,0,0,0,0,0,0,0,1,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,133,        evaluations.resetCount();,0,0,0,1,2,0,2,0,0,3,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,136,        return doOptimize();,0,0,0,1,2,1,1,0,1,5,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,144,"        return optimize(f, goalType, min, max, min + 0.5 * (max - min));",3,3,0,1,4,1,5,0,1,7,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,1,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,1,0,0,0,1,3,0,1,1,5,46,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",1,0,0,0,0,0,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,33,    MINIMIZE,1,0,0,0,0,0,0,0,0,1,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,1,0,0,0,2,1,0,0,0,3,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,2,1,0,1,3,1,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,2,0,0,0,0,0,0,0,1,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,2,0,0,0,0,0,0,0,1,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,85,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,47,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,1,2,0,2,4,4,2,0,3,7,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,1,1,0,1,2,4,2,0,3,7,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,90,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,3,1,0,1,2,2,1,0,2,7,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,1,0,0,1,2,2,1,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,1,0,0,1,2,2,1,0,2,6,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,93,        final double hi = getMax();,1,0,0,1,2,2,1,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,96,        final ConvergenceChecker<UnivariateRealPointValuePair> checker,1,0,0,0,0,1,0,2,1,4,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,2,1,0,1,3,1,0,0,0,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,2,0,0,0,0,0,0,0,1,2,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,103,            b = hi;,2,0,0,0,0,0,0,0,1,2,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,2,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,111,        double w = x;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,112,        double d = 0;,1,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,113,        double e = 0;,1,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,114,        double fx = computeObjectiveValue(x);,1,0,0,1,2,1,2,0,1,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,115,        if (!isMinim) {,1,0,0,1,3,1,0,0,1,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,118,        double fv = fx;,2,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,119,        double fw = fx;,2,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,121,        UnivariateRealPointValuePair previous = null;,1,0,0,0,0,0,0,1,0,2,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,122,        UnivariateRealPointValuePair current,1,0,0,0,0,0,0,1,0,2,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,125,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,127,            final double m = 0.5 * (a + b);,3,2,0,1,2,2,0,0,1,6,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,128,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,3,2,0,1,2,2,3,0,1,7,76,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,129,            final double tol2 = 2 * tol1;,2,1,0,0,0,2,0,0,1,4,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,132,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,6,5,0,1,4,2,2,0,1,7,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,133,            if (!stop) {,1,0,0,1,3,1,0,0,1,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,134,                double p = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,135,                double q = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,136,                double r = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,137,                double u = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,139,                if (FastMath.abs(e) > tol1) { // Fit parabola.,1,1,0,2,5,1,3,0,0,6,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,140,                    r = (x - w) * (fx - fv);,5,3,0,1,4,0,0,0,1,5,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,141,                    q = (x - v) * (fx - fw);,5,3,0,1,4,0,0,0,1,5,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,142,                    p = (x - v) * q - (x - w) * r;,7,5,0,1,4,0,0,0,1,5,30,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,143,                    q = 2 * (q - r);,3,2,0,1,2,0,0,0,1,5,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,145,                    if (q > 0) {,1,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,146,                        p = -p;,2,0,0,0,0,0,0,0,2,2,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,148,                        q = -q;,2,0,0,0,0,0,0,0,2,2,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,151,                    r = e;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,152,                    e = d;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,154,                    if (p > q * (a - x) &&,4,5,0,1,3,1,0,0,0,5,22,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,158,                        d = p / q;,3,1,0,0,0,0,0,0,1,3,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,159,                        u = x + d;,3,1,0,0,0,0,0,0,1,3,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,162,                        if (u - a < tol2 || b - u < tol2) {,6,5,0,1,3,1,0,0,0,5,35,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,163,                            if (x <= m) {,2,1,0,1,3,1,0,0,0,5,13,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,164,                                d = tol1;,2,0,0,0,0,0,0,0,1,2,9,16,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,171,                        if (x < m) {,2,1,0,1,3,1,0,0,0,5,12,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,172,                            e = b - x;,3,1,0,0,0,0,0,0,1,3,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,174,                            e = a - x;,3,1,0,0,0,0,0,0,1,3,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,176,                        d = GOLDEN_SECTION * e;,3,1,0,0,0,0,0,0,1,3,23,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,180,                    if (x < m) {,2,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,183,                        e = a - x;,3,1,0,0,0,0,0,0,1,3,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,185,                    d = GOLDEN_SECTION * e;,3,1,0,0,0,0,0,0,1,3,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,189,                if (FastMath.abs(d) < tol1) {,1,1,0,2,5,1,3,0,0,6,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,190,                    if (d >= 0) {,1,1,0,1,3,1,0,0,0,5,13,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,191,                        u = x + tol1;,3,1,0,0,0,0,0,0,1,3,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,193,                        u = x - tol1;,3,1,0,0,0,0,0,0,1,3,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,196,                    u = x + d;,3,1,0,0,0,0,0,0,1,3,10,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,199,                double fu = computeObjectiveValue(u);,1,0,0,1,2,1,2,0,1,6,37,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,200,                if (!isMinim) {,1,0,0,1,3,1,0,0,1,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,205,                if (fu <= fx) {,2,1,0,1,3,1,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,206,                    if (u < x) {,2,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,207,                        b = x;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,209,                        a = x;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,211,                    v = w;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,212,                    fv = fw;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,213,                    w = x;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,214,                    fw = fx;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,215,                    x = u;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,216,                    fx = fu;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,218,                    if (u < x) {,2,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,219,                        a = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,221,                        b = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,223,                    if (fu <= fw ||,2,2,0,0,1,1,0,0,0,4,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,225,                        v = w;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,226,                        fv = fw;,2,0,0,0,0,0,0,0,1,2,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,227,                        w = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,228,                        fw = fu;,2,0,0,0,0,0,0,0,1,2,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,229,                    } else if (fu <= fv ||,2,3,0,0,2,2,0,0,0,4,22,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,232,                        v = u;,2,0,0,0,0,0,0,0,1,2,6,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,233,                        fv = fu;,2,0,0,0,0,0,0,0,1,2,8,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,237,                previous = current;,2,0,0,0,0,0,0,0,1,2,19,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,238,"                current = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);",5,0,0,0,2,1,0,1,3,5,66,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,241,                if (checker != null) {,1,1,0,1,3,1,0,0,0,5,22,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,246,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,1,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,247,                return current;,1,0,0,0,0,1,0,0,0,2,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,249,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,250,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,211,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,236,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,237,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,238,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,239,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,243,        if (a > 0.3) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,2,2,0,2,6,0,5,0,2,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,246,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,247,            if (a > 0.05) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,7,15,0,5,10,0,0,0,1,5,93,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,5,9,0,3,6,0,0,0,1,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,254,        return negative ? -absSinh : absSinh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,264,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,265,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,266,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,267,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,271,        if (a > 0.074) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,272,            final double twoA = 2 * a;,2,1,0,0,0,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,1,2,0,2,6,0,6,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,274,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,275,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,276,            if (a > 0.016) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,7,16,0,5,10,0,0,0,1,5,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,5,10,0,3,6,0,0,0,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,283,        return negative ? -absTanh : absTanh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,301,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,302,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,303,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,304,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,308,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,311,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,312,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,314,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,316,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,323,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,333,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,334,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,335,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,336,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,340,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,343,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,344,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,10,25,0,9,18,0,0,0,1,5,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,346,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,8,19,0,7,14,0,0,0,1,5,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,348,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,6,13,0,5,10,0,0,0,1,5,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,4,7,0,3,6,0,0,0,1,5,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,355,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,4,2,0,3,10,1,3,0,1,7,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,380,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,404,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,423,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,424,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,426,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,427,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,428,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,429,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,431,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,434,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,437,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,439,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,441,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,444,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,447,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,448,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,451,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,454,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,459,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,461,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,463,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,464,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,466,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,468,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,496,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,497,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,498,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,499,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,500,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,507,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,514,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,516,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,519,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,522,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,524,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,528,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,536,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,537,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,540,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,543,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,544,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,545,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,546,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,548,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,549,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,550,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,551,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,558,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,560,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,561,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,562,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,566,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,1,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,1,0,0,0,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,570,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,571,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,572,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,574,            temp = tempA * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,575,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,576,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,578,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,583,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,584,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,585,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,586,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,587,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,588,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,590,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,591,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,592,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,593,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,595,        temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,596,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,597,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,598,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,601,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,603,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,604,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,605,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,607,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,608,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,609,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,611,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,612,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,613,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,617,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,618,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,619,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,621,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,623,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,624,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,626,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,628,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,629,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,631,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,633,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,634,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,636,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,638,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,639,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,640,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,641,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,642,            temp = ratio * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,643,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,644,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,646,            temp = denom * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,647,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,648,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,661,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,662,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,665,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,666,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,669,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,719,            final double a = d * 9.31322574615478515625E-10;,2,1,0,0,0,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,720,            split[0] = (d + a - d) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,721,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,792,            in[0] = in[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,793,            in[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,924,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,934,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,938,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,939,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,940,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,943,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,948,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,949,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,953,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,957,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,959,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,961,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,963,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,967,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,971,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,972,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,973,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,974,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,979,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,985,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,986,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,987,                double tmp = xa * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,988,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,989,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,990,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,991,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,998,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,999,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1001,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1002,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1003,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1006,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1007,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1009,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1010,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1011,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1015,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1016,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1018,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1019,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1020,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1022,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,2,1,2,10,2,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,3,4,0,2,8,2,0,0,0,5,103,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1040,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1041,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1043,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1045,            double tmp = epsilon * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1046,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1047,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1048,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1049,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1052,            double numer = (double)(bits & 0x3ffffffffffL);,2,1,0,1,4,2,0,0,0,5,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,2,2,0,1,2,1,0,0,0,5,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1054,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1055,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1063,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1064,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1066,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1067,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1068,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1074,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1075,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1076,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1080,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1081,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1089,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1090,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1091,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1094,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1095,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1096,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1097,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1098,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1099,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1100,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1117,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1118,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1119,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1120,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1121,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1122,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1124,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1125,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1126,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1127,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1129,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1130,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1131,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1132,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1134,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1135,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1136,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1137,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1139,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1140,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1141,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1142,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1144,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1145,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1146,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1149,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1157,        double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1158,        double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1160,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1161,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1165,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1168,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1169,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1171,"            log(xpa, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1175,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1177,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1178,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1180,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1184,        double y = x * 0.333333333333333 - 0.5;,2,2,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1185,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1186,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1188,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1196,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1198,"        log(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1200,        final double tmp = hiPrec[0] * 1073741824.0;,1,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1201,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1204,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1205,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1218,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1220,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1221,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1224,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1225,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1229,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1230,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1231,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1233,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1236,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1240,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1244,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1248,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1249,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1251,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1255,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1258,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1259,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1260,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1262,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1263,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1265,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1269,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1270,            if (x * x == 1.0),2,2,0,1,2,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1271,              return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1273,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1274,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1276,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1280,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1281,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1282,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1285,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1286,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1287,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1288,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1291,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1294,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1295,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1296,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1297,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1300,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1304,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1306,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1307,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1310,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1311,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1313,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1318,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,2,3,0,1,3,1,0,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1321,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1324,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1328,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1335,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1336,            double tmp1 = y * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1337,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1338,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1339,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1340,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,4,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1343,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1347,"        log(x, lns);",0,0,0,0,2,0,3,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1348,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1349,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1352,        double tmp1 = lna * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1353,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1354,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1355,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1358,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1361,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1362,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1364,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1365,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1366,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1367,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1368,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1369,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1371,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1373,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1628,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1630,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1631,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1632,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1633,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1636,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1638,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1648,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1650,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1651,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1652,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1653,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1654,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1656,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1667,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1671,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1672,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1673,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1674,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1677,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1678,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1679,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1680,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1683,        final double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1684,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1685,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1686,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1712,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1713,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1715,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1716,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1717,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1718,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1719,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1721,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1722,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1723,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1724,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1725,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1769,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1772,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1773,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1774,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1775,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1778,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1780,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1791,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1792,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1794,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1795,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1796,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1798,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1811,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1815,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1816,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1817,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1818,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1821,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1822,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1823,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1824,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1827,        double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1828,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1829,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1830,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1855,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1856,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1859,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1860,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1861,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1862,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1863,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1865,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1866,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1867,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1868,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1869,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1874,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1875,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1879,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1881,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1882,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1883,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1884,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1885,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1887,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1888,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1889,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1890,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1891,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1896,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1897,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1899,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1901,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1916,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1919,        temp = est * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1920,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1921,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1923,        temp = cosa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1924,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1925,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1929,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1932,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1935,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1936,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1937,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1940,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1943,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1960,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1964,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1965,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1968,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1969,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1975,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1976,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1978,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1985,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1986,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1990,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1991,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1993,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1994,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1996,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1997,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1998,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1999,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2001,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2002,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2009,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2011,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2014,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2015,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2017,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2018,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2023,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2025,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2029,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2030,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2031,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2032,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2033,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2036,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2038,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2040,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2043,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2045,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2049,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2050,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2052,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2053,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2054,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2056,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2068,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2071,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2072,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2073,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2076,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2077,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2079,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2082,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2083,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2084,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2085,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2087,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2088,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2090,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2091,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2095,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2097,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2101,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2103,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2104,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2109,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2111,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2115,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2117,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2118,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2119,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2122,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2126,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2129,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2131,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2135,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2136,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2137,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2139,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2140,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2141,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2144,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2148,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2151,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2153,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,2,2,0,1,2,1,0,0,0,5,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,3,5,0,3,8,1,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2160,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2161,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2164,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2165,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2166,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2175,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2176,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2178,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2181,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2182,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2183,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2184,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2188,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2189,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2190,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2191,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2193,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2197,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2201,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2205,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2207,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2208,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2209,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2210,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2215,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2221,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2222,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2223,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2225,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2226,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2227,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2228,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2230,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2231,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2232,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2233,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2235,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2236,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2241,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2242,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2243,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2244,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2245,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2248,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2249,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2252,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2254,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2256,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2258,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2260,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2262,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2272,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2275,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2276,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2277,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2281,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2285,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2286,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2290,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2291,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2292,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2293,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2294,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2295,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2300,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2306,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2307,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2308,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2310,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2311,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2312,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2313,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2315,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2316,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2317,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2318,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2320,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2321,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2326,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2327,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2328,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2329,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2330,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2336,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2338,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2340,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2342,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2344,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2346,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2356,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2357,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2360,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2361,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2362,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2363,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2367,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2368,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2369,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2370,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2372,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2376,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2380,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2381,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2385,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2386,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2387,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2388,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2389,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2390,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2395,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2401,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2402,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2403,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2405,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2406,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2407,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2408,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2410,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2411,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2412,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2413,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2415,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2416,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2421,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2422,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2423,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2424,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2425,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2428,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2430,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2431,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2433,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2434,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2435,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2437,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2438,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2439,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2440,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2444,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2445,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2447,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2450,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2451,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2454,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2463,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2473,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2476,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2478,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2479,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2480,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2483,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,3,0,1,6,1,0,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2488,        if (xa < 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2491,            double temp = 1.0/xa;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,4,4,0,3,8,1,0,0,3,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2496,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2498,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2499,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2500,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2503,        temp = xa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2504,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2505,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2506,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2507,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2510,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,1,0,0,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2515,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2516,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2517,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2519,            double za = 1.0 + temp2;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2520,            double zb = -(za - 1.0 - temp2);,3,1,0,1,2,1,0,0,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2522,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2523,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2524,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2526,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2527,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2529,            temp = ya * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2530,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2531,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2533,            temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2534,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2535,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2540,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2541,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2545,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2546,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2549,        double epsA2 = epsA*epsA;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2560,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2561,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2562,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2563,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2564,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2565,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2566,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2569,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2571,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2572,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2573,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2576,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2582,        double za = EIGHTHES[idx] + ya;,2,1,1,0,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2583,        double zb = -(za - EIGHTHES[idx] - ya);,3,1,1,1,4,1,0,0,1,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2584,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2585,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2586,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2588,        result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2589,        resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2591,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2593,            final double pia = 1.5707963267948966*2.0;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2594,            final double pib = 6.123233995736766E-17*2.0;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2596,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2597,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2598,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2600,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2601,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2605,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2606,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2609,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2619,        if (x !=x || y != y) {,4,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2620,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2623,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2624,            double result = x*y;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2625,            double invx = 1.0/x;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2626,            double invy = 1.0/y;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2628,            if (invx == 0.0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2629,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2632,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2636,            if (result != result) { // y must be infinite,2,1,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2637,                return x/y;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2640,            if (x < 0.0 || invx < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2641,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2642,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2644,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2647,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2651,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2652,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2653,                return Math.PI/4.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2656,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2657,                return Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2660,            return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2663,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2664,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2665,                return -Math.PI/4.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2668,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2669,                return -Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2672,            return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2675,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2676,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2677,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2680,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2681,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2685,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2687,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2688,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2691,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2692,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2696,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2697,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2698,                return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2701,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2702,                return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,2,3,0,1,3,1,0,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2707,            x *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2708,            y *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2712,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2713,        final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2714,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2717,        final double r = y/x;,3,1,0,0,0,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2718,        temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2719,        double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2720,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2724,        temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2725,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2726,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2729,"        double result = atan(ra, rb, x < 0);",2,1,0,0,2,1,3,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2731,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2739,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2740,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2743,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2744,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2747,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2748,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2751,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2752,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2758,      double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2759,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2760,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2763,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2764,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2767,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2768,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2770,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2771,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2773,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2774,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2775,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2779,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2780,      temp = y * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2781,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2782,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2788,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2791,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2792,      temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2793,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2794,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2799,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2800,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2801,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2803,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2811,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2812,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2815,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2816,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2819,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2820,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2823,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2827,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2828,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2834,      double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2835,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2836,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2839,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2840,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2843,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2844,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2846,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2847,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2849,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2850,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2851,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2854,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2855,      temp = y * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2856,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2857,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2863,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2864,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2865,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2868,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2869,      temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2870,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2871,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2876,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2877,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2878,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2880,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2889,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2891,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2893,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2894,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2895,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2899,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2900,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2901,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2905,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2907,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2911,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2921,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2922,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2923,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2924,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2925,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2927,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2932,      final double xs = x / (p2*p2*p2); ,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2933,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2934,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2937,      double temp = est * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2938,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2939,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2941,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2942,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2943,      temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2944,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2945,      zb += (za - temp2);,3,1,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2946,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2948,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2949,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2951,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2952,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2953,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2955,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2958,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2960,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2961,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2964,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2974,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2975,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2977,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2978,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2979,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2991,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2992,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2994,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2995,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2996,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3007,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3025,        return (x < 0.0f) ? -x : x;,3,1,0,1,2,1,0,0,1,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3067,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3068,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3075,        long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3076,        long sign     = bits & 0x8000000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3077,        long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3078,        long mantissa = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3080,        if (d * (direction - d) >= 0) {,3,3,0,2,5,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3082,            if (mantissa == 0x000fffffffffffffL) {,1,1,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3083,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3086,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3091,            if (mantissa == 0L) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3092,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3096,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3110,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3111,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,3,0,1,3,1,0,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3115,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3118,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3119,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3120,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3123,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3124,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3127,        return (double) y;,1,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3137,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3138,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3141,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3142,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3143,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3146,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3148,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3149,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3152,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3160,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3161,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3163,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3164,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3166,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3167,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3171,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3172,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3180,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3188,        return Math.round(x);,0,0,0,1,2,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3197,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3206,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3233,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3242,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,73,        for (int i = 0; i < value; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,74,            incrementCount();,0,0,0,1,2,0,1,0,1,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,85,            throw new MaxCountExceededException(maximalCount);,1,0,0,1,2,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,43,"        this(null, max);",1,0,0,0,2,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,53,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,57,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,64,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,58,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,59,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,60,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,61,        arguments = ArgUtils.flatten(args);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,69,"        this(null, general, args);",2,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,80,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,0,2,1,6,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,86,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,92,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1806,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1808,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1810,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,88,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,102,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",2,0,0,0,2,1,4,0,0,4,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,106,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,0,2,1,3,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,136,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,138,"            ret = addAndCheck(b, a, pattern);",1,0,0,0,2,0,4,0,2,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,142,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,143,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,145,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,146,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,0,2,1,5,0,0,3,68,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,152,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,159,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,160,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,162,"                    throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,0,2,1,5,0,0,3,68,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,166,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,195,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,196,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,197,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,199,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,200,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,203,        if (k > n / 2),2,2,0,1,2,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,204,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,211,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,212,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,214,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,215,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,216,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,217,                i++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,219,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,222,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,223,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,230,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,231,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,232,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,234,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,238,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,239,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,240,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,241,"                result = mulAndCheck(result / (j / d), i / d);",6,3,0,1,4,0,1,0,2,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,242,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,245,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,271,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,272,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,273,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,275,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,276,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,278,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,279,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,281,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,282,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,285,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,286,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,287,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,290,        return FastMath.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,312,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,313,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,314,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,316,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,317,            return FastMath.log(n);,0,0,0,1,2,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,324,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,325,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,332,        if (n < 1030) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,336,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,337,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,343,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,346,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,347,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,351,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,352,            logSum -= FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,355,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,366,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,367,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,371,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,372,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,376,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,389,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,390,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,391,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,392,          return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,394,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,523,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,524,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,526,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,527,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,529,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,530,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,531,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,534,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,548,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,549,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,551,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,552,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,554,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,556,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,559,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,585,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,586,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,590,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,591,            throw new ArithmeticException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,594,        return FACTORIALS[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,618,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,619,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,623,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,624,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,643,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,644,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,648,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,649,            return FastMath.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,651,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,652,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,653,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,655,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,688,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,689,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,690,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,696,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,703,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,704,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,706,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,707,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,710,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,713,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,714,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,715,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,717,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,718,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,730,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,731,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,734,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,735,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,737,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,740,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,743,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,744,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,777,        long u = p;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,778,        long v = q;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,779,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,6,3,0,2,7,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,781,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,785,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,792,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,793,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,795,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,796,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,799,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,802,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,803,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,804,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,806,        if (k == 63) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,807,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,819,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,820,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,823,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,824,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,826,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,829,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,832,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,833,        return -u * (1L << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,843,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,854,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,865,        return (x >= ZB) ? PB : NB;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,877,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,878,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,880,        return (x >= 0.0) ? 1.0 : -1.0;,1,1,0,1,2,1,0,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,891,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,892,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,1,1,0,1,2,1,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,904,        return (x >= 0) ? 1 : -1;,1,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,914,        return (x >= 0L) ? 1L : -1L;,1,1,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,925,        return (x >= ZS) ? PS : NS;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,952,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,953,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,956,        if (lcm == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,957,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,961,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,987,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,988,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,991,        if (lcm == Long.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,992,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,996,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1016,        return FastMath.log(x)/FastMath.log(base);,0,1,0,1,4,1,6,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1030,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1032,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,2,0,1,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1034,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1049,"        String msg = ""overflow: multiply"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1050,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1052,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1054,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1055,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1057,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1058,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1060,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1062,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1064,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1065,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1067,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1072,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1074,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1079,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1080,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1082,                    throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1086,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1089,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1104,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1105,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1109,        final long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1110,        final long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1111,        final long rest     = bits & 0x800fffffffffffffL;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1114,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,4,3,0,4,8,3,0,0,1,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1115,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1165,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1166,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1169,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1170,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1173,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1174,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1175,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1176,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1177,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1178,                 throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1181,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1182,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1185,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,1,2,0,0,5,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1188,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1189,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1190,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1192,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1195,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1225,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1229,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1230,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1231,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1233,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1264,        float sign = indicator(x);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,2,3,0,0,6,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1283,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1285,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1290,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1293,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1295,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1300,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1303,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1304,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1305,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1307,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1309,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1312,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1313,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1314,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1315,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1316,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1321,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1323,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1326,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1330,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1331,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1332,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1334,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1336,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1339,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,2,0,1,2,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1345,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1347,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1359,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1389,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1390,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,2,2,0,1,4,1,0,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1407,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1408,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,2,2,0,1,4,1,0,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,2,2,0,1,4,1,0,0,1,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,2,0,1,4,1,0,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1464,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1478,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1479,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",2,0,0,0,2,1,4,0,0,4,101,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1482,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1497,"        String msg = ""overflow: subtract"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1498,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1499,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1500,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1502,                throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,0,2,0,2,0,3,4,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1508,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1521,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1522,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1527,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1528,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1529,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1530,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1531,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1533,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1534,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1537,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1551,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1552,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1557,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1558,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1559,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1560,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1561,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1563,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1564,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1567,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1581,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1582,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1587,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1588,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1589,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1590,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1591,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1593,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1594,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1597,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1611,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1612,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1617,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1618,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1619,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1620,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1621,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1623,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1624,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1627,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1641,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1642,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1647,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1661,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1662,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1667,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1668,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1669,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1670,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1671,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1673,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1674,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1677,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1692,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1697,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1698,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1699,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1700,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1701,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1703,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1704,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1707,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1719,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1720,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1721,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1723,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1734,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1735,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1736,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1738,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1749,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1750,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1751,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1752,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1754,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1765,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1766,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1767,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1768,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1770,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1781,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1782,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1785,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1796,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1797,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1800,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1822,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1823,        boolean ok = true;,1,0,0,0,0,1,0,0,1,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1825,        int max = val.length;,3,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1826,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1829,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1830,                    if (val[i] <= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1831,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1834,                    if (val[i] < previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1835,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1840,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1841,                    if (val[i] >= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1842,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1845,                    if (val[i] > previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1846,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1852,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1855,            if (!ok) {,1,0,0,1,3,1,0,0,1,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",4,0,1,0,4,2,0,1,1,6,75,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1858,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1860,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1870,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1932,    double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1933,    double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1934,    double s1=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1935,    double s2=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1936,    double s3=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1937,    double x1max = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1938,    double x3max = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1939,    double floatn = (double)v.length;,3,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1940,    double agiant = rgiant/floatn;,3,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1941,    for (int i=0;i<v.length;i++) {,5,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1942,        double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1943,        if (xabs<rdwarf || xabs>agiant) {,4,3,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1944,            if (xabs>rdwarf) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1945,                if (xabs>x1max) {,2,1,0,1,3,1,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1946,                    double r=x1max/xabs;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1947,                    s1=1.0+s1*r*r;,4,2,0,0,0,0,0,0,1,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1948,                    x1max=xabs;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1949,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1950,                    double r=xabs/x1max;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1951,                    s1+=r*r;,3,1,0,0,0,0,0,0,1,3,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1952,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1954,                if (xabs>x3max) {,2,1,0,1,3,1,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1955,                 double r=x3max/xabs;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1956,                 s3=1.0+s3*r*r;,4,2,0,0,0,0,0,0,1,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1957,                 x3max=xabs;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1958,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1959,                    if (xabs!=0.0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1960,                        double r=xabs/x3max;,3,1,0,0,0,1,0,0,0,3,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1961,                        s3+=r*r;,3,1,0,0,0,0,0,0,1,3,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1962,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1966,         s2+=xabs*xabs;,3,1,0,0,0,0,0,0,1,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1970,    if (s1!=0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,6,4,0,2,4,0,2,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1973,        if (s2==0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1974,            norm = x3max*Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1976,            if (s2>=x3max) {,2,1,0,1,3,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,6,5,0,3,8,0,2,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,6,4,0,3,8,0,2,0,1,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1983,    return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,91,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,92,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,93,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,94,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,101,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,107,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,115,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,121,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,50,"        super(specific, general, wrong, arguments);",4,0,0,0,2,1,0,0,1,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,51,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,64,"        super(general, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,65,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,72,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,61,                                           Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,62,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,63,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,64,        arguments = ArgUtils.flatten(args);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,72,"        this(null, general, args);",2,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,0,2,1,6,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,89,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,57,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,59,"        this.arguments = new Object[] { """" };",1,0,0,0,4,2,0,1,2,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,83,"    public MathException(Localizable pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,84,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,96,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,128,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,129,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,141,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,150,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,159,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,170,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,173,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,179,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,193,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,203,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,204,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,205,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,207,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,208,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,209,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,35,        setSeed((long) seed);,1,0,0,2,4,1,1,0,1,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,36,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,41,        final long prime = 4294967291l;,1,0,0,0,0,2,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,43,        long combined = 0l;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,44,        for (int s : seed) {,2,0,0,1,3,2,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,45,            combined = combined * prime + s;,4,2,0,0,0,0,0,0,1,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,47,        setSeed(combined);,0,0,0,1,2,0,2,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",3,0,0,0,2,1,0,0,1,4,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,48,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",3,0,0,1,4,2,0,1,2,6,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,60,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,73,"        this(argument, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,86,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,87,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,100,"        this(argument, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,113,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,114,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,125,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,126,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,137,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,138,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",4,0,0,1,4,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,168,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,169,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",4,0,0,1,4,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,199,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,200,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,209,        return argument.clone();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,195,                        return (o2 == null) ? 0 : 1;,1,1,0,1,2,1,0,0,0,5,28,14,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,197,                        return -1;,0,0,0,0,0,1,0,0,1,2,10,13,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,82,        optimizer.setConvergenceChecker(checker);,0,0,0,1,2,0,3,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,89,        return optimizer.getConvergenceChecker();,0,0,0,1,2,1,2,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,94,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,99,        return totalEvaluations;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,104,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,105,        optimizer.setMaxEvaluations(maxEvaluations);,0,0,0,1,2,0,3,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,135,        if (optima == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,136,            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,2,0,0,1,2,2,0,1,1,6,78,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,138,        return optima.clone();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,163,            } catch (FunctionEvaluationException fee) {,1,0,0,1,4,1,0,1,0,5,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,164,                optima[i] = null;,0,0,1,0,2,0,0,0,1,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,165,            } catch (ConvergenceException ce) {,1,0,0,1,4,1,0,1,0,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,166,                optima[i] = null;,0,0,1,0,2,0,0,0,1,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,177,"            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,",2,0,0,0,1,2,0,1,1,5,84,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,107,        } catch (MaxCountExceededException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,108,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,2,2,1,1,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,121,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,124,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,151,        checker = c;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,37,        this(null);,0,0,0,1,2,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,45,"        this(specific,",1,0,0,0,1,1,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,57,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,78,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",2,0,0,0,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,81,            throw new NotStrictlyPositiveException(abs);,1,0,0,1,2,2,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,105,            a = hi;,2,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,106,            b = lo;,2,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,116,            fx = -fx;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,166,                                d = -tol1;,2,0,0,0,0,0,0,0,2,2,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,181,                        e = b - x;,3,1,0,0,0,0,0,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,201,                    fu = -fu;,2,0,0,0,0,0,0,0,2,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,242,"                    if (checker.converged(iter, previous, current)) {",0,0,0,0,5,1,5,0,0,3,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,243,                        return current;,1,0,0,0,0,1,0,0,0,2,15,12,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,41,        super(LocalizedFormats.NULL_NOT_ALLOWED);,2,0,0,1,2,1,0,0,1,5,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,48,"        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);",3,0,0,0,2,1,0,0,1,4,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,37,"        super(LocalizedFormats.EVALUATIONS, max);",3,0,0,0,2,1,0,0,1,4,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,52,"        this(null, wrong, min, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,67,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,73,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,74,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,81,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,88,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.00228,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,0.00228,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);",4,0,0,0,2,1,0,0,1,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,                                           Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,        arguments = ArgUtils.flatten(args);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);",2,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,0,2,1,6,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1810,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,102,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",2,0,0,0,2,1,4,0,0,4,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,0,2,1,3,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,136,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,138,"            ret = addAndCheck(b, a, pattern);",1,0,0,0,2,0,4,0,2,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,142,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,143,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,0,2,1,5,0,0,3,68,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,152,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,160,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,162,"                    throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,0,2,1,5,0,0,3,68,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,166,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,195,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,196,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,197,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,199,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,200,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,203,        if (k > n / 2),2,2,0,1,2,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,204,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,211,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,212,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,214,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,215,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,216,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,217,                i++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,219,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,222,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,223,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,230,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,231,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,232,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,234,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,238,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,239,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,240,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,241,"                result = mulAndCheck(result / (j / d), i / d);",6,3,0,1,4,0,1,0,2,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,242,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,245,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,271,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,272,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,273,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,275,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,276,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,278,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,279,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,281,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,282,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,285,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,286,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,287,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,290,        return FastMath.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,312,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,313,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,314,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,316,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,317,            return FastMath.log(n);,0,0,0,1,2,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,324,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,325,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,332,        if (n < 1030) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,336,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,337,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,343,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,346,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,347,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,351,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,352,            logSum -= FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,355,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,366,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,367,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,371,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,372,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,376,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,389,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,390,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,391,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,392,          return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,394,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,2,3,0,2,6,1,6,0,0,6,54,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,481,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,482,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,485,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,486,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,488,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,489,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,523,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,524,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,526,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,527,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,529,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,530,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,531,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,534,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,548,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,549,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,551,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,552,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,554,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,556,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,559,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,585,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,586,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,590,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,591,            throw new ArithmeticException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,594,        return FACTORIALS[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,618,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,619,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,623,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,624,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,643,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,644,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,648,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,649,            return FastMath.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,651,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,652,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,653,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,655,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,688,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,689,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,690,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,696,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,703,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,704,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,706,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,707,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,710,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,713,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,714,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,715,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,717,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,718,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,730,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,731,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,734,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,735,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,737,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,740,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,743,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,744,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,777,        long u = p;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,778,        long v = q;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,779,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,6,3,0,2,7,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,781,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,785,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,792,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,793,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,795,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,796,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,799,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,802,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,803,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,804,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,806,        if (k == 63) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,807,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,819,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,820,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,823,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,824,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,826,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,829,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,832,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,833,        return -u * (1L << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,843,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,854,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,865,        return (x >= ZB) ? PB : NB;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,877,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,878,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,880,        return (x >= 0.0) ? 1.0 : -1.0;,1,1,0,1,2,1,0,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,891,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,892,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,1,1,0,1,2,1,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,904,        return (x >= 0) ? 1 : -1;,1,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,914,        return (x >= 0L) ? 1L : -1L;,1,1,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,925,        return (x >= ZS) ? PS : NS;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,952,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,953,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,956,        if (lcm == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,957,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,961,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,987,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,988,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,991,        if (lcm == Long.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,992,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,996,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1016,        return FastMath.log(x)/FastMath.log(base);,0,1,0,1,4,1,6,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1030,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1032,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,2,0,1,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1034,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1049,"        String msg = ""overflow: multiply"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1050,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1052,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1054,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1055,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1057,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1058,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1060,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1062,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1064,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1065,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1067,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1072,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1074,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1079,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1080,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1082,                    throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1086,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1089,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1104,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1105,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1109,        final long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1110,        final long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1111,        final long rest     = bits & 0x800fffffffffffffL;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1114,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,4,3,0,4,8,3,0,0,1,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1115,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1165,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1166,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1169,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1170,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1173,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1174,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1175,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1176,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1177,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1178,                 throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1181,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1182,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1185,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,1,2,0,0,5,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1188,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1189,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1190,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1192,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1195,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1225,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1229,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1230,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1231,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1233,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1264,        float sign = indicator(x);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,2,3,0,0,6,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1283,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1285,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1290,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1293,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1295,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1300,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1303,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1304,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1305,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1307,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1309,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1312,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1313,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1314,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1315,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1316,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1321,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1323,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1326,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1330,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1331,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1332,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1334,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1336,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1339,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,2,0,1,2,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1345,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1347,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1359,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1389,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1390,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,2,2,0,1,4,1,0,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1407,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1408,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,2,2,0,1,4,1,0,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,2,2,0,1,4,1,0,0,1,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,2,0,1,4,1,0,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1464,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1478,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1479,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",2,0,0,0,2,1,4,0,0,4,101,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1482,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1497,"        String msg = ""overflow: subtract"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1498,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1499,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1500,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1502,                throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,0,2,0,2,0,3,4,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1508,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1521,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1522,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1527,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1528,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1529,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1530,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1531,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1533,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1534,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1537,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1551,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1552,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1557,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1558,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1559,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1560,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1561,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1563,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1564,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1567,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1581,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1582,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1587,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1588,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1589,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1590,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1591,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1593,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1594,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1597,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1611,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1612,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1617,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1618,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1619,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1620,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1621,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1623,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1624,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1627,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1641,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1642,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1647,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1661,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1662,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1667,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1668,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1669,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1670,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1671,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1673,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1674,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1677,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1692,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1697,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1698,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1699,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1700,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1701,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1703,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1704,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1707,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1719,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1720,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1721,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1723,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1734,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1735,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1736,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1738,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1749,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1750,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1751,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1752,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1754,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1765,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1766,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1767,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1768,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1770,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1781,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1782,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1785,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1796,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1797,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1800,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1822,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1823,        boolean ok = true;,1,0,0,0,0,1,0,0,1,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1825,        int max = val.length;,3,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1826,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1829,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1830,                    if (val[i] <= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1831,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1834,                    if (val[i] < previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1835,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1840,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1841,                    if (val[i] >= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1842,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1845,                    if (val[i] > previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1846,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1852,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1855,            if (!ok) {,1,0,0,1,3,1,0,0,1,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",4,0,1,0,4,2,0,1,1,6,75,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1858,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1860,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1870,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1932,    double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1933,    double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1934,    double s1=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1935,    double s2=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1936,    double s3=0.0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1937,    double x1max = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1938,    double x3max = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1939,    double floatn = (double)v.length;,3,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1940,    double agiant = rgiant/floatn;,3,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1941,    for (int i=0;i<v.length;i++) {,5,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1942,        double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1943,        if (xabs<rdwarf || xabs>agiant) {,4,3,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1944,            if (xabs>rdwarf) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1945,                if (xabs>x1max) {,2,1,0,1,3,1,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1946,                    double r=x1max/xabs;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1947,                    s1=1.0+s1*r*r;,4,2,0,0,0,0,0,0,1,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1948,                    x1max=xabs;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1949,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1950,                    double r=xabs/x1max;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1951,                    s1+=r*r;,3,1,0,0,0,0,0,0,1,3,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1952,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1954,                if (xabs>x3max) {,2,1,0,1,3,1,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1955,                 double r=x3max/xabs;,3,1,0,0,0,1,0,0,0,3,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1956,                 s3=1.0+s3*r*r;,4,2,0,0,0,0,0,0,1,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1957,                 x3max=xabs;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1958,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1959,                    if (xabs!=0.0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1960,                        double r=xabs/x3max;,3,1,0,0,0,1,0,0,0,3,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1961,                        s3+=r*r;,3,1,0,0,0,0,0,0,1,3,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1962,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1966,         s2+=xabs*xabs;,3,1,0,0,0,0,0,0,1,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1970,    if (s1!=0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,6,4,0,2,4,0,2,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1973,        if (s2==0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1974,            norm = x3max*Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1976,            if (s2>=x3max) {,2,1,0,1,3,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,6,5,0,3,8,0,2,0,1,6,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,6,4,0,3,8,0,2,0,1,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1983,    return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,204,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,205,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,53,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,56,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,65,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,85,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,98,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,108,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,111,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,114,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,117,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,120,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,123,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,126,    private static long RECIP_2PI[] = new long[] {,1,0,0,0,5,5,0,0,2,4,46,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,147,    private static long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,5,0,0,2,4,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,127,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,162,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,163,        for (i = 1; i < 20; i++) {,3,1,0,1,3,1,0,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,164,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,167,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,168,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,171,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,172,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,173,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,174,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,176,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,178,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,179,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,180,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,185,        for (i = 0; i < 1025; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,186,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,187,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,188,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,192,        for (i = 0; i < 1024; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,193,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,194,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,198,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,199,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,212,        return Math.acos(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,220,        return Math.asin(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,228,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,236,        return Math.cbrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,244,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,253,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,254,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,255,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,256,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,260,        if (a > 0.3) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,261,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,2,2,0,2,6,0,5,0,2,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,263,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,264,            if (a > 0.05) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,265,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,7,15,0,5,10,0,0,0,1,5,93,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,267,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,5,9,0,3,6,0,0,0,1,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,271,        return negative ? -absSinh : absSinh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,281,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,282,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,283,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,284,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,288,        if (a > 0.074) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,289,            final double twoA = 2 * a;,2,1,0,0,0,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,290,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,1,2,0,2,6,0,6,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,291,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,292,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,293,            if (a > 0.016) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,294,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,7,16,0,5,10,0,0,0,1,5,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,296,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,5,10,0,3,6,0,0,0,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,300,        return negative ? -absTanh : absTanh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,309,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,318,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,319,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,320,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,321,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,325,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,326,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,328,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,329,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,330,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,331,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,332,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,333,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,334,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,336,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,340,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,350,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,351,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,352,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,353,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,357,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,358,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,360,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,361,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,362,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,10,25,0,9,18,0,0,0,1,5,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,363,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,364,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,8,19,0,7,14,0,0,0,1,5,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,365,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,366,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,6,13,0,5,10,0,0,0,1,5,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,368,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,4,7,0,3,6,0,0,0,1,5,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,372,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,382,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,4,2,0,3,10,1,3,0,1,7,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,390,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,397,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,421,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,440,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,441,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,443,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,444,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,447,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,449,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,450,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,451,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,452,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,454,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,457,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,459,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,460,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,461,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,462,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,464,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,467,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,469,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,470,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,472,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,474,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,476,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,477,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,480,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,481,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,488,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,489,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,490,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,496,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,505,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,506,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,507,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,508,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,509,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,516,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,517,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,523,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,525,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,526,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,528,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,531,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,533,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,534,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,537,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,545,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,546,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,549,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,552,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,553,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,554,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,555,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,557,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,558,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,559,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,560,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,567,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,569,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,570,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,571,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,575,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,576,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,1,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,577,            double tempB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,1,0,0,0,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,579,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,580,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,581,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,583,            temp = tempA * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,584,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,585,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,587,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,592,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,593,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,594,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,595,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,596,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,597,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,599,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,600,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,601,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,602,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,604,        temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,605,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,606,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,607,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,610,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,612,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,613,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,614,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,616,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,617,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,618,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,620,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,621,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,622,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,626,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,627,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,628,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,630,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,632,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,633,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,635,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,637,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,638,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,640,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,642,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,643,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,645,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,647,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,648,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,649,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,650,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,651,            temp = ratio * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,652,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,653,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,655,            temp = denom * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,656,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,657,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,659,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,670,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,671,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,674,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,675,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,678,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,689,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,690,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,691,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,692,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,693,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,694,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,696,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,697,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,698,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,699,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,701,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,702,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,704,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,705,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,706,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,709,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,710,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,711,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,714,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,723,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,724,            final double a = d * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,725,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,726,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,727,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,728,            final double a = d * 9.31322574615478515625E-10;,2,1,0,0,0,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,729,            split[0] = (d + a - d) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,730,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,732,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,739,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,740,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,742,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,743,            double z = c * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,744,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,745,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,746,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,747,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,748,            a[0] = (c + z - c) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,749,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,751,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,759,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,760,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,763,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,764,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,772,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,773,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,775,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,776,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,797,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,798,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,800,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,801,            in[0] = in[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,802,            in[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,805,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,806,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,808,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,809,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,813,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,815,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,817,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,820,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,822,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,824,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,832,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,833,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,834,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,837,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,838,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,839,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,841,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,842,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,845,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,846,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,848,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,849,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,850,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,851,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,852,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,853,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,856,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,857,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,858,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,860,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,861,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,862,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,863,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,864,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,865,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,868,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,869,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,870,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,872,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,873,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,874,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,875,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,876,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,877,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,878,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,887,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,888,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,889,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,898,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,899,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,901,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,903,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,904,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,905,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,906,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,909,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,910,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,912,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,915,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,916,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,917,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,919,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,922,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,933,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,943,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,946,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,947,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,948,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,949,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,952,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,957,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,958,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,959,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,962,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,966,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,968,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,970,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,972,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,973,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,976,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,980,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,981,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,982,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,983,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,988,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,989,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,994,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,995,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,996,                double tmp = xa * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,997,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,998,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,999,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1000,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1002,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1003,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1005,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1007,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1008,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1010,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1011,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1012,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1015,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1016,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1018,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1019,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1020,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1024,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1025,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1027,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1028,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1029,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1031,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1032,                    hiPrec[0] = ya;,1,0,1,0,2,0,0,0,1,4,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1033,                    hiPrec[1] = yb;,1,0,1,0,2,0,0,0,1,4,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1036,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1041,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,2,1,2,10,2,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1052,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,3,4,0,2,8,2,0,0,0,5,103,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1054,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1055,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1057,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1059,            double tmp = epsilon * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1060,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1061,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1062,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1063,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1066,            double numer = (double)(bits & 0x3ffffffffffL);,2,1,0,1,4,2,0,0,0,5,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1067,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,2,2,0,1,2,1,0,0,0,5,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1068,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1069,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1072,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1073,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1075,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1077,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1078,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1080,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1081,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1082,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1085,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1086,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1088,                tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1089,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1090,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1094,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1095,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1103,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1104,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1105,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1108,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1109,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1110,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1111,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1112,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1113,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1114,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1131,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1132,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1133,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1134,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1135,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1136,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1138,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1139,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1140,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1141,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1143,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1144,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1145,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1146,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1148,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1149,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1150,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1151,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1153,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1154,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1155,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1156,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1158,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1159,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1160,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1163,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1171,        double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1172,        double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1174,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1175,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1177,"            log(xpa, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1181,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1183,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1184,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1186,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1190,        double y = x * 0.333333333333333 - 0.5;,2,2,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1191,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1192,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1194,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1202,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1204,"        log(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1206,        final double tmp = hiPrec[0] * 1073741824.0;,1,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1207,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1208,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1210,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1211,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1213,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1224,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1226,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1227,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1231,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1232,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1234,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1236,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1240,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1241,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1242,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1244,                if (y < 0 && y == (long)y),3,3,0,2,4,2,0,0,0,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1245,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1248,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1249,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1251,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1255,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1258,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1259,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1260,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1262,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1266,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1267,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1268,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1270,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1274,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1275,            if (x*x < 1.0) {,2,2,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1276,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1278,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1283,        double tmp1 = y * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1284,        final double ya = y + tmp1 - tmp1;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1285,        final double yb = y - ya;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1288,"        log(x, lns);",0,0,0,0,2,0,3,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1289,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1290,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1293,        tmp1 = lna * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1294,        final double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1295,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1296,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1299,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1300,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1302,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1303,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1305,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1306,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1307,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1308,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1309,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1310,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1312,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1314,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1337,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1338,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1339,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1340,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1342,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1345,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1346,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1347,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1348,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1349,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1350,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1351,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1352,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1355,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1361,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1362,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1364,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1365,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1366,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1367,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1368,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1369,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1370,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1373,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1374,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1375,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1377,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1387,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1388,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1389,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1390,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1391,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1392,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1394,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1395,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1396,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1398,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1399,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1402,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1403,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1405,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1406,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1407,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1410,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1411,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1414,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1415,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1416,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1419,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1430,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1431,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1432,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1433,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1434,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1435,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1437,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1438,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1439,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1441,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1442,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1445,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1446,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1448,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1449,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1450,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1453,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1454,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1457,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1458,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1459,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1462,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1468,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1471,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1472,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1474,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1475,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1476,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1478,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1479,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1480,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1484,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1485,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1486,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1487,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1488,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1489,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1491,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1493,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1494,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1495,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1496,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1499,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1500,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1501,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1504,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1505,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1506,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1507,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1508,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1509,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1510,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1512,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1513,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1514,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1515,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1516,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1517,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1518,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1519,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1522,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1523,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1524,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1525,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1526,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1529,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1530,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1531,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1532,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1533,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1534,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1535,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1540,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1541,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1542,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1543,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1545,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1546,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1548,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1550,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1551,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1553,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1555,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1556,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1559,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1569,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1571,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1572,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1573,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1574,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1577,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1579,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1589,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1591,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1592,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1593,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1594,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1595,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1597,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1608,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1609,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1612,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1613,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1614,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1615,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1618,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1619,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1620,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1621,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1624,        final double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1625,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1626,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1627,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1653,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1654,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1656,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1657,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1658,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1659,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1660,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1662,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1663,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1664,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1665,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1666,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1668,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1683,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1710,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1711,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1713,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1714,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1715,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1716,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1719,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1721,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1732,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1733,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1735,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1736,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1737,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1739,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1752,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1753,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1756,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1757,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1758,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1759,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1762,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1763,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1764,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1765,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1768,        double temp = sinEpsA * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1769,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1770,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1771,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1796,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1797,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1800,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1801,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1802,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1803,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1804,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1806,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1807,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1808,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1809,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1810,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1812,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1813,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1815,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1816,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1820,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1822,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1823,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1824,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1825,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1826,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1828,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1829,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1830,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1831,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1832,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1834,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1835,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1837,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1838,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1840,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1842,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1843,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1857,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1860,        temp = est * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1861,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1862,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1864,        temp = cosa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1865,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1866,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1869,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1870,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1871,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1873,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1876,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1877,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1878,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1881,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1884,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1901,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1902,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1905,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1906,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1909,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1910,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1916,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1917,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1919,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1920,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1921,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1922,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1923,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1925,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1926,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1927,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1931,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1932,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1934,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1935,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1937,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1938,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1939,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1940,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1942,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1943,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1945,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1946,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1947,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1950,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1952,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1955,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1956,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1958,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1959,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1961,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1964,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1966,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1970,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1971,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1972,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1973,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1974,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1977,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1979,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1980,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1981,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1982,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1984,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1986,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1990,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1991,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1993,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1994,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1995,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1997,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2009,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2012,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2013,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2014,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2017,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2018,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2020,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2021,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2023,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2024,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2025,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2026,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2028,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2029,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2031,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2032,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2033,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2036,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2038,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2041,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2042,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2044,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2045,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2047,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2050,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2052,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2056,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2057,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2058,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2059,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2060,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2063,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2065,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2066,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2067,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2068,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2070,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2072,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2076,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2077,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2078,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2079,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2080,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2081,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2082,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2085,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2087,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2088,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2089,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2090,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2092,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2094,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2098,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,2,2,0,1,2,1,0,0,0,5,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2099,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,3,5,0,3,8,1,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2101,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2102,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2105,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2106,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2107,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2116,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2117,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2119,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2122,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2123,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2124,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2125,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2129,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2130,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2131,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2132,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2134,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2137,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2138,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2142,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2146,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2147,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2148,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2149,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2150,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2151,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2156,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2162,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2163,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2164,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2166,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2167,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2168,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2169,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2171,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2172,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2173,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2174,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2176,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2177,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2182,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2183,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2184,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2185,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2186,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2189,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2190,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2193,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2195,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2197,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2199,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2201,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2203,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2213,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2216,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2217,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2218,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2221,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2222,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2226,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2227,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2231,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2232,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2233,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2234,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2235,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2236,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2241,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2247,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2248,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2249,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2251,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2252,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2253,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2254,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2256,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2257,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2258,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2259,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2261,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2262,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2267,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2268,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2269,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2270,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2271,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2277,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2279,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2281,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2283,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2285,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2287,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2297,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2298,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2301,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2302,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2303,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2304,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2308,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2309,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2310,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2311,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2313,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2316,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2317,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2321,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2322,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2326,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2327,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2328,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2329,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2330,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2331,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2336,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2342,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2343,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2344,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2346,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2347,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2348,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2349,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2351,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2352,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2353,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2354,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2356,                if (remA > 0.0),1,1,0,1,2,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2357,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2362,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2363,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2364,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2365,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2366,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2369,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2371,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2372,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2374,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2375,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2376,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2378,            xa = a;,2,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2379,            xb = b;,2,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2380,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2381,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2385,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2386,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2388,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2391,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2392,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2395,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2404,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2414,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2415,        boolean recip = false;,1,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2418,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2420,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2421,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2422,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2425,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2426,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,3,0,1,6,1,0,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2430,        if (xa < 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2431,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2433,            double temp = 1.0/xa;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2434,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,4,4,0,3,8,1,0,0,3,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2436,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2437,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2438,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2440,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2441,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2442,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2445,        temp = xa * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2446,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2447,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2448,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2449,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2452,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2455,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,1,0,0,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2457,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2458,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2459,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2460,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2461,            double za = 1.0 + temp2;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2462,            double zb = -(za - 1.0 - temp2);,3,1,0,1,2,1,0,0,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2463,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2464,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2465,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2466,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2468,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2469,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2471,            temp = ya * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2472,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2473,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2475,            temp = za * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2476,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2477,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2480,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2482,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2483,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2487,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2488,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2491,        double epsA2 = epsA*epsA;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2502,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2503,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2504,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2505,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2506,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2507,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2508,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2511,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2513,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2514,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2515,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2518,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2522,        if (recip) {,1,0,0,1,3,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2523,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2524,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2526,            double za = pi2a - ya;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2527,            double zb = -(za - pi2a + ya);,4,2,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2528,            temp = za - EIGHTHES[idx];,2,1,1,0,2,0,0,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2529,            zb += -(temp - za + EIGHTHES[idx]);,3,2,1,1,4,0,0,0,2,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2530,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2532,            zb += pi2b - yb;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2533,            ya = za;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2534,            yb = zb;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2536,            result = yb + ya;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2537,            resultb = -(result - yb - ya);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2538,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2540,            double za = EIGHTHES[idx] + ya;,2,1,1,0,2,1,0,0,0,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2541,            double zb = -(za - EIGHTHES[idx] - ya);,3,1,1,1,4,1,0,0,1,7,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2542,            temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2543,            zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2544,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2546,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2547,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2550,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2552,            final double pia = 1.5707963267948966*2.0;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2553,            final double pib = 6.123233995736766E-17*2.0;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2555,            final double za = pia - result;,3,1,0,0,0,2,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2556,            double zb = -(za - pia + result);,4,2,0,1,2,1,0,0,1,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2557,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2559,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2560,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2564,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2565,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2568,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2578,        if (x !=x || y != y) {,4,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2579,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2582,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2583,            double result = x*y;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2584,            double invx = 1.0/x;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2585,            double invy = 1.0/y;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2587,            if (invx == 0.0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2588,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2591,            if (result != result) { // y must be infinite,2,1,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2592,                return x/y;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2595,            if (x < 0.0 || invx < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2596,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2597,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2599,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2602,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2606,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2607,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2608,                return Math.PI/4.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2611,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2612,                return Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2615,            return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2618,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2619,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2620,                return -Math.PI/4.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2623,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2624,                return -Math.PI*3.0/4.0;,2,2,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2627,            return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2630,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2631,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2632,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2635,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2636,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2640,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2642,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2643,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2646,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2647,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2651,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2652,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2653,                return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2656,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2657,                return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2661,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,2,3,0,1,3,1,0,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2662,            x *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2663,            y *= 9.31322574615478515625E-10;,1,0,0,0,0,0,0,0,1,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2667,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2668,        final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2669,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2672,        final double r = y/x;,3,1,0,0,0,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2673,        temp = r * 1073741824.0;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2674,        double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2675,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2677,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2679,        temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2680,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2681,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2684,"        double result = atan(ra, rb, x < 0);",2,1,0,0,2,1,3,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2686,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2696,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2697,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2699,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2700,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2701,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2703,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2713,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2714,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2716,        double temp = x * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2717,        double xa = x + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2718,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2720,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2729,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2738,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2747,        return (x < 0.0f) ? -x : x;,3,1,0,1,2,1,0,0,1,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2756,        return (x < 0.0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2766,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2788,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2789,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2790,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2791,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2797,        long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2798,        long sign     = bits & 0x8000000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2799,        long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2800,        long mantissa = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2802,        if (d * (direction - d) >= 0) {,3,3,0,2,5,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2804,            if (mantissa == 0x000fffffffffffffL) {,1,1,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2805,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2808,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2813,            if (mantissa == 0L) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2814,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2818,                return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2832,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,3,0,1,3,1,0,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2833,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2836,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2837,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2838,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2841,        return (double) y;,1,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2851,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2852,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2853,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2856,        return y + 1.0;,1,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2864,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2865,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2867,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2868,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2870,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2871,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2875,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2876,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2884,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2892,        return Math.round(x);,0,0,0,1,2,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2901,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2910,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2919,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2928,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,8,2,0,2,6,1,2,0,0,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2937,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2946,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2955,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2964,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,8,2,0,2,6,1,2,0,0,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,1,0,0,0,0,0,0,0,1,2,10,12,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",1,0,0,0,2,0,4,0,1,4,29,9,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,1,2,1,0,6,0,0,0,1,5,42,8,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,611,                work1[pj] /= work2[j];,0,0,1,0,4,0,0,0,1,3,22,8,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,612,                double tmp = work1[pj];,1,0,1,0,2,1,0,0,0,4,23,9,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,613,                for (int i = j + 1; i < solvedCols; ++i) {,5,2,0,1,3,2,0,0,1,6,42,8,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,614,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,1,1,1,0,8,0,0,0,1,5,47,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,617,            sum2 = 0;,1,0,0,0,0,0,0,0,1,2,9,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,619,                double s = work1[permutation[j]];,1,0,1,0,4,1,0,0,0,4,33,9,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,620,                sum2 += s * s;,3,1,0,0,0,0,0,0,1,3,14,8,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,4,2,0,1,2,1,0,0,0,5,40,7,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,625,            if (fp > 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",3,1,0,0,2,0,3,0,1,5,43,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,        updateJacobian();,0,0,0,1,2,0,1,0,1,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,1,0,1,0,8,3,0,0,0,4,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,5,1,0,1,3,2,0,0,1,6,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,                for (int k = 0; k < rows; ++k) {,4,1,0,1,3,2,0,0,1,6,32,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,1,1,1,0,8,0,0,0,1,5,39,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,1,0,1,0,4,0,0,0,1,4,16,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,1,0,1,0,4,0,0,0,1,4,16,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,1,0,0,0,0,0,0,1,0,2,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,2,1,0,1,3,1,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,1,0,0,1,3,1,0,0,1,5,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,1,0,1,0,4,2,0,0,1,5,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,        final double[][] out = new double[nRows][this.getColumnDimension()];,1,0,1,1,10,5,1,0,1,7,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,1,1,0,2,5,1,2,0,0,6,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,1,0,0,1,3,1,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,2,0,0,2,4,1,3,0,1,6,65,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,107,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",1,0,0,0,2,1,3,1,2,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,        for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);",0,0,0,0,2,0,4,0,0,2,22,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,1,0,0,0,0,1,0,0,0,2,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,1,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,        return evaluations;,1,0,0,0,0,1,0,0,0,2,19,4,9.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,        return iterationCount;,1,0,0,0,0,1,0,0,0,2,22,4,4.5,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,            a = lo;,2,0,0,0,0,0,0,0,1,2,7,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,2,0,0,0,0,0,0,0,1,2,7,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,3,1,0,0,0,0,0,0,1,3,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,3,1,0,0,0,0,0,0,1,3,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,3,3,0,0,1,1,0,0,0,4,16,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,3,1,0,0,0,0,0,0,1,3,10,14,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,3,1,0,0,0,0,0,0,1,3,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);",0,0,0,0,2,1,0,0,1,3,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,1,2,0,2,4,4,2,0,3,7,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",0,0,0,0,2,1,7,0,1,4,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,5,3,0,1,2,1,0,0,0,5,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,        double v = x;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,1,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",1,0,0,0,2,1,3,0,1,5,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,93,        if (goalType == GoalType.MAXIMIZE) {,3,1,0,1,3,1,0,0,0,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,2,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,2,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,100,        while (count < maximalIterationCount) {,2,1,0,1,3,1,0,0,0,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,3,2,0,1,2,1,0,0,0,5,25,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,3,2,0,1,2,1,3,0,0,6,35,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,2,1,0,0,0,1,0,0,0,3,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,5,5,0,2,7,1,2,0,0,6,43,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,108,                double q = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,110,                double d = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,111,                double u = 0;,1,0,0,0,0,1,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,1,1,0,2,5,1,3,0,0,6,41,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,5,3,0,1,4,0,0,0,1,5,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,5,3,0,1,4,0,0,0,1,5,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,116,                    p = (x - v) * q - (x - w) * r;,7,5,0,1,4,0,0,0,1,5,30,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,3,2,0,1,2,0,0,0,1,5,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,1,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,120,                        p = -p;,2,0,0,0,0,0,0,0,2,2,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,122,                        q = -q;,2,0,0,0,0,0,0,0,2,2,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,125,                    r = e;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,129,                if (Math.abs(p) < Math.abs(0.5 * q * r) &&,2,4,0,1,5,1,5,0,0,6,42,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,6,2,0,2,4,0,0,0,1,5,26,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,3,1,0,0,0,0,0,0,1,3,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,144,                u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));,7,3,0,3,10,0,3,0,2,6,59,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",1,0,0,0,2,1,3,0,1,5,40,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,3,1,0,1,3,1,0,0,0,5,36,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,2,1,0,1,3,1,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,2,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,159,                    w = x;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,161,                    x = u;,2,0,0,0,0,0,0,0,1,2,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,162,                    fx = fu;,2,0,0,0,0,0,0,0,1,2,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,2,1,0,1,3,1,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,167,                        b = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,4,3,0,2,7,1,0,0,0,5,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,171,                        fv = fw;,2,0,0,0,0,0,0,0,1,2,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,172,                        w = u;,2,0,0,0,0,0,0,0,1,2,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,173,                        fw = fu;,2,0,0,0,0,0,0,0,1,2,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,6,4,0,2,10,2,0,0,0,5,48,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,2,0,0,0,0,0,0,0,1,2,6,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,176,                        fv = fu;,2,0,0,0,0,0,0,0,1,2,8,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,0,0,0,0,2,1,0,0,0,2,23,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",5,1,0,1,4,0,3,0,2,6,64,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,181,                return x;,1,0,0,0,0,1,0,0,0,2,9,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,1,0,0,0,0,0,0,0,1,2,8,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,185,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,63,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",2,0,0,0,2,1,0,0,1,4,61,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,1,0,0,0,0,0,0,0,2,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,66,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,72,        if (!resultComputed) {,1,0,0,1,3,1,0,0,1,5,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,75,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,85,        checkResultComputed();,0,0,0,1,2,0,1,0,1,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,86,        return functionValue;,1,0,0,0,0,1,0,0,0,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,2,0,0,0,0,1,0,0,1,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,2,0,0,0,0,1,0,0,1,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,100,        this.iterationCount = iterationCount;,2,0,0,0,0,1,0,0,1,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,101,        this.resultComputed = true;,1,0,0,0,0,1,0,0,2,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,102,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,1,0,0,0,0,1,0,0,2,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,113,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,114,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,1,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,2,1,0,1,3,1,0,0,1,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,141,        return f.value(point);,0,0,0,1,2,1,3,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,1,0,0,0,2,2,0,0,1,4,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,1,0,0,1,3,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,63,        this.defaultRelativeAccuracy = 1.0e-14;,1,0,0,0,0,1,0,0,1,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,1,0,0,1,3,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,65,        this.relativeAccuracy = defaultRelativeAccuracy;,2,0,0,0,0,1,0,0,1,3,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,1,0,0,1,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,67,        this.maximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,1,0,0,1,3,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,68,        this.iterationCount = 0;,1,0,0,0,0,1,0,0,1,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,69,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,1,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,2,0,0,0,0,0,0,0,1,2,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,94,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,27,public enum GoalType implements Serializable {,1,0,0,0,1,3,0,1,1,5,46,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,30,"    MAXIMIZE,",1,0,0,0,0,0,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,1,0,0,0,0,0,0,0,0,1,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,80,                                             final RandomGenerator generator) {,1,0,0,0,2,1,0,1,1,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,81,        this.optimizer        = optimizer;,2,0,0,0,0,1,0,0,1,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,1,0,0,0,0,1,0,0,1,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,2,0,0,0,0,1,0,0,1,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,2,0,0,0,0,1,0,0,1,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,1,0,0,0,0,1,0,0,1,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,88,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,2,0,0,0,0,1,0,0,1,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,153,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,157,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,158,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,1,1,0,1,3,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,1,1,0,1,3,1,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,1,0,1,0,2,2,0,0,1,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,1,0,1,0,2,2,0,0,1,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,1,0,0,0,0,0,0,0,1,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,1,0,0,0,0,0,0,0,1,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,4,1,0,1,3,2,0,0,1,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,2,1,0,1,2,0,2,0,0,5,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,241,                optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);,2,1,0,1,2,0,2,0,0,5,63,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,0,3,0,4,0,1,4,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,247,                optimaValues[i] = optimizer.getFunctionValue();,0,0,1,1,4,0,2,0,1,5,47,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,1,0,0,1,2,0,2,0,1,5,50,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,257,            totalEvaluations += optimizer.getEvaluations();,1,0,0,1,2,0,2,0,1,5,47,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,262,        int lastNaN = optima.length;,3,0,0,0,0,1,0,0,0,2,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,4,1,0,1,3,2,0,0,1,6,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,264,            if (Double.isNaN(optima[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,1,0,1,0,2,1,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,1,0,1,0,2,1,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,275,            final double prevY = currY;,2,0,0,0,0,2,0,0,1,3,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,1,0,1,0,2,0,0,0,1,4,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,1,0,1,0,2,0,0,0,1,4,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,5,3,0,2,7,1,0,0,0,5,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,301,        if (Double.isNaN(optima[0])) {,0,0,1,2,7,1,2,0,0,5,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,308,        return optima[0];,0,0,1,0,2,1,0,0,0,3,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,1,0,0,0,1,4,0,2,1,5,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,634,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,640,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,64,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",3,0,0,0,3,3,0,2,3,5,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,76,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,88,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,107,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,121,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,122,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,146,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,155,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,163,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,173,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,176,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,182,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,188,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,196,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,206,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,207,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,208,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,210,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,211,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,360,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,416,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,417,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,563,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,610,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,3,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,652,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,39,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,452,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,395,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,662,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,0,2,1,2,0,1,5,74,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,668,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",2,0,0,1,4,1,4,0,1,6,84,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,584,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,590,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,540,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,496,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,334,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,290,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,246,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,50,"        return optimize(f, goalType, min, max);",0,0,0,0,2,1,5,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,94,            fx = -fx;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,131,                    d = p / q;,3,1,0,0,0,0,0,0,1,3,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,132,                    u = x + d;,3,1,0,0,0,0,0,0,1,3,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,135,                    if (((u - a) < t2) || ((b - u) < t2)) {,6,5,0,3,11,1,0,0,0,5,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,136,                        d = (x < m) ? tol : -tol;,5,1,0,1,2,0,0,0,2,5,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,147,                    fu = -fu;,2,0,0,0,0,0,0,0,2,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,187,        throw new MaxIterationsExceededException(maximalIterationCount);,1,0,0,1,2,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,73,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);,2,0,0,1,2,1,2,0,0,5,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,79,        checkResultComputed();,0,0,0,1,2,0,1,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,80,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,118,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,138,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",1,0,0,1,3,3,0,2,2,6,90,6,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,78,        absoluteAccuracy = accuracy;,2,0,0,0,0,0,0,0,1,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,83,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,98,        return maximalIterationCount;,1,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,103,        maximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,0,0,0,1,2,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,108,        relativeAccuracy = accuracy;,2,0,0,0,0,0,0,0,1,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,113,        return relativeAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,118,        relativeAccuracy = defaultRelativeAccuracy;,2,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,119,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,45,"        super(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED, maxEvaluations);",3,0,0,0,2,1,0,0,1,4,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,46,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,73,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,74,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,81,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,2,0,0,1,2,1,0,0,1,5,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,51,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,62,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,70,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,84,"        this(cause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,96,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,57,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,59,"        this.arguments = new Object[] { """" };",1,0,0,0,4,2,0,1,2,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,83,"    public MathException(Localizable pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,84,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,96,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,128,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,129,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,141,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,150,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,159,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,170,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,173,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,179,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,193,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,203,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,204,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,205,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,207,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,208,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,209,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",3,0,0,0,2,1,0,0,1,4,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,48,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",3,0,0,1,4,2,0,1,2,6,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,60,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,73,"        this(argument, new DummyLocalizable(pattern), argument);",3,0,0,1,4,2,0,1,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,86,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,87,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,100,"        this(argument, new DummyLocalizable(pattern), argument);",3,0,0,1,4,2,0,1,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,113,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,114,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,125,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,126,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,137,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,138,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",4,0,0,1,4,2,0,1,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,168,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,169,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",4,0,0,1,4,2,0,1,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,199,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,200,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,209,        return argument.clone();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",3,0,0,0,2,1,0,0,1,4,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,46,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,73,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,74,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,81,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,46,"        this(new DummyLocalizable(specifier), parts);",2,0,0,1,4,2,0,1,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,57,"        super(specifier, parts);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,65,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,92,        return optimizer.getFunctionValue();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,        return optimizer.getResult();,0,0,0,1,2,1,2,0,0,4,29,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,102,        return optimizer.getAbsoluteAccuracy();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,107,        return totalIterations;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,112,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,117,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,122,        return totalEvaluations;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,127,        return optimizer.getRelativeAccuracy();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,132,        optimizer.resetAbsoluteAccuracy();,0,0,0,1,2,0,2,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,137,        optimizer.resetMaximalIterationCount();,0,0,0,1,2,0,2,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,142,        optimizer.resetRelativeAccuracy();,0,0,0,1,2,0,2,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,147,        optimizer.setAbsoluteAccuracy(accuracy);,0,0,0,1,2,0,3,0,0,3,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,148,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,162,        optimizer.setRelativeAccuracy(accuracy);,0,0,0,1,2,0,3,0,0,3,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,194,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,2,0,0,1,2,1,2,0,0,5,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,196,        return optima.clone();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,220,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,2,0,0,1,2,1,2,0,0,5,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,222,        return optimaValues.clone();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,248,            } catch (FunctionEvaluationException fee) {,1,0,0,1,4,1,0,1,0,5,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,249,                optima[i]       = Double.NaN;,2,0,1,0,2,0,0,0,1,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,250,                optimaValues[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,251,            } catch (ConvergenceException ce) {,1,0,0,1,4,1,0,1,0,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,252,                optima[i]       = Double.NaN;,2,0,1,0,2,0,0,0,1,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,253,                optimaValues[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,265,                optima[i] = optima[--lastNaN];,1,0,1,0,4,0,0,0,2,4,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,266,                optima[lastNaN + 1] = Double.NaN;,3,1,1,0,2,0,0,0,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,267,                optimaValues[i] = optimaValues[--lastNaN];,1,0,1,0,4,0,0,0,2,4,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,268,                optimaValues[lastNaN + 1] = Double.NaN;,3,1,1,0,2,0,0,0,1,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,280,                int i = j - 1;,2,1,0,0,0,1,0,0,0,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,281,                double mIX = optima[i];,1,0,1,0,2,1,0,0,0,4,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,282,                double mIY = optimaValues[i];,1,0,1,0,2,1,0,0,0,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,283,                while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {,6,5,0,3,11,1,0,0,0,5,71,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,284,                    optima[i + 1]       = mIX;,2,1,1,0,2,0,0,0,1,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,285,                    optimaValues[i + 1] = mIY;,2,1,1,0,2,0,0,0,1,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,286,                    if (i-- != 0) {,1,1,0,1,3,1,0,0,1,6,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,287,                        mIX = optima[i];,1,0,1,0,2,0,0,0,1,4,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,288,                        mIY = optimaValues[i];,1,0,1,0,2,0,0,0,1,4,22,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,290,                        mIX = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,291,                        mIY = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,294,                optima[i + 1]       = currX;,2,1,1,0,2,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,295,                optimaValues[i + 1] = currY;,2,1,1,0,2,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,296,                currX = optima[j];,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,297,                currY = optimaValues[j];,1,0,1,0,2,0,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,302,            throw new OptimizationException(,0,0,0,0,1,2,0,1,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,316,"        return optimize(f, goalType, min, max);",0,0,0,0,2,1,5,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,35,        setSeed((long) seed);,1,0,0,2,4,1,1,0,1,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,36,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,41,        final long prime = 4294967291l;,1,0,0,0,0,2,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,43,        long combined = 0l;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,44,        for (int s : seed) {,2,0,0,1,3,2,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,45,            combined = combined * prime + s;,4,2,0,0,0,0,0,0,1,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,47,        setSeed(combined);,0,0,0,1,2,0,2,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,305,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,306,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,307,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",1,0,0,0,6,0,0,0,1,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",1,0,0,0,8,1,0,0,1,4,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",1,0,0,1,4,0,0,0,1,4,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,78,"    CONVERGENCE_FAILED(""convergence failed""),",1,0,0,1,2,0,0,0,1,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,82,"    DIMENSIONS_MISMATCH_2x2(""dimensions mismatch: got {0}x{1} but expected {2}x{3}""),",1,0,0,1,10,0,0,0,1,4,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,83,"    DIMENSIONS_MISMATCH_SIMPLE(""dimensions mismatch {0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,84,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,85,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,86,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,87,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,88,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,89,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,90,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,91,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,92,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,93,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,94,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",1,0,0,1,4,1,0,0,1,5,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,95,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,96,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,97,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",1,0,0,1,24,2,0,0,1,5,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,98,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,99,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,100,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,101,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,102,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,103,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,104,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,105,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,106,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,107,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,108,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,109,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,110,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,111,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,112,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,113,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,114,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,115,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",1,0,0,1,6,1,0,0,1,5,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,116,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",1,0,0,1,6,1,0,0,1,5,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,117,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,118,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,119,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,120,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,121,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,122,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,123,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",1,0,0,1,4,0,0,0,1,4,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,124,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,125,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,126,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,127,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,128,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,129,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,130,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,131,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,132,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,133,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,134,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,135,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,136,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,137,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,138,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,139,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,140,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,141,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,142,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,143,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,144,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,145,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,146,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,147,"    NEGATIVE_LENGTH(""length cannot be negative ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,148,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,149,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,150,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",1,0,0,0,4,0,0,0,1,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,151,"    NEGATIVE_START_POSITION(""start position cannot be negative ({0})""),",1,0,0,2,6,0,0,0,1,4,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,152,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",1,0,0,1,4,1,0,0,1,5,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,153,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,154,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,155,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,156,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,157,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,158,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",1,0,0,1,6,0,0,0,1,4,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,159,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,160,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,161,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,162,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,163,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,164,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,165,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,168,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,169,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",1,0,0,1,2,0,0,0,1,4,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,174,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,181,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,182,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,185,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,187,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,188,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,189,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,192,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,194,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,201,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,202,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,203,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,204,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,205,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""),",1,0,0,1,4,0,0,0,1,4,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,208,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,209,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,210,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""),",1,0,0,1,2,0,0,0,1,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,213,"    NULL_COVARIANCE_MATRIX(""covariance matrix is null""),",1,0,0,1,2,0,0,0,1,4,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",1,0,0,1,2,0,0,0,1,4,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,215,"    NULL_DENOMINATOR_FORMAT(""denominator format can not be null""),",1,0,0,1,2,0,0,0,1,4,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",1,0,0,1,2,0,0,0,1,4,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",1,0,0,1,2,0,0,0,1,4,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",1,0,0,1,2,0,0,0,1,4,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",1,0,0,1,2,0,0,0,1,4,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,220,"    NULL_NUMERATOR(""numerator is null""),",1,0,0,1,2,0,0,0,1,4,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",1,0,0,1,2,0,0,0,1,4,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",1,0,0,0,2,0,0,0,1,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",1,0,0,1,2,0,0,0,1,4,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,224,"    NULL_WHOLE_FORMAT(""whole format can not be null""),",1,0,0,1,2,0,0,0,1,4,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,225,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,227,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,229,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,230,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,238,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,239,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,241,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,242,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,243,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,244,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,245,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,246,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,253,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",1,0,0,1,2,0,0,0,1,4,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,257,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,260,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",1,0,0,0,8,0,0,0,1,3,174,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,261,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,270,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,272,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,273,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,279,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,282,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,283,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,284,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,287,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,288,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,289,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,292,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",1,0,0,1,2,1,0,0,1,5,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,319,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,321,                return bundle.getString(toString());,0,0,0,2,4,1,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,326,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,1,0,0,0,0,0,0,0,1,2,10,12,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",1,0,0,0,2,0,4,0,1,4,29,9,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,1,1,1,0,4,0,0,0,1,5,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,1,0,0,0,0,0,0,0,1,2,9,6,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,4,1,0,1,3,2,0,0,1,6,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,1,1,1,0,8,0,0,0,1,5,47,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,2,2,1,1,6,1,0,0,0,6,41,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,1,0,1,0,2,0,0,0,1,4,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,3,1,0,0,0,0,0,0,1,3,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,4,2,0,1,2,0,0,0,1,5,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,585,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,1,2,1,0,6,0,0,0,1,5,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,0,0,1,0,4,0,0,0,1,3,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,1,0,1,0,2,1,0,0,0,4,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,5,2,0,1,3,2,0,0,1,6,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,1,1,1,0,8,0,0,0,1,5,47,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,1,0,0,0,0,0,0,0,1,2,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,1,0,1,0,4,1,0,0,0,4,33,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,3,1,0,0,0,0,0,0,1,3,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,4,2,0,1,2,1,0,0,0,5,40,7,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",3,1,0,0,2,0,3,0,1,5,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,2,0,0,0,0,0,0,0,1,2,20,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,0,0,1,0,4,0,0,0,1,3,21,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,407,                    tmpVec    = residuals;,2,0,0,0,0,0,0,0,1,2,22,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,408,                    residuals = oldRes;,2,0,0,0,0,0,0,0,1,2,19,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,2,0,0,0,0,0,0,0,1,2,19,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,508,        double parl = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,2,1,0,1,3,1,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,1,0,0,0,0,0,0,0,1,2,9,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,4,1,0,1,3,2,0,0,1,6,30,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,1,1,1,0,6,0,0,0,1,5,31,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,1,0,1,0,2,0,0,0,1,4,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,3,1,0,0,0,0,0,0,1,3,18,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,1,0,0,1,2,1,3,0,0,5,31,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,3,1,0,0,0,1,0,0,0,3,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,548,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",1,0,0,0,4,0,7,0,1,4,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,549,        if (lmPar == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,3,1,0,1,3,2,0,0,1,6,55,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,1,0,0,1,2,1,3,0,0,5,31,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,1,1,1,0,4,0,0,0,1,5,28,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,564,"            determineLMDirection(qy, work1, work2, work3);",0,0,0,0,2,0,5,0,1,3,46,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,569,                double s = diag[pj] * lmDir[pj];,1,1,1,0,4,1,0,0,0,5,32,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,570,                work3[pj] = s;,1,0,1,0,2,0,0,0,1,4,14,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,3,1,0,0,0,0,0,0,1,3,16,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,573,            dxNorm = Math.sqrt(dxNorm);,1,0,0,1,2,0,3,0,1,5,27,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,2,0,0,0,0,1,0,0,0,2,23,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,3,1,0,0,0,0,0,0,1,3,20,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,1,3,0,2,5,1,3,0,0,6,36,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,581,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,642,        for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,5,2,0,1,3,2,0,0,1,6,42,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,645,                jacobian[i][pj] = jacobian[j][permutation[i]];,0,0,1,0,10,0,0,0,1,3,46,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,647,            lmDir[j] = diagR[pj];,0,0,1,0,4,0,0,0,1,3,21,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,648,            work[j]  = qy[j];,0,0,1,0,4,0,0,0,1,3,17,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,656,            int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,1,0,1,0,2,1,0,0,0,4,22,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",3,1,0,0,2,0,3,0,0,4,45,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,661,            lmDiag[j] = dpj;,1,0,1,0,2,0,0,0,1,4,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,666,            double qtbpj = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,667,            for (int k = j; k < solvedCols; ++k) {,5,1,0,1,3,2,0,0,1,6,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,1,0,1,0,2,1,0,0,0,4,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,672,                if (lmDiag[k] != 0) {,0,1,1,1,5,1,0,0,0,5,21,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,676,                    double rkk = jacobian[k][pk];,1,0,1,0,4,1,0,0,0,4,29,11,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,2,9,1,5,0,0,6,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,678,                        final double cotan = rkk / lmDiag[k];,2,1,1,0,2,2,0,0,1,6,37,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,679,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,3,3,0,1,2,0,2,0,1,6,45,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,680,                        cos   = sin * cotan;,3,1,0,0,0,0,0,0,1,3,20,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,681,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,2,1,1,0,2,2,0,0,1,6,35,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,3,3,0,1,2,0,2,0,1,6,39,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,684,                        sin = cos * tan;,3,1,0,0,0,0,0,0,1,3,16,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,689,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,3,3,1,0,6,0,0,0,1,5,46,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,690,                    final double temp = cos * work[k] + sin * qtbpj;,4,3,1,0,2,2,0,0,1,6,48,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,4,3,1,0,2,0,0,0,2,5,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,1,0,1,0,2,0,0,0,1,4,15,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,695,                    for (int i = k + 1; i < solvedCols; ++i) {,5,2,0,1,3,2,0,0,1,6,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,1,0,1,0,4,1,0,0,0,4,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,4,3,1,0,2,2,0,0,1,6,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,3,3,1,0,4,0,0,0,2,5,41,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,699,                        jacobian[i][pk] = temp2;,1,0,1,0,4,0,0,0,1,4,24,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,707,            lmDiag[j] = jacobian[j][permutation[j]];,0,0,1,0,8,0,0,0,1,3,40,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,0,1,0,8,0,0,0,1,3,39,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,2,0,0,0,0,1,0,0,0,2,23,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,2,3,1,2,9,1,0,0,0,6,48,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,2,1,0,1,3,1,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,723,        if (nSing > 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,4,2,0,1,3,2,0,0,1,6,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,725,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,726,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,5,2,0,1,3,2,0,0,1,6,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,1,1,1,0,6,0,0,0,1,5,33,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,1,2,1,1,8,0,0,0,1,6,38,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,735,        for (int j = 0; j < lmDir.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,736,            lmDir[permutation[j]] = work[j];,0,0,1,0,6,0,0,0,1,3,32,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,739,    },0,0,0,0,1,0,0,0,0,1,1,2,0.22222,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,2,1,0,1,2,1,0,2,1,7,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,51,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,1,0,1,0,8,3,0,0,0,4,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,2,1,0,1,3,1,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,0,0,1,0,4,0,0,0,1,3,15,10,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",1,0,0,0,2,1,4,0,0,4,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,5,5,0,3,8,1,4,0,0,6,59,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,2,8,0,3,0,1,6,61,10,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",1,0,0,0,2,1,2,0,1,5,23,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,3,1,0,0,0,1,0,0,0,3,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,3,0,1,3,1,0,0,0,5,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,1,0,0,0,0,0,0,0,1,2,4,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",1,0,0,0,2,1,3,0,1,5,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",1,0,0,0,2,1,3,0,1,5,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,5,3,0,0,0,1,0,0,0,3,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,5,3,0,0,0,1,0,0,0,3,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,1,0,0,0,0,1,0,0,1,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,2,7,1,6,0,0,5,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,1,0,0,1,3,1,0,0,0,4,15,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,3,1,0,0,0,1,0,0,0,3,19,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,3,2,0,1,2,0,2,0,1,6,38,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,3,1,0,0,0,0,0,0,1,3,12,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,1,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,1,0,0,0,0,1,0,0,0,2,10,7,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,2,2,0,0,0,0,0,0,1,3,20,8,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,1,0,0,0,2,4,0,0,3,4,39,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,3,2,0,1,2,4,2,0,3,7,74,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,1,1,0,0,0,1,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,8,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,2,1,1,0,2,0,0,0,1,5,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,3,1,0,0,0,1,0,0,0,3,24,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,5,0,1,5,68,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,1,2,0,1,9,1,9,0,0,6,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,4,4,0,2,8,2,0,0,0,5,43,5,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,4,8,0,2,9,0,7,0,1,6,60,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,2,3,0,2,11,1,6,0,0,6,69,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,1,2,0,1,4,0,6,0,1,6,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,1,2,0,1,3,1,0,0,0,5,25,13,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,2,1,0,0,0,0,0,0,1,3,12,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,5,3,0,2,4,0,0,0,1,5,25,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,2,2,0,1,2,0,0,0,1,5,20,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,7,4,0,2,6,0,0,0,2,5,36,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,1,0,0,0,0,1,0,0,0,2,11,13,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,7,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,1,0,0,1,2,0,2,0,1,5,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,1,0,0,1,2,0,2,0,2,5,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",3,0,0,0,2,1,0,2,1,5,57,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",1,0,0,1,6,1,7,0,1,6,68,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,0,2,0,5,0,0,2,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,0,2,0,5,0,0,2,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,0,2,0,4,0,0,2,29,7,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,2,1,0,0,0,1,0,0,0,3,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,0,2,1,4,0,1,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,2,2,0,1,2,1,0,0,0,5,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,1,0,0,0,0,1,0,0,1,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,1,0,0,0,0,1,0,0,2,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,80,"        verifyInterval(min,max);",0,0,0,0,2,0,3,0,1,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,2,1,0,1,3,1,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",1,0,0,0,2,0,4,0,1,4,49,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,1,0,0,1,2,0,3,0,1,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,0,0,0,2,1,0,0,1,3,17,3,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,1,0,0,0,0,0,0,0,2,2,17,12,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,1,0,0,0,0,0,0,0,2,2,17,14,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,4,3,0,2,7,1,0,0,0,5,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,2,0,0,0,0,0,0,0,1,2,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,3,0,0,0,0,1,0,0,1,3,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,2,0,0,0,0,0,0,0,1,2,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,4,3,0,1,4,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",0,0,0,0,5,1,4,0,2,4,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",0,0,0,0,2,0,4,0,1,3,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,1,0,0,1,2,1,3,0,0,5,35,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,1,0,0,1,2,1,3,0,0,5,27,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,6,2,3,0,0,6,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,72,83,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,247,"                setResult(x1, i);",0,0,0,0,2,0,3,0,1,3,17,8,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,4,3,0,1,4,1,0,0,0,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",0,0,0,0,5,1,4,0,2,4,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",0,0,0,0,2,0,4,0,1,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,1,0,0,1,2,1,3,0,0,5,35,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,1,0,0,1,2,1,3,0,0,5,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,1,0,0,1,2,1,3,0,0,5,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,1.0,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,6,2,3,0,0,6,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,2,1,0,0,0,0,0,0,1,3,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,2,0,0,0,0,0,0,0,1,2,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,2,0,0,0,0,0,0,0,1,2,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,1,0,0,1,2,2,2,0,2,6,57,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",3,1,0,0,2,0,2,0,3,5,53,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,2,1,0,1,2,2,2,0,1,7,53,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,2,7,1,6,0,0,5,42,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,2,0,0,0,0,0,0,0,1,2,10,14,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,2,0,0,0,0,2,0,0,1,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,0,2,0,6,0,0,2,66,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,0,0,0,1,2,0,3,0,0,3,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,2,0,0,0,0,1,0,0,0,2,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,1,0,0,1,3,1,0,0,1,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,0,0,0,1,2,0,2,0,0,3,21,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,2,0,0,1,3,2,0,0,1,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,2,0,0,0,0,0,0,0,1,2,16,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,3,1,0,0,0,2,0,0,1,4,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,0,0,0,1,2,0,3,0,0,3,42,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",2,0,0,1,4,0,5,0,0,4,77,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,0,2,0,4,0,1,3,40,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,55,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,1,1,1,0,4,0,0,0,1,5,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,1,0,0,1,2,1,2,1,2,7,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,0,2,0,4,0,1,3,72,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",4,0,0,0,4,1,2,1,2,6,83,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,1,1,0,1,3,1,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,0,2,0,4,0,1,3,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,55,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,1,1,1,0,4,0,0,0,1,5,40,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",0,0,0,0,2,0,4,0,1,3,81,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",0,0,0,0,2,0,6,0,0,2,79,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,3,0,0,3,37,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,2,0,0,3,24,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,3,0,0,3,35,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,0,0,0,2,5,1,3,0,0,4,44,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,2,0,0,0,0,0,0,0,1,2,28,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,2,0,0,0,0,0,0,0,1,2,25,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,0,2,0,6,0,0,2,64,13,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,1,0,0,0,0,0,0,0,2,2,13,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,3,1,0,0,0,2,0,0,1,4,45,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,0,2,0,5,0,0,2,35,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,3,0,0,3,33,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,0,2,0,4,0,0,2,34,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,1,0,0,1,2,0,2,0,1,5,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,3,0,0,3,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",0,0,0,0,2,0,4,0,0,2,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,2,0,0,0,0,0,0,0,1,2,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",1,1,0,0,5,1,4,0,1,6,47,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,1,0,0,1,3,1,0,0,1,5,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",1,0,0,0,2,0,3,0,3,4,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,1,0,0,1,2,2,2,0,2,6,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,3,1,0,0,0,2,0,0,1,4,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,3,1,0,0,0,2,0,0,1,4,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,6,2,0,1,4,2,0,0,1,6,65,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",1,0,0,0,2,0,4,0,2,4,48,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,0,9,7,0,0,4,4,88,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,2,0,0,0,0,1,0,0,1,3,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,1,0,0,1,3,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,1,0,0,1,2,1,2,0,1,6,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,0,2,0,3,0,0,2,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,1,2,0,2,5,1,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,1,0,1,0,2,0,0,0,1,4,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,1,0,1,0,2,0,0,0,1,4,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,1,0,0,0,0,1,0,0,0,2,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,0,1,1,0,6,0,0,0,1,4,36,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",1,0,1,1,10,2,6,0,1,7,74,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,2,1,0,1,2,2,0,0,1,6,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,2,2,1,1,6,2,0,0,1,7,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,3,1,0,1,2,1,2,0,0,6,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,1,0,0,3,8,1,2,1,1,7,45,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,0,0,0,2,4,0,4,0,1,4,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,1,1,0,1,6,3,2,0,1,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,1,0,1,5,75,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,1,0,0,0,0,0,0,0,1,2,4,6,4.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,1,1,0,1,3,1,0,0,0,5,23,4,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,1,0,0,1,4,0,2,0,2,5,30,6,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,1,0,0,0,0,1,0,0,0,2,16,4,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,0,0,1,0,4,2,0,0,1,4,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,1,0,0,1,2,0,3,0,1,5,63,6,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,1,0,0,0,0,1,0,0,0,2,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",5,0,0,0,2,1,1,1,2,6,72,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,1,2,0,3,9,1,4,0,1,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,1,0,0,1,2,2,2,0,1,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,1,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,1,2,0,3,9,1,4,0,1,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,1,0,0,2,4,0,4,0,1,5,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,1,0,0,1,2,0,2,1,0,5,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,1,0,0,1,2,0,2,0,1,5,20,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,1,0,0,1,2,0,3,0,1,5,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",1,0,0,1,4,0,6,0,1,5,34,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,1,0,0,1,3,1,0,0,1,5,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,1,0,0,1,2,0,2,0,1,5,26,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,1,0,1,2,6,33,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,2,0,0,4,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,4,0,0,0,1,3,0,1,1,5,76,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,2,0,1,1,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",1,0,0,0,1,4,0,3,1,5,101,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,2,0,0,1,3,1,0,1,1,6,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,2,0,0,0,0,1,0,0,1,3,17,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0,0,0,1,2,1,2,0,0,4,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,1,0,0,0,1,3,0,0,2,4,29,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,9,7,0,2,8,0,0,0,1,5,56,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,4,4,0,1,6,0,0,0,1,5,42,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,3,2,0,0,0,0,0,0,1,3,26,9,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",2,0,0,0,2,0,4,0,0,3,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },0,0,0,0,1,0,0,0,0,1,1,2,0.05882,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",1,0,0,0,1,3,0,3,1,5,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,2,0,0,1,3,2,0,1,2,6,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,2,0,0,0,0,1,0,0,1,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,1,0,0,1,2,1,0,2,2,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,1,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,2,0,0,1,3,2,0,1,2,6,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,0,0,0,0,1,0,0,1,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",1,0,0,0,2,0,4,3,1,5,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,0,2,0,3,0,1,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,2,0,0,1,3,2,0,1,1,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",1,0,0,0,2,0,3,2,1,5,52,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,3,0,0,3,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,2,0,0,1,2,2,0,4,2,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,1,0,0,1,2,2,0,6,2,6,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,1,0,0,3,6,1,6,1,1,7,70,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,1,0,0,2,4,1,2,2,1,7,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,1,0,0,1,6,4,2,0,1,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,1,1,0,2,5,1,2,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,38,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,1,0,0,0,0,0,0,2,0,2,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,2,0,0,1,3,2,0,2,1,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,1,0,0,2,4,2,4,0,1,6,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,2,1,0,1,3,1,0,0,0,5,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,1,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,1,4,1,5,0,0,4,47,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1627,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1629,      return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,2,3,1,0,2,0,0,0,1,5,43,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,1,0,0,0,0,0,0,0,1,2,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,2,0,1,4,17,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,1,0,0,0,0,1,0,0,0,2,19,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,1,1,1,0,4,0,0,0,1,5,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,2,0,0,1,2,1,1,0,1,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,1,0,1,4,19,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,1,1,4,1,1,0,0,5,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",3,0,0,0,3,2,0,1,1,5,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,6,0,0,1,2,0,1,0,1,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",0,0,0,0,2,3,0,1,2,4,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,1,0,0,0,0,0,0,0,1,2,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,1,0,0,0,0,0,0,0,1,2,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,1,0,0,0,0,0,0,0,2,2,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,2,1,0,0,0,1,0,0,0,3,23,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,3,2,0,0,0,2,0,0,1,4,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,2,1,1,0,2,1,0,0,0,5,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,2,1,1,0,2,1,0,0,0,5,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,2,0,0,0,0,2,0,0,1,3,23,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,4,5,1,1,7,1,0,0,0,6,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,5,6,1,1,8,1,0,0,0,6,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,2,2,0,1,3,1,0,0,0,5,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,2,1,0,1,3,1,0,0,0,5,17,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,3,4,0,2,6,0,3,0,1,6,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,1,2,7,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,1,0,0,0,0,0,0,0,2,2,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,2,1,0,0,0,1,0,0,0,3,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,3,2,0,0,0,2,0,0,1,4,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,2,1,1,0,2,1,0,0,0,5,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,1,1,0,2,1,0,0,0,5,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,2,0,0,0,0,2,0,0,1,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,4,5,1,1,7,1,0,0,0,6,45,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,5,6,1,1,8,1,0,0,0,6,58,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,2,2,0,1,3,1,0,0,0,5,22,8,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,3,3,1,0,4,0,0,0,1,5,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,2,1,0,0,0,0,0,0,1,3,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,2,1,0,1,3,1,0,0,0,5,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,1,0,0,0,0,0,0,0,2,2,11,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,2,0,0,1,5,2,0,0,1,5,36,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,1,0,0,1,2,0,2,0,1,5,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,2,0,0,0,0,0,0,0,1,2,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,1,0,0,0,0,0,0,0,1,2,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,2,3,1,1,7,1,0,0,0,6,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,3,3,1,0,4,0,0,0,1,5,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,2,1,0,0,0,0,0,0,1,3,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,2,0,0,0,0,0,0,0,1,2,8,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,1,2,1,1,7,1,0,0,0,6,32,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,3,3,1,1,6,0,0,0,1,6,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,3,1,0,0,0,0,0,0,1,3,13,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",3,4,0,0,5,1,4,0,0,5,48,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,4,3,0,1,3,1,0,0,0,5,35,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,1,2,0,1,4,2,0,0,0,5,26,9,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,1,1,0,1,4,2,0,0,0,5,24,10,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,1,1,0,1,3,1,0,0,1,6,18,12,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,1,1,0,1,4,2,0,0,0,5,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,5,4,0,1,4,0,0,0,1,5,53,15,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,1,0,0,0,0,0,0,0,1,2,12,15,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,1,1,1,1,6,0,1,0,3,7,65,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,1,1,1,0,4,0,0,0,1,5,21,6,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,1,0,0,0,2,2,0,0,1,4,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,3,0,0,1,2,1,2,0,1,6,47,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,2,0,0,0,0,1,0,0,1,3,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,3,1,0,1,2,1,0,0,0,5,40,12,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,3,0,0,0,0,2,0,0,1,3,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,1,0,1,0,4,2,0,0,1,5,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,1,0,1,0,4,2,0,0,1,5,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,4,2,0,1,3,2,0,0,1,6,33,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,1,1,1,5,1,0,0,0,5,22,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",1,1,0,0,2,0,4,0,0,4,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,3,0,0,0,4,1,0,2,0,4,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,1,1,0,1,3,1,0,0,0,5,21,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",2,0,0,0,2,0,4,0,0,3,58,7,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,0,0,0,1,2,0,2,0,1,4,27,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,2,1,0,1,3,1,0,0,1,6,35,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",0,0,0,0,2,0,4,0,0,2,33,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,1,0,0,1,3,1,0,0,1,5,27,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,1,0,0,0,0,1,0,0,1,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,1,0,0,0,0,1,0,0,1,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,1,0,1,4,29,6,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,2,0,0,0,2,1,0,1,1,5,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,1,0,1,0,2,1,0,1,1,6,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",1,0,0,0,2,1,3,1,2,6,83,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,1,0,0,5,1,4,0,0,4,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",1,0,0,0,2,1,4,1,2,6,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,0,5,1,4,0,0,4,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },0,0,0,0,1,0,0,0,0,1,1,2,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,1,0,1,1,6,2,1,0,1,7,53,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,3,0,0,0,0,2,0,0,1,3,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,2,1,0,0,2,1,0,1,1,6,40,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,120,        simplex[0] = original[0];,0,0,1,0,4,0,0,0,1,3,25,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,4,1,0,1,3,2,0,0,1,6,30,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,1,0,1,1,6,2,1,0,1,7,56,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,1,0,1,0,4,4,0,0,1,5,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,1,3,1,1,10,0,0,0,1,6,71,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",3,0,1,0,4,1,0,1,3,6,69,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,131,        evaluateSimplex(comparator);,0,0,0,1,2,0,2,0,1,4,28,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,132,        return simplex[0];,0,0,1,0,2,1,0,0,0,3,18,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,1,0,0,0,1,3,0,1,1,5,46,1,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",1,0,0,0,0,0,0,0,0,1,9,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,33,    MINIMIZE,1,0,0,0,0,0,0,0,0,1,8,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,50,    public SimpleScalarValueChecker() {,1,0,0,1,3,1,0,0,1,5,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,2,0,0,0,0,1,0,0,1,3,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,2,0,0,0,0,1,0,0,1,3,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,53,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",3,0,0,0,5,5,0,0,3,4,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,49,        this.point = point.clone();,1,0,0,1,2,1,2,0,1,6,27,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,50,        this.value  = value;,2,0,0,0,0,1,0,0,1,3,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,51,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,1,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,275,            new Comparator<RealPointValuePair>() {,0,0,0,1,3,1,0,2,1,5,38,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,116,    protected DirectSearchOptimizer() {,1,0,0,1,3,1,0,0,1,5,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,0,0,0,2,4,1,1,1,2,6,54,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,118,        setMaxIterations(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,120,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,221,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,231,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,2,0,0,0,0,1,0,0,1,3,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,251,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,1,1,0,1,3,1,0,0,0,5,33,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,273,        this.f = f;,2,0,0,0,0,1,0,0,1,3,11,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,274,        final Comparator<RealPointValuePair> comparator =,1,0,0,0,0,1,0,2,1,4,49,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,1,0,0,0,0,0,0,0,1,2,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,1,0,0,0,0,0,0,0,1,2,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,288,        buildSimplex(startPoint);,0,0,0,1,2,0,2,0,1,4,25,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,289,        evaluateSimplex(comparator);,0,0,0,1,2,0,2,0,1,4,28,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,2,1,0,1,3,1,0,0,1,6,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,349,        return f.value(x);,0,0,0,1,2,1,3,0,0,4,18,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,3,0,0,0,0,2,0,0,1,3,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,3,1,0,1,3,1,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,2,1,0,0,2,1,0,1,1,6,40,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,369,"        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);",3,0,1,0,4,1,0,1,2,6,60,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,1,0,1,0,4,2,0,0,1,5,47,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,1,0,1,0,4,4,0,0,1,5,39,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,4,1,0,1,3,2,0,0,1,6,29,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,0,6,0,0,0,1,4,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,378,"            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);",4,1,1,0,4,1,0,1,2,7,61,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,1,0,1,0,2,1,0,1,1,6,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,394,            final double[] point = vertex.getPointRef();,1,0,0,1,4,2,2,0,1,6,44,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,395,            if (Double.isNaN(vertex.getValue())) {,0,0,0,3,7,1,4,0,0,4,38,7,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,396,"                simplex[i] = new RealPointValuePair(point, evaluate(point), false);",1,0,1,1,6,1,2,1,4,8,67,8,1.33333,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,45,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,46,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,54,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,166,"        return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,172,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,70,        return point.clone();,0,0,0,1,2,1,2,0,0,4,21,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,1,0,0,2,4,3,0,2,2,6,83,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,50,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,51,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",2,0,0,0,4,1,3,0,2,5,51,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",2,1,0,1,8,2,5,1,3,8,104,5,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,1,0,0,1,4,1,0,1,0,5,45,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,3,3,0,2,5,1,0,0,0,5,65,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,3,3,0,2,6,2,0,0,0,5,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,2,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,1,0,0,1,2,0,1,0,2,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,1,1,0,1,4,2,0,0,0,5,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,1,1,0,1,4,0,2,0,3,6,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,56,10,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,2,0,0,1,2,2,0,0,0,4,45,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,2,7,1,4,0,0,5,59,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",4,0,0,0,2,2,0,2,2,5,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,2,0,0,1,5,67,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",6,1,0,0,3,2,0,0,1,5,44,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,1,4,1,0,4,0,0,0,1,5,30,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,2,1,1,0,4,0,0,0,2,5,31,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,2,0,1,0,2,0,0,0,2,4,21,14,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,1,1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,1,1,1,0,2,2,0,0,1,6,36,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,5,2,0,1,3,2,0,0,1,6,37,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,1,0,1,0,2,0,0,0,1,4,18,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,1,0,1,0,4,2,0,0,1,5,31,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,5,1,0,1,3,2,0,0,1,6,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,1,1,0,6,0,0,0,1,4,26,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,1,0,1,0,4,2,0,0,1,5,31,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,43,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,1,0,0,1,2,0,2,0,1,5,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,1,1,1,1,7,1,0,0,0,6,49,6,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,5,2,0,1,3,2,0,0,1,6,37,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,1,0,1,0,4,2,0,0,1,5,30,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,1,0,1,0,2,2,0,0,1,5,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,1,0,1,0,2,2,0,0,1,5,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,1,0,0,0,0,2,0,0,1,3,23,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,3,2,0,2,5,1,2,0,0,6,37,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,1,0,2,0,0,0,1,3,10,8,0.44444,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,1,2,7,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,1,2,7,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,2,0,0,4,21,5,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,1,1,1,1,6,0,1,0,4,7,66,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,0,0,0,1,2,1,2,0,0,4,21,5,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,1,0,0,2,4,0,1,1,1,6,28,4,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,1,0,0,1,3,1,0,0,1,5,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,1,0,0,1,2,1,0,1,2,6,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",1,0,0,0,1,4,0,2,2,5,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,1,0,0,2,6,1,2,1,0,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,2,0,0,1,3,1,0,1,1,6,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,2,0,0,1,2,1,0,1,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,1,0,0,1,2,0,2,1,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,2,0,1,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,1,0,0,1,4,0,3,1,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,            Object value = iter.next();,1,0,0,1,2,0,2,1,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,            outBuffer.append(value);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,4,0,1,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,6,0,1,4,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,89,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,            outBuffer.append(nf.format(getCumPct(value)));,0,0,0,3,6,0,6,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,91,            outBuffer.append('\n');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,92,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,93,        return outBuffer.toString();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,        Object obj = v;,2,0,0,0,0,0,0,1,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,2,0,0,3,8,0,3,1,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,            Long count = (Long) freqTable.get(obj);,1,0,0,1,4,0,3,2,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,            if (count == null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,131,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,1,4,0,5,0,0,3,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,2,6,0,7,0,0,4,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,138,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,        } catch (ClassCastException ex) {   ,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,137,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,2,0,1,2,5,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,147,        addValue(Long.valueOf(v));,0,0,0,2,4,0,4,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,148,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,5,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,157,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,165,        addValue(Long.valueOf(v));,0,0,0,2,4,0,4,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,174,        addValue(Character.valueOf(v));,0,0,0,2,4,0,4,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,179,        freqTable.clear();,0,0,0,1,2,0,2,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,        return freqTable.keySet().iterator();,0,0,0,1,4,1,3,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,1,0,0,1,4,0,3,1,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,205,        while (iterator.hasNext())  {,0,0,0,2,5,1,2,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,1,0,0,2,8,0,3,1,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,219,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,1,0,0,3,8,1,2,1,1,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,            Long count =  (Long) freqTable.get(v);,1,0,0,1,4,0,3,2,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,            if (count != null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,                result = count.longValue();,1,0,0,1,2,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,230,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,241,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,261,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,4,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,1,0,0,1,2,2,1,0,2,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,        if (sumFreq == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,1,1,0,1,6,3,2,0,1,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,291,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,        if (getSumFreq() == 0) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,            return getCumFreq(((Integer) v).longValue());,1,0,0,3,8,1,2,1,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,        Comparator c = freqTable.comparator();,1,0,0,1,2,0,2,1,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,        if (c == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,1,0,0,1,2,1,0,1,2,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,            Long value = (Long) freqTable.get(v);,1,0,0,1,4,0,3,2,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,1,0,0,1,2,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,346,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,1,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,1,7,1,5,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value",0,0,0,0,0,1,0,0,0,1,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,1,7,1,5,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,1,0,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,        Iterator values = valuesIterator();,1,0,0,1,2,0,1,1,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,        while (values.hasNext()) {,0,0,0,2,5,1,2,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,1,0,0,1,2,0,2,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",0,1,0,0,5,1,4,0,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,1,0,0,1,2,0,2,0,2,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,364,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,377,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,389,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,1,0,0,1,2,2,1,0,2,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,        return (double) getCumFreq(v) / (double) sumFreq;        ,1,1,0,1,6,3,2,0,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,        return getCumPct(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,        return getCumPct(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,        return getCumPct(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,1,0,0,1,4,1,0,1,0,5,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,2,0,1,2,5,79,7,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,2,0,0,0,0,0,0,1,0,2,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,1,0,0,1,4,0,3,2,0,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,1,0,0,1,3,1,0,0,1,5,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,1,0,0,1,2,1,0,1,2,6,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,2,1,0,1,4,3,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.02439,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,1,0,0,0,4,6,0,0,3,4,51,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,0,1,0,2,6,1,6,0,0,5,35,7,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",1,0,0,0,2,1,4,0,0,4,32,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,1,1,0,1,3,1,0,0,0,5,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,2,0,0,0,0,1,0,0,1,3,21,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,2,0,0,0,0,1,0,0,1,3,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",1,0,0,0,2,4,0,2,4,5,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",1,0,0,0,2,4,0,2,4,5,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",1,0,0,0,2,4,0,2,4,5,55,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",1,0,0,0,2,4,0,2,5,5,61,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,0,2,1,3,0,2,4,42,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",1,0,0,0,4,1,5,0,1,5,58,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",1,0,0,0,2,0,4,0,2,4,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,1,0,0,2,4,1,4,0,1,6,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,51,5,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,2,0,0,2,4,1,2,0,1,6,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,1,0,0,0,4,6,0,0,3,4,51,2,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0303,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,1,0,0,0,0,2,0,1,2,4,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",0,0,0,0,1,1,5,0,1,4,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,1,1,0,1,3,1,0,0,0,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,6,5,0,1,3,1,0,0,0,5,79,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,1,0,0,1,2,1,1,0,1,6,44,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,3,2,0,1,2,0,0,0,1,5,20,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,1,0,0,0,0,0,0,1,0,2,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,1,0,0,0,2,1,0,0,0,3,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,1,0,0,0,1,0,2,0,1,4,44,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,0,0,0,1,3,1,0,1,1,5,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,2,0,0,1,2,2,0,0,0,4,45,5,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,3,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",6,3,0,0,1,1,1,0,1,6,65,4,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,0,1,5,1,6,0,0,5,62,4,0.04348,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,0,2,0,3,0,1,3,17,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,2,0,0,0,0,0,0,0,1,2,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,2,1,0,2,5,2,1,0,0,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,3,0,0,0,4,2,0,2,1,5,50,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,2,0,0,0,0,0,0,1,0,2,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,1,0,1,2,10,0,3,0,1,6,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,3,0,0,0,4,4,0,0,1,4,42,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",3,0,0,0,7,2,0,1,1,5,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.08889,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,2,10,2,4,2,0,5,92,5,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,1,0,1,4,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,2,0,0,1,2,2,2,0,1,6,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,2,0,0,1,2,2,2,0,1,6,51,4,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,3,1,0,0,0,2,0,0,1,4,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,1,0,1,0,8,3,0,0,0,4,40,5,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,5,1,0,1,3,2,0,0,1,6,32,6,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,5,1,0,1,3,2,0,0,1,6,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,5,3,1,0,4,0,0,0,1,5,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,1,0,0,0,0,0,0,0,1,2,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",1,0,0,1,4,1,1,0,1,6,60,4,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,51,4,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",1,0,0,1,4,0,4,1,2,6,54,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,1,0,0,1,4,1,2,0,1,6,41,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,1,0,0,1,2,0,2,0,1,5,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,3,1,0,0,0,1,0,0,0,3,30,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,1,0,0,0,2,4,2,0.18182,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,5,1,0,1,3,2,0,0,1,6,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,0,1,1,1,5,1,0,0,0,5,16,6,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",2,1,0,1,6,0,4,0,3,6,57,6,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,1,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,1,0,0,0,0,1,0,0,0,2,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,1,4,1,3,0,1,5,43,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,3,3,0,1,4,2,0,0,0,5,31,6,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,1,0,0,0,2,3,0,0,2,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,3,2,0,1,2,4,2,0,3,7,74,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,1,1,0,0,0,1,0,0,0,3,25,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,8,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,2,1,1,0,2,0,0,0,1,5,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,3,1,0,0,0,1,0,0,0,3,24,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,2,4,0,1,4,1,2,0,0,6,40,4,0.14286,1,1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",3,1,0,0,2,1,2,0,0,5,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,2,0,0,0,0,0,0,0,2,2,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,1,0,0,0,2,3,0,0,2,4,33,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,3,2,0,1,2,4,2,0,3,7,74,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,1,1,0,0,0,1,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,2,1,1,0,2,0,0,0,1,5,23,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,3,1,0,0,0,1,0,0,0,3,24,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,40,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,3,3,0,1,4,2,0,0,0,5,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,1,0,0,0,0,1,0,0,0,2,40,9,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,2,1,0,0,0,1,0,0,0,3,50,9,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,2,0,0,0,0,1,0,0,0,2,31,9,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,3,3,0,2,5,1,3,0,0,6,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,174,                an = an * (x / (a + n));,5,3,0,2,4,0,0,0,1,5,24,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,177,                sum = sum + an;,3,1,0,0,0,0,0,0,1,3,15,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,179,            if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,4,4,0,3,8,0,7,0,3,6,59,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,3,4,0,2,4,1,0,0,0,5,33,14,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,3,2,0,1,2,1,0,0,0,5,19,14,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,3,3,0,1,4,2,0,0,0,5,30,6,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,1,5,51,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,4,4,0,3,8,0,7,0,3,6,59,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.03846,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,1,0,0,0,0,2,0,0,1,3,19,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,81,    private double ybar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,2,0,0,0,0,0,0,0,1,2,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,2,0,0,0,0,0,0,0,1,2,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,3,1,0,0,0,1,0,0,0,3,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,3,1,0,0,0,1,0,0,0,3,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,3,2,0,1,4,1,0,0,1,6,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,3,2,0,1,4,1,0,0,1,6,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,2,0,0,0,0,0,0,0,1,2,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,2,0,0,0,0,0,0,0,1,2,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,1,0,0,0,0,0,0,0,1,2,4,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,4,3,0,0,0,1,0,0,0,3,37,4,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,0,10,0,1,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,150,        sumXX = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,151,        sumY = 0d;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,152,        sumYY = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,1,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,163,        return n;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,2,2,0,1,2,1,2,0,1,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,205,        return getIntercept(getSlope());,0,0,0,2,4,1,2,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,2,0,0,0,0,1,0,0,0,2,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,228,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,2,2,0,2,5,1,3,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,229,            return Double.NaN; //not enough variation in x,2,0,0,0,0,1,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,2,1,0,0,0,1,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,301,        return getRegressionSumSquares(getSlope());,0,0,0,2,4,1,2,0,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,1,2,0,1,6,2,1,0,1,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,336,        double b1 = getSlope();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,337,        double result = Math.sqrt(getRSquare());,1,0,0,2,4,1,3,0,1,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,359,        double ssto = getTotalSumSquares();,1,0,0,1,2,1,1,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,2,2,0,2,4,1,1,0,1,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,375,        return Math.sqrt(,0,0,0,0,1,1,2,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,390,        return Math.sqrt(getMeanSquareError() / sumXX);,1,1,0,2,4,1,3,0,1,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,417,        return getSlopeConfidenceInterval(0.05d);,0,0,0,1,2,1,1,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,2,3,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,454,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,456,        return getSlopeStdErr() *,0,1,0,1,2,1,1,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,482,        return 2d* (1.0 - getTDistribution().cumulativeProbability(,0,2,0,1,4,1,2,0,1,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,497,        return (sumY - slope * sumX) / ((double) n);,4,3,0,2,6,2,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,507,        return slope * slope * sumXX;,3,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,517,        return DistributionFactory.newInstance().createTDistribution(n - 2);,1,1,0,1,4,1,3,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,32,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",1,0,0,0,2,1,3,0,1,5,41,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,1,0,0,1,3,1,0,0,0,4,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",1,0,0,1,4,0,4,1,1,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,1,0,0,1,2,1,2,0,0,5,25,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,1,0,0,1,2,1,2,0,0,5,23,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,1,0,0,1,2,1,2,0,0,5,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",3,3,0,3,10,2,6,1,1,8,68,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",1,0,0,1,4,0,4,1,1,6,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,157,        if (num == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,34,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,140,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",1,0,0,1,4,0,4,1,1,6,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,144,        if (whole == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.25,0,0
