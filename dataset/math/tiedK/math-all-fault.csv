dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",3,0,0,0,2,2,0,1,1,5,53,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",3,0,0,0,2,2,0,1,1,5,53,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,0,2,0,2,12,3,3,0,3,6,90,4,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,1,0,1,0,4,4,0,0,1,5,42,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,1,0,0,2,6,0,5,1,1,6,71,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,2,6,57,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,4,1,0,2,5,1,0,0,1,6,62,9,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",1,0,0,1,4,2,0,2,3,6,55,4,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,1,1,0,1,3,1,0,0,0,5,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,1,0,0,0,0,0,0,0,1,2,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,191,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,0,5,1,5,0,0,3,49,9,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,2,3,0,0,1,1,0,0,0,4,20,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",1,0,0,0,2,0,5,0,1,4,55,8,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,108,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,        int iter = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,1,0,0,0,0,0,0,0,1,2,7,6,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",0,0,0,0,5,1,5,0,0,3,49,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",1,0,0,0,2,0,5,0,1,4,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,2,0,0,1,3,2,0,1,1,6,51,8,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",1,0,0,0,2,1,4,0,0,4,55,7,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,346,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,42,7,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,1,0,0,1,2,0,2,0,1,5,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,2,0,0,1,3,2,0,1,1,6,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,358,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,359,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,372,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",5,0,0,1,12,1,5,2,1,7,99,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",2,0,0,1,4,2,3,2,2,7,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",3,3,0,0,2,1,2,0,1,6,48,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,1,0,0,0,0,0,0,0,0,1,11,2,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",7,0,0,0,2,0,3,0,1,4,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,1,0,0,1,2,1,0,0,1,5,15,3,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,44,        for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,45,"            weightMatrix.setEntry(i, i, weight[i]);",0,0,1,0,4,0,4,0,0,3,39,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0137,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,897,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.00273,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,6,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,1,1,0,1,2,1,1,0,2,7,21,6,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,397,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.03704,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,877,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,867,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,810,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.01064,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",1,0,0,0,2,0,5,0,2,4,53,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,5,1,0,0,0,0,0,0,1,3,36,5,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,1,2,1,1,10,0,0,0,1,6,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,1,2,1,0,8,0,0,0,1,5,40,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,0,1,1,1,5,1,0,0,0,5,15,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,995,                if (x[i] > 1.0) {,0,1,1,1,5,1,0,0,0,5,17,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,1,2,0,2,6,1,3,0,1,7,46,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,1,0,0,0,1,1,0,0,0,3,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,1,0,1,0,4,3,0,0,0,4,29,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,1,0,1,0,2,0,0,0,1,4,12,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,1,0,1,0,4,1,0,0,0,4,25,9,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,0,1,1,1,11,1,0,0,0,5,30,8,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,1,0,1,0,2,0,0,0,1,4,12,10,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,1,1,1,1,5,1,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,1,0,1,0,2,1,0,0,0,4,19,9,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,0,0,1,0,6,0,0,0,1,3,26,8,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,1,0,1,0,4,0,0,0,1,4,21,8,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,2,1,1,0,4,0,0,0,1,5,19,10,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,2,0,0,0,0,0,0,0,2,2,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,2,0,0,0,0,0,0,0,1,2,6,13,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,274,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.1,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,305,            return a.getValue() <= b.getValue() ? a : b;,2,1,0,1,4,1,4,0,0,6,44,7,0.07692,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",0,0,0,0,2,1,4,0,1,4,40,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,1,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,1,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,3,1,0,1,2,0,2,0,1,6,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,3,1,0,1,2,0,2,0,1,6,31,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,4,3,0,2,7,1,0,0,0,5,41,6,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,2,1,0,1,3,1,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,1,4,1,2,0,1,5,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,1,0,0,0,0,0,0,1,0,2,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,1,0,0,1,2,1,2,0,0,5,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,2,0,0,1,3,1,0,1,0,5,39,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,1,0,0,0,0,1,0,0,0,2,11,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,1,0,0,1,2,0,2,1,0,5,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,351,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0,1,0,2,10,0,10,0,0,4,64,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,3,1,0,0,0,2,0,0,1,4,29,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,2,0,0,0,0,0,0,0,1,2,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,3,1,0,0,0,0,0,0,1,3,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,2,0,0,0,0,0,0,0,1,2,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,1,2,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,2,0,0,0,0,0,0,0,1,2,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,135,        double q1 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,5,3,0,0,0,1,0,0,0,3,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,5,3,0,0,0,1,0,0,0,3,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,145,            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {,0,1,0,2,7,1,6,0,0,5,53,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,4,1,0,0,0,2,0,0,1,4,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,3,1,0,0,0,0,0,0,1,3,20,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,28,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,1,0,0,0,0,2,0,0,1,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",1,0,0,0,2,2,4,0,1,5,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,1,1,0,1,3,1,0,0,0,5,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,151,"                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);",3,0,0,0,2,2,0,1,1,5,91,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,4,1,0,1,3,2,0,0,1,6,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,2,0,0,0,0,0,0,0,1,2,30,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,2,0,0,0,0,0,0,0,1,2,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,3,3,0,1,3,1,0,0,0,5,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,6,4,0,1,2,0,0,0,1,5,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,6,4,0,1,2,0,0,0,1,5,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,159,                    } else if (b != 0) {,1,1,0,1,4,2,0,0,0,5,20,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,160,                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;,6,4,0,1,2,0,0,0,1,5,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,6,4,0,1,2,0,0,0,1,5,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,3,9,1,6,0,1,6,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,            if ((Boolean) tree.getAttribute()) {,0,0,0,2,7,1,2,1,0,5,36,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,2,0,0,4,30,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,2,0,0,0,0,1,0,0,1,3,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,2,0,0,0,0,1,0,0,1,3,31,4,0.4,1,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,1,1,0,1,4,1,4,0,0,6,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",1,0,0,0,2,4,0,2,4,5,71,2,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",1,0,0,0,2,4,0,2,4,5,67,2,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,1,0,1,3,1,3,0,0,5,29,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",2,0,0,0,2,2,0,1,1,5,44,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,1,0,0,1,3,1,0,0,0,4,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,1,0,0,1,3,1,0,0,0,4,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,2,0,1,1,5,43,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,2,0,0,0,0,2,0,0,1,3,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1663,                final int jptMinus1 = jpt;,2,0,0,0,0,2,0,0,1,3,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,                throw new PathIsExploredException(); // XXX,0,0,0,1,2,2,0,1,1,5,43,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,4,1,0,1,3,2,0,0,1,6,34,8,0.01724,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,3,1,0,0,0,0,0,0,2,3,33,8,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,3,1,0,0,0,0,0,0,2,3,33,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,1,3,0,0,4,35,7,0.05556,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,3,0,0,3,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,1,0,0,2,5,2,0,1,1,6,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,1,0,0,2,5,2,0,1,1,6,42,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,1,0,0,2,5,2,0,1,1,6,46,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,0,2,0,4,0,0,3,44,9,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,1,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,1,0,0,0,0,0,0,0,2,2,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,2,0,0,0,0,1,0,0,1,3,25,4,0.03333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,3,0,0,0,0,1,0,0,0,2,26,7,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,3,0,0,0,0,1,0,0,0,2,26,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,1,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,2,8,3,6,0,0,4,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,0,3,0,2,7,1,4,0,0,5,64,4,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",3,0,0,0,3,3,0,0,1,4,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,293,            return NaN;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,383,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,2,1,0,1,3,1,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,188,"                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",4,4,0,1,6,0,6,0,1,6,67,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,1,0,0,1,2,0,2,0,2,5,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,2,0,0,0,0,0,0,0,1,2,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,2,0,0,0,0,0,0,0,1,2,8,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,353,    if (c == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,1,1,0,1,3,1,0,0,0,5,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",1,1,0,1,3,1,3,0,1,7,42,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",1,0,0,1,4,2,1,1,2,7,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,1,2,0,2,5,26,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",24,9,0,0,2,2,0,1,1,6,101,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,0,3,4,0,0,1,4,47,2,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,237,        int idx = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,2,1,0,1,3,1,0,0,0,5,23,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,1,0,0,0,0,0,0,0,1,2,6,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,1,0,0,0,0,0,0,0,1,2,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,243,        indices[last] = idx;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,7,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,45,4,0.2,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,8,2,0,2,6,1,2,0,0,6,59,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,1,0,0,1,4,1,0,1,0,5,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,3,3,0,2,5,1,0,0,0,5,65,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,131,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,3,3,0,2,6,2,0,0,0,5,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,133,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,135,                throw ex;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",2,0,0,0,2,1,3,0,0,4,105,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",0,0,0,0,2,1,5,0,1,4,38,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,6,4,0,1,6,2,2,0,1,7,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,0,8,0,12,0,1,4,100,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,2,3,0,2,6,1,6,0,0,6,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,1,0,0,0,0,0,0,0,1,2,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",1,0,0,0,2,0,4,0,1,4,29,9,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,1,2,1,0,6,0,0,0,1,5,42,8,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,278,            qTy(residuals);,0,0,0,1,2,0,2,0,1,4,15,6,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,1,1,1,0,6,0,0,0,1,5,38,14,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,346,"                determineLMParameter(oldRes, delta, diag, work1, work2, work3);",0,0,0,0,2,0,7,0,1,3,63,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",3,0,0,0,2,1,0,1,2,5,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,1,7,1,5,0,1,5,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,444,                        return current;,1,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,1,0,1,0,2,2,0,0,1,5,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,3,1,1,0,2,0,0,0,1,5,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,1,0,1,2,1,2,0,0,6,35,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,            chiSquare += residual * residual / residualsWeights[i];,3,2,1,0,2,0,0,0,1,5,55,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,2,0,0,1,2,0,1,0,1,5,37,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,        setAbsoluteAccuracy(1E-10);,0,0,0,1,2,0,1,0,1,4,27,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,0,0,1,2,0,1,0,1,4,29,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,60,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",1,0,0,0,2,1,3,0,1,5,40,5,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,3,1,0,1,3,1,0,0,0,5,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,126,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,127,        while (count < maximalIterationCount) {,2,1,0,1,3,1,0,0,0,5,39,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",1,0,0,0,2,1,3,0,1,5,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,3,1,0,1,3,1,0,0,0,5,36,8,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",5,1,0,1,4,0,3,0,2,6,64,8,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,1,0,0,0,0,0,0,0,1,2,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",4,3,0,1,4,1,5,0,1,7,75,4,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,57,        throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,        throw new MaxIterationsExceededException(maximalIterationCount);,1,0,0,1,2,2,0,1,1,6,64,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,92,        return optimizer.getFunctionValue();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,        return optimizer.getResult();,0,0,0,1,2,1,2,0,0,4,29,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,1,0,0,0,0,0,0,0,1,2,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",1,0,0,0,2,0,4,0,1,4,29,9,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,2,0,0,1,6,38,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,1,0,1,0,2,1,0,0,0,4,24,9,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,1,1,1,0,4,0,0,0,1,5,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,1,0,0,0,0,0,0,0,1,2,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,419,"                        return new VectorialPointValuePair(point, objective);",2,0,0,0,2,2,0,1,1,5,53,10,0.13793,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",2,0,0,0,2,2,0,1,1,5,53,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,2,8,0,3,0,1,6,61,10,0.8,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,1,0,0,0,0,0,0,0,2,2,17,12,1.0,1,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,1,0,0,0,0,0,0,0,2,2,17,14,1.0,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,115,"            setResult(yMin, 0);",0,0,0,0,2,0,2,0,1,3,19,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);",0,0,0,0,2,0,2,0,1,3,19,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,1.0,1,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,247,              scale = new double[y0.length];,3,0,0,0,2,2,0,0,1,4,30,12,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",3,0,0,0,2,0,3,0,0,3,52,13,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,              scale = vecAbsoluteTolerance;,2,0,0,0,0,0,0,0,1,2,29,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,1,0,0,2,4,1,1,1,1,7,36,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,1,1,0,1,3,1,0,0,0,5,23,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,1,0,0,1,4,0,2,0,2,5,30,6,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,1,0,0,0,0,1,0,0,0,2,16,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,4,2,0,1,3,2,0,0,1,6,33,8,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,2,4,1,0,10,0,0,0,1,5,69,10,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,1,0,0,0,0,1,0,0,0,2,15,4,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,4,2,0,1,3,2,0,0,1,6,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,263,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,2,4,1,0,10,0,0,0,1,5,69,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,1,0,0,1,2,0,2,1,0,5,35,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,1,0,0,1,2,0,2,0,1,5,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",1,0,0,1,4,0,6,0,1,5,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,219,                    if ((Math.abs(root - ta) <= convergence) &&,3,3,0,2,5,1,2,0,0,6,43,10,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,2,3,0,0,5,45,11,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,226,                        pendingEventTime = root;,2,0,0,0,0,0,0,0,1,2,24,13,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,            int j = 4 * n - 1;,2,2,0,0,0,1,0,0,0,3,18,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,2,2,0,1,3,1,0,0,0,5,22,8,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",1,0,0,0,4,2,3,0,2,5,56,7,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,905,                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {,5,4,0,1,3,2,0,0,1,6,47,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,2,4,1,1,7,1,0,0,0,6,45,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,1,0,0,2,4,0,2,1,2,6,79,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,2,1,0,2,4,0,2,1,2,7,63,6,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,1,0,0,1,2,1,1,0,1,6,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,1,0,1,4,29,6,2.0,1,1,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },0,0,0,0,1,0,0,0,0,1,1,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,2,2,0,1,3,1,0,0,0,5,22,4,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,1,1,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,1,1,1,1,7,1,0,0,0,6,49,6,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,0,0,0,1,2,2,0,1,1,5,47,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,0,7,1,6,0,2,4,56,6,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,1,1,0,1,3,1,0,0,0,5,18,8,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,0,2,0,0,0,1,3,17,6,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,4,2,0,2,7,2,2,0,3,7,83,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0,1,0,0,5,1,4,0,0,4,41,10,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",1,0,0,1,4,2,3,1,1,7,70,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,1,0,0,2,4,0,1,1,1,6,28,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,1,0,0,1,3,1,0,0,1,5,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,1,0,0,1,4,1,0,1,0,5,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,2,0,1,2,5,79,7,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,1,0,0,1,2,1,1,0,1,6,27,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,0,2,1,3,0,2,4,42,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",1,0,0,0,4,1,5,0,1,5,58,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,1,0,0,6,1,7,0,1,5,64,5,0.11111,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,5,2,0,1,3,2,0,0,1,6,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,2,0,0,2,4,1,2,0,1,6,30,6,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,5,2,0,1,3,2,0,0,1,6,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,2,0,0,2,4,1,2,0,1,6,30,6,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,298,        return logSum;      ,1,0,0,0,0,1,0,0,0,2,14,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,1,0,0,0,4,6,0,0,3,4,51,2,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,1,0,0,2,4,1,4,0,1,6,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,51,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,2,2,0,1,3,1,0,0,0,5,17,4,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,3,2,0,1,2,0,0,0,1,5,20,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,1,3,0,3,16,0,14,0,1,6,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,0,2,0,3,0,1,3,17,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,138,        if (sign >= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03226,1,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,3,0,0,0,4,2,0,2,1,5,50,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,3,0,0,0,4,4,0,0,1,4,42,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,2,0,0,1,2,2,2,0,1,6,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,2,0,0,1,2,1,2,0,0,5,42,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,2,0,0,1,6,3,2,0,0,5,64,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,1,0,0,0,2,4,2,0.18182,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,1,1,1,2,8,1,0,0,1,7,43,6,0.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,2,4,0,1,4,1,2,0,0,6,40,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,4,3,0,0,0,1,0,0,0,3,37,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,32,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",1,0,0,0,2,1,3,0,1,5,41,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,1,0,0,1,2,1,2,0,0,5,25,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,1,0,0,1,2,1,2,0,0,5,23,5,0.5,1,1,-1
