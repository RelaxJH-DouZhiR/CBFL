project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0.09091,1,,1
org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0.09091,1,,1
org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,0.09091,0,,0
org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,0.09091,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,91,        this.index = index;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,99,        return direction;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,113,        return index;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,292,    public static enum OrderDirection {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,294,"        INCREASING,",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,296,        DECREASING,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,46,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,60,        super(cause);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,63,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,70,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,74,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,3,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,3,38,    },0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,3,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,37,    public MathInternalError() {,0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,39,    },0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,3,57,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,3,42,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,3,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,3,51,    },0.0,0,,0
org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,3,38,    },0.0,0,,0
org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,3,46,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,87,        for (int i = 0; i < arr.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,88,            newArr[i] = arr[i] * val;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,90,        return newArr;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,106,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,120,        if (a.length != b.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,125,        for (int i = 0; i < a.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,128,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,143,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,146,        final double[] result = a.clone();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,148,            result[i] -= b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,150,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,164,        if (a.length != b.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,170,            result[i] *= b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,172,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,190,        final double[] result = a.clone();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,192,            result[i] /= b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,194,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,207,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,209,        return sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,221,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,224,      return sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,256,      return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,271,        return max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,282,        int max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,286,        return max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,311,        T previous = val[0];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,324,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,329,                comp = val[i].compareTo(previous);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,330,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,332,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,335,                    if (comp > 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,336,                       return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,347,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,377,        final int max = val.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,381,        for (index = 1; index < max; index++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,397,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,415,            return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,419,        if (abort) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,422,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,437,"        checkOrder(val, dir, strict, true);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,438,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,449,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,462,        for (int i = 1; i < in.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,464,                throw new DimensionMismatchException(,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,469,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,483,                throw new NotStrictlyPositiveException(in[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,486,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,499,                throw new NotPositiveException(in[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,502,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,513,        for (int i = 0; i < in.length; i ++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,514,            for (int j = 0; j < in[i].length; j++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,515,                if (in[i][j] < 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,520,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,585,        double s1 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,587,        double s3 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,600,                    } else {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,603,                    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,609,                    } else {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,610,                        if (xabs != 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,611,                            double r = xabs / x3max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,612,                            s3 += r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,613,                        },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,627,                if (s2 >= x3max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,634,        return norm;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,656,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,683,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,687,        final int len = x.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,689,        for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,690,            final double[] y = yList[j];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,691,            if (y == null) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,692,                throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,695,"                throw new DimensionMismatchException(y.length, len);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,702,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,703,"            list.add(new Pair<Double, Integer>(x[i], i));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,707,"        final Comparator<Pair<Double, Integer>> comp",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,722,"        Collections.sort(list, comp);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,727,        final int[] indices = new int[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,731,            indices[i] = e.getValue();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,745,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,779,         return output;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,793,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,794,         return output;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,818,"            throw new DimensionMismatchException(len, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,848,        double sPrime = sHighPrev - prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,849,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,854,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,871,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,910,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,913,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,919,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,922,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,925,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,926,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,927,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,940,        double result = s12High + (prod1Low + prod2Low + s12Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,948,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,991,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,995,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1006,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1014,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1031,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1039,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1045,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1101,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1106,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1116,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1119,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1128,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1137,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1142,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1150,        final double s1234High  = s123High + prod4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1164,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1178,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1181,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1186,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1189,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1208,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1212,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1215,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1233,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1237,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1240,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1255,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1259,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1261,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1262,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1263,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1266,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1302,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1306,             if (!Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1313,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1315,                 out[i] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1320,         return out;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1337,         return array;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1356,"             T[] dummyRow = buildArray(field, 0);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1358,         } else {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1359,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1363,             for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1367,         return array;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1395,         MathUtils.checkNotNull(x);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1396,         MathUtils.checkNotNull(h);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1401,         if (xLen == 0 || hLen == 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1407,         final double[] y = new double[totalLength];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1414,             while (k < hLen && j >= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,1420,         return y;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,709,"            new Comparator<Pair<Double, Integer>>() {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,3,717,                return o2.getKey().compareTo(o1.getKey());,0.0,0,,0
