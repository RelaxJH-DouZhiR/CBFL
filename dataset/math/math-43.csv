project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },9.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6.0,0,,0
org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,1.28571,0,,0
org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,1.28571,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,1.16129,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,1.14286,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",1.14286,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,        checkEmpty();,1.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,        this.geoMeanImpl = geoMeanImpl;,1.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,579,    },1.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,        checkEmpty();,1.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,636,        this.varianceImpl = varianceImpl;,1.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,    },1.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,84,        value += FastMath.log(d);,0.85714,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,        n++;,0.85714,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,    },0.85714,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,        sumImpl.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,151,        sumsqImpl.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,152,        minImpl.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,153,        maxImpl.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,154,        sumLogImpl.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,155,        secondMoment.increment(value);,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,0.81818,1,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,0.81818,1,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,0.81818,1,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,167,        n++;,0.81818,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,168,    },0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,76,        if (d > value || Double.isNaN(value)) {,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,77,            value = d;,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,79,        n++;,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,80,    },0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,76,        if (d < value || Double.isNaN(value)) {,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,77,            value = d;,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,79,        n++;,0.81818,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,80,    },0.81818,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,76,        value += d;,0.8,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,77,        n++;,0.8,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,78,    },0.8,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,75,        value += d * d;,0.8,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,76,        n++;,0.8,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,77,    },0.8,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,102,        if (n == 0) {,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,103,            m1 = 0.0;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,105,        n++;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,106,        double n0 = n;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,107,        dev = d - m1;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,108,        nDev = dev / n0;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,109,        m1 += nDev;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,110,    },0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,80,        if (n < 1) {,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,81,            m1 = m2 = 0.0;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,83,        super.increment(d);,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,84,        m2 += ((double) n - 1) * dev * nDev;,0.78261,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,85,    },0.78261,0,,0
org/apache/commons/math/util/FastMath,43,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1269,            lnza = -0.16624882440418567;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1273,            lnza = lnza * epsilon + -0.5;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1274,            lnza = lnza * epsilon + 1.0;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,1275,            lnza = lnza * epsilon;,0.73469,0,,0
org/apache/commons/math/util/FastMath,43,3791,    private static class lnMant {,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,3804,            } else if (LOAD_RESOURCES) {,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,3809,        },0.70588,0,,0
org/apache/commons/math/util/FastMath,43,375,        return Math.sqrt(a);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1096,"        return log(x, null);",0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1215,        double lnza = 0.0;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1216,        double lnzb = 0.0;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1218,        if (hiPrec != null) {,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1292,        double a = LN_2_A*exp;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1293,        double b = 0.0;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1294,        double c = a+lnm[0];,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1295,        double d = -(c-a-lnm[0]);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1296,        a = c;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1297,        b = b + d;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1299,        c = a + lnza;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1300,        d = -(c - a - lnza);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1301,        a = c;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1302,        b = b + d;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1304,        c = a + LN_2_B*exp;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1305,        d = -(c - a - LN_2_B*exp);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1306,        a = c;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1307,        b = b + d;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1309,        c = a + lnm[1];,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1310,        d = -(c - a - lnm[1]);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1311,        a = c;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1312,        b = b + d;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1314,        c = a + lnzb;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1315,        d = -(c - a - lnzb);,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1316,        a = c;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1317,        b = b + d;,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1319,        if (hiPrec != null) {,0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1324,        return a + b;,0.70588,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6174,        return LN_MANT;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,123,    public SummaryStatistics() {,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,67,    protected long n = 0;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,70,    protected SecondMoment secondMoment = new SecondMoment();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,73,    protected Sum sum = new Sum();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,76,    protected SumOfSquares sumsq = new SumOfSquares();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,79,    protected Min min = new Min();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,82,    protected Max max = new Max();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,85,    protected SumOfLogs sumLog = new SumOfLogs();,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,88,    protected GeometricMean geoMean = new GeometricMean(sumLog);,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,91,    protected Mean mean = new Mean(secondMoment);,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,94,    protected Variance variance = new Variance(secondMoment);,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,97,    private StorelessUnivariateStatistic sumImpl = sum;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,100,    private StorelessUnivariateStatistic sumsqImpl = sumsq;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,103,    private StorelessUnivariateStatistic minImpl = min;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,106,    private StorelessUnivariateStatistic maxImpl = max;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,109,    private StorelessUnivariateStatistic sumLogImpl = sumLog;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,112,    private StorelessUnivariateStatistic geoMeanImpl = geoMean;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,115,    private StorelessUnivariateStatistic meanImpl = mean;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,118,    private StorelessUnivariateStatistic varianceImpl = variance;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,124,    },0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,89,    public Mean(final FirstMoment m1) {,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,90,        this.moment = m1;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,91,        incMoment = false;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,92,    },0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,84,    public GeometricMean(SumOfLogs sumOfLogs) {,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,85,        this.sumOfLogs = sumOfLogs;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,86,    },0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,111,    public Variance(final SecondMoment m2) {,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,112,        incMoment = false;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,113,        this.moment = m2;,0.70588,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,114,    },0.70588,0,,0
org/apache/commons/math/util/FastMath,43,1106,        if (x==0) { // Handle special case of +0/-0,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1109,        long bits = Double.doubleToLongBits(x);,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1123,        if (x == Double.POSITIVE_INFINITY) {,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1132,        int exp = (int)(bits >> 52)-1023;,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.67925,0,,0
org/apache/commons/math/util/FastMath,43,1154,        if (exp == -1 || exp == 0) {,0.67925,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,607,        this.meanImpl = meanImpl;,0.66667,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,608,    },0.66667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,124,    public Variance(boolean isBiasCorrected) {,0.66667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,125,        moment = new SecondMoment();,0.66667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,126,        this.isBiasCorrected = isBiasCorrected;,0.66667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,127,    },0.66667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,420,                    var = (accum - (accum2 * accum2 / len)) / len;,0.66667,0,,0
org/apache/commons/math/util/FastMath,43,80,public class FastMath {,0.65455,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,29,    private static final double[] EXP_INT_A = new double[] {,0.65455,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,1535,    private static final double[] EXP_INT_B = new double[] {,0.65455,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.65455,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.65455,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,5103,    private static final double[][] LN_MANT = new double[][] {,0.65455,0,,0
org/apache/commons/math/util/FastMath,43,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,115,    private static final double LN_QUICK_COEF[][] = {,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,128,    private static final double LN_HI_PREC_COEF[][] = {,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,141,    private static final double SINE_TABLE_A[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,160,    private static final double SINE_TABLE_B[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,179,    private static final double COSINE_TABLE_A[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,198,    private static final double COSINE_TABLE_B[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,218,    private static final double TANGENT_TABLE_A[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,237,    private static final double TANGENT_TABLE_B[] =,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,256,    private static final long RECIP_2PI[] = new long[] {,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,277,    private static final long PI_O_4_BITS[] = new long[] {,0.52941,0,,0
org/apache/commons/math/util/FastMath,43,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.52941,0,,0
org/apache/commons/math/util/FastMath,43,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.52941,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,120,        double sum = Double.NaN;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,121,"        if (test(values, begin, length, true)) {",0.51613,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,122,            sum = 0.0;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,123,            for (int i = begin; i < begin + length; i++) {,0.51613,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,124,                sum += values[i];,0.51613,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,127,        return sum;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,157,"        if (test(values, begin, length)) {",0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,158,            Sum sum = new Sum();,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,159,            double sampleSize = length;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,162,"            double xbar = sum.evaluate(values, begin, length) / sampleSize;",0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,165,            double correction = 0;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,166,            for (int i = begin; i < begin + length; i++) {,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,167,                correction += values[i] - xbar;,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,169,            return xbar + (correction/sampleSize);,0.51613,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,79,    public FirstMoment() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,80,        n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,81,        m1 = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,82,        dev = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,83,        nDev = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,84,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,35,public abstract class AbstractStorelessUnivariateStatistic,0.51429,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,39,public abstract class AbstractUnivariateStatistic,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,60,        super();,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,61,        m2 = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,62,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,56,    public Sum() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,57,        n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,58,        value = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,59,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,64,    public SumOfLogs() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,65,       value = 0d;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,66,       n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,67,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,55,    public SumOfSquares() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,56,        n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,57,        value = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,58,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,75,    protected SecondMoment moment = null;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,84,    protected boolean incMoment = true;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,91,    private boolean isBiasCorrected = true;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,56,    public Max() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,57,        n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,58,        value = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,59,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,56,    public Min() {,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,57,        n = 0;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,58,        value = Double.NaN;,0.51429,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,59,    },0.51429,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,606,        checkEmpty();,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,131,        double sumLog = Double.NaN;,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,132,"        if (test(values, begin, length, true)) {",0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,133,            sumLog = 0.0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,134,            for (int i = begin; i < begin + length; i++) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,135,                sumLog += FastMath.log(values[i]);,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,138,        return sumLog;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,145,        return FastMath.exp(,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,137,"        return test(values, begin, length, false);",0.48485,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,79,    public Mean() {,0.41026,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,80,        incMoment = true;,0.41026,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,81,        moment = new FirstMoment();,0.41026,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,82,    },0.41026,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,114,            return Double.NaN;,0.4,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,180,                return Double.NaN;,0.28571,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,227,        if (values == null) {,0.25,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,230,"        return evaluate(values, 0, values.length);",0.25,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,286,        return geoMeanImpl.getResult();,0.2,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,100,        return n;,0.2,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,111,        if (sumOfLogs.getN() > 0) {,0.2,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,204,        if (incMoment) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,205,            moment.clear();,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,207,    },0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,256,        double var = Double.NaN;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,258,"        if (test(values, begin, length)) {",0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,259,            clear();,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,260,            if (length == 1) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,262,            } else if (length > 1) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,263,                Mean mean = new Mean();,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,264,"                double m = mean.evaluate(values, begin, length);",0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,265,"                var = evaluate(values, m, begin, length);",0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,268,        return var;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,402,        double var = Double.NaN;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,404,"        if (test(values, begin, length)) {",0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,405,            if (length == 1) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,407,            } else if (length > 1) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,408,                double accum = 0.0;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,409,                double dev = 0.0;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,410,                double accum2 = 0.0;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,411,                for (int i = begin; i < begin + length; i++) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,412,                    dev = values[i] - mean;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,413,                    accum += dev * dev;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,414,                    accum2 += dev;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,416,                double len = length;,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,417,                if (isBiasCorrected) {,0.17391,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,424,        return var;,0.17391,0,,0
org/apache/commons/math/util/FastMath,43,864,            intVal = (int) x;,0.14286,0,,0
org/apache/commons/math/util/FastMath,43,866,            if (intVal > 709) {,0.14286,0,,0
org/apache/commons/math/util/FastMath,43,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.14286,0,,0
org/apache/commons/math/util/FastMath,43,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.14286,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,117,        m1 = Double.NaN;,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,118,        n = 0;,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,119,        dev = Double.NaN;,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,120,        nDev = Double.NaN;,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,121,    },0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,92,        super.clear();,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,93,        m2 = Double.NaN;,0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,94,    },0.125,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,129,        return moment.m1;,0.11429,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,205,        return meanImpl.getResult();,0.10811,0,,0
org/apache/commons/math/util/FastMath,43,922,            result = tempC*z + tempB + tempA;,0.10526,0,,0
org/apache/commons/math/util/FastMath,43,807,"        return exp(x, 0.0, null);",0.10256,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,239,        return varianceImpl.getResult();,0.10256,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,65,    public GeometricMean() {,0.10256,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,66,        sumOfLogs = new SumOfLogs();,0.10256,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,67,    },0.10256,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,179,            if (moment.n == 0) {,0.09756,0,,0
org/apache/commons/math/util/FastMath,43,826,        if (x < 0.0) {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,899,        double z = 0.04168701738764507;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,900,        z = z * epsilon + 0.1666666505023083;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,901,        z = z * epsilon + 0.5000000000042687;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,902,        z = z * epsilon + 1.0;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,903,        z = z * epsilon + -3.940510424527919E-20;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,910,        double tempA = intPartA * fracPartA;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,917,        final double tempC = tempB + tempA;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,919,        if (extra != 0.0) {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,925,        if (hiPrec != null) {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,931,        return result;,0.08511,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6142,        return EXP_INT_A;,0.08511,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6150,        return EXP_INT_B;,0.08511,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6158,        return EXP_FRAC_A;,0.08511,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6166,        return EXP_FRAC_B;,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3711,    private static class ExpIntTable {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3750,        },0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3754,    private static class ExpFracTable {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.08511,0,,0
org/apache/commons/math/util/FastMath,43,3787,        },0.08511,0,,0
org/apache/commons/math/exception/NotPositiveException,43,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,43,38,    },0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,43,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,43,48,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,70,        this.min = min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,72,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,43,85,        return min;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,43,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,43,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,43,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,43,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,47,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,51,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,43,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,43,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,43,42,    },0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,43,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,43,51,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,46,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,57,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,43,63,        return dimension;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,45,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,46,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,47,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,60,        super(cause);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,63,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,70,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,74,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,43,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,69,        this.max = max;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,71,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,43,84,        return max;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3797,                LN_MANT = new double[FastMath.LN_MANT_LEN][];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3800,                for (int i = 0; i < LN_MANT.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3801,                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3802,                    LN_MANT[i] = FastMathCalc.slowLog(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3805,                LN_MANT = FastMathResources.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,43,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math/util/FastMath,43,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,43,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,43,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,43,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,384,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,402,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,427,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,430,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,434,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,444,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,461,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,465,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,466,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,499,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,502,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,506,      },0.0,0,,0
org/apache/commons/math/util/FastMath,43,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,43,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,43,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,536,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,539,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,545,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,546,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,549,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,560,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,570,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,574,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,578,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,582,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,583,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,600,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,607,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,628,      },0.0,0,,0
org/apache/commons/math/util/FastMath,43,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,638,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,646,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,669,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,670,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,673,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,691,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,692,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,721,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,722,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,43,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,43,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,783,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,43,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,834,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,43,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,844,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,43,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,854,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,857,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,43,949,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,973,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,974,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1005,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1010,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1148,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1221,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1222,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1223,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1224,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1230,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1238,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1241,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1242,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1243,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1249,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1250,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1251,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1255,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1264,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1265,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1266,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1320,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1321,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1333,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1334,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1342,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1345,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1349,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1354,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1357,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1364,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1365,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1367,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1375,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1377,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1379,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1386,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1409,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1420,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1422,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1423,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1426,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1427,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1431,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1435,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1442,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1446,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1447,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1449,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1450,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1453,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1457,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1458,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1460,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1461,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1463,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1468,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1469,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1472,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1473,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1481,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1484,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1485,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1487,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1490,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1493,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1494,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1499,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1505,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1506,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1509,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1510,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1512,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1517,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1520,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1523,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1527,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1535,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1536,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1537,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1538,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1542,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1546,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1548,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1551,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1552,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1557,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1558,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1561,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1564,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1565,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1567,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1570,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1571,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1572,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1574,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1588,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1590,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1596,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1598,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1608,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1610,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1614,        p *= x2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1616,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1637,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1638,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1639,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1646,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1672,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1673,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1675,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1676,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1677,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1678,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1679,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1681,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1682,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1683,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1684,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1685,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1729,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1732,            c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1733,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1734,            a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1735,            b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1738,        result = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1740,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1751,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1754,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1755,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1756,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1758,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1781,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1782,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1783,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1790,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1815,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1816,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1819,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1820,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1821,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1822,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1823,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1825,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1826,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1827,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1828,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1829,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1834,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1835,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1839,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1841,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1842,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1843,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1844,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1845,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1847,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1848,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1849,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1850,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1851,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1856,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1857,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1859,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1876,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1879,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1880,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1881,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1883,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1885,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1892,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1895,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1896,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1897,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1900,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1903,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1925,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1928,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1929,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1935,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1936,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1938,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1945,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1950,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1951,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1953,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1954,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1956,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1957,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1958,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1959,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1961,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1962,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1969,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1971,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1977,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1978,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1983,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1985,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1989,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1990,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1991,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1992,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1993,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2000,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2003,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2005,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2009,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2010,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2012,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2013,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2014,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2031,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2032,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2033,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2036,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2037,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2042,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2043,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2044,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2045,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2047,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2055,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2057,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2063,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2069,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2071,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2077,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2086,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2089,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2091,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2095,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2096,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2099,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2100,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2101,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2108,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2111,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2113,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2120,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2124,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2125,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2126,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2127,    },0.0,0,,0
org/apache/commons/math/util/FastMath,43,2135,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2136,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2138,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2141,        xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2142,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2143,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2144,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2148,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2150,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2151,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2153,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2157,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2161,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2165,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2168,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2169,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2181,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2182,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2183,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2185,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2186,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2187,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2188,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2190,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2191,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2192,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2193,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2195,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2196,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2202,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2203,            },0.0,0,,0
org/apache/commons/math/util/FastMath,43,2204,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2205,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2206,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2209,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2213,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2215,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2217,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2219,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2221,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2223,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2233,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2236,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2237,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2238,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2242,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2246,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2247,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2251,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2254,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2255,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2267,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2268,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2269,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2271,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2272,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2273,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2274,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2276,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2277,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2278,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2279,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2281,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2282,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2288,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2289,            },0.0,0,,0
org/apache/commons/math/util/FastMath,43,2290,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2291,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2292,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2298,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2300,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2302,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2304,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2306,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2308,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2318,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2319,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2322,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2323,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2324,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2325,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2329,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2331,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2332,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2334,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2338,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2342,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2343,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2347,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2350,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2351,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2363,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2364,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2365,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2367,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2368,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2369,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2370,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2372,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2373,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2374,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2375,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2377,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2378,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2384,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2385,            },0.0,0,,0
org/apache/commons/math/util/FastMath,43,2386,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2387,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2388,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2391,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2393,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2396,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2397,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2398,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2400,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2401,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2402,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2403,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2407,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2408,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2410,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2413,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2414,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2417,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2426,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2436,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2443,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2445,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2446,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2447,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2451,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2455,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2458,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2459,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2465,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2466,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2467,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2470,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2471,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2472,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2473,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2474,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2477,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2480,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2482,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2483,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2484,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2486,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2487,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2489,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2490,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2491,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2494,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2496,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2497,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2498,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2500,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2501,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2502,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2507,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2508,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2512,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2513,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2516,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2527,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2533,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2536,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2538,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2539,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2540,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2543,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2549,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2550,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2551,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2552,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2553,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2555,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2556,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2558,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2560,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2561,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2563,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2564,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2565,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2567,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2568,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2572,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2573,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2586,        if (x !=x || y != y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2587,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2590,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2591,            double result = x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2592,            double invx = 1.0/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2593,            double invy = 1.0/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2595,            if (invx == 0.0) { // X is infinite,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2596,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2597,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2599,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2603,            if (x < 0.0 || invx < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2604,                if (y < 0.0 || invy < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2605,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2607,                    return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2610,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2616,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2617,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2618,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2621,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2622,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2625,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2628,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2629,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2630,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2633,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2634,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2637,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2640,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2641,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2642,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2645,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2646,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2650,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,43,2652,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2653,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2656,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2657,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2663,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2664,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2665,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2668,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2669,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2674,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2675,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2676,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2679,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2680,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2683,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2684,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2686,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2688,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2689,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2690,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2692,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2693,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2697,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2699,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2707,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2708,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2711,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2712,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2715,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2716,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2719,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2720,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2723,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2724,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2730,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2731,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2732,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2735,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2736,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2739,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2740,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2742,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2743,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2745,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2746,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2747,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2751,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2752,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2753,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2754,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2757,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2760,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2763,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2764,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2765,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2766,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2768,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2769,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2771,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2772,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2773,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2775,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2783,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2784,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2787,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2788,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2791,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2792,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2795,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2796,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2799,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2800,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2806,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2807,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2808,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2811,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2812,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2815,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2816,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2818,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2819,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2821,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2822,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2823,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2826,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2827,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2828,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2829,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2832,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2835,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2836,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2837,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2840,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2843,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2844,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2847,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2848,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2850,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2851,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2853,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2854,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2855,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2857,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,2866,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2867,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2868,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2870,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2871,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2872,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2876,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2877,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2878,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2879,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2882,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2884,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2888,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2891,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2895,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2898,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2899,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2900,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2901,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2902,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2904,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2909,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2910,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2911,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2914,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2915,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2916,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2918,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2919,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2920,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2921,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2922,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2923,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2925,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2926,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2928,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2929,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2930,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2932,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2935,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2937,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2938,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2941,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2951,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2952,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2956,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2957,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2959,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2960,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2962,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2963,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2964,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2966,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2976,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2977,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2981,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2982,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2984,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2985,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2987,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,2996,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3005,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3014,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3032,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3033,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3035,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3044,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3045,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3047,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3059,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3060,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3064,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3065,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3067,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3068,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3070,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3071,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3075,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3076,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3077,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3078,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3081,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3083,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3085,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3087,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3088,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3092,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3095,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3096,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3097,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3099,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3101,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3105,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3109,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3112,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3113,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3114,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3116,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3117,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3119,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3120,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3122,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3125,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3126,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3128,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3143,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3144,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3148,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3149,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3151,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3152,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3154,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3155,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3159,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3160,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3161,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3162,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3165,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3167,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3169,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3171,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3172,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3176,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3179,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3180,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3181,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3183,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3185,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3189,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3193,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3196,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3197,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3198,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3200,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3201,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3203,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3204,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3206,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3209,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3210,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3212,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3252,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3253,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3254,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3255,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3256,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3257,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3258,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3259,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3264,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3265,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3266,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3267,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3308,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3309,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3310,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3311,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3312,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3313,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3314,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3315,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3320,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3321,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3322,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3323,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3337,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3341,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3342,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3345,        y = (long) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3346,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3347,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3350,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3351,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3354,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3364,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3365,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3368,        y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3369,        if (y == x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3370,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3373,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3375,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3376,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3379,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3387,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3388,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3390,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3391,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3392,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3394,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3396,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3397,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3401,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3402,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3410,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3418,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3427,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3436,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3445,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3446,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3448,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3449,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3452,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3453,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3457,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3458,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3459,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3461,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3470,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3471,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3473,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3474,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3477,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3478,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3482,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3483,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3484,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3486,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3495,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3504,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3513,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3514,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3516,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3517,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3520,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3521,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3525,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3526,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3527,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3529,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3538,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3539,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3541,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3542,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3545,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3546,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3550,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3551,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3552,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3554,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3572,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3573,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3574,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3575,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3578,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3579,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3580,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3582,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3583,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3585,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3589,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3592,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3593,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3596,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3599,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3639,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3640,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3641,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3642,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3644,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3656,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3657,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3658,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3659,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3661,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3674,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3687,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3696,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3708,    },0.0,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,43,6134,    private FastMathLiteralArrays() {},0.0,0,,0
org/apache/commons/math/util/FastMath,43,3723,                EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3724,                EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3726,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3727,                final double recip[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3730,                for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3731,"                    FastMathCalc.expint(i, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3732,                    EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3733,                    EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3735,                    if (i != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3737,"                        FastMathCalc.splitReciprocal(tmp, recip);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3738,                        EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3739,                        EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3742,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3743,                final double[][] expInt = FastMathResources.loadExpInt();,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3744,                EXP_INT_TABLE_A = expInt[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3745,                EXP_INT_TABLE_B = expInt[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3746,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3770,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,43,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3779,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3781,                EXP_FRAC_TABLE_A = expFrac[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3782,                EXP_FRAC_TABLE_B = expFrac[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,43,3783,            } else {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,44,        super();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,45,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,52,    public SynchronizedSummaryStatistics(SynchronizedSummaryStatistics original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,53,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,54,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,61,        return super.getSummary();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,69,        super.addValue(value);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,70,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,77,        return super.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,85,        return super.getSum();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,93,        return super.getSumsq();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,101,        return super.getMean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,109,        return super.getStandardDeviation();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,117,        return super.getVariance();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,125,        return super.getPopulationVariance();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,133,        return super.getMax();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,141,        return super.getMin();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,149,        return super.getGeometricMean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,157,        return super.toString();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,165,        super.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,166,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,173,        return super.equals(object);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,181,        return super.hashCode();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,189,        return super.getSumImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,197,        super.setSumImpl(sumImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,198,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,205,        return super.getSumsqImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,213,        super.setSumsqImpl(sumsqImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,214,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,221,        return super.getMinImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,229,        super.setMinImpl(minImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,230,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,237,        return super.getMaxImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,245,        super.setMaxImpl(maxImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,246,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,253,        return super.getSumLogImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,261,        super.setSumLogImpl(sumLogImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,262,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,269,        return super.getGeoMeanImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,277,        super.setGeoMeanImpl(geoMeanImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,278,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,285,        return super.getMeanImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,293,        super.setMeanImpl(meanImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,294,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,301,        return super.getVarianceImpl();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,309,        super.setVarianceImpl(varianceImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,310,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,320,        SynchronizedSummaryStatistics result =,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,322,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,323,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,338,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,339,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,340,        synchronized (source) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,341,            synchronized (dest) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,342,"                SummaryStatistics.copy(source, dest);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,343,            },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,344,        },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,345,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics,43,35,public class SynchronizedSummaryStatistics extends SummaryStatistics {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,131,    public SummaryStatistics(SummaryStatistics original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,132,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,133,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,141,"        return new StatisticalSummaryValues(getMean(), getVariance(), getN(),",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,159,            meanImpl.increment(value);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,162,            varianceImpl.increment(value);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,165,            geoMeanImpl.increment(value);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,175,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,183,        return sumImpl.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,194,        return sumsqImpl.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,216,        double stdDev = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,217,        if (getN() > 0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,218,            if (getN() > 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,219,                stdDev = FastMath.sqrt(getVariance());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,221,                stdDev = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,224,        return stdDev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,251,        Variance populationVariance = new Variance(secondMoment);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,252,        populationVariance.setBiasCorrected(false);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,253,        return populationVariance.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,264,        return maxImpl.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,275,        return minImpl.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,298,        return sumLogImpl.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,313,        return secondMoment.getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,324,        StringBuilder outBuffer = new StringBuilder();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,325,"        String endl = ""\n"";",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,326,"        outBuffer.append(""SummaryStatistics:"").append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,327,"        outBuffer.append(""n: "").append(getN()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,328,"        outBuffer.append(""min: "").append(getMin()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,329,"        outBuffer.append(""max: "").append(getMax()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,330,"        outBuffer.append(""mean: "").append(getMean()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,331,"        outBuffer.append(""geometric mean: "").append(getGeometricMean())",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,333,"        outBuffer.append(""variance: "").append(getVariance()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,334,"        outBuffer.append(""sum of squares: "").append(getSumsq()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,335,"        outBuffer.append(""standard deviation: "").append(getStandardDeviation())",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,337,"        outBuffer.append(""sum of logs: "").append(getSumOfLogs()).append(endl);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,338,        return outBuffer.toString();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,345,        this.n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,346,        minImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,347,        maxImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,348,        sumImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,349,        sumLogImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,350,        sumsqImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,351,        geoMeanImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,352,        secondMoment.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,353,        if (meanImpl != mean) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,354,            meanImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,356,        if (varianceImpl != variance) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,357,            varianceImpl.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,359,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,370,        if (object == this) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,371,            return true;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,373,        if (object instanceof SummaryStatistics == false) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,374,            return false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,376,        SummaryStatistics stat = (SummaryStatistics)object;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,377,"        return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,393,        int result = 31 + MathUtils.hash(getGeometricMean());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,394,        result = result * 31 + MathUtils.hash(getGeometricMean());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,395,        result = result * 31 + MathUtils.hash(getMax());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,396,        result = result * 31 + MathUtils.hash(getMean());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,397,        result = result * 31 + MathUtils.hash(getMin());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,398,        result = result * 31 + MathUtils.hash(getN());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,399,        result = result * 31 + MathUtils.hash(getSum());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,400,        result = result * 31 + MathUtils.hash(getSumsq());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,401,        result = result * 31 + MathUtils.hash(getVariance());,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,402,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,412,        return sumImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,431,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,432,        this.sumImpl = sumImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,433,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,441,        return sumsqImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,460,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,461,        this.sumsqImpl = sumsqImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,462,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,470,        return minImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,489,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,490,        this.minImpl = minImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,491,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,499,        return maxImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,518,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,519,        this.maxImpl = maxImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,520,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,528,        return sumLogImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,547,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,548,        this.sumLogImpl = sumLogImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,549,        geoMean.setSumLogImpl(sumLogImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,550,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,558,        return geoMeanImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,587,        return meanImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,616,        return varianceImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,644,            throw new MathIllegalStateException(,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,655,        SummaryStatistics result = new SummaryStatistics();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,656,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,657,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,670,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,671,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,672,        dest.maxImpl = source.maxImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,673,        dest.minImpl = source.minImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,674,        dest.sumImpl = source.sumImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,675,        dest.sumLogImpl = source.sumLogImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,676,        dest.sumsqImpl = source.sumsqImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,677,        dest.secondMoment = source.secondMoment.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,678,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,681,        if (source.getVarianceImpl() instanceof Variance) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,682,            dest.varianceImpl = new Variance(dest.secondMoment);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,684,            dest.varianceImpl = source.varianceImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,686,        if (source.meanImpl instanceof Mean) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,687,            dest.meanImpl = new Mean(dest.secondMoment);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,689,            dest.meanImpl = source.meanImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,691,        if (source.getGeoMeanImpl() instanceof GeometricMean) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,692,            dest.geoMeanImpl = new GeometricMean((SumOfLogs) dest.sumLogImpl);,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,694,            dest.geoMeanImpl = source.geoMeanImpl.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,699,        if (source.geoMean == source.geoMeanImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,700,            dest.geoMean = (GeometricMean) dest.geoMeanImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,702,"            GeometricMean.copy(source.geoMean, dest.geoMean);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,704,        if (source.max == source.maxImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,705,            dest.max = (Max) dest.maxImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,707,"            Max.copy(source.max, dest.max);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,709,        if (source.mean == source.meanImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,710,            dest.mean = (Mean) dest.meanImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,712,"            Mean.copy(source.mean, dest.mean);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,714,        if (source.min == source.minImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,715,            dest.min = (Min) dest.minImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,717,"            Min.copy(source.min, dest.min);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,719,        if (source.sum == source.sumImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,720,            dest.sum = (Sum) dest.sumImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,722,"            Sum.copy(source.sum, dest.sum);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,724,        if (source.variance == source.varianceImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,725,            dest.variance = (Variance) dest.varianceImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,727,"            Variance.copy(source.variance, dest.variance);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,729,        if (source.sumLog == source.sumLogImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,730,            dest.sumLog = (SumOfLogs) dest.sumLogImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,732,"            SumOfLogs.copy(source.sumLog, dest.sumLog);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,734,        if (source.sumsq == source.sumsqImpl) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,735,            dest.sumsq = (SumOfSquares) dest.sumsqImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,737,"            SumOfSquares.copy(source.sumsq, dest.sumsq);",0.0,0,,0
org/apache/commons/math/stat/descriptive/SummaryStatistics,43,739,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,93,         super();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,94,"         copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,95,     },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,128,        return m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,135,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,143,        FirstMoment result = new FirstMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,144,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,145,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,158,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,159,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,160,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,161,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,162,        dest.m1 = source.m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,163,        dest.dev = source.dev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,164,        dest.nDev = source.nDev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,165,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,50,class FirstMoment extends AbstractStorelessUnivariateStatistic,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,60,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,88,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,89,            clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,90,"            incrementAll(values, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,92,        return getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,127,        if (values == null) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,128,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,130,"        incrementAll(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,131,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,146,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,147,            int k = begin + length;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,148,            for (int i = begin; i < k; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,149,                increment(values[i]);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,152,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,163,        if (object == this ) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,164,            return true;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,166,       if (object instanceof AbstractStorelessUnivariateStatistic == false) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,167,            return false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,169,        AbstractStorelessUnivariateStatistic stat = (AbstractStorelessUnivariateStatistic) object;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,170,"        return Precision.equalsIncludingNaN(stat.getResult(), this.getResult()) &&",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,181,        return 31* (31 + MathUtils.hash(getResult())) + MathUtils.hash(getN());,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,54,        storedData = (values == null) ? null : values.clone();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,55,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,62,        return (storedData == null) ? null : storedData.clone();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,70,        return storedData;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,81,        storedData = new double[length];,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,82,"        System.arraycopy(values, begin, storedData, 0, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,83,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,93,        return evaluate(storedData);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,100,"        test(values, 0, 0);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,101,"        return evaluate(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,164,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,168,"            throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,172,"            throw new NotPositiveException(LocalizedFormats.LENGTH, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,176,"            throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,181,            return false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,222,"        return test(values, weights, begin, length, false);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,258,        if (weights == null) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,259,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,262,        if (weights.length != values.length) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,263,"            throw new DimensionMismatchException(weights.length, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,266,        boolean containsPositiveWeight = false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,267,        for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,268,            if (Double.isNaN(weights[i])) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,269,"                throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,271,            if (Double.isInfinite(weights[i])) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,272,"                throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, weights[i], i);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,274,            if (weights[i] < 0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,275,"                throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,278,                containsPositiveWeight = true;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,282,        if (!containsPositiveWeight) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,283,            throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,286,"        return test(values, begin, length, allowEmpty);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,71,        super(original);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,72,        this.m2 = original.m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,73,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,101,        return m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,109,        SecondMoment result = new SecondMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,110,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,111,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,124,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,125,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,126,"        FirstMoment.copy(source, dest);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,127,        dest.m2 = source.m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,128,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,48,public class SecondMoment extends FirstMoment implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,67,    public Sum(Sum original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,68,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,69,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,85,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,92,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,100,        value = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,101,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,102,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,159,        double sum = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,160,"        if (test(values, weights, begin, length, true)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,161,            sum = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,162,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,163,                sum += values[i] * weights[i];,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,166,        return sum;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,192,"        return evaluate(values, weights, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,200,        Sum result = new Sum();,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,201,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,202,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,215,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,216,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,217,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,218,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,219,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,220,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,43,40,public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,75,    public SumOfLogs(SumOfLogs original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,76,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,77,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,93,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,108,        value = 0d;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,109,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,110,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,146,        SumOfLogs result = new SumOfLogs();,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,147,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,148,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,161,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,162,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,163,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,164,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,165,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,166,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,48,public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,66,    public SumOfSquares(SumOfSquares original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,67,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,68,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,84,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,91,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,99,        value = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,100,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,101,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,119,        double sumSq = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,120,"        if (test(values, begin, length, true)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,121,            sumSq = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,122,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,123,                sumSq += values[i] * values[i];,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,126,        return sumSq;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,134,        SumOfSquares result = new SumOfSquares();,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,135,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,136,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,149,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,150,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,151,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,152,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,153,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,154,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,39,public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,100,    public Mean(Mean original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,101,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,102,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,109,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,110,            moment.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,112,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,119,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,120,            moment.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,122,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,136,        return moment.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,171,        return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,205,"        if (test(values, weights, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,206,            Sum sum = new Sum();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,209,"            double sumw = sum.evaluate(weights,begin,length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,213,            double correction = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,214,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,215,                correction += weights[i] * (values[i] - xbarw);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,217,            return xbarw + (correction/sumw);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,219,        return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,247,"        return evaluate(values, weights, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,255,        Mean result = new Mean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,256,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,257,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,271,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,272,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,273,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,274,        dest.incMoment = source.incMoment;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,275,        dest.moment = source.moment.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,276,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,43,61,public class Mean extends AbstractStorelessUnivariateStatistic,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,76,        super();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,77,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,78,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,93,        GeometricMean result = new GeometricMean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,94,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,95,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,103,        sumOfLogs.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,104,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,112,            return FastMath.exp(sumOfLogs.getResult() / sumOfLogs.getN());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,123,        sumOfLogs.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,124,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,153,        return sumOfLogs.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,169,        checkEmpty();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,170,        this.sumOfLogs = sumLogImpl;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,171,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,179,        return sumOfLogs;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,192,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,193,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,194,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,195,        dest.sumOfLogs = source.sumOfLogs.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,196,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,203,        if (getN() > 0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,204,            throw new MathIllegalStateException(,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,208,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,54,public class GeometricMean extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,97,    public Variance() {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,98,        moment = new SecondMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,99,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,138,"    public Variance(boolean isBiasCorrected, SecondMoment m2) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,139,        incMoment = false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,140,        this.moment = m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,141,        this.isBiasCorrected = isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,142,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,150,    public Variance(Variance original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,151,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,152,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,169,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,170,            moment.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,172,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,181,            } else if (moment.n == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,182,                return 0d;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,184,                if (isBiasCorrected) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,185,                    return moment.m2 / (moment.n - 1d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,187,                    return moment.m2 / (moment.n);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,196,        return moment.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,228,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,261,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,316,        double var = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,318,"        if (test(values, weights,begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,319,            clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,320,            if (length == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,321,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,322,            } else if (length > 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,323,                Mean mean = new Mean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,324,"                double m = mean.evaluate(values, weights, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,325,"                var = evaluate(values, weights, m, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,328,        return var;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,370,"        return evaluate(values, weights, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,406,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,418,                    var = (accum - (accum2 * accum2 / len)) / (len - 1.0);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,453,"        return evaluate(values, mean, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,504,        double var = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,506,"        if (test(values, weights, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,507,            if (length == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,508,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,509,            } else if (length > 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,510,                double accum = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,511,                double dev = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,512,                double accum2 = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,513,                for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,514,                    dev = values[i] - mean;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,515,                    accum += weights[i] * (dev * dev);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,516,                    accum2 += weights[i] * dev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,519,                double sumWts = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,520,                for (int i = 0; i < weights.length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,521,                    sumWts += weights[i];,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,524,                if (isBiasCorrected) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,527,                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,531,        return var;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,576,"        return evaluate(values, weights, mean, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,583,        return isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,590,        this.isBiasCorrected = biasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,591,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,598,        Variance result = new Variance();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,599,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,600,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,613,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,614,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,615,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,616,        dest.moment = source.moment.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,617,        dest.isBiasCorrected = source.isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,618,        dest.incMoment = source.incMoment;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,619,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,43,69,"public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,67,    public Max(Max original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,68,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,69,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,87,        value = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,88,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,89,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,96,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,103,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,130,        double max = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,131,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,132,            max = values[begin];,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,133,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,134,                if (!Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,135,                    max = (max > values[i]) ? max : values[i];,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,139,        return max;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,147,        Max result = new Max();,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,148,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,149,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,162,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,163,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,164,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,165,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,166,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,167,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Max,43,42,public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,67,    public Min(Min original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,68,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,69,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,87,        value = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,88,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,89,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,96,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,103,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,130,        double min = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,131,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,132,            min = values[begin];,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,133,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,134,                if (!Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,135,                    min = (min < values[i]) ? min : values[i];,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,139,        return min;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,147,        Min result = new Min();,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,148,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,149,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,162,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,163,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,164,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,165,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,166,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,167,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/rank/Min,43,42,public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
