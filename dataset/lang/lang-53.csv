project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/lang/time/DateUtils,53,676,                        if (field == DateUtils.SEMI_MONTH) {,1.0,1,,1
org/apache/commons/lang/time/DateUtils,53,689,"                            val.add(fields[i][0], 1);",1.0,1,,1
org/apache/commons/lang/time/DateUtils,53,437,        if (date == null) {,0.5,0,,0
org/apache/commons/lang/time/DateUtils,53,440,        Calendar gval = Calendar.getInstance();,0.5,0,,0
org/apache/commons/lang/time/DateUtils,53,441,        gval.setTime(date);,0.5,0,,0
org/apache/commons/lang/time/DateUtils,53,442,"        modify(gval, field, true);",0.5,0,,0
org/apache/commons/lang/time/DateUtils,53,443,        return gval.getTime();,0.5,0,,0
org/apache/commons/lang/time/DateUtils,53,621,        if (val.get(Calendar.YEAR) > 280000000) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,625,        if (field == Calendar.MILLISECOND) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,635,        Date date = val.getTime();,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,636,        long time = date.getTime();,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,637,        boolean done = false;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,640,        int millisecs = val.get(Calendar.MILLISECOND);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,641,        if (!round || millisecs < 500) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,649,        int seconds = val.get(Calendar.SECOND);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,650,        if (!done && (!round || seconds < 30)) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,658,        int minutes = val.get(Calendar.MINUTE);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,659,        if (!done && (!round || minutes < 30)) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,660,            time = time - (minutes * 60000L);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,664,        if (date.getTime() != time) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,665,            date.setTime(time);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,666,            val.setTime(date);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,670,        boolean roundUp = false;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,671,        for (int i = 0; i < fields.length; i++) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,672,            for (int j = 0; j < fields[i].length; j++) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,673,                if (fields[i][j] == field) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,675,                    if (round && roundUp) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,692,                    return;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,696,            int offset = 0;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,697,            boolean offsetSet = false;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,699,            switch (field) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,729,            if (!offsetSet) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,730,                int min = val.getActualMinimum(fields[i][0]);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,731,                int max = val.getActualMaximum(fields[i][0]);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,733,                offset = val.get(fields[i][0]) - min;,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,735,                roundUp = offset > ((max - min) / 2);,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,738,            if (offset != 0) {,0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,739,"                val.set(fields[i][0], val.get(fields[i][0]) - offset);",0.2,0,,0
org/apache/commons/lang/time/DateUtils,53,45,"    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(""GMT"");",0.04762,0,,0
org/apache/commons/lang/time/DateUtils,53,73,    private static final int[][] fields = {,0.04762,0,,0
org/apache/commons/lang/time/DateUtils,53,124,        super();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,125,    },0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,142,        if (date1 == null || date2 == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,143,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,145,        Calendar cal1 = Calendar.getInstance();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,146,        cal1.setTime(date1);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,147,        Calendar cal2 = Calendar.getInstance();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,148,        cal2.setTime(date2);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,149,"        return isSameDay(cal1, cal2);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,166,        if (cal1 == null || cal2 == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,167,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,169,        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,187,        if (date1 == null || date2 == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,188,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,190,        return date1.getTime() == date2.getTime();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,205,        if (cal1 == null || cal2 == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,206,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,208,        return cal1.getTime().getTime() == cal2.getTime().getTime();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,225,        if (cal1 == null || cal2 == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,226,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,228,        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,253,        if (str == null || parsePatterns == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,254,"            throw new IllegalArgumentException(""Date and Patterns must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,257,        SimpleDateFormat parser = null;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,258,        ParsePosition pos = new ParsePosition(0);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,259,        for (int i = 0; i < parsePatterns.length; i++) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,260,            if (i == 0) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,261,                parser = new SimpleDateFormat(parsePatterns[0]);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,263,                parser.applyPattern(parsePatterns[i]);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,265,            pos.setIndex(0);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,266,"            Date date = parser.parse(str, pos);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,267,            if (date != null && pos.getIndex() == str.length()) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,268,                return date;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,271,"        throw new ParseException(""Unable to parse the date: "" + str, -1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,285,"        return add(date, Calendar.YEAR, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,299,"        return add(date, Calendar.MONTH, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,313,"        return add(date, Calendar.WEEK_OF_YEAR, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,327,"        return add(date, Calendar.DAY_OF_MONTH, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,341,"        return add(date, Calendar.HOUR_OF_DAY, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,355,"        return add(date, Calendar.MINUTE, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,369,"        return add(date, Calendar.SECOND, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,383,"        return add(date, Calendar.MILLISECOND, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,398,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,399,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,401,        Calendar c = Calendar.getInstance();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,402,        c.setTime(date);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,403,"        c.add(calendarField, amount);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,404,        return c.getTime();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,438,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,475,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,476,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,478,        Calendar rounded = (Calendar) date.clone();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,479,"        modify(rounded, field, true);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,480,        return rounded;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,514,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,515,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,517,        if (date instanceof Date) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,518,"            return round((Date) date, field);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,519,        } else if (date instanceof Calendar) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,520,"            return round((Calendar) date, field).getTime();",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,522,"            throw new ClassCastException(""Could not round "" + date);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,544,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,545,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,547,        Calendar gval = Calendar.getInstance();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,548,        gval.setTime(date);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,549,"        modify(gval, field, false);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,550,        return gval.getTime();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,570,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,571,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,573,        Calendar truncated = (Calendar) date.clone();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,574,"        modify(truncated, field, false);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,575,        return truncated;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,599,        if (date == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,600,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,602,        if (date instanceof Date) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,603,"            return truncate((Date) date, field);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,604,        } else if (date instanceof Calendar) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,605,"            return truncate((Calendar) date, field).getTime();",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,607,"            throw new ClassCastException(""Could not truncate "" + date);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,622,"            throw new ArithmeticException(""Calendar value too large for accurate calculations"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,626,            return;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,642,            time = time - millisecs;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,643,        if (field == Calendar.SECOND) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,644,            done = true;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,651,            time = time - (seconds * 1000L);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,652,        if (field == Calendar.MINUTE) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,653,            done = true;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,680,                            if (val.get(Calendar.DATE) == 1) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,681,"                                val.add(Calendar.DATE, 15);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,683,"                                val.add(Calendar.DATE, -15);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,684,"                                val.add(Calendar.MONTH, 1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,701,                    if (fields[i][0] == Calendar.DATE) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,705,                        offset = val.get(Calendar.DATE) - 1;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,708,                        if (offset >= 15) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,709,                            offset -= 15;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,712,                        roundUp = offset > 7;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,713,                        offsetSet = true;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,717,                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,720,                        offset = val.get(Calendar.HOUR_OF_DAY);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,721,                        if (offset >= 12) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,722,                            offset -= 12;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,724,                        roundUp = offset > 6;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,725,                        offsetSet = true;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,742,"        throw new IllegalArgumentException(""The field "" + field + "" is not supported"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,772,        if (focus == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,773,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,775,        Calendar gval = Calendar.getInstance();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,776,        gval.setTime(focus);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,777,"        return iterator(gval, rangeStyle);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,805,        if (focus == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,806,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,808,        Calendar start = null;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,809,        Calendar end = null;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,810,        int startCutoff = Calendar.SUNDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,811,        int endCutoff = Calendar.SATURDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,812,        switch (rangeStyle) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,816,"                start = truncate(focus, Calendar.MONTH);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,818,                end = (Calendar) start.clone();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,819,"                end.add(Calendar.MONTH, 1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,820,"                end.add(Calendar.DATE, -1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,822,                if (rangeStyle == RANGE_MONTH_MONDAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,823,                    startCutoff = Calendar.MONDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,824,                    endCutoff = Calendar.SUNDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,832,"                start = truncate(focus, Calendar.DATE);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,833,"                end = truncate(focus, Calendar.DATE);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,834,                switch (rangeStyle) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,837,                        break;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,839,                        startCutoff = Calendar.MONDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,840,                        endCutoff = Calendar.SUNDAY;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,841,                        break;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,843,                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,844,                        endCutoff = startCutoff - 1;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,845,                        break;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,847,                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,848,                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,851,                break;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,853,"                throw new IllegalArgumentException(""The range style "" + rangeStyle + "" is not valid."");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,855,        if (startCutoff < Calendar.SUNDAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,856,            startCutoff += 7;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,858,        if (startCutoff > Calendar.SATURDAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,859,            startCutoff -= 7;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,861,        if (endCutoff < Calendar.SUNDAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,862,            endCutoff += 7;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,864,        if (endCutoff > Calendar.SATURDAY) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,865,            endCutoff -= 7;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,867,        while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,868,"            start.add(Calendar.DATE, -1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,870,        while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,871,"            end.add(Calendar.DATE, 1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,873,"        return new DateIterator(start, end);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,896,        if (focus == null) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,897,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,899,        if (focus instanceof Date) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,900,"            return iterator((Date) focus, rangeStyle);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,901,        } else if (focus instanceof Calendar) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,902,"            return iterator((Calendar) focus, rangeStyle);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,904,"            throw new ClassCastException(""Could not iterate based on "" + focus);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,922,            super();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,923,            this.endFinal = endFinal;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,924,            spot = startFinal;,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,925,"            spot.add(Calendar.DATE, -1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,926,        },0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,934,            return spot.before(endFinal);,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,943,            if (spot.equals(endFinal)) {,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,944,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,946,"            spot.add(Calendar.DATE, 1);",0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,947,            return spot.clone();,0.0,0,,0
org/apache/commons/lang/time/DateUtils,53,957,            throw new UnsupportedOperationException();,0.0,0,,0
