dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,lang,org/apache/commons/lang/StringUtils,58,4504,        int sz = str.length();,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4505,        for (int i = 0; i < sz; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4506,            if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0,3,0,6,13,0,16,0,0,21,76,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4507,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4510,        return true;,4,0,0,0,0,1,4,0,0,9,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4533,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4534,            return false;,2,1,0,0,0,1,0,0,0,4,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4536,        int sz = str.length();,6,1,0,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4537,        for (int i = 0; i < sz; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4538,            if ((Character.isWhitespace(str.charAt(i)) == false)) {,0,1,0,4,9,0,10,0,0,12,55,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4539,                return false;,2,0,0,0,0,1,16,0,0,19,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4542,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4564,        return str == null ? EMPTY : str;,0,0,0,0,0,1,0,0,0,1,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4585,        return str == null ? defaultStr : str;,0,0,0,0,0,1,0,0,0,1,38,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4605,        return StringUtils.isEmpty(str) ? defaultStr : str;,4,0,0,1,2,1,6,0,0,10,51,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4625,        if (str == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4626,            return null;,4,0,0,0,0,1,0,0,0,6,12,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4628,        return new StringBuffer(str).reverse().toString();,0,0,0,3,6,1,0,0,0,10,50,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4651,        if (str == null) {,6,2,1,1,3,0,0,0,0,11,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4652,            return null;,6,1,0,0,0,1,0,0,0,7,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4656,"        String[] strs = split(str, separatorChar);",2,0,0,2,4,0,6,2,0,10,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4657,        ArrayUtils.reverse(strs);,2,1,0,1,2,0,14,0,0,19,25,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4658,"        return join(strs, separatorChar);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4684,        if (str == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4685,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4689,"        String[] strs = split(str, separatorChars);",2,0,0,2,4,0,6,2,0,10,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4690,        ArrayUtils.reverse(strs);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4691,        if (separatorChars == null) {,2,1,0,1,3,0,0,0,0,3,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4692,"            return join(strs, ' ');",0,0,0,1,2,1,4,0,0,5,23,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4694,"        return join(strs, separatorChars);",0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4732,"        return abbreviate(str, 0, maxWidth);",0,0,0,1,2,1,6,0,0,6,36,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4771,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4772,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4774,        if (maxWidth < 4) {,6,3,0,1,3,0,0,0,0,9,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4775,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4777,        if (str.length() <= maxWidth) {,2,1,0,2,5,0,4,0,0,7,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4778,            return str;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4780,        if (offset > str.length()) {,2,1,0,2,5,0,4,0,0,7,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4781,            offset = str.length();,10,2,1,1,2,0,18,2,0,38,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4783,        if ((str.length() - offset) < (maxWidth - 3)) {,4,3,0,4,9,0,4,0,0,11,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4784,            offset = str.length() - (maxWidth - 3);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4786,        if (offset <= 4) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4787,"            return str.substring(0, maxWidth - 3) + ""..."";",2,2,0,1,2,1,4,0,0,9,46,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4789,        if (maxWidth < 7) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4790,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");",4,3,0,1,2,0,0,2,0,10,82,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4792,        if ((offset + (maxWidth - 3)) < str.length()) {,4,3,0,4,9,0,4,0,0,11,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4793,"            return ""..."" + abbreviate(str.substring(offset), maxWidth - 3);",0,0,0,2,4,1,0,0,0,7,63,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4795,"        return ""..."" + str.substring(str.length() - (maxWidth - 3));",0,0,0,3,6,1,0,0,0,10,60,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4826,        if (str1 == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4827,            return str2;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4829,        if (str2 == null) {,2,0,0,1,3,0,4,0,0,8,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4830,            return str1;,2,0,1,0,0,2,4,0,0,11,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4832,"        int at = indexOfDifference(str1, str2);",2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4833,        if (at == -1) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4834,            return EMPTY;,4,0,0,0,0,1,4,2,0,10,13,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4836,        return str2.substring(at);,0,0,0,1,2,1,10,0,0,10,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4863,        if (str1 == str2) {,4,1,0,1,3,0,4,0,0,9,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4864,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4866,        if (str1 == null || str2 == null) {,4,3,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4867,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4870,        for (i = 0; i < str1.length() && i < str2.length(); ++i) {,0,0,0,3,7,0,0,0,0,10,58,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4871,            if (str1.charAt(i) != str2.charAt(i)) {,0,1,0,3,7,0,12,0,0,13,39,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4872,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4875,        if (i < str2.length() || i < str1.length()) {,4,0,0,3,7,0,0,0,0,5,45,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4876,            return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4878,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4918,        if (s == null || t == null) {,4,3,0,1,3,0,4,0,0,13,29,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4919,"            throw new IllegalArgumentException(""Strings must not be null"");",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4939,        int n = s.length(); // length of s,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4940,        int m = t.length(); // length of t,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4942,        if (n == 0) {,2,1,0,1,3,0,6,0,0,9,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4943,            return m;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4944,        } else if (m == 0) {,0,0,0,1,4,0,10,0,0,10,20,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4945,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4948,"        int p[] = new int[n+1]; //'previous' cost array, horizontally",4,1,0,2,4,0,0,0,0,5,61,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4949,"        int d[] = new int[n+1]; // cost array, horizontally",4,1,0,2,4,0,0,0,0,5,51,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4960,        for (i = 0; i<=n; i++) {,8,1,0,1,3,0,4,0,0,16,24,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4961,            p[i] = i;,0,0,0,1,2,0,0,0,0,3,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4964,        for (j = 1; j<=m; j++) {,10,1,0,1,3,0,4,0,0,17,24,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4965,            t_j = t.charAt(j-1);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4966,            d[0] = j;,2,0,1,1,2,0,0,0,0,5,9,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4968,            for (i=1; i<=n; i++) {,8,1,0,1,3,0,0,0,0,11,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4969,                cost = s.charAt(i-1)==t_j ? 0 : 1;,6,2,0,1,2,0,4,0,0,13,34,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4971,"                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);",6,5,1,6,12,0,8,0,0,32,58,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4975,            _d = p;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4976,            p = d;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4977,            d = _d;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,58,4982,        return p[n];,6,0,1,1,2,2,0,0,0,11,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,85,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,108,        return toInt(str);,0,0,0,1,2,1,4,0,0,4,18,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,129,"        return toInt(str, 0);",0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,151,"        return toInt(str, defaultValue);",0,0,0,1,2,1,0,0,0,4,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,172,        if(str == null) {,4,1,0,1,3,0,4,2,0,11,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,173,            return defaultValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,176,            return Integer.parseInt(str);,10,1,0,1,2,1,6,2,0,20,29,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,177,        } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,178,            return defaultValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,200,"        return toLong(str, 0L);",2,0,0,1,2,1,0,0,0,2,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,221,        if (str == null) {,2,1,0,1,3,0,10,0,0,13,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,222,            return defaultValue;,2,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,225,            return Long.parseLong(str);,0,0,0,1,2,1,6,0,0,6,27,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,226,        } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,227,            return defaultValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,250,"        return toFloat(str, 0.0f);",0,0,0,1,2,1,6,0,0,6,26,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,273,      if (str == null) {,4,1,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,274,          return defaultValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,277,          return Float.parseFloat(str);,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,278,      } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,279,          return defaultValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,302,"        return toDouble(str, 0.0d);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,325,      if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,326,          return defaultValue;,2,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,329,          return Double.parseDouble(str);,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,330,      } catch (NumberFormatException nfe) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,331,          return defaultValue;,4,0,0,0,0,1,0,0,0,4,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,399,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,402,"            throw new NumberFormatException(""A blank string is not a valid number"");",0,0,0,1,2,0,0,2,0,3,72,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,409,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,412,            return createInteger(str);,0,0,0,1,2,1,6,0,0,6,26,13,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,423,            if (expPos > -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,424,                if (expPos < decPos) {,4,1,0,1,3,0,0,0,0,5,22,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,425,"                    throw new NumberFormatException(str + "" is not a valid number."");",2,1,0,1,2,0,0,2,0,6,65,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,427,"                dec = str.substring(decPos + 1, expPos);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,429,                dec = str.substring(decPos + 1);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,431,"            mant = str.substring(0, decPos);",4,0,0,1,2,0,6,0,0,11,32,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,434,"                mant = str.substring(0, expPos);",2,0,0,1,2,0,0,0,0,2,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,442,"                exp = str.substring(expPos + 1, str.length() - 1);",8,3,0,2,4,1,8,0,0,21,50,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,458,                        } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,461,                        return createBigInteger(numeric);,0,0,0,1,2,1,4,0,0,4,33,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,468,                        Float f = NumberUtils.createFloat(numeric);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,469,                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {,2,3,0,5,11,0,8,0,0,15,65,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,472,                            return f;,2,0,0,0,0,1,6,0,0,9,9,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,477,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,475,                    } catch (NumberFormatException nfe) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,482,                        Double d = NumberUtils.createDouble(numeric);,2,0,0,1,2,0,0,0,0,3,45,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,483,                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {,2,3,0,5,11,0,8,0,0,15,65,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,484,                            return d;,8,2,1,0,0,1,0,0,0,17,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,488,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,486,                    } catch (NumberFormatException nfe) {,4,0,0,1,4,0,0,2,0,6,37,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,490,                        return createBigDecimal(numeric);,0,0,0,1,2,1,4,0,0,4,33,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,491,                    } catch (NumberFormatException e) {,2,0,0,1,4,0,0,2,0,4,35,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,496,"                    throw new NumberFormatException(str + "" is not a valid number."");",2,2,0,1,2,0,16,2,0,24,65,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,502,            if (expPos > -1 && expPos < str.length() - 1) {,4,4,0,2,5,0,4,0,0,13,47,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,503,"                exp = str.substring(expPos + 1, str.length());",6,1,0,2,4,0,12,0,0,19,46,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,505,                exp = null;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,507,            if (dec == null && exp == null) {,4,3,0,1,3,0,0,0,0,7,33,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,510,                    return createInteger(str);,0,0,0,1,2,1,4,0,0,4,26,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,511,                } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,515,                    return createLong(str);,0,0,0,1,2,1,4,0,0,4,23,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,516,                } catch (NumberFormatException nfe) {,8,3,1,1,4,0,0,2,0,18,37,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,519,                return createBigInteger(str);,2,0,1,1,2,1,4,0,0,8,29,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,523,                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);,4,1,0,2,4,0,8,0,0,13,55,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,525,                    Float f = createFloat(str);,2,0,0,1,2,0,4,2,0,8,27,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,526,                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {,2,3,0,5,11,0,8,0,0,15,65,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,527,                        return f;,2,0,0,0,0,1,0,0,0,2,9,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,531,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,529,                } catch (NumberFormatException nfe) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,533,                    Double d = createDouble(str);,2,0,0,1,2,0,4,2,0,8,29,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,534,                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {,0,0,0,5,11,0,0,0,0,16,66,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,535,                        return d;,2,0,0,0,0,1,0,0,0,2,9,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,539,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,537,                } catch (NumberFormatException nfe) {,2,0,0,1,4,0,0,2,0,4,37,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,541,                return createBigDecimal(str);,2,1,0,1,2,1,0,0,0,4,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,557,            return true;,0,0,0,0,0,1,8,0,0,9,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,564,        return str.length() > 0;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,578,        if (str == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,579,            return null;,4,0,0,0,0,1,4,0,0,8,12,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,581,        return Float.valueOf(str);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,594,        if (str == null) {,4,1,0,1,3,0,0,0,0,6,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,595,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,597,        return Double.valueOf(str);,0,0,0,1,2,1,6,0,0,6,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,611,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,612,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,615,        return Integer.decode(str);,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,629,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,644,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,645,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,647,        return new BigInteger(str);,2,0,0,1,2,1,0,2,0,4,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,660,        if (str == null) {,0,3,0,1,3,0,16,0,0,21,18,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,661,            return null;,0,0,0,0,0,1,8,0,0,8,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,664,        if (StringUtils.isBlank(str)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,665,"            throw new NumberFormatException(""A blank string is not a valid number"");",0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,667,        return new BigDecimal(str);,2,0,1,1,2,1,4,2,0,17,27,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,680,        if (array1 == array2) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,681,            return true;,4,0,0,0,0,1,0,0,0,5,12,14,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,683,        if (array1 == null || array2 == null) {,4,3,0,1,3,0,0,0,0,7,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,684,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,686,        if (array1.length != array2.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,687,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,690,        for (int i=0; i<array1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,691,            if (array1[i] != array2[i]) {,0,1,1,3,7,0,0,0,0,9,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,692,                return false;,2,0,0,0,0,1,0,0,0,3,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,696,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,707,        if (array1 == array2) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,708,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,710,        if (array1 == null || array2 == null) {,4,3,0,1,3,0,0,0,0,7,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,711,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,713,        if (array1.length != array2.length) {,12,3,0,1,3,0,6,0,0,22,37,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,714,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,717,        for (int i=0; i<array1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,718,            if (array1[i] != array2[i]) {,0,1,1,3,7,0,0,0,0,9,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,719,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,723,        return true;,0,1,0,0,0,1,10,0,0,13,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,734,        if (array1 == array2) {,6,1,0,1,3,0,0,0,0,9,23,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,735,            return true;,0,0,1,0,0,1,4,0,0,7,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,737,        if (array1 == null || array2 == null) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,738,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,740,        if (array1.length != array2.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,741,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,744,        for (int i=0; i<array1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,745,            if (array1[i] != array2[i]) {,0,1,1,3,7,0,0,0,0,9,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,746,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,750,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,761,        if (array1 == array2) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,762,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,764,        if (array1 == null || array2 == null) {,4,3,0,1,3,0,0,0,0,7,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,765,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,767,        if (array1.length != array2.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,768,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,771,        for (int i=0; i<array1.length; i++) {,14,3,0,1,3,0,0,0,0,18,37,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,772,            if (array1[i] != array2[i]) {,0,1,1,3,7,0,0,0,0,9,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,773,                return false;,0,0,0,0,0,1,8,0,0,8,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,777,        return true;,8,0,0,0,0,1,8,0,0,17,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,788,        if (array1 == array2) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,789,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,791,        if (array1 == null || array2 == null) {,4,3,0,1,3,0,0,0,0,7,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,792,            return false;,8,3,0,0,0,1,12,0,0,25,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,794,        if (array1.length != array2.length) {,8,1,0,1,3,0,0,0,0,9,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,795,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,798,        for (int i=0; i<array1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,799,"            if (compare(array1[i], array2[i]) != 0) {",0,1,1,4,9,0,2,0,0,11,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,800,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,804,        return true;,2,1,0,0,0,1,8,0,0,12,12,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,815,        if (array1 == array2) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,816,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,818,        if (array1 == null || array2 == null) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,819,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,821,        if (array1.length != array2.length) {,8,1,0,1,3,0,0,0,0,9,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,822,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,825,        for (int i=0; i<array1.length; i++) {,20,2,0,1,3,0,0,0,0,24,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,826,"            if (compare(array1[i], array2[i]) != 0) {",0,1,1,4,9,0,2,0,0,11,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,827,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,831,        return true;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,846,        if (array == null) {,2,1,0,1,3,0,4,0,0,7,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,847,"            throw new IllegalArgumentException(""The Array must not be null"");",2,0,0,1,2,0,4,2,0,10,65,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,848,        } else if (array.length == 0) {,4,1,0,1,4,0,6,0,0,11,31,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,849,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,853,        long min = array[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,854,        for (int i = 1; i < array.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,855,            if (array[i] < min) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,856,                min = array[i];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,860,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,873,        if (array == null) {,6,1,0,1,3,0,0,0,0,8,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,874,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,875,        } else if (array.length == 0) {,0,0,0,1,4,0,0,0,0,5,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,876,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,880,        int min = array[0];,4,0,1,1,2,0,18,0,0,25,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,881,        for (int j = 1; j < array.length; j++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,882,            if (array[j] < min) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,883,                min = array[j];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,887,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,900,        if (array == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,901,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,902,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,903,"            throw new IllegalArgumentException(""Array cannot be empty."");",2,0,0,1,2,0,14,2,0,19,61,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,907,        short min = array[0];,2,0,1,1,2,0,0,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,908,        for (int i = 1; i < array.length; i++) {,12,1,0,1,3,0,0,0,0,14,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,909,            if (array[i] < min) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,910,                min = array[i];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,914,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,927,        if (array == null) {,10,1,0,1,3,0,4,2,0,18,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,928,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,929,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,930,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,2,0,3,61,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,934,        byte min = array[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,935,        for (int i = 1; i < array.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,936,            if (array[i] < min) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,937,                min = array[i];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,941,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,954,        if (array == null) {,2,1,0,1,3,0,8,0,0,11,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,955,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,2,0,4,65,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,956,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,957,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,961,        double min = array[0];,2,0,1,1,2,0,0,0,0,4,22,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,962,        for (int i = 1; i < array.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,963,            if (array[i] < min) {,2,2,1,2,5,0,12,0,0,20,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,964,                min = array[i];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,968,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,981,        if (array == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,982,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,2,0,4,65,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,983,        } else if (array.length == 0) {,0,0,0,1,4,0,0,0,0,5,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,984,"            throw new IllegalArgumentException(""Array cannot be empty."");",12,4,0,1,2,0,4,0,0,20,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,988,        float min = array[0];,2,0,1,1,2,0,0,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,989,        for (int i = 1; i < array.length; i++) {,12,1,0,1,3,0,0,2,0,17,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,990,            if (array[i] < min) {,6,2,1,2,5,0,10,2,0,24,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,991,                min = array[i];,8,3,1,1,2,0,0,0,0,16,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,995,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1010,        if (array == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1011,"            throw new IllegalArgumentException(""The Array must not be null"");",2,3,0,1,2,0,4,2,0,13,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1012,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1013,"            throw new IllegalArgumentException(""Array cannot be empty."");",2,0,0,1,2,0,0,2,0,5,61,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1017,        long max = array[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1018,        for (int j = 1; j < array.length; j++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1019,            if (array[j] > max) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1020,                max = array[j];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1024,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1037,        if (array == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1038,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,2,0,4,65,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1039,        } else if (array.length == 0) {,0,0,0,1,4,0,0,0,0,5,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1040,"            throw new IllegalArgumentException(""Array cannot be empty."");",8,1,0,1,2,0,0,2,0,13,61,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1044,        int max = array[0];,2,0,1,1,2,0,0,0,0,4,19,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1045,        for (int j = 1; j < array.length; j++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1046,            if (array[j] > max) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1047,                max = array[j];,2,0,1,1,2,0,8,0,0,15,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1051,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1064,        if (array == null) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1065,"            throw new IllegalArgumentException(""The Array must not be null"");",2,0,0,1,2,0,4,2,0,10,65,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1066,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1067,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1071,        short max = array[0];,2,0,1,1,2,0,0,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1072,        for (int i = 1; i < array.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1073,            if (array[i] > max) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1074,                max = array[i];,2,0,0,1,2,0,0,0,0,2,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1078,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1091,        if (array == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1092,"            throw new IllegalArgumentException(""The Array must not be null"");",4,1,0,1,2,0,0,0,0,5,65,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1093,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1094,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1098,        byte max = array[0];,4,1,0,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1099,        for (int i = 1; i < array.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1100,            if (array[i] > max) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1101,                max = array[i];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1105,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1118,        if (array== null) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1119,"            throw new IllegalArgumentException(""The Array must not be null"");",0,0,0,1,2,0,0,2,0,4,65,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1120,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1121,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,2,0,3,61,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1125,        double max = array[0];,2,0,1,1,2,0,0,0,0,4,22,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1126,        for (int j = 1; j < array.length; j++) {,10,1,0,1,3,0,12,0,0,24,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1127,            if (array[j] > max) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1128,                max = array[j];,2,0,1,1,2,0,0,0,0,7,15,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1132,        return max;,4,0,1,0,0,1,0,0,0,6,11,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1145,        if (array == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1146,"            throw new IllegalArgumentException(""The Array must not be null"");",2,1,0,1,2,0,0,2,0,7,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1147,        } else if (array.length == 0) {,4,1,0,1,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1148,"            throw new IllegalArgumentException(""Array cannot be empty."");",0,0,0,1,2,0,0,2,0,3,61,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1152,        float max = array[0];,2,0,1,1,2,0,0,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1153,        for (int j = 1; j < array.length; j++) {,12,3,0,1,3,0,4,0,0,21,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1154,            if (array[j] > max) {,2,1,1,2,5,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1155,                max = array[j];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1159,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1173,        if (b < a) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1174,            a = b;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1176,        if (c < a) {,10,3,0,1,3,0,6,0,0,20,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1177,            a = c;,4,0,0,0,0,0,4,0,0,9,6,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1179,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1191,        if (b < a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1192,            a = b;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1194,        if (c < a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1195,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1197,        return a;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1209,        if (b < a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1210,            a = b;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1212,        if (c < a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1213,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1215,        return a;,2,0,0,0,0,1,0,2,0,4,9,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1227,        if (b < a) {,6,1,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1228,            a = b;,6,0,0,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1230,        if (c < a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1231,            a = c;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1233,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1248,"        return Math.min(Math.min(a, b), c);",0,0,0,2,4,1,14,2,0,17,35,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1263,"        return Math.min(Math.min(a, b), c);",2,1,0,2,4,1,0,0,0,4,35,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1277,        if (b > a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1278,            a = b;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1280,        if (c > a) {,2,0,0,1,3,0,0,2,0,4,12,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1281,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1283,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1295,        if (b > a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1296,            a = b;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1298,        if (c > a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1299,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1301,        return a;,20,3,1,0,0,1,8,0,0,37,9,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1313,        if (b > a) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1314,            a = b;,8,3,1,0,0,0,4,0,0,18,6,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1316,        if (c > a) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1317,            a = c;,4,0,0,0,0,0,0,2,0,6,6,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1319,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1331,        if (b > a) {,4,1,0,1,3,0,0,0,0,5,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1332,            a = b;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1334,        if (c > a) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1335,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1337,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1352,"        return Math.max(Math.max(a, b), c);",0,0,0,2,4,1,14,0,0,14,35,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1367,"        return Math.max(Math.max(a, b), c);",0,0,0,2,4,1,14,0,0,14,35,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1406,        if (lhs < rhs) {,6,1,0,1,3,0,4,2,0,13,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1407,            return -1;,2,0,0,0,0,1,0,0,0,4,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1409,        if (lhs > rhs) {,6,1,0,1,3,0,4,0,0,11,16,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1410,            return +1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1416,        long lhsBits = Double.doubleToLongBits(lhs);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1417,        long rhsBits = Double.doubleToLongBits(rhs);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1418,        if (lhsBits == rhsBits) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1419,            return 0;,2,0,1,0,0,1,0,0,0,7,9,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1427,        if (lhsBits < rhsBits) {,4,1,0,1,3,0,0,0,0,5,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1428,            return -1;,0,0,0,0,0,1,8,0,0,9,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1430,            return +1;,14,2,0,0,0,1,16,0,0,35,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1467,        if (lhs < rhs) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1468,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1470,        if (lhs > rhs) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1471,            return +1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1477,        int lhsBits = Float.floatToIntBits(lhs);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1478,        int rhsBits = Float.floatToIntBits(rhs);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1479,        if (lhsBits == rhsBits) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1480,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1488,        if (lhsBits < rhsBits) {,4,1,0,1,3,0,0,0,0,5,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1489,            return -1;,4,1,0,0,0,1,0,0,0,6,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1491,            return +1;,6,0,0,0,0,1,0,0,0,6,10,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1512,                return false;,2,0,0,0,0,1,6,0,0,10,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1532,        if (StringUtils.isEmpty(str)) {,2,0,1,2,5,0,0,0,0,4,31,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1533,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1535,        char[] chars = str.toCharArray();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1536,        int sz = chars.length;,6,0,0,0,0,0,0,0,0,6,22,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1537,        boolean hasExp = false;,4,1,0,0,0,0,0,0,0,6,23,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1538,        boolean hasDecPoint = false;,2,0,0,0,0,0,0,0,0,3,28,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1539,        boolean allowSigns = false;,2,0,0,0,0,0,0,0,0,3,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1540,        boolean foundDigit = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1542,        int start = (chars[0] == '-') ? 1 : 0;,2,1,1,2,4,0,0,0,0,7,38,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1543,        if (sz > start + 1) {,0,4,1,1,3,0,0,0,0,12,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1544,            if (chars[start] == '0' && chars[start + 1] == 'x') {,0,0,0,3,7,0,0,0,0,10,53,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1545,                int i = start + 2;,12,4,0,0,0,0,0,0,0,17,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1546,                if (i == sz) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1547,"                    return false; // str == ""0x""",0,0,0,0,0,1,0,0,0,1,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1550,                for (; i < chars.length; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1551,                    if ((chars[i] < '0' || chars[i] > '9'),2,3,1,3,7,0,0,0,0,15,38,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1554,                        return false;,2,1,0,0,0,1,0,0,0,4,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1557,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1560,"        sz--; // don't want to loop to the last char, check it afterwords",2,0,0,0,0,0,0,0,0,3,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1562,        int i = start;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1565,        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {,12,6,0,2,5,0,0,0,0,19,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1566,            if (chars[i] >= '0' && chars[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1567,                foundDigit = true;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1568,                allowSigns = false;,2,0,0,0,0,0,0,0,0,4,19,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1570,            } else if (chars[i] == '.') {,10,2,1,2,6,0,0,0,0,18,29,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1571,                if (hasDecPoint || hasExp) {,4,1,0,1,3,0,0,0,0,5,28,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1573,                    return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1575,                hasDecPoint = true;,2,0,0,0,0,0,0,0,0,4,19,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1576,            } else if (chars[i] == 'e' || chars[i] == 'E') {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1578,                if (hasExp) {,14,3,0,1,3,0,4,0,0,22,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1580,                    return false;,0,0,0,0,0,1,0,0,0,1,13,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1582,                if (!foundDigit) {,2,0,0,1,3,0,0,0,0,3,18,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1583,                    return false;,0,0,0,0,0,1,0,0,0,1,13,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1585,                hasExp = true;,2,0,0,0,0,0,0,0,0,4,14,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1586,                allowSigns = true;,4,1,1,0,0,0,14,0,0,25,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1587,            } else if (chars[i] == '+' || chars[i] == '-') {,2,3,1,3,8,0,0,0,0,15,48,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1588,                if (!allowSigns) {,2,0,0,1,3,0,0,0,0,3,18,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1589,                    return false;,0,0,0,0,0,1,0,0,0,1,13,13,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1591,                allowSigns = false;,4,1,1,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1592,                foundDigit = false; // we need a digit after the E,2,0,0,0,0,0,0,0,0,4,50,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1594,                return false;,6,3,0,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1596,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1598,        if (i < chars.length) {,6,1,0,1,3,0,0,0,0,7,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1599,            if (chars[i] >= '0' && chars[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1601,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1603,            if (chars[i] == 'e' || chars[i] == 'E') {,2,4,1,3,7,0,4,0,0,20,41,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1605,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1607,            if (!allowSigns,4,0,0,0,1,0,0,0,0,5,15,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1612,                return foundDigit;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1614,            if (chars[i] == 'l',0,1,1,1,3,0,0,0,0,6,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1617,                return foundDigit && !hasExp;,6,2,0,0,0,1,0,0,0,9,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1620,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1624,        return !allowSigns && foundDigit;,4,1,0,0,0,1,0,0,0,6,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,879,        if (width > 0) {,8,1,0,1,3,3,2,2,0,18,16,1,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,880,            ensureCapacity(size + width);,4,2,0,1,2,0,10,0,0,18,29,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,881,            String str = (obj == null ? getNullText() : obj.toString());,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,882,            int strLen = str.length();,2,0,0,1,2,0,4,0,0,6,26,7,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,883,            if (strLen >= width) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,884,"                str.getChars(0, strLen, buffer, size);",2,1,0,1,2,0,0,0,0,3,38,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,107,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.008,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,108,        if (initialCapacity <= 0) {,2,2,0,1,3,0,10,0,0,15,27,3,0.008,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,111,        buffer = new char[initialCapacity];,0,0,0,1,2,0,0,0,0,3,35,4,0.008,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,112,    },0,0,0,0,1,0,0,0,0,1,1,4,0.008,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,228,        if (capacity > buffer.length) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00581,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,233,        return this;,0,0,0,0,0,1,6,0,0,6,12,5,0.00581,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,241,        super();,8,2,0,1,2,0,4,0,0,14,8,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,118,    private StrMatcher delimMatcher = StrMatcher.splitMatcher();,2,0,0,1,2,1,4,2,0,9,60,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,120,    private StrMatcher quoteMatcher = StrMatcher.noneMatcher();,2,0,0,1,2,1,4,2,0,9,59,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,122,    private StrMatcher ignoredMatcher = StrMatcher.noneMatcher();,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,124,    private StrMatcher trimmerMatcher = StrMatcher.noneMatcher();,2,0,0,1,2,1,4,2,0,9,61,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,127,    private boolean emptyAsNull = false;,2,0,0,0,0,1,0,0,0,4,36,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,129,    private boolean ignoreEmptyTokens = true;,2,0,0,0,0,1,0,0,0,4,41,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,242,        this.chars = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,243,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,252,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,253,        if (input != null) {,8,1,0,1,3,0,4,0,0,15,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,254,            chars = input.toCharArray();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,256,            chars = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,258,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,267,        this(input);,2,0,0,1,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,268,        setDelimiterChar(delim);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,278,        this(input);,2,0,0,1,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,279,        setDelimiterString(delim);,2,1,0,1,2,0,4,0,0,7,26,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,280,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,289,        this(input);,4,0,0,1,2,0,0,0,0,4,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,290,        setDelimiterMatcher(delim);,2,0,0,1,2,3,6,2,0,13,27,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,291,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,302,"        this(input, delim);",4,0,0,1,2,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,303,        setQuoteChar(quote);,0,0,0,1,2,0,4,0,0,4,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,315,"        this(input, delim);",6,0,0,1,2,0,4,2,0,12,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,316,        setQuoteMatcher(quote);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,317,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,329,        super();,2,0,0,1,2,3,0,4,0,9,8,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,330,        this.chars = input;,0,1,0,0,0,0,8,0,0,9,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,331,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,343,        this(input);,2,0,0,1,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,344,        setDelimiterChar(delim);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,345,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,357,        this(input);,2,0,0,1,2,0,6,0,0,8,12,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,358,        setDelimiterString(delim);,0,0,0,1,2,0,4,0,0,4,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,359,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,371,        this(input);,2,0,0,1,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,372,        setDelimiterMatcher(delim);,0,0,0,1,2,0,4,0,0,4,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,387,"        this(input, delim);",4,0,0,1,2,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,388,        setQuoteChar(quote);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,389,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,403,"        this(input, delim);",4,0,0,1,2,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,404,        setQuoteMatcher(quote);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,405,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,93,        CSV_TOKENIZER_PROTOTYPE = new StrTokenizer();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,94,        CSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.commaMatcher());,0,0,0,2,4,0,8,0,0,8,71,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,95,        CSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());,0,0,0,2,4,0,8,0,0,8,73,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,96,        CSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());,0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,97,        CSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());,0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,98,        CSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,99,        CSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);,0,0,0,1,2,0,4,0,0,5,52,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,101,        TSV_TOKENIZER_PROTOTYPE = new StrTokenizer();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,102,        TSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.tabMatcher());,0,0,0,2,4,0,8,0,0,8,69,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,103,        TSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());,0,0,0,2,4,0,8,0,0,8,73,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,104,        TSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());,2,0,1,2,4,0,8,2,0,16,68,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,105,        TSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());,0,0,0,2,4,0,0,0,0,1,68,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,106,        TSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);,0,0,0,1,2,0,4,0,0,4,51,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,107,        TSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);,0,0,0,1,2,0,4,0,0,5,52,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,108,    },2,0,1,0,1,0,0,2,0,8,1,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,139,        return (StrTokenizer) CSV_TOKENIZER_PROTOTYPE.clone();,0,0,0,2,4,1,4,2,0,6,54,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,152,        return getCSVClone();,0,0,0,1,2,1,2,0,0,2,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,165,        StrTokenizer tok = getCSVClone();,2,0,0,1,2,0,2,2,0,6,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,166,        tok.reset(input);,0,0,0,1,2,0,6,0,0,6,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,167,        return tok;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,180,        StrTokenizer tok = getCSVClone();,4,0,0,1,2,0,8,2,0,15,33,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,181,        tok.reset(input);,0,0,0,1,2,0,6,0,0,6,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,182,        return tok;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,191,        return (StrTokenizer) TSV_TOKENIZER_PROTOTYPE.clone();,0,0,0,2,4,1,4,2,0,6,54,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,204,        return getTSVClone();,0,0,0,1,2,1,2,0,0,2,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,215,        StrTokenizer tok = getTSVClone();,4,0,0,1,2,0,2,2,0,8,33,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,216,        tok.reset(input);,0,0,0,1,2,0,6,0,0,6,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,217,        return tok;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,228,        StrTokenizer tok = getTSVClone();,2,0,0,1,2,0,2,2,0,6,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,229,        tok.reset(input);,8,2,0,1,2,0,20,0,0,31,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,230,        return tok;,8,0,0,0,0,1,0,4,0,13,11,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,415,        checkTokenized();,0,0,0,1,2,0,2,0,0,2,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,416,        return tokens.length;,4,0,0,0,0,1,0,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,425,        if (hasNext()) {,0,0,0,2,5,0,2,0,0,2,16,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,426,            return tokens[tokenPos++];,2,0,1,1,2,1,0,0,0,5,26,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,428,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,437,        if (hasPrevious()) {,0,0,0,2,5,0,2,0,0,2,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,438,            return tokens[--tokenPos];,2,0,1,1,2,1,4,0,0,9,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,440,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,449,        checkTokenized();,2,0,1,1,2,0,2,4,0,10,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,450,        return (String[]) tokens.clone();,0,0,0,3,6,1,4,2,0,6,33,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,459,        checkTokenized();,0,0,0,1,2,0,8,0,0,8,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,460,        List list = new ArrayList(tokens.length);,6,0,0,1,2,0,0,4,0,10,41,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,461,        for (int i = 0; i < tokens.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,462,            list.add(tokens[i]);,0,0,1,2,4,0,4,0,0,8,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,464,        return list;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,475,        tokenPos = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,476,        tokens = null;,2,0,0,0,0,2,0,2,0,7,14,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,477,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,489,        reset();,0,0,0,1,2,0,2,0,0,2,8,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,490,        if (input != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,491,            this.chars = input.toCharArray();,2,0,0,1,2,0,4,0,0,7,33,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,493,            this.chars = null;,2,0,0,0,0,0,0,0,0,3,18,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,495,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,510,        reset();,0,0,0,1,2,0,2,0,0,2,8,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,511,        this.chars = input;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,512,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,523,        checkTokenized();,0,0,0,1,2,0,2,0,0,2,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,524,        return tokenPos < tokens.length;,6,1,0,0,0,1,8,0,0,15,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,533,        if (hasNext()) {,0,0,0,2,5,0,2,0,0,2,16,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,534,            return tokens[tokenPos++];,4,0,1,1,2,1,4,0,0,11,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,536,        throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,545,        return tokenPos;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,554,        checkTokenized();,0,0,0,1,2,0,2,0,0,2,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,555,        return tokenPos > 0;,2,1,0,0,0,1,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,564,        if (hasPrevious()) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,565,            return tokens[--tokenPos];,2,0,1,1,2,1,8,0,0,13,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,567,        throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,576,        return tokenPos - 1;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,585,"        throw new UnsupportedOperationException(""remove() is unsupported"");",0,0,0,2,4,0,0,2,0,4,67,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,594,"        throw new UnsupportedOperationException(""set() is unsupported"");",0,0,0,2,4,0,0,2,0,3,64,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,603,"        throw new UnsupportedOperationException(""add() is unsupported"");",0,0,0,2,4,0,0,2,0,3,64,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,612,        if (tokens == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,613,            if (chars == null) {,10,3,0,1,3,0,0,0,0,14,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,615,"                List split = tokenize(null, 0, 0);",2,0,0,1,2,0,2,2,0,7,34,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,616,                tokens = (String[]) split.toArray(new String[split.size()]);,2,0,0,5,10,0,8,4,0,15,60,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,617,            } else {,2,0,0,0,2,0,4,2,0,8,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,618,"                List split = tokenize(chars, 0, chars.length);",6,0,0,1,2,0,4,2,0,12,46,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,619,                tokens = (String[]) split.toArray(new String[split.size()]);,2,0,0,5,10,0,8,4,0,15,60,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,622,    },6,5,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,645,        if (chars == null || count == 0) {,4,3,0,1,3,0,0,0,0,7,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,646,            return Collections.EMPTY_LIST;,4,0,0,0,0,1,0,0,0,4,30,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,648,        StrBuilder buf = new StrBuilder();,2,0,0,1,2,0,0,4,0,6,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,649,        List tokens = new ArrayList();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,650,        int pos = offset;,6,0,0,0,0,3,2,0,0,12,17,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,653,        while (pos >= 0 && pos < count) {,6,3,0,1,3,0,0,0,0,9,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,655,"            pos = readNextToken(chars, pos, count, buf, tokens);",2,0,0,1,2,0,12,0,0,15,52,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,658,            if (pos >= count) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,659,"                addToken(tokens, """");",0,0,0,1,2,0,4,0,0,5,21,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,662,        return tokens;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,672,        if (tok == null || tok.length() == 0) {,0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,673,            if (isIgnoreEmptyTokens()) {,0,0,0,2,5,0,2,0,0,2,28,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,674,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,676,            if (isEmptyTokenAsNull()) {,0,0,0,2,5,0,2,0,0,2,27,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,677,                tok = null;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,680,        list.add(tok);,0,0,0,1,2,0,6,0,0,6,14,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,681,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,697,        while (start < len) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,698,            int removeLen = Math.max(,2,0,0,0,1,0,6,0,0,9,25,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,701,            if (removeLen == 0 ||,4,3,0,0,1,0,0,0,0,8,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,704,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,706,            start += removeLen;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,707,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,710,        if (start >= len) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,711,"            addToken(tokens, """");",4,3,0,1,2,0,4,0,0,12,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,712,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,716,"        int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);",2,0,0,2,4,0,12,0,0,14,71,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,717,        if (delimLen > 0) {,2,0,0,1,3,3,2,0,0,8,19,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,718,"            addToken(tokens, """");",0,0,0,1,2,0,4,0,0,5,21,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,719,            return start + delimLen;,4,1,0,0,0,1,0,0,0,5,24,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,723,"        int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);",2,0,0,2,4,0,12,0,0,14,67,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,724,        if (quoteLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,725,"            return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);",4,1,0,1,2,1,14,0,0,19,87,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,727,"        return readWithQuotes(chars, start, len, workArea, tokens, 0, 0);",0,0,0,1,2,1,0,0,0,4,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,749,        workArea.clear();,2,0,0,1,2,1,6,4,0,13,17,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,750,        int pos = start;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,751,        boolean quoting = (quoteLen > 0);,4,1,0,1,2,0,14,0,0,20,33,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,752,        int trimStart = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,754,        while (pos < len) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,758,            if (quoting) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,765,"                if (isQuote(chars, pos, len, quoteStart, quoteLen)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,766,"                    if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {",0,0,0,2,5,0,0,0,0,7,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,768,"                        workArea.append(chars, pos, quoteLen);",0,0,0,1,2,0,10,0,0,10,38,13,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,769,                        pos += (quoteLen * 2);,4,1,0,1,2,0,0,0,0,6,22,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,770,                        trimStart = workArea.size();,2,0,0,1,2,0,4,0,0,7,28,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,771,                        continue;,2,1,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,775,                    quoting = false;,8,6,0,0,0,0,0,0,0,14,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,776,                    pos += quoteLen;,4,0,0,0,0,0,0,0,0,5,16,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,777,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,781,                workArea.append(chars[pos++]);,2,0,1,2,4,0,4,0,0,9,30,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,782,                trimStart = workArea.size();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,788,"                int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);",2,0,0,2,4,0,12,0,0,14,69,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,789,                if (delimLen > 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,791,"                    addToken(tokens, workArea.substring(0, trimStart));",2,0,0,2,4,0,10,0,0,12,51,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,792,                    return pos + delimLen;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,796,                if (quoteLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,797,"                    if (isQuote(chars, pos, len, quoteStart, quoteLen)) {",0,0,0,2,5,0,12,0,0,12,53,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,798,                        quoting = true;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,799,                        pos += quoteLen;,4,0,0,0,0,0,0,0,0,5,16,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,800,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,805,"                int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,806,                if (ignoredLen > 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,807,                    pos += ignoredLen;,18,4,0,0,0,0,0,0,0,24,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,808,                    continue;,4,2,0,0,0,0,12,0,0,19,9,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,814,"                int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);",2,0,0,2,4,0,20,0,0,22,69,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,815,                if (trimmedLen > 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,816,"                    workArea.append(chars, pos, trimmedLen);",0,0,0,1,2,0,10,0,0,10,40,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,817,                    pos += trimmedLen;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,818,                    continue;,2,0,0,0,0,0,0,4,0,6,9,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,822,                workArea.append(chars[pos++]);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,823,                trimStart = workArea.size();,4,0,1,1,2,0,4,0,0,11,28,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,824,            },2,0,0,0,1,0,0,0,0,2,1,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,828,"        addToken(tokens, workArea.substring(0, trimStart));",0,0,0,2,4,0,12,0,0,12,51,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,829,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,844,        for (int i = 0; i < quoteLen; i++) {,8,1,0,1,3,0,0,0,0,10,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,845,            if ((pos + i) >= len || chars[pos + i] != chars[quoteStart + i]) {,14,6,1,4,9,0,0,0,0,24,66,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,846,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,849,        return true;,0,0,0,0,0,1,0,2,0,3,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,860,        return this.delimMatcher;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,872,        if (delim == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,873,            this.delimMatcher = StrMatcher.noneMatcher();,14,1,0,1,2,0,4,0,0,21,45,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,875,            this.delimMatcher = delim;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,877,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,887,        return setDelimiterMatcher(StrMatcher.charMatcher(delim));,2,0,0,2,4,1,12,0,0,14,58,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,897,        return setDelimiterMatcher(StrMatcher.stringMatcher(delim));,2,0,0,2,4,1,8,0,0,10,60,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,912,        return quoteMatcher;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,925,        if (quote != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,926,            this.quoteMatcher = quote;,4,0,0,0,0,0,0,0,0,5,26,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,928,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,941,        return setQuoteMatcher(StrMatcher.charMatcher(quote));,2,1,1,2,4,1,0,0,0,7,54,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,956,        return ignoredMatcher;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,969,        if (ignored != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,970,            this.ignoredMatcher = ignored;,6,0,0,0,0,0,4,0,0,11,30,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,972,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,985,        return setIgnoredMatcher(StrMatcher.charMatcher(ignored));,0,0,0,2,4,1,0,0,0,7,58,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1000,        return trimmerMatcher;,2,0,0,0,0,1,6,0,0,8,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1013,        if (trimmer != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1014,            this.trimmerMatcher = trimmer;,4,0,0,0,0,0,0,0,0,5,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1016,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1027,        return this.emptyAsNull;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1038,        this.emptyAsNull = emptyAsNull;,2,0,1,0,0,0,0,0,0,4,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1039,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1050,        return ignoreEmptyTokens;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1061,        this.ignoreEmptyTokens = ignoreEmptyTokens;,8,4,0,0,0,0,12,0,0,25,43,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1062,        return this;,2,1,0,0,0,1,8,0,0,11,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1072,        if (chars == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1073,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1075,        return new String(chars);,4,1,0,1,2,1,0,2,0,7,25,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1088,            return cloneReset();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1089,        } catch (CloneNotSupportedException ex) {,2,0,0,1,4,0,0,2,0,4,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1090,            return null;,4,1,0,0,0,1,0,0,0,5,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1102,        StrTokenizer cloned = (StrTokenizer) super.clone();,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1103,        if (cloned.chars != null) {,6,2,0,1,3,0,0,0,0,8,27,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1104,            cloned.chars = (char[]) cloned.chars.clone();,8,0,0,3,6,0,2,0,0,11,45,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1106,        cloned.reset();,8,0,0,1,2,0,4,4,0,16,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1107,        return cloned;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1117,        if (tokens == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1118,"            return ""StrTokenizer[not tokenized yet]"";",0,0,0,1,2,1,0,0,0,1,41,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1120,"            return ""StrTokenizer"" + getTokenList();",0,1,0,1,2,1,2,0,0,4,39,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2213,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2212,        StrBuilderTokenizer() {,2,0,0,1,3,0,0,0,0,2,23,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2214,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2218,            if (chars == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2219,"                return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());",8,0,0,2,4,1,2,0,0,10,73,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2221,"                return super.tokenize(chars, offset, count);",8,0,0,1,2,1,0,0,0,8,44,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2227,            String str = super.getContent();,4,0,0,1,2,0,0,2,0,6,32,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2228,            if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2229,                return StrBuilder.this.toString();,2,0,0,1,2,1,2,0,0,4,34,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2231,                return str;,6,3,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,98,        this(CAPACITY);,2,0,0,1,2,0,0,0,0,2,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,109,            initialCapacity = CAPACITY;,2,0,0,0,0,0,4,0,0,6,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,121,        super();,2,0,0,1,2,0,6,0,0,9,8,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,122,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,123,            buffer = new char[CAPACITY];,12,1,1,1,2,0,0,2,0,23,28,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,125,            buffer = new char[str.length() + CAPACITY];,4,1,0,2,4,0,4,0,0,10,43,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,126,            append(str);,0,0,0,1,2,0,12,0,0,12,12,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,137,        return newLine;,4,0,0,0,0,1,12,0,0,18,15,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,147,        this.newLine = newLine;,8,0,0,0,0,0,6,0,0,15,23,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,148,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,158,        return nullText;,4,0,0,0,0,1,0,0,0,4,16,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,168,        if (nullText != null && nullText.length() == 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,169,            nullText = null;,2,0,0,0,0,0,0,0,0,3,16,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,171,        this.nullText = nullText;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,172,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,182,        return size;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,194,        if (length < 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,195,            throw new StringIndexOutOfBoundsException(length);,2,0,0,1,2,0,0,2,0,4,50,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,197,        if (length < size) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,198,            size = length;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,199,        } else if (length > size) {,0,0,0,1,4,0,0,0,0,5,27,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,200,            ensureCapacity(length);,0,0,0,1,2,0,4,0,0,4,23,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,201,            int oldEnd = size;,4,0,0,0,0,0,0,0,0,4,18,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,202,            int newEnd = length;,6,0,0,0,0,0,0,0,0,6,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,203,            size = length;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,204,            for (int i = oldEnd; i < newEnd; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,205,                buffer[i] = '\0';,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,208,        return this;,0,0,0,0,0,1,0,2,0,3,12,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,218,        return buffer.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,229,            char[] old = buffer;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,230,            buffer = new char[capacity];,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,231,"            System.arraycopy(old, 0, buffer, 0, size);",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,242,        if (buffer.length > length()) {,4,1,0,2,5,0,2,0,0,7,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,243,            char[] old = buffer;,4,0,0,1,2,0,0,0,0,4,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,244,            buffer = new char[length()];,2,0,0,2,4,0,2,0,0,5,28,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,245,"            System.arraycopy(old, 0, buffer, 0, size);",0,0,0,1,2,0,10,0,0,10,42,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,247,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,260,        return size;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,272,        return size == 0;,4,1,0,0,0,1,6,2,0,13,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,287,        size = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,288,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,302,        if (index < 0 || index >= length()) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,303,            throw new StringIndexOutOfBoundsException(index);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,305,        return buffer[index];,0,0,1,1,2,1,12,0,0,16,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,319,        if (index < 0 || index >= length()) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,320,            throw new StringIndexOutOfBoundsException(index);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,322,        buffer[index] = ch;,2,0,1,1,2,0,0,0,0,7,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,323,        return this;,2,0,1,0,0,1,0,0,0,4,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,336,        if (index < 0 || index >= size) {,6,3,0,1,3,0,0,0,0,9,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,337,            throw new StringIndexOutOfBoundsException(index);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,339,"        deleteImpl(index, index + 1, 1);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,340,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,350,        if (size == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,351,            return ArrayUtils.EMPTY_CHAR_ARRAY;,2,0,0,0,0,1,0,0,0,2,35,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,353,        char chars[] = new char[size];,2,0,1,2,4,0,0,0,0,4,30,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,354,"        System.arraycopy(buffer, 0, chars, 0, size);",0,0,0,1,2,0,10,0,0,10,44,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,355,        return chars;,2,1,0,0,0,1,4,0,0,7,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,369,"        endIndex = validateRange(startIndex, endIndex);",2,0,0,1,2,0,6,0,0,9,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,370,        int len = endIndex - startIndex;,8,1,0,0,0,0,0,0,0,9,32,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,371,        if (len == 0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,372,            return ArrayUtils.EMPTY_CHAR_ARRAY;,0,0,0,0,0,1,0,0,0,1,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,374,        char chars[] = new char[len];,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,375,"        System.arraycopy(buffer, startIndex, chars, 0, len);",0,0,0,1,2,0,12,0,0,12,52,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,376,        return chars;,14,6,0,0,0,1,4,2,0,27,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,386,        int len = length();,2,3,1,1,2,0,2,0,0,17,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,387,        if (destination == null || destination.length < len) {,8,3,0,1,3,0,0,0,0,11,54,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,388,            destination = new char[len];,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,390,"        System.arraycopy(buffer, 0, destination, 0, len);",4,1,0,1,2,0,0,2,0,8,49,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,391,        return destination;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,405,        if (startIndex < 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,406,            throw new StringIndexOutOfBoundsException(startIndex);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,408,        if (endIndex < 0 || endIndex > length()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,409,            throw new StringIndexOutOfBoundsException(endIndex);,2,0,0,1,2,0,0,2,0,4,52,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,411,        if (startIndex > endIndex) {,4,1,0,1,3,0,0,0,0,5,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,412,"            throw new StringIndexOutOfBoundsException(""end < start"");",2,1,0,1,2,0,0,2,0,6,57,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,414,"        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);",4,1,0,1,2,0,12,0,0,17,91,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,415,    },4,1,0,0,1,0,10,0,0,16,1,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,428,        if (newLine == null)  {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,429,            append(SystemUtils.LINE_SEPARATOR);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,430,            return this;,10,0,0,0,0,1,8,2,0,22,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,432,        return append(newLine);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,441,        if (nullText == null)  {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,442,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,444,        return append(nullText);,0,0,0,1,2,1,4,0,0,5,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,455,        if (obj == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,456,            return appendNull();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,458,        return append(obj.toString());        ,0,0,0,2,4,1,0,0,0,1,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,469,        if (str == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,470,            return appendNull();,2,0,0,1,2,1,2,0,0,4,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,472,        int strLen = str.length();,4,1,0,1,2,0,4,0,0,9,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,473,        if (strLen > 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,474,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,475,            ensureCapacity(len + strLen);,12,7,0,1,2,0,2,0,0,21,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,476,"            str.getChars(0, strLen, buffer, len);",0,0,0,1,2,0,10,0,0,10,37,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,477,            size += strLen;,4,0,0,0,0,0,0,0,0,5,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,479,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,492,        if (str == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,493,            return appendNull();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,495,        if (startIndex < 0 || startIndex > str.length()) {,4,3,0,2,5,0,4,0,0,11,50,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,496,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");",0,0,0,1,2,0,0,2,0,3,70,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,498,        if (length < 0 || (startIndex + length) > str.length()) {,6,4,0,3,7,0,4,0,0,14,57,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,499,"            throw new StringIndexOutOfBoundsException(""length must be valid"");",2,0,0,1,2,1,4,4,0,12,66,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,501,        if (length > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,502,            int len = length();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,503,            ensureCapacity(len + length);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,504,"            str.getChars(startIndex, startIndex + length, buffer, len);",4,1,0,1,2,0,10,0,0,15,59,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,505,            size += length;,4,0,0,0,0,0,0,0,0,5,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,507,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,518,        if (str == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,519,            return appendNull();,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,521,        int strLen = str.length();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,522,        if (strLen > 0) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,523,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,524,            ensureCapacity(len + strLen);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,525,"            str.getChars(0, strLen, buffer, len);",2,0,0,1,2,0,10,0,0,12,37,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,526,            size += strLen;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,528,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,541,        if (str == null) {,6,1,0,1,3,0,0,0,0,8,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,542,            return appendNull();,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,544,        if (startIndex < 0 || startIndex > str.length()) {,4,3,0,2,5,0,4,0,0,11,50,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,545,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,547,        if (length < 0 || (startIndex + length) > str.length()) {,18,4,0,3,7,0,8,0,0,31,57,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,548,"            throw new StringIndexOutOfBoundsException(""length must be valid"");",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,550,        if (length > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,551,            int len = length();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,552,            ensureCapacity(len + length);,4,1,0,1,2,0,6,0,0,11,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,553,"            str.getChars(startIndex, startIndex + length, buffer, len);",6,1,0,1,2,0,10,8,0,25,59,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,554,            size += length;,2,0,0,0,0,0,0,0,0,3,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,556,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,567,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,568,            return appendNull();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,570,        int strLen = str.length();,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,571,        if (strLen > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,572,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,573,            ensureCapacity(len + strLen);,6,1,0,1,2,0,2,0,0,9,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,574,"            System.arraycopy(str.buffer, 0, buffer, len, strLen);",12,2,0,1,2,0,2,0,0,16,53,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,575,            size += strLen;,4,1,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,577,        return this;,2,0,0,0,0,2,6,0,0,9,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,590,        if (str == null) {,0,0,0,1,3,0,12,0,0,12,18,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,591,            return appendNull();,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,593,        if (startIndex < 0 || startIndex > str.length()) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,594,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,596,        if (length < 0 || (startIndex + length) > str.length()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,597,"            throw new StringIndexOutOfBoundsException(""length must be valid"");",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,599,        if (length > 0) {,4,2,0,1,3,0,8,0,0,14,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,600,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,601,            ensureCapacity(len + length);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,602,"            str.getChars(startIndex, startIndex + length, buffer, len);",8,1,0,1,2,0,10,0,0,19,59,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,603,            size += length;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,605,        return this;,6,0,1,0,0,1,6,4,0,19,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,616,        if (chars == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,617,            return appendNull();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,619,        int strLen = chars.length;,6,0,0,0,0,0,0,0,0,6,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,620,        if (strLen > 0) {,2,0,0,1,3,0,0,0,0,2,17,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,621,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,622,            ensureCapacity(len + strLen);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,623,"            System.arraycopy(chars, 0, buffer, len, strLen);",0,0,0,1,2,0,12,0,0,12,48,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,624,            size += strLen;,4,0,0,0,0,0,0,0,0,5,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,626,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,639,        if (chars == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,640,            return appendNull();,4,0,0,1,2,1,2,0,0,7,20,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,642,        if (startIndex < 0 || startIndex > chars.length) {,8,3,0,1,3,0,0,0,0,11,50,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,643,"            throw new StringIndexOutOfBoundsException(""Invalid startIndex: "" + length);",8,2,0,1,2,0,0,2,0,14,75,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,645,        if (length < 0 || (startIndex + length) > chars.length) {,10,4,0,2,5,0,6,0,0,20,57,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,646,"            throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);",2,1,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,648,        if (length > 0) {,2,0,0,1,3,0,0,0,0,2,17,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,649,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,650,            ensureCapacity(len + length);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,651,"            System.arraycopy(chars, startIndex, buffer, len, length);",2,0,0,1,2,0,14,0,0,16,57,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,652,            size += length;,4,0,0,0,0,0,12,0,0,18,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,654,        return this;,8,1,0,0,0,1,4,2,0,15,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,664,        if (value) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,665,            ensureCapacity(size + 4);,2,1,0,1,2,0,10,2,0,15,25,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,666,            buffer[size++] = 't';,2,0,1,1,2,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,667,            buffer[size++] = 'r';,4,1,1,1,2,0,2,0,0,12,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,668,            buffer[size++] = 'u';,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,669,            buffer[size++] = 'e';,2,0,1,1,2,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,671,            ensureCapacity(size + 5);,2,1,0,1,2,0,2,0,0,5,25,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,672,            buffer[size++] = 'f';,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,673,            buffer[size++] = 'a';,2,0,1,1,2,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,674,            buffer[size++] = 'l';,2,0,1,1,2,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,675,            buffer[size++] = 's';,2,0,1,1,2,0,0,0,0,7,21,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,676,            buffer[size++] = 'e';,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,678,        return this;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,688,        int len = length();,6,0,0,1,2,0,2,0,0,9,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,689,        ensureCapacity(len + 1);,2,1,0,1,2,0,2,0,0,5,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,690,        buffer[size++] = ch;,4,0,1,1,2,0,0,0,0,8,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,691,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,701,        return append(String.valueOf(value));,0,0,0,2,4,1,0,0,0,7,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,711,        return append(String.valueOf(value));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,721,        return append(String.valueOf(value));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,731,        return append(String.valueOf(value));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,746,        if (array != null && array.length > 0) {,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,747,"            separator = (separator == null ? """" : separator);",6,1,0,1,2,0,0,0,0,7,49,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,748,            append(array[0]);,0,0,1,2,4,0,2,0,0,4,17,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,749,            for (int i = 1; i < array.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,750,                append(separator);,0,0,0,1,2,0,4,0,0,4,18,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,751,                append(array[i]);,2,0,0,2,4,0,8,0,0,10,17,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,754,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,768,        if (coll != null && coll.size() > 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,769,"            separator = (separator == null ? """" : separator);",6,1,0,1,2,0,0,0,0,9,49,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,770,            Iterator it = coll.iterator();,2,0,0,1,2,0,4,2,0,8,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,771,            while (it.hasNext()) {,12,1,0,2,5,0,4,0,0,20,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,772,                append(it.next());,0,0,0,2,4,0,6,0,0,6,18,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,773,                if (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,774,                    append(separator);,2,1,0,1,2,0,12,0,0,15,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,778,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,792,        if (it != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,793,"            separator = (separator == null ? """" : separator);",6,1,0,1,2,0,0,0,0,9,49,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,794,            while (it.hasNext()) {,0,0,0,2,5,0,14,0,0,14,22,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,795,                append(it.next());,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,796,                if (it.hasNext()) {,0,0,1,2,5,0,8,0,0,17,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,797,                    append(separator);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,801,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,813,        if (length >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,814,            ensureCapacity(size + length);,2,0,0,1,2,0,0,0,0,2,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,815,            for (int i = 0; i < length; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,816,                buffer[size++] = padChar;,4,0,1,1,2,0,0,0,0,8,25,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,819,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,835,        if (width > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,836,            ensureCapacity(size + width);,4,1,0,1,2,0,2,0,0,7,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,837,            String str = (obj == null ? getNullText() : obj.toString());,4,1,0,3,6,0,6,2,0,14,60,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,838,            int strLen = str.length();,2,0,0,1,2,0,4,0,0,6,26,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,839,            if (strLen >= width) {,8,1,0,1,3,0,0,0,0,10,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,840,"                str.getChars(strLen - width, strLen, buffer, size);",6,1,0,1,2,0,10,0,0,19,51,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,842,                int padLen = width - strLen;,6,1,0,0,0,0,0,0,0,7,28,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,843,                for (int i = 0; i < padLen; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,844,                    buffer[size + i] = padChar;,8,1,1,1,2,0,0,0,0,12,27,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,846,"                str.getChars(0, strLen, buffer, size + padLen);",4,1,0,1,2,0,8,0,0,13,47,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,848,            size += width;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,850,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,864,"        return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);",0,0,0,2,4,1,12,0,0,12,70,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,886,                int padLen = width - strLen;,8,2,0,0,0,0,0,0,0,10,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,887,"                str.getChars(0, strLen, buffer, size);",0,3,1,1,2,0,10,0,0,23,38,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,888,                for (int i = 0; i < padLen; i++) {,8,1,0,1,3,0,0,0,0,10,34,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,889,                    buffer[size + strLen + i] = padChar;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,892,            size += width;,6,0,0,0,0,0,0,2,0,9,14,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,894,        return this;,2,0,0,0,0,1,0,0,0,3,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,908,"        return appendFixedWidthPadRight(String.valueOf(value), width, padChar);",0,0,0,2,4,1,4,0,0,5,71,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,922,        if (obj == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,923,"            return insert(index, nullText);",0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,925,"        return insert(index, obj.toString());",2,0,0,2,4,1,8,0,0,10,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,938,        validateIndex(index);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,939,        if (str == null) {,4,1,1,1,3,0,0,0,0,10,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,940,            str = nullText;,4,3,1,0,0,0,0,0,0,18,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,942,        int strLen = (str == null ? 0 : str.length());,4,1,0,2,4,0,4,0,0,9,46,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,943,        if (strLen > 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,944,            int newSize = size + strLen;,6,1,0,0,0,0,0,0,0,7,28,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,945,            ensureCapacity(newSize);,0,0,0,1,2,0,4,0,0,4,24,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,946,"            System.arraycopy(buffer, index, buffer, index + strLen, size - index);",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,947,            size = newSize;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,948,"            str.getChars(0, strLen, buffer, index);",0,0,0,1,2,0,10,0,0,10,39,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,950,        return this;,2,0,0,0,0,1,16,0,0,19,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,963,        validateIndex(index);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,964,        if (chars == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,965,"            return insert(index, nullText);",8,2,0,1,2,1,16,0,0,27,31,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,967,        int len = chars.length;,6,0,0,0,0,0,0,0,0,6,23,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,968,        if (len > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,969,            ensureCapacity(size + len);,6,1,0,1,2,0,2,0,0,10,27,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,970,"            System.arraycopy(buffer, index, buffer, index + len, size - index);",10,2,0,1,2,0,10,0,0,24,67,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,971,"            System.arraycopy(chars, 0, buffer, index, len);",0,0,0,1,2,0,12,0,0,12,47,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,972,            size += len;,4,0,0,0,0,0,10,2,0,17,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,974,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,989,        validateIndex(index);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,990,        if (chars == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,991,"            return insert(index, nullText);",0,0,0,1,2,1,6,0,0,7,31,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,993,        if (offset < 0 || offset > chars.length) {,0,0,0,1,3,0,12,0,0,12,42,14,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,994,"            throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);",0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,996,        if (length < 0 || offset + length > chars.length) {,10,4,0,1,3,0,0,0,0,14,51,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,997,"            throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);",4,1,0,1,2,0,4,2,0,12,71,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,999,        if (length > 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1000,            ensureCapacity(size + length);,4,1,0,1,2,0,2,0,0,7,30,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1001,"            System.arraycopy(buffer, index, buffer, index + length, size - index);",8,2,0,1,2,0,10,0,0,20,70,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1002,"            System.arraycopy(chars, offset, buffer, index, length);",6,1,0,1,2,0,14,0,0,21,55,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1003,            size += length;,6,1,1,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1005,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1017,        validateIndex(index);,0,0,0,1,2,0,4,0,0,4,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1018,        if (value) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1019,            ensureCapacity(size + 4);,2,1,0,1,2,0,2,0,0,5,25,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1020,"            System.arraycopy(buffer, index, buffer, index + 4, size - index);",4,3,0,1,2,0,8,0,0,15,65,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1021,            buffer[index++] = 't';,2,0,1,1,2,0,0,0,0,7,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1022,            buffer[index++] = 'r';,4,1,1,1,2,0,0,0,0,10,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1023,            buffer[index++] = 'u';,2,0,1,1,2,0,0,0,0,7,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1024,            buffer[index] = 'e';,0,0,1,1,2,0,0,0,0,6,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1025,            size += 4;,2,0,0,0,0,0,0,0,0,3,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1027,            ensureCapacity(size + 5);,2,1,0,1,2,0,2,0,0,5,25,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1028,"            System.arraycopy(buffer, index, buffer, index + 5, size - index);",6,2,0,1,2,0,10,0,0,18,65,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1029,            buffer[index++] = 'f';,2,0,1,1,2,0,0,0,0,7,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1030,            buffer[index++] = 'a';,2,0,1,1,2,0,0,0,0,7,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1031,            buffer[index++] = 'l';,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1032,            buffer[index++] = 's';,0,0,0,1,2,0,0,0,0,1,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1033,            buffer[index] = 'e';,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1034,            size += 5;,2,0,0,0,0,0,0,0,0,3,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1036,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1048,        validateIndex(index);,0,0,0,1,2,0,12,0,0,12,21,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1049,        ensureCapacity(size + 1);,4,1,0,1,2,0,2,0,0,7,25,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1050,"        System.arraycopy(buffer, index, buffer, index + 1, size - index);",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1051,        buffer[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1052,        size++;,4,0,0,0,0,0,0,0,0,5,7,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1053,        return this;,0,0,0,0,0,1,10,0,0,10,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1065,"        return insert(index, String.valueOf(value));",2,0,0,2,4,1,0,0,0,2,44,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1077,"        return insert(index, String.valueOf(value));",0,0,0,2,4,1,10,0,0,10,44,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1089,"        return insert(index, String.valueOf(value));",0,0,0,2,4,1,10,0,0,10,44,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1101,"        return insert(index, String.valueOf(value));",2,0,0,2,4,1,0,0,0,3,44,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1114,"        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);",0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1115,        size -= len;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1116,    },2,0,0,0,1,0,2,2,0,6,1,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1128,"        endIndex = validateRange(startIndex, endIndex);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1129,        int len = endIndex - startIndex;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1130,        if (len > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1131,"            deleteImpl(startIndex, endIndex, len);",0,0,0,1,2,0,8,0,0,8,38,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1133,        return this;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1144,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1145,            if (buffer[i] == ch) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1146,                int start = i;,4,0,0,0,0,0,0,0,0,4,14,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1147,                while (++i < size) {,4,1,0,1,3,0,0,0,0,6,20,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1148,                    if (buffer[i] != ch) {,2,1,1,2,5,0,8,0,0,15,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1149,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1152,                int len = i - start;,10,1,0,0,0,0,6,0,0,17,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1153,"                deleteImpl(start, i, len);",0,0,0,1,2,0,8,0,0,8,26,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1154,                i -= len;,8,1,0,0,0,0,6,0,0,16,9,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1157,        return this;,2,1,1,0,0,1,0,0,0,5,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1167,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1168,            if (buffer[i] == ch) {,2,1,1,2,5,0,0,0,0,7,22,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1169,"                deleteImpl(i, i + 1, 1);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1170,                break;,14,2,0,0,0,1,10,0,0,27,6,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1173,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1184,        int len = (str == null ? 0 : str.length());,6,1,0,2,4,0,4,0,0,11,43,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1185,        if (len > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1186,"            int index = indexOf(str, 0);",2,0,0,1,2,0,4,0,0,6,28,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1187,            while (index >= 0) {,16,5,0,1,3,0,0,0,0,21,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1188,"                deleteImpl(index, index + len, len);",4,1,0,1,2,0,6,0,0,11,36,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1189,"                index = indexOf(str, index);",2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1192,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1202,        int len = (str == null ? 0 : str.length());,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1203,        if (len > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1204,"            int index = indexOf(str, 0);",6,0,0,1,2,0,10,0,0,17,28,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1205,            if (index >= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1206,"                deleteImpl(index, index + len, len);",4,1,0,1,2,0,6,0,0,11,36,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1209,        return this;,2,0,0,0,0,1,0,0,0,2,12,15,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1224,"        return replace(matcher, null, 0, size, -1);",0,0,0,1,2,1,6,0,0,8,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1238,"        return replace(matcher, null, 0, size, 1);",0,1,0,1,2,1,12,0,0,13,42,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1253,        int newSize = size - removeLen + insertLen;,8,2,0,0,0,0,0,0,0,10,43,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1254,        if (insertLen != removeLen) {,10,2,0,1,3,0,0,0,0,13,29,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1255,            ensureCapacity(newSize);,4,0,0,1,2,0,10,0,0,14,24,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1256,"            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);",0,0,0,1,2,0,0,0,0,3,84,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1257,            size = newSize;,4,0,0,0,0,0,0,0,0,5,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1259,        if (insertLen > 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1260,"            insertStr.getChars(0, insertLen, buffer, startIndex);",4,0,0,1,2,0,10,0,0,15,53,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1262,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1276,"        endIndex = validateRange(startIndex, endIndex);",2,0,0,1,2,0,6,0,0,9,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1277,        int insertLen = (replaceStr == null ? 0 : replaceStr.length());,0,0,0,2,4,0,0,0,0,6,63,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1278,"        replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);",2,1,0,1,2,0,8,2,0,13,80,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1279,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1292,        if (search != replace) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1293,            for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1294,                if (buffer[i] == search) {,8,1,1,2,5,0,0,0,0,14,26,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1295,                    buffer[i] = replace;,2,0,1,1,2,0,0,0,0,7,20,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1299,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1311,        if (search != replace) {,4,1,0,1,3,0,0,0,0,5,24,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1312,            for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1313,                if (buffer[i] == search) {,2,1,1,2,5,0,0,0,0,7,26,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1314,                    buffer[i] = replace;,6,3,1,1,2,0,0,0,0,14,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1315,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1319,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1331,        int searchLen = (searchStr == null ? 0 : searchStr.length());,4,1,0,2,4,0,4,0,0,9,61,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1332,        if (searchLen > 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1333,            int replaceLen = (replaceStr == null ? 0 : replaceStr.length());,4,1,0,2,4,0,4,0,0,9,64,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1334,"            int index = indexOf(searchStr, 0);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1335,            while (index >= 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1336,"                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1337,"                index = indexOf(searchStr, index + replaceLen);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1340,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1351,        int searchLen = (searchStr == null ? 0 : searchStr.length());,4,1,0,2,4,0,4,0,0,9,61,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1352,        if (searchLen > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1353,"            int index = indexOf(searchStr, 0);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1354,            if (index >= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1355,                int replaceLen = (replaceStr == null ? 0 : replaceStr.length());,0,0,0,2,4,0,0,0,0,6,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1356,"                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1359,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1375,"        return replace(matcher, replaceStr, 0, size, -1);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1390,"        return replace(matcher, replaceStr, 0, size, 1);",4,1,0,1,2,1,8,0,0,14,48,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1413,"        endIndex = validateRange(startIndex, endIndex);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1414,"        return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);",0,0,0,1,2,1,12,0,0,12,76,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1435,        if (matcher == null || size == 0) {,4,3,0,1,3,0,0,0,0,8,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1436,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1438,        int replaceLen = (replaceStr == null ? 0 : replaceStr.length());,4,1,0,2,4,0,4,0,0,9,64,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1439,        char[] buf = buffer;,4,0,0,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1440,        for (int i = from; i < to && replaceCount != 0; i++) {,12,3,0,1,3,0,0,0,0,16,54,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1441,"            int removeLen = matcher.isMatch(buf, i, from, to);",2,0,0,1,2,0,12,0,0,14,50,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1442,            if (removeLen > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1443,"                replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);",14,2,1,1,2,0,10,0,0,32,65,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1444,                to = to - removeLen + replaceLen;,26,3,0,0,0,0,0,0,0,32,33,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1445,                i = i + replaceLen - 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1446,                if (replaceCount > 0) {,2,1,0,1,3,0,0,0,0,3,23,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1447,                    replaceCount--;,2,0,0,0,0,0,0,0,0,3,15,10,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1451,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1461,        if (size == 0) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1462,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1465,        int half = size / 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1466,        char[] buf = buffer;,6,1,0,1,2,0,0,0,0,7,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1467,"        for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {",14,2,0,1,3,0,0,0,0,18,82,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1468,            char swap = buf[leftIdx];,2,0,1,1,2,0,0,0,0,6,25,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1469,            buf[leftIdx] = buf[rightIdx];,0,0,1,2,4,0,0,0,0,9,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1470,            buf[rightIdx] = swap;,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1472,        return this;,10,1,0,0,0,1,0,0,0,12,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1483,        if (size == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1484,            return this;,2,2,0,0,0,1,14,0,0,18,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1486,        int len = size;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1487,        char[] buf = buffer;,6,1,0,1,2,0,0,0,0,7,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1488,        int pos = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1489,        while (pos < len && buf[pos] <= ' ') {,4,3,1,2,5,0,0,0,0,12,38,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1490,            pos++;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1492,        while (pos < len && buf[len - 1] <= ' ') {,6,4,1,2,5,0,0,0,0,13,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1493,            len--;,2,0,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1495,        if (len < size) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1496,"            delete(len, size);",0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1498,        if (pos > 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1499,"            delete(0, pos);",0,0,0,1,2,0,4,0,0,4,15,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1501,        return this;,4,1,0,0,0,1,0,0,0,5,12,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1514,        if (str == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1515,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1517,        int len = str.length();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1518,        if (len == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1519,            return true;,8,2,0,0,0,1,6,0,0,16,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1521,        if (len > size) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1522,            return false;,2,0,0,0,0,1,14,0,0,17,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1524,        for (int i = 0; i < len; i++) {,12,4,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1525,            if (buffer[i] != str.charAt(i)) {,0,1,1,3,7,0,6,0,0,11,33,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1526,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1529,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1541,        if (str == null) {,4,1,0,1,3,0,0,0,0,6,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1542,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1544,        int len = str.length();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1545,        if (len == 0) {,6,1,0,1,3,0,4,0,0,11,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1546,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1548,        if (len > size) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1549,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1551,        int pos = size - len;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1552,"        for (int i = 0; i < len; i++,pos++) {",10,1,0,1,3,0,0,0,0,13,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1553,            if (buffer[pos] != str.charAt(i)) {,0,0,0,3,7,0,0,0,0,10,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1554,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1557,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1569,"        return substring(start, size);",0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1586,"        endIndex = validateRange(startIndex, endIndex);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1587,"        return new String(buffer, startIndex, endIndex - startIndex);",0,0,0,1,2,1,0,0,0,4,61,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1603,        if (length <= 0) {,2,2,0,1,3,0,10,0,0,14,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1604,"            return """";",0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1605,        } else if (length >= size) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1606,"            return new String(buffer, 0, size);",4,0,0,1,2,1,0,2,0,6,35,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1608,"            return new String(buffer, 0, length);",26,3,1,1,2,1,0,2,0,36,37,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1625,        if (length <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1626,"            return """";",2,0,0,0,0,1,0,0,0,3,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1627,        } else if (length >= size) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1628,"            return new String(buffer, 0, size);",4,0,0,1,2,1,0,2,0,6,35,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1630,"            return new String(buffer, size - length, length);",16,1,0,1,2,2,0,2,0,20,49,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1651,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1652,            index = 0;,2,0,0,0,0,0,0,0,0,3,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1654,        if (length <= 0 || index >= size) {,6,3,0,1,3,0,0,0,0,9,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1655,"            return """";",0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1657,        if (size <= index + length) {,6,2,0,1,3,0,0,0,0,8,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1658,"            return new String(buffer, index, size - index);",18,2,0,1,2,1,0,2,0,22,47,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1660,"            return new String(buffer, index, length);",8,1,0,1,2,1,8,2,0,19,41,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1672,        char[] thisBuf = buffer;,4,0,0,1,2,0,0,0,0,4,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1673,        for (int i = 0; i < this.size; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1674,            if (thisBuf[i] == ch) {,4,1,1,2,5,0,0,0,0,10,23,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1675,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1678,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1688,"        return indexOf(str, 0) >= 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1703,"        return indexOf(matcher, 0) >= 0;",0,1,0,1,2,1,4,0,0,5,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1714,"        return indexOf(ch, 0);",6,2,0,1,2,1,4,0,0,12,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1725,        startIndex = (startIndex < 0 ? 0 : startIndex);,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1726,        if (startIndex >= size) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1727,            return -1;,2,0,0,0,0,1,0,0,0,4,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1729,        char[] thisBuf = buffer;,4,0,0,1,2,0,0,0,0,4,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1730,        for (int i = startIndex; i < size; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1731,            if (thisBuf[i] == ch) {,2,1,1,2,5,0,0,0,0,7,23,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1732,                return i;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1735,        return -1;,4,0,0,0,0,1,0,0,0,5,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1747,"        return indexOf(str, 0);",0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1761,        startIndex = (startIndex < 0 ? 0 : startIndex);,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1762,        if (str == null || startIndex >= size) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1763,            return -1;,2,1,1,0,0,1,14,0,0,21,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1765,        int strLen = str.length();,4,3,0,1,2,0,0,0,0,7,26,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1766,        if (strLen == 1) {,8,2,0,1,3,0,0,4,0,15,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1767,"            return indexOf(str.charAt(0), startIndex);",0,0,0,2,4,1,0,0,0,7,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1769,        if (strLen == 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1770,            return startIndex;,2,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1772,        if (strLen > size) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1773,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1775,        char[] thisBuf = buffer;,4,0,0,1,2,0,0,0,0,4,24,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1776,        int len = size - strLen + 1;,6,2,0,0,0,0,0,0,0,8,28,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1778,        for (int i = startIndex; i < len; i++) {,12,1,0,1,3,0,0,0,0,14,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1779,            for (int j = 0; j < strLen; j++) {,2,1,1,1,3,0,0,0,0,7,34,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1780,                if (str.charAt(j) != thisBuf[i + j]) {,8,2,1,3,7,0,10,0,0,22,38,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1781,                    continue outer;,2,0,0,0,0,0,0,0,0,2,15,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1784,            return i;,2,0,0,0,0,1,0,0,0,2,9,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1786,        return -1;,2,0,0,0,0,1,6,2,0,11,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1800,"        return indexOf(matcher, 0);",0,0,0,1,2,1,4,0,0,4,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1816,        startIndex = (startIndex < 0 ? 0 : startIndex);,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1817,        if (matcher == null || startIndex >= size) {,2,1,0,1,3,0,0,0,0,3,44,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1818,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1820,        int len = size;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1821,        char[] buf = buffer;,2,0,0,1,2,0,6,0,0,8,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1822,        for (int i = startIndex; i < len; i++) {,10,1,0,1,3,0,8,0,0,20,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1823,"            if (matcher.isMatch(buf, i, startIndex, len) > 0) {",0,1,0,2,5,0,12,0,0,13,51,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1824,                return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1827,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1838,"        return lastIndexOf(ch, size - 1);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1849,        startIndex = (startIndex >= size ? size - 1 : startIndex);,12,2,0,1,2,0,6,2,0,24,58,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1850,        if (startIndex < 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1851,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1853,        for (int i = startIndex; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1854,            if (buffer[i] == ch) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1855,                return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1858,        return -1;,2,1,0,0,0,1,10,0,0,14,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1870,"        return lastIndexOf(str, size - 1);",0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1884,        startIndex = (startIndex >= size ? size - 1 : startIndex);,14,2,0,1,2,0,0,0,0,18,58,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1885,        if (str == null || startIndex < 0) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1886,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1888,        int strLen = str.length();,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1889,        if (strLen > 0 && strLen <= size) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1890,            if (strLen == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1891,"                return lastIndexOf(str.charAt(0), startIndex);",0,0,0,2,4,1,8,0,0,8,46,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1895,            for (int i = startIndex - strLen + 1; i >= 0; i--) {,4,0,1,1,3,0,0,0,0,6,52,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1896,                for (int j = 0; j < strLen; j++) {,8,1,0,1,3,0,0,0,0,10,34,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1897,                    if (str.charAt(j) != buffer[i + j]) {,0,1,0,3,7,0,4,0,0,5,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1898,                        continue outer;,4,0,0,0,0,0,6,0,0,10,15,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1901,                return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1904,        } else if (strLen == 0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1905,            return startIndex;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1907,        return -1;,2,0,0,0,0,1,4,0,0,7,10,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1921,"        return lastIndexOf(matcher, size);",0,0,0,1,2,1,6,0,0,6,34,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1937,        startIndex = (startIndex >= size ? size - 1 : startIndex);,22,3,1,1,2,1,14,4,0,49,58,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1938,        if (matcher == null || startIndex < 0) {,16,5,0,1,3,0,0,0,0,22,40,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1939,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1941,        char[] buf = buffer;,4,0,0,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1942,        int endIndex = startIndex + 1;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1943,        for (int i = startIndex; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,39,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1944,"            if (matcher.isMatch(buf, i, 0, endIndex) > 0) {",0,1,0,2,5,0,10,0,0,11,47,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1945,                return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1948,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1985,        return new StrBuilderTokenizer();,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2009,        return new StrBuilderReader();,0,0,0,1,2,1,6,2,0,8,30,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2034,        return new StrBuilderWriter();,0,0,0,1,2,1,0,2,0,2,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2076,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2077,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2079,        if (this.size != other.size) {,8,1,0,1,3,0,0,0,0,9,30,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2080,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2082,        char thisBuf[] = this.buffer;,4,0,0,1,2,0,0,0,0,4,29,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2083,        char otherBuf[] = other.buffer;,8,0,0,1,2,0,4,0,0,13,31,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2084,        for (int i = size - 1; i >= 0; i--) {,8,2,0,1,3,0,0,0,0,11,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2085,            char c1 = thisBuf[i];,2,0,0,1,2,0,4,0,0,6,21,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2086,            char c2 = otherBuf[i];,6,1,1,1,2,0,0,0,0,11,22,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2087,            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {,0,0,0,3,7,0,0,0,0,10,73,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2088,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2091,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2102,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2103,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2105,        if (this.size != other.size) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2106,            return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2108,        char thisBuf[] = this.buffer;,4,0,0,1,2,0,0,0,0,4,29,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2109,        char otherBuf[] = other.buffer;,12,0,0,1,2,1,0,0,0,13,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2110,        for (int i = size - 1; i >= 0; i--) {,8,2,0,1,3,0,0,0,0,11,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2111,            if (thisBuf[i] != otherBuf[i]) {,0,1,1,3,7,0,0,0,0,9,32,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2112,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2115,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2126,        if (obj instanceof StrBuilder) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2127,            return equals((StrBuilder) obj);,0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2129,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2138,        char buf[] = buffer;,8,1,0,1,2,0,0,0,0,9,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2139,        int hash = 0;,10,2,1,0,0,0,0,0,0,16,13,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2140,        for (int i = size - 1; i >= 0; i--) {,2,1,0,1,3,0,0,0,0,3,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2141,            hash = 31 * hash + buf[i];,6,2,1,1,2,0,6,0,0,19,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2143,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2157,"        return new String(buffer, 0, size);",4,0,0,1,2,1,10,2,0,16,35,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2167,"        return new StringBuffer(size).append(buffer, 0, size);",2,0,0,2,4,1,6,2,0,10,54,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2181,        if (startIndex < 0) {,12,2,0,1,3,0,12,0,0,28,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2182,            throw new StringIndexOutOfBoundsException(startIndex);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2184,        if (endIndex > size) {,4,1,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2185,            endIndex = size;,6,0,0,0,0,1,6,4,0,18,16,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2187,        if (startIndex > endIndex) {,8,1,0,1,3,0,8,0,0,17,28,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2188,"            throw new StringIndexOutOfBoundsException(""end < start"");",0,0,0,1,2,0,0,2,0,3,57,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2190,        return endIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2200,        if (index < 0 || index > size) {,6,3,0,1,3,0,0,0,0,9,32,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2201,            throw new StringIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2325,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2324,        StrBuilderWriter() {,4,0,0,1,3,0,0,0,0,4,20,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2326,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2331,        },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2336,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2340,            StrBuilder.this.append((char) c);,8,1,0,2,4,0,6,0,0,15,33,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2341,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2345,            StrBuilder.this.append(cbuf);,2,0,0,1,2,0,4,0,0,6,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2346,        },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2350,"            StrBuilder.this.append(cbuf, off, len);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2351,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2355,            StrBuilder.this.append(str);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2356,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2360,"            StrBuilder.this.append(str, off, len);",4,0,0,1,2,0,8,0,0,12,38,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2361,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2248,            super();,4,0,1,1,2,0,0,0,0,6,8,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2247,        StrBuilderReader() {,2,0,0,1,3,0,0,0,0,2,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2249,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2254,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2258,            if (ready() == false) {,12,2,0,2,5,0,8,0,0,26,23,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2259,                return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2261,            return StrBuilder.this.charAt(pos++);,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2266,            if (off < 0 || len < 0 || off > b.length ||,10,7,0,0,1,0,0,0,0,17,43,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2268,                throw new IndexOutOfBoundsException();,0,0,0,1,2,0,0,2,0,2,38,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2270,            if (len == 0) {,2,1,0,1,3,0,0,0,0,3,15,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2271,                return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2273,            if (pos >= StrBuilder.this.size()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2274,                return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2276,            if (pos + len > size()) {,4,2,0,2,5,0,2,0,0,8,25,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2277,                len = StrBuilder.this.size() - pos;,6,1,0,1,2,0,2,0,0,10,35,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2279,"            StrBuilder.this.getChars(pos, pos + len, b, off);",6,1,0,1,2,0,8,0,0,15,49,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2280,            pos += len;,4,0,0,0,0,0,0,0,0,5,11,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2281,            return len;,2,0,0,0,0,1,10,0,0,14,11,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2286,            if (pos + n > StrBuilder.this.size()) {,8,2,0,2,5,0,2,0,0,12,39,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2287,                n = StrBuilder.this.size() - pos;,6,1,0,1,2,0,2,0,0,10,33,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2289,            if (n < 0) {,10,1,0,1,3,1,6,0,0,18,12,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2290,                return 0;,4,0,0,0,0,1,0,8,0,12,9,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2292,            pos += n;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2293,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2298,            return pos < StrBuilder.this.size();,4,1,0,1,2,1,2,0,0,7,36,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2303,            return true;,2,1,0,0,0,1,0,0,0,3,12,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2308,            mark = pos;,4,0,0,0,0,0,0,0,0,5,11,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2309,        },2,0,0,0,1,0,0,0,0,4,1,15,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2313,            pos = mark;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2314,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1672,        char[] thisBuf = buffer;,0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1673,        for (int i = 0; i < thisBuf.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,1.0,1,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1674,            if (thisBuf[i] == ch) {,2,1,1,2,5,0,0,0,0,7,23,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1675,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,1.0,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1202,        int len = (str == null ? 0 : str.length());,0,0,0,2,4,0,0,0,0,6,43,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1203,        if (len > 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1204,"            int index = indexOf(str, 0);",2,0,0,1,2,0,4,0,0,6,28,7,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1205,            if (index >= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1206,"                deleteImpl(index, index + len, len);",0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1209,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1761,        startIndex = (startIndex < 0 ? 0 : startIndex);,6,1,0,1,2,0,0,0,0,8,47,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1762,        if (str == null || startIndex >= size) {,0,0,0,1,3,0,0,0,0,4,40,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1765,        int strLen = str.length();,2,0,0,1,2,0,4,0,0,6,26,5,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1766,        if (strLen == 1) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1769,        if (strLen == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1772,        if (strLen > size) {,4,1,0,1,3,0,0,0,0,5,20,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1775,        char[] thisBuf = buffer;,0,0,0,1,2,0,0,0,0,3,24,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1776,        int len = size - strLen + 1;,0,0,0,0,0,0,0,0,0,0,28,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1778,        for (int i = startIndex; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1779,            for (int j = 0; j < strLen; j++) {,8,1,0,1,3,0,0,0,0,10,34,7,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1780,                if (str.charAt(j) != thisBuf[i + j]) {,4,2,1,3,7,0,6,0,0,14,38,9,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1781,                    continue outer;,2,0,0,0,0,0,0,0,0,2,15,11,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1784,            return i;,4,0,0,0,0,4,4,2,0,13,9,1,0.11111,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1114,"        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);",6,1,0,1,2,2,12,4,0,25,72,1,0.06667,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1115,        size -= len;,4,0,0,0,0,0,0,0,0,5,12,4,0.06667,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,1116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,121,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01429,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,122,        if (str == null) {,4,1,0,1,3,0,4,0,0,10,18,3,0.01429,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,125,            buffer = new char[str.length() + CAPACITY];,4,1,0,2,4,0,4,0,0,10,43,6,0.01429,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,126,            append(str);,0,0,0,1,2,0,4,0,0,4,12,7,0.01429,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,60,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1761,        startIndex = (startIndex < 0 ? 0 : startIndex);,12,2,0,1,2,0,0,0,0,15,47,3,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1762,        if (str == null || startIndex >= size) {,0,1,0,1,3,0,14,0,0,17,40,3,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1765,        int strLen = str.length();,6,0,0,1,2,0,0,0,0,6,26,5,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1766,        if (strLen == 1) {,2,0,0,1,3,0,0,0,0,2,18,8,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1769,        if (strLen == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1772,        if (strLen > size) {,0,0,0,1,3,0,0,0,0,4,20,4,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1775,        char[] thisBuf = buffer;,0,0,0,1,2,0,0,0,0,3,24,4,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1776,        int len = thisBuf.length - strLen;,8,1,0,0,0,0,0,0,0,9,34,5,0.57143,1,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1778,        for (int i = startIndex; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1779,            for (int j = 0; j < strLen; j++) {,8,1,0,1,3,0,6,0,0,16,34,3,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1780,                if (str.charAt(j) != thisBuf[i + j]) {,4,2,1,3,7,0,6,0,0,14,38,9,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1781,                    continue outer;,2,0,0,0,0,0,0,0,0,2,15,11,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1784,            return i;,6,2,0,0,0,1,0,0,0,9,9,3,0.57143,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1184,        int len = (str == null ? 0 : str.length());,4,1,0,2,4,0,4,0,0,9,43,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1185,        if (len > 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1186,"            int index = indexOf(str, 0);",2,0,0,1,2,0,4,0,0,6,28,7,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1187,            while (index >= 0) {,4,1,0,1,3,3,0,0,0,8,20,1,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1188,"                deleteImpl(index, index + len, len);",4,1,0,1,2,0,6,0,0,11,36,9,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1189,"                index = indexOf(str, index);",2,0,0,1,2,3,0,4,0,9,28,2,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1202,        int len = (str == null ? 0 : str.length());,0,0,0,2,4,0,0,0,0,6,43,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1203,        if (len > 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1204,"            int index = indexOf(str, 0);",0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1205,            if (index >= 0) {,4,1,0,1,3,3,0,0,0,8,17,1,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1206,"                deleteImpl(index, index + len, len);",6,2,0,1,2,0,6,0,0,16,36,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1209,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1747,"        return indexOf(str, 0);",0,0,0,1,2,1,8,0,0,9,23,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1114,"        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);",8,1,0,1,2,0,4,0,0,13,72,5,0.30769,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1115,        size -= len;,4,0,0,0,0,0,10,0,0,15,12,3,0.30769,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,1116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.30769,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,121,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05882,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,122,        if (str == null) {,10,0,0,1,3,1,0,4,0,15,18,3,0.05882,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,125,            buffer = new char[str.length() + CAPACITY];,4,1,0,2,4,0,10,0,0,16,43,3,0.05882,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,126,            append(str);,0,0,0,1,2,0,4,0,0,4,12,7,0.05882,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,474,            int len = length();,2,0,0,1,2,0,2,0,0,4,19,7,0.03571,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,475,            ensureCapacity(len + strLen);,6,1,0,1,2,0,2,0,0,10,29,6,0.03571,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,476,"            str.getChars(0, strLen, buffer, len);",0,0,0,1,2,0,10,0,0,10,37,7,0.03571,0,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,61,477,            size += strLen;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,840,                    if (entityName.length() == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,843,                        char charAt1 = entityName.charAt(1);,2,0,0,1,2,0,4,0,0,6,36,14,0.5,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,845,                            if (charAt1 == 'x' || charAt1=='X') {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,848,                                entityValue = Integer.parseInt(entityName.substring(1));,4,0,0,2,4,0,8,0,0,14,56,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,852,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1
defect4j,lang,org/apache/commons/lang/Entities,62,853,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,862,                    buf.append((char) (entityValue));,2,0,0,3,6,3,4,2,0,12,33,3,0.25,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,819,        StringBuffer buf = new StringBuffer(str.length());,2,0,0,2,4,0,4,4,0,10,50,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,820,"        buf.append(str.substring(0, firstAmp));",0,0,0,2,4,0,0,0,0,1,39,6,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,821,        for (int i = firstAmp; i < str.length(); ++i) {,8,1,0,2,5,0,4,0,0,14,47,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,822,            char ch = str.charAt(i);,2,0,0,1,2,0,6,0,0,8,24,7,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,823,            if (ch == '&') {,0,0,0,1,3,0,0,0,0,4,16,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,824,"                int semi = str.indexOf(';', i + 1);",6,1,0,1,2,3,4,0,0,15,35,1,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,825,                if (semi == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,829,"                int amph = str.indexOf('&', i + 1);",4,1,0,1,2,0,4,0,0,10,35,9,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,830,                if( amph != -1 && amph < semi ) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,835,"                String entityName = str.substring(i + 1, semi);",4,1,0,1,2,0,6,2,0,13,47,8,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,837,                if (entityName.length() == 0) {,2,0,0,2,5,0,0,0,0,2,31,10,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,839,                } else if (entityName.charAt(0) == '#') {,0,1,0,2,6,0,4,0,0,6,41,9,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,857,                if (entityValue == -1) {,2,1,0,1,3,0,0,0,0,4,24,8,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,864,                i = semi;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,865,            } else {,4,0,0,0,2,1,0,2,0,7,8,2,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,869,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.2,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,814,        int firstAmp = str.indexOf('&');,2,0,0,1,2,0,4,0,0,7,32,5,0.03704,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,815,        if (firstAmp < 0) {,4,1,0,1,3,0,0,0,0,5,19,4,0.03704,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,83,"        protected Entry(int hash, int key, Object value, Entry next) {",4,1,1,1,3,0,2,0,0,12,62,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,84,            this.hash = hash;,4,0,0,0,0,0,0,0,0,5,17,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,85,            this.key = key;,0,0,0,0,0,0,0,0,0,0,15,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,86,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,87,            this.next = next;,0,0,0,0,0,0,0,0,0,0,17,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,88,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,502,    static class LookupEntityMap extends PrimitiveEntityMap {,2,0,0,0,1,1,0,2,0,5,57,2,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,504,        private int LOOKUP_TABLE_SIZE = 256;,4,0,0,0,0,1,4,0,0,10,36,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,419,    static class PrimitiveEntityMap implements EntityMap {,4,0,0,0,1,1,12,2,0,20,54,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,420,        private Map mapNameToValue = new HashMap();,0,0,0,1,2,0,0,0,0,3,43,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,421,        private IntHashMap mapValueToName = new IntHashMap();,2,0,0,1,2,1,0,4,0,7,53,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,427,"            mapNameToValue.put(name, new Integer(value));",2,0,0,2,4,0,6,2,0,10,45,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,428,"            mapValueToName.put(value, name);",2,0,0,1,2,1,8,0,0,12,32,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,429,        },2,0,0,0,1,0,6,2,0,10,1,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,39,class Entities {,2,0,0,0,1,0,0,0,0,2,16,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,693,    EntityMap map = new Entities.LookupEntityMap();,6,0,0,1,2,0,0,2,0,8,47,2,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,41,    private static final String[][] BASIC_ARRAY = {,2,0,0,2,5,3,0,2,0,7,47,2,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,48,    private static final String[][] APOS_ARRAY = {,2,0,0,2,5,3,0,2,0,7,46,2,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,53,    static final String[][] ISO8859_1_ARRAY = {,2,0,0,2,5,2,0,2,0,6,43,2,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,154,    static final String[][] HTML40_ARRAY = {,2,0,0,2,5,2,8,2,0,15,40,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,366,        XML = new Entities();,2,0,0,1,2,0,0,2,0,5,21,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,367,        XML.addEntities(BASIC_ARRAY);,0,0,0,1,2,0,6,0,0,6,29,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,368,        XML.addEntities(APOS_ARRAY);,0,0,0,1,2,0,6,0,0,6,28,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,372,        HTML32 = new Entities();,2,0,0,1,2,0,0,2,0,5,24,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,373,        HTML32.addEntities(BASIC_ARRAY);,0,0,0,1,2,0,0,0,0,3,32,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,374,        HTML32.addEntities(ISO8859_1_ARRAY);,0,0,0,1,2,0,6,0,0,6,36,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,378,        HTML40 = new Entities();,2,0,0,1,2,0,0,2,0,5,24,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,379,        fillWithHtml40Entities(HTML40);,0,0,0,1,2,0,0,0,0,3,31,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,388,        entities.addEntities(BASIC_ARRAY);,0,0,1,1,2,0,10,0,0,19,34,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,389,        entities.addEntities(ISO8859_1_ARRAY);,0,0,0,1,2,0,6,0,0,6,38,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,390,        entities.addEntities(HTML40_ARRAY);,0,0,0,1,2,0,6,0,0,6,35,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,391,    },6,0,0,0,1,0,0,0,0,7,1,11,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,701,        for (int i = 0; i < entityArray.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,702,"            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));",0,0,1,6,12,0,10,0,0,19,66,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,704,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,713,"        map.add(name, value);",0,0,0,1,2,0,12,0,0,12,21,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/Entities,62,714,    },2,0,0,0,1,0,0,0,0,3,1,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,96,"        this(20, 0.75f);",0,0,0,1,2,0,0,0,0,3,16,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,97,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,121,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,122,        if (initialCapacity < 0) {,6,1,0,1,3,0,0,2,0,9,26,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,125,        if (loadFactor <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,128,        if (initialCapacity == 0) {,16,1,0,1,3,3,0,0,0,20,27,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,132,        this.loadFactor = loadFactor;,0,0,0,0,0,0,0,0,0,0,29,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,133,        table = new Entry[initialCapacity];,2,0,1,1,2,0,0,2,0,7,35,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,134,        threshold = (int) (initialCapacity * loadFactor);,6,1,0,2,4,0,0,0,0,8,49,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,258,        int oldCapacity = table.length;,0,0,0,0,0,0,0,0,0,0,31,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,259,        Entry oldMap[] = table;,4,0,0,1,2,0,0,2,0,6,23,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,261,        int newCapacity = oldCapacity * 2 + 1;,0,0,0,0,0,0,0,0,0,0,38,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,262,        Entry newMap[] = new Entry[newCapacity];,2,0,1,2,4,0,0,4,0,8,40,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,264,        threshold = (int) (newCapacity * loadFactor);,10,1,0,2,4,0,0,0,0,13,45,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,265,        table = newMap;,4,0,0,0,0,0,0,0,0,5,15,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,267,        for (int i = oldCapacity; i-- > 0;) {,6,1,0,1,3,0,0,0,0,8,37,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,268,            for (Entry old = oldMap[i]; old != null;) {,0,0,0,2,5,0,0,0,0,7,43,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,269,                Entry e = old;,0,0,0,0,0,0,0,0,0,0,14,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,270,                old = old.next;,10,3,0,0,0,0,0,0,0,16,15,3,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,272,                int index = (e.hash & 0x7FFFFFFF) % newCapacity;,0,0,0,1,2,0,0,0,0,3,48,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,273,                e.next = newMap[index];,4,0,1,1,2,0,0,0,0,9,23,8,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,274,                newMap[index] = e;,10,1,1,1,2,0,0,0,0,17,18,1,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,275,            },0,0,0,0,1,0,6,0,0,6,1,7,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,296,        Entry tab[] = table;,4,0,0,1,2,0,0,2,0,6,20,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,297,        int hash = key;,4,0,0,0,0,0,0,0,0,4,15,5,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,298,        int index = (hash & 0x7FFFFFFF) % tab.length;,0,0,0,1,2,0,0,0,0,3,45,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,299,        for (Entry e = tab[index]; e != null; e = e.next) {,10,1,1,2,5,0,0,2,0,18,51,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,300,            if (e.hash == hash) {,6,1,0,1,3,0,0,0,0,7,21,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,307,        if (count >= threshold) {,4,1,0,1,3,0,0,0,0,5,25,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,309,            rehash();,0,0,0,1,2,0,2,0,0,2,9,7,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,311,            tab = table;,4,0,0,0,0,0,0,0,0,5,12,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,312,            index = (hash & 0x7FFFFFFF) % tab.length;,8,2,0,1,2,0,0,0,0,11,41,6,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,316,"        Entry e = new Entry(hash, key, value, tab[index]);",8,0,1,2,4,0,0,4,0,16,50,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,317,        tab[index] = e;,2,0,1,1,2,0,0,0,0,7,15,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,318,        count++;,0,0,0,0,0,0,0,0,0,0,8,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/IntHashMap,62,319,        return null;,2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,247,"        return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault());",2,1,0,2,4,1,12,0,0,16,81,3,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,330,"            if (Token.containsTokenWithValue(tokens, M)) {",0,0,0,2,5,0,0,0,0,7,46,4,1.0,1,1
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,331,                months += 12 * years;,6,2,0,0,0,0,0,0,0,9,21,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,332,                years = 0;,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,344,            hours += 24 * days;,2,1,0,0,0,0,4,0,0,7,19,8,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,345,            days = 0;,2,0,0,0,0,0,0,0,0,3,9,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,348,            minutes += 60 * hours;,8,5,0,0,0,0,4,0,0,19,22,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,349,            hours = 0;,2,0,0,0,0,0,0,0,0,3,10,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,352,            seconds += 60 * minutes;,4,1,0,0,0,0,0,0,0,6,24,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,353,            minutes = 0;,2,0,0,0,0,0,0,0,0,3,12,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,356,            milliseconds += 1000 * seconds;,4,1,0,0,0,0,0,0,0,6,31,6,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,357,            seconds = 0;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,265,        long millis = endMillis - startMillis;,0,0,0,0,0,0,0,0,0,0,38,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,266,        if (millis < 28 * DateUtils.MILLIS_PER_DAY) {,6,2,0,1,3,0,0,0,0,8,45,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,270,        Token[] tokens = lexx(format);,2,0,0,2,4,3,0,0,0,5,30,2,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,274,        Calendar start = Calendar.getInstance(timezone);,2,0,0,1,2,0,6,2,0,10,48,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,275,        start.setTime(new Date(startMillis));,2,0,0,2,4,0,4,2,0,8,37,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,276,        Calendar end = Calendar.getInstance(timezone);,2,1,0,1,2,0,10,2,0,15,46,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,277,        end.setTime(new Date(endMillis));,2,0,0,2,4,0,4,2,0,8,33,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,280,        int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);,10,1,0,2,4,0,8,0,0,19,83,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,281,        int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);,10,1,0,2,4,0,8,0,0,19,68,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,282,        int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);,10,1,0,2,4,0,8,0,0,19,68,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,283,        int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);,10,1,0,2,4,0,8,0,0,19,76,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,284,        int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);,14,1,0,2,4,0,8,0,0,24,77,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,285,        int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);,12,2,0,2,4,0,8,2,0,26,65,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,286,        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);,14,1,0,2,4,0,8,2,0,25,62,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,289,        while (milliseconds < 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,293,        while (seconds < 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,297,        while (minutes < 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,301,        while (hours < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,305,        while (days < 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,314,        while (months < 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,318,"        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);",0,0,0,1,2,0,0,0,0,3,81,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,319,"        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);",0,0,0,1,2,0,0,0,0,3,66,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,320,"        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);",8,0,0,1,2,3,8,4,0,24,66,1,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,321,"        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);",6,0,0,1,2,0,8,0,0,15,67,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,322,"        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);",0,0,0,1,2,0,0,0,0,3,66,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,323,"        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);",8,0,0,1,2,3,8,4,0,24,63,1,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,324,"        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);",6,0,0,1,2,0,8,0,0,15,60,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,329,"        if (!Token.containsTokenWithValue(tokens, y)) {",2,0,0,2,5,0,0,2,0,5,47,10,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,339,"        if (!Token.containsTokenWithValue(tokens, M)) {",0,0,0,2,5,0,8,2,0,13,47,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,343,"        if (!Token.containsTokenWithValue(tokens, d)) {",0,0,0,2,5,0,8,0,0,9,47,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,347,"        if (!Token.containsTokenWithValue(tokens, H)) {",0,0,0,2,5,0,8,0,0,9,47,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,351,"        if (!Token.containsTokenWithValue(tokens, m)) {",0,0,0,2,5,0,0,0,0,7,47,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,355,"        if (!Token.containsTokenWithValue(tokens, s)) {",0,0,0,2,5,0,8,0,0,9,47,4,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,360,"        return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);",0,0,0,1,2,1,20,0,0,20,96,5,0.5,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,433,"        end.add( field, -1 * difference );",2,1,0,1,2,0,6,0,0,10,34,5,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,434,        int endValue = end.get(field);,2,0,0,1,2,0,6,0,0,8,30,5,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,435,        int startValue = start.get(field);,4,0,0,1,2,3,6,4,0,17,34,1,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,436,        if (endValue < startValue) {,4,1,0,1,3,0,0,0,0,5,28,4,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,441,            return 0;,0,0,0,0,0,1,6,0,0,6,9,13,0.5,1,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,395,"                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer",2,0,0,2,5,0,18,0,0,21,96,12,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,397,                    lastOutputSeconds = false;,2,0,0,0,0,0,0,0,0,4,26,11,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,487,                case 'M'  : value = M; break;,4,0,0,0,0,0,0,0,0,6,29,6,0.2,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,63,3865,        if (str == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,63,3868,        int pads = size - str.length();,4,1,0,1,2,0,4,0,0,9,31,5,0.14286,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,63,3869,        if (pads <= 0) {,4,2,0,1,3,0,0,0,0,6,16,4,0.14286,0,0
defect4j,lang,org/apache/commons/lang/StringUtils,63,3870,            return str; // returns original String when possible,2,0,0,0,0,1,0,0,0,2,52,6,0.14286,0,0
defect4j,lang,org/apache/commons/lang/time/DurationFormatUtils,63,534,            return false;,0,0,0,0,0,1,0,0,0,1,13,5,0.14286,0,0
defect4j,lang,org/apache/commons/lang/enums/ValuedEnum,64,183,        return iValue - ((ValuedEnum) other).iValue;,6,1,0,2,4,1,0,2,0,9,44,4,0.25,1,1
defect4j,lang,org/apache/commons/lang/enums/ValuedEnum,64,126,        super(name);,2,0,0,1,2,0,0,0,0,2,12,4,0.05263,0,0
defect4j,lang,org/apache/commons/lang/enums/ValuedEnum,64,127,        iValue = value;,4,0,0,0,0,0,0,0,0,5,15,4,0.05263,0,0
defect4j,lang,org/apache/commons/lang/enums/ValuedEnum,64,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,519,        return getClass();,0,0,0,1,2,1,2,0,0,2,18,5,0.01754,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,314,        iName = name;,4,0,0,0,0,0,0,0,0,5,13,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,315,        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();,2,2,0,3,6,0,8,0,0,13,64,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,317,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,339,                ok = true;,2,0,0,0,0,0,0,0,0,4,10,8,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,340,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,349,        Entry entry = (Entry) cEnumClasses.get(enumClass);,0,0,0,2,4,0,0,0,0,6,50,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,350,        if (entry == null) {,4,1,0,1,3,0,0,0,0,6,20,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,351,            entry = createEntry(enumClass);,0,0,0,1,2,0,0,0,0,3,31,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,352,"            cEnumClasses.put(enumClass, entry);",0,0,0,1,2,0,8,0,0,8,35,7,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,354,        if (entry.map.containsKey(name)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,357,"        entry.map.put(name, this);",4,0,0,1,2,0,4,0,0,8,26,5,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,358,        entry.list.add(this);,4,0,0,1,2,0,2,0,0,6,21,5,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,359,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,484,        Entry entry = new Entry();,2,0,0,1,2,0,0,4,0,6,26,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,485,        Class cls = enumClass.getSuperclass();,4,0,0,1,2,3,4,2,0,13,38,1,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,486,        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {,6,5,0,1,3,0,0,4,0,15,69,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,495,        return entry;,2,0,0,0,0,1,0,0,0,2,13,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,297,          super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,279,        final Map map = new HashMap();,2,0,0,1,2,1,0,4,0,7,30,3,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,283,        final Map unmodifiableMap = Collections.unmodifiableMap(map);,2,0,0,1,2,1,6,2,0,11,61,3,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,287,        final List list = new ArrayList(25);,2,0,0,1,2,1,0,4,0,7,36,3,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,291,        final List unmodifiableList = Collections.unmodifiableList(list);,0,0,0,1,2,0,0,0,0,3,65,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,298,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01587,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,335,        Class cls = getClass();,6,0,0,1,2,0,2,2,0,12,23,3,0.01515,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,336,        boolean ok = false;,2,0,0,0,0,0,0,0,0,3,19,5,0.01515,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,338,            if (cls == enumClass) {,0,0,0,1,3,0,0,0,0,4,23,4,0.01515,0,0
defect4j,lang,org/apache/commons/lang/enums/Enum,64,344,        if (ok == false) {,2,1,0,1,3,0,0,0,0,4,18,4,0.01515,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,543,        if (date == null) {,6,0,0,1,3,0,4,0,0,11,19,7,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,546,        Calendar gval = Calendar.getInstance();,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,547,        gval.setTime(date);,0,0,0,1,2,0,6,0,0,6,19,5,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,548,"        modify(gval, field, false);",0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,549,        return gval.getTime();,2,0,0,1,2,1,10,0,0,13,22,3,1.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,620,        if (val.get(Calendar.YEAR) > 280000000) {,4,1,0,2,5,0,4,0,0,9,41,4,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,641,        boolean roundUp = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,642,        for (int i = 0; i < fields.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,643,            for (int j = 0; j < fields[i].length; j++) {,8,1,1,2,5,0,0,0,0,14,44,6,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,644,                if (fields[i][j] == field) {,4,1,1,3,7,0,6,0,0,17,28,3,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,646,                    if (round && roundUp) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,663,                    return;,0,0,0,0,0,1,0,0,0,1,7,4,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,667,            int offset = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,668,            boolean offsetSet = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,670,            switch (field) {,2,0,0,1,3,0,0,0,0,2,16,6,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,700,            if (!offsetSet) {,2,0,0,1,3,0,0,0,0,3,17,6,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,701,                int min = val.getActualMinimum(fields[i][0]);,18,1,1,3,6,3,12,0,0,39,45,1,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,702,                int max = val.getActualMaximum(fields[i][0]);,2,0,1,3,6,0,4,0,0,10,45,9,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,704,                offset = val.get(fields[i][0]) - min;,4,1,1,3,6,0,4,0,0,14,37,8,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,706,                roundUp = offset > ((max - min) / 2);,8,3,0,2,4,0,0,0,0,12,37,8,0.25,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,709,"                val.set(fields[i][0], val.get(fields[i][0]) - offset);",0,0,0,6,12,0,0,0,0,18,54,4,0.25,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,44,"    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(""GMT"");",2,0,0,1,2,3,4,2,0,12,73,2,0.05,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,72,    private static final int[][] fields = {,0,0,0,2,5,0,0,0,0,7,39,4,0.05,1,1
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,123,        super();,2,0,0,1,2,3,0,12,0,17,8,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,141,        if (date1 == null || date2 == null) {,4,3,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,142,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,144,        Calendar cal1 = Calendar.getInstance();,2,0,0,1,2,0,4,2,0,8,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,145,        cal1.setTime(date1);,0,0,0,1,2,0,12,0,0,12,20,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,146,        Calendar cal2 = Calendar.getInstance();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,147,        cal2.setTime(date2);,0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,148,"        return isSameDay(cal1, cal2);",0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,165,        if (cal1 == null || cal2 == null) {,4,3,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,166,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,168,        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&,8,3,0,2,5,1,8,0,0,19,59,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,186,        if (date1 == null || date2 == null) {,4,3,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,187,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,189,        return date1.getTime() == date2.getTime();,0,1,0,2,4,1,8,0,0,9,42,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,204,        if (cal1 == null || cal2 == null) {,4,3,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,205,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,207,        return cal1.getTime().getTime() == cal2.getTime().getTime();,0,1,0,4,8,1,12,0,0,13,60,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,224,        if (cal1 == null || cal2 == null) {,4,3,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,225,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,227,        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&,8,8,0,2,5,1,8,0,0,24,75,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,252,        if (str == null || parsePatterns == null) {,4,3,0,1,3,0,0,0,0,7,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,253,"            throw new IllegalArgumentException(""Date and Patterns must not be null"");",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,256,        SimpleDateFormat parser = null;,2,0,0,0,0,0,0,2,0,4,31,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,257,        ParsePosition pos = new ParsePosition(0);,2,0,0,1,2,0,0,4,0,6,41,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,258,        for (int i = 0; i < parsePatterns.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,259,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,260,                parser = new SimpleDateFormat(parsePatterns[0]);,2,0,1,2,4,0,0,2,0,7,48,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,262,                parser.applyPattern(parsePatterns[i]);,2,0,0,2,4,0,0,0,0,2,38,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,264,            pos.setIndex(0);,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,265,"            Date date = parser.parse(str, pos);",12,8,0,1,2,0,16,2,0,38,35,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,266,            if (date != null && pos.getIndex() == str.length()) {,2,3,0,3,7,0,8,0,0,13,53,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,267,                return date;,2,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,270,"        throw new ParseException(""Unable to parse the date: "" + str, -1);",2,1,0,1,2,0,0,2,0,7,65,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,284,"        return add(date, Calendar.YEAR, amount);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,298,"        return add(date, Calendar.MONTH, amount);",4,0,0,1,2,1,6,0,0,10,41,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,312,"        return add(date, Calendar.WEEK_OF_YEAR, amount);",4,0,0,1,2,1,6,0,0,10,48,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,326,"        return add(date, Calendar.DAY_OF_MONTH, amount);",4,0,0,1,2,1,6,0,0,10,48,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,340,"        return add(date, Calendar.HOUR_OF_DAY, amount);",4,0,0,1,2,1,12,0,0,16,47,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,354,"        return add(date, Calendar.MINUTE, amount);",4,0,0,1,2,1,6,0,0,10,42,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,368,"        return add(date, Calendar.SECOND, amount);",4,0,0,1,2,1,6,0,0,10,42,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,382,"        return add(date, Calendar.MILLISECOND, amount);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,397,        if (date == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,398,"            throw new IllegalArgumentException(""The date must not be null"");",2,0,0,1,2,2,4,2,0,10,64,2,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,400,        Calendar c = Calendar.getInstance();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,401,        c.setTime(date);,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,402,"        c.add(calendarField, amount);",2,1,0,1,2,0,8,0,0,11,29,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,403,        return c.getTime();,0,0,0,1,2,1,4,2,0,6,19,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,436,        if (date == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,437,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,439,        Calendar gval = Calendar.getInstance();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,440,        gval.setTime(date);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,441,"        modify(gval, field, true);",0,0,0,1,2,0,6,0,0,7,26,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,442,        return gval.getTime();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,474,        if (date == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,475,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,477,        Calendar rounded = (Calendar) date.clone();,2,0,0,2,4,0,4,4,0,10,43,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,478,"        modify(rounded, field, true);",0,0,0,1,2,0,10,0,0,12,29,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,479,        return rounded;,8,0,0,0,0,1,0,0,0,8,15,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,513,        if (date == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,514,"            throw new IllegalArgumentException(""The date must not be null"");",6,0,0,1,2,0,0,2,0,11,64,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,516,        if (date instanceof Date) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,517,"            return round((Date) date, field);",2,0,0,2,4,1,4,2,0,8,33,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,518,        } else if (date instanceof Calendar) {,2,0,0,1,4,1,0,2,0,5,38,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,519,"            return round((Calendar) date, field).getTime();",2,0,0,3,6,1,6,2,0,10,47,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,521,"            throw new ClassCastException(""Could not round "" + date);",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,544,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,569,        if (date == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,570,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,572,        Calendar truncated = (Calendar) date.clone();,2,0,0,2,4,0,4,4,0,10,45,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,573,"        modify(truncated, field, false);",0,0,0,1,2,0,6,0,0,7,32,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,574,        return truncated;,2,1,0,0,0,1,14,0,0,18,17,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,598,        if (date == null) {,4,2,0,1,3,0,0,0,0,6,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,599,"            throw new IllegalArgumentException(""The date must not be null"");",6,1,0,1,2,0,0,2,0,12,64,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,601,        if (date instanceof Date) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,602,"            return truncate((Date) date, field);",2,0,0,2,4,1,4,2,0,8,36,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,603,        } else if (date instanceof Calendar) {,2,0,0,1,4,0,0,2,0,4,38,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,604,"            return truncate((Calendar) date, field).getTime();",2,0,0,3,6,1,6,2,0,10,50,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,606,"            throw new ClassCastException(""Could not truncate "" + date);",4,1,0,1,2,3,2,4,0,16,59,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,621,"            throw new ArithmeticException(""Calendar value too large for accurate calculations"");",0,0,0,1,2,0,0,2,0,3,84,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,647,                        if (field == DateUtils.SEMI_MONTH) {,6,1,0,1,3,0,0,0,0,7,36,12,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,651,                            if (val.get(Calendar.DATE) == 1) {,4,1,0,2,5,0,4,0,0,9,34,14,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,652,"                                val.add(Calendar.DATE, 15);",4,0,0,1,2,0,4,0,0,8,27,17,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,654,"                                val.add(Calendar.DATE, -15);",4,0,0,1,2,0,4,0,0,9,28,17,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,655,"                                val.add(Calendar.MONTH, 1);",4,0,0,1,2,0,4,0,0,8,27,17,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,660,"                            val.add(fields[i][0], 1);",2,0,1,3,6,0,10,0,0,16,25,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,672,                    if (fields[i][0] == Calendar.DATE) {,4,1,1,3,7,0,0,0,0,9,36,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,676,                        offset = val.get(Calendar.DATE) - 1;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,679,                        if (offset >= 15) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,680,                            offset -= 15;,2,0,0,0,0,0,0,0,0,3,13,11,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,683,                        roundUp = offset > 7;,6,1,0,0,0,0,0,2,0,10,21,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,684,                        offsetSet = true;,2,0,0,0,0,0,0,0,0,4,17,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,688,                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {,6,2,1,3,7,0,0,0,0,12,43,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,691,                        offset = val.get(Calendar.HOUR_OF_DAY);,6,0,0,1,2,0,4,0,0,11,39,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,692,                        if (offset >= 12) {,2,1,0,1,3,0,0,0,0,3,19,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,693,                            offset -= 12;,6,4,0,0,0,0,12,0,0,23,13,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,695,                        roundUp = offset > 6;,4,1,0,0,0,0,0,0,0,6,21,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,696,                        offsetSet = true;,2,0,0,0,0,0,0,0,0,4,17,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,711,"        throw new IllegalArgumentException(""The field "" + field + "" is not supported"");",2,1,0,1,2,0,0,2,0,7,79,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,741,        if (focus == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,742,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,2,0,4,64,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,744,        Calendar gval = Calendar.getInstance();,2,0,0,1,2,0,4,2,0,8,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,745,        gval.setTime(focus);,0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,746,"        return iterator(gval, rangeStyle);",2,1,0,1,2,1,6,0,0,9,34,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,774,        if (focus == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,775,"            throw new IllegalArgumentException(""The date must not be null"");",2,0,0,1,2,0,0,2,0,6,64,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,777,        Calendar start = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,778,        Calendar end = null;,2,0,0,0,0,0,0,2,0,4,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,779,        int startCutoff = Calendar.SUNDAY;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,780,        int endCutoff = Calendar.SATURDAY;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,781,        switch (rangeStyle) {,2,0,0,1,3,0,0,0,0,2,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,785,"                start = truncate(focus, Calendar.MONTH);",12,0,0,1,2,0,4,0,0,18,40,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,787,                end = (Calendar) start.clone();,2,0,0,2,4,0,4,2,0,9,31,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,788,"                end.add(Calendar.MONTH, 1);",4,0,0,1,2,0,4,0,0,8,27,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,789,"                end.add(Calendar.DATE, -1);",4,0,0,1,2,0,4,0,0,9,27,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,791,                if (rangeStyle == RANGE_MONTH_MONDAY) {,4,1,0,1,3,0,0,0,0,5,39,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,792,                    startCutoff = Calendar.MONDAY;,6,0,0,0,0,0,0,0,0,7,30,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,793,                    endCutoff = Calendar.SUNDAY;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,801,"                start = truncate(focus, Calendar.DATE);",0,1,0,1,2,0,4,0,0,6,39,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,802,"                end = truncate(focus, Calendar.DATE);",6,0,0,1,2,0,4,0,0,11,37,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,803,                switch (rangeStyle) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,806,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,808,                        startCutoff = Calendar.MONDAY;,6,0,0,0,0,0,0,0,0,7,30,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,809,                        endCutoff = Calendar.SUNDAY;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,810,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,812,                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);,6,0,0,1,2,0,4,0,0,11,46,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,813,                        endCutoff = startCutoff - 1;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,814,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,816,                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;,6,1,0,1,2,0,4,0,0,12,50,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,817,                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;,0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,820,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,822,"                throw new IllegalArgumentException(""The range style "" + rangeStyle + "" is not valid."");",2,1,0,1,2,0,0,2,0,7,87,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,824,        if (startCutoff < Calendar.SUNDAY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,825,            startCutoff += 7;,4,0,0,0,0,0,0,0,0,5,17,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,827,        if (startCutoff > Calendar.SATURDAY) {,8,2,0,1,3,0,0,0,0,10,38,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,828,            startCutoff -= 7;,2,0,0,0,0,0,0,0,0,3,17,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,830,        if (endCutoff < Calendar.SUNDAY) {,8,2,0,1,3,0,0,0,0,10,34,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,831,            endCutoff += 7;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,833,        if (endCutoff > Calendar.SATURDAY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,834,            endCutoff -= 7;,2,0,0,0,0,0,0,0,0,3,15,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,836,        while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {,6,1,0,2,5,0,4,0,0,11,56,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,837,"            start.add(Calendar.DATE, -1);",4,0,0,1,2,0,4,0,0,9,29,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,839,        while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {,6,1,0,2,5,0,4,0,0,11,52,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,840,"            end.add(Calendar.DATE, 1);",6,0,0,1,2,0,4,0,0,10,26,3,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,842,"        return new DateIterator(start, end);",6,0,0,1,2,1,0,2,0,8,36,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,865,        if (focus == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,866,"            throw new IllegalArgumentException(""The date must not be null"");",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,868,        if (focus instanceof Date) {,2,0,0,1,3,0,0,2,0,4,28,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,869,"            return iterator((Date) focus, rangeStyle);",2,0,0,2,4,1,4,2,0,8,42,7,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,870,        } else if (focus instanceof Calendar) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,871,"            return iterator((Calendar) focus, rangeStyle);",2,0,0,2,4,1,4,2,0,8,46,8,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,873,"            throw new ClassCastException(""Could not iterate based on "" + focus);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,891,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,892,            this.endFinal = endFinal;,4,0,0,0,0,0,10,0,0,15,25,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,893,            spot = startFinal;,4,0,0,0,0,0,0,0,0,5,18,5,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,894,"            spot.add(Calendar.DATE, -1);",6,0,0,1,2,3,8,2,0,20,28,1,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,895,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,903,            return spot.before(endFinal);,0,0,0,1,2,1,6,0,0,6,29,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,912,            if (spot.equals(endFinal)) {,0,0,0,2,5,0,6,0,0,6,28,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,913,                throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,9,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,915,"            spot.add(Calendar.DATE, 1);",4,0,0,1,2,0,4,0,0,8,27,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,916,            return spot.clone();,0,0,0,1,2,1,4,0,0,4,20,6,0.0,0,0
defect4j,lang,org/apache/commons/lang/time/DateUtils,65,926,            throw new UnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
