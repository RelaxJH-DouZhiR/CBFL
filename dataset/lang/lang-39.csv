project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/lang3/StringUtils,39,3612,        if (text == null || text.length() == 0 || searchList == null || ,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3615,            return text;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3619,        if (timeToLive < 0) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3623,        int searchLength = searchList.length;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3624,        int replacementLength = replacementList.length;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3627,        if (searchLength != replacementLength) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3635,        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3638,        int textIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3639,        int replaceIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3640,        int tempIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3644,        for (int i = 0; i < searchLength; i++) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3645,            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || ,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3650,            tempIndex = text.indexOf(searchList[i]);,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3653,            if (tempIndex == -1) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3654,                noMoreMatchesForReplIndex[i] = true;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3656,                if (textIndex == -1 || tempIndex < textIndex) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3657,                    textIndex = tempIndex;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3658,                    replaceIndex = i;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3665,        if (textIndex == -1) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3666,            return text;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3669,        int start = 0;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3672,        int increase = 0;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3675,        for (int i = 0; i < searchList.length; i++) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3676,            int greater = replacementList[i].length() - searchList[i].length();,1.0,1,,1
org/apache/commons/lang3/StringUtils,39,3677,            if (greater > 0) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3682,"        increase = Math.min(increase, text.length() / 5);",1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3684,        StringBuilder buf = new StringBuilder(text.length() + increase);,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3686,        while (textIndex != -1) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3688,            for (int i = start; i < textIndex; i++) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3689,                buf.append(text.charAt(i));,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3691,            buf.append(replacementList[replaceIndex]);,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3693,            start = textIndex + searchList[replaceIndex].length();,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3695,            textIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3696,            replaceIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3697,            tempIndex = -1;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3700,            for (int i = 0; i < searchLength; i++) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3701,                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || ,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3706,"                tempIndex = text.indexOf(searchList[i], start);",1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3709,                if (tempIndex == -1) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3710,                    noMoreMatchesForReplIndex[i] = true;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3712,                    if (textIndex == -1 || tempIndex < textIndex) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3713,                        textIndex = tempIndex;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3714,                        replaceIndex = i;,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3721,        int textLength = text.length();,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3722,        for (int i = start; i < textLength; i++) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3723,            buf.append(text.charAt(i));,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3725,        String result = buf.toString();,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,3726,        if (!repeat) {,1.0,0,,0
org/apache/commons/lang3/StringUtils,39,167,        super();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,168,    },0.0,0,,0
org/apache/commons/lang3/StringUtils,39,191,        return str == null || str.length() == 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,209,        return !StringUtils.isEmpty(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,229,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,230,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,232,        for (int i = 0; i < strLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,233,            if ((Character.isWhitespace(str.charAt(i)) == false)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,234,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,237,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,257,        return !StringUtils.isBlank(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,286,        return str == null ? null : str.trim();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,312,        String ts = trim(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,313,        return isEmpty(ts) ? null : ts;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,338,        return str == null ? EMPTY : str.trim();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,366,"        return strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,393,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,394,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,396,"        str = strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,397,        return str.length() == 0 ? null : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,423,"        return str == null ? EMPTY : strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,453,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,454,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,456,"        str = stripStart(str, stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,457,"        return stripEnd(str, stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,486,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,487,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,489,        int start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,490,        if (stripChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,491,            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,492,                start++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,494,        } else if (stripChars.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,495,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,497,            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,498,                start++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,501,        return str.substring(start);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,530,        if (str == null || (end = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,531,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,534,        if (stripChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,535,            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,536,                end--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,538,        } else if (stripChars.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,539,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,541,            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,542,                end--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,545,"        return str.substring(0, end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,570,"        return stripAll(strs, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,600,        if (strs == null || (strsLen = strs.length) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,601,            return strs;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,603,        String[] newArr = new String[strsLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,604,        for (int i = 0; i < strsLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,605,"            newArr[i] = strip(strs[i], stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,607,        return newArr;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,627,        if(input == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,628,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,630,        if(SystemUtils.isJavaVersionAtLeast(1.6f)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,637,"                Class normalizerFormClass = ClassUtils.getClass(""java.text.Normalizer$Form"", false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,640,"                Class normalizerClass = ClassUtils.getClass(""java.text.Normalizer"", false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,643,"                java.lang.reflect.Method method = normalizerClass.getMethod(""normalize"", CharSequence.class, normalizerFormClass );",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,646,"                java.lang.reflect.Field nfd = normalizerFormClass.getField(""NFD"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,649,"                String decomposed = (String) method.invoke( null, input, nfd.get(null) );",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,652,"                java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,653,"                return accentPattern.matcher(decomposed).replaceAll("""");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,654,            } catch(ClassNotFoundException cnfe) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,655,"                throw new RuntimeException(""ClassNotFoundException occurred during 1.6 backcompat code"", cnfe);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,656,            } catch(NoSuchMethodException nsme) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,657,"                throw new RuntimeException(""NoSuchMethodException occurred during 1.6 backcompat code"", nsme);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,658,            } catch(NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,659,"                throw new RuntimeException(""NoSuchFieldException occurred during 1.6 backcompat code"", nsfe);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,660,            } catch(IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,661,"                throw new RuntimeException(""IllegalAccessException occurred during 1.6 backcompat code"", iae);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,662,            } catch(IllegalArgumentException iae) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,663,"                throw new RuntimeException(""IllegalArgumentException occurred during 1.6 backcompat code"", iae);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,664,            } catch(java.lang.reflect.InvocationTargetException ite) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,665,"                throw new RuntimeException(""InvocationTargetException occurred during 1.6 backcompat code"", ite);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,666,            } catch(SecurityException se) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,667,"                throw new RuntimeException(""SecurityException occurred during 1.6 backcompat code"", se);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,670,"            throw new UnsupportedOperationException(""The stripAccents(String) method is not supported until Java 1.6"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,697,        return str1 == null ? str2 == null : str1.equals(str2);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,722,        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,747,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,748,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,750,        return str.indexOf(searchChar);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,779,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,780,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,782,"        return str.indexOf(searchChar, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,808,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,809,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,811,        return str.indexOf(searchStr);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,842,        if (str == null || searchStr == null || ordinal <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,843,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,845,        if (searchStr.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,846,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,848,        int found = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,849,        int index = INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,851,"            index = str.indexOf(searchStr, index + 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,852,            if (index < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,853,                return index;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,855,            found++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,856,        } while (found < ordinal);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,857,        return index;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,892,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,893,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,896,        if (searchStr.length() == 0 && startPos >= str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,897,            return str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,899,"        return str.indexOf(searchStr, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,924,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,925,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,927,        return str.lastIndexOf(searchChar);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,958,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,959,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,961,"        return str.lastIndexOf(searchChar, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,987,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,988,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,990,        return str.lastIndexOf(searchStr);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1022,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1023,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1025,"        return str.lastIndexOf(searchStr, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1050,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1051,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1053,        return str.indexOf(searchChar) >= 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1078,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1079,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1081,        return str.indexOf(searchStr) >= 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1108,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1109,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1111,        int len = searchStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1112,        int max = str.length() - len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1113,        for (int i = 0; i <= max; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1114,"            if (str.regionMatches(true, i, searchStr, 0, len)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1115,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1118,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1146,        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1147,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1149,        for (int i = 0; i < str.length(); i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1150,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1151,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1152,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1153,                    return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1157,        return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1183,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1184,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1186,"        return indexOfAny(str, searchChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1215,        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1216,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1218,        for (int i = 0; i < str.length(); i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1219,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1220,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1221,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1222,                    return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1226,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1257,        if (searchChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1258,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1260,"        return containsAny(str, searchChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1288,        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1289,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1291,        outer : for (int i = 0; i < str.length(); i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1292,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1293,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1294,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1295,                    continue outer;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1298,            return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1300,        return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1326,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1327,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1329,        for (int i = 0; i < str.length(); i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1330,            if (searchChars.indexOf(str.charAt(i)) < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1331,                return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1334,        return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1362,        if ((valid == null) || (str == null)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1363,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1365,        if (str.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1366,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1368,        if (valid.length == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1369,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1371,"        return indexOfAnyBut(str, valid) == -1;",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1397,        if (str == null || validChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1398,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1400,"        return containsOnly(str, validChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1428,        if (str == null || invalidChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1429,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1431,        int strSize = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1432,        int validSize = invalidChars.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1433,        for (int i = 0; i < strSize; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1434,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1435,            for (int j = 0; j < validSize; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1436,                if (invalidChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1437,                    return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1441,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1467,        if (str == null || invalidChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1468,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1470,"        return containsNone(str, invalidChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1502,        if ((str == null) || (searchStrs == null)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1503,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1505,        int sz = searchStrs.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1508,        int ret = Integer.MAX_VALUE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1510,        int tmp = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1511,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1512,            String search = searchStrs[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1513,            if (search == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1514,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1516,            tmp = str.indexOf(search);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1517,            if (tmp == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1518,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1521,            if (tmp < ret) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1522,                ret = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1526,        return (ret == Integer.MAX_VALUE) ? -1 : ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1555,        if ((str == null) || (searchStrs == null)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1556,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1558,        int sz = searchStrs.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1559,        int ret = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1560,        int tmp = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1561,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1562,            String search = searchStrs[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1563,            if (search == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1564,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1566,            tmp = str.lastIndexOf(search);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1567,            if (tmp > ret) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1568,                ret = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1571,        return ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1601,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1602,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1606,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1607,            start = str.length() + start; // remember start is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1610,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1611,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1613,        if (start > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1614,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1617,        return str.substring(start);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1656,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1657,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1661,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1662,            end = str.length() + end; // remember end is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1664,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1665,            start = str.length() + start; // remember start is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1669,        if (end > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1670,            end = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1674,        if (start > end) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1675,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1678,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1679,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1681,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1682,            end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1685,"        return str.substring(start, end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1711,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1712,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1714,        if (len < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1715,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1717,        if (str.length() <= len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1718,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1720,"        return str.substring(0, len);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1744,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1745,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1747,        if (len < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1748,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1750,        if (str.length() <= len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1751,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1753,        return str.substring(str.length() - len);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1781,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1782,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1784,        if (len < 0 || pos > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1785,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1787,        if (pos < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1788,            pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1790,        if (str.length() <= (pos + len)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1791,            return str.substring(pos);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1793,"        return str.substring(pos, pos + len);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1826,        if (isEmpty(str) || separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1827,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1829,        if (separator.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1830,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1832,        int pos = str.indexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1833,        if (pos == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1834,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1836,"        return str.substring(0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1868,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1869,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1871,        if (separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1872,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1874,        int pos = str.indexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1875,        if (pos == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1876,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1878,        return str.substring(pos + separator.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1909,        if (isEmpty(str) || isEmpty(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1910,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1912,        int pos = str.lastIndexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1913,        if (pos == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1914,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1916,"        return str.substring(0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1949,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1950,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1952,        if (isEmpty(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1953,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1955,        int pos = str.lastIndexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1956,        if (pos == -1 || pos == (str.length() - separator.length())) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1957,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1959,        return str.substring(pos + separator.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,1986,"        return substringBetween(str, tag, tag);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2017,        if (str == null || open == null || close == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2018,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2020,        int start = str.indexOf(open);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2021,        if (start != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2022,"            int end = str.indexOf(close, start + open.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2023,            if (end != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2024,"                return str.substring(start + open.length(), end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2027,        return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2053,        if (str == null || isEmpty(open) || isEmpty(close)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2054,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2056,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2057,        if (strLen == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2058,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2060,        int closeLen = close.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2061,        int openLen = open.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2062,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2063,        int pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2064,        while (pos < (strLen - closeLen)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2065,"            int start = str.indexOf(open, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2066,            if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2067,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2069,            start += openLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2070,"            int end = str.indexOf(close, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2071,            if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2072,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2074,"            list.add(str.substring(start, end));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2075,            pos = end + closeLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2076,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2077,        if (list.isEmpty()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2078,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2080,        return list.toArray(new String [list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2111,"        return split(str, null, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2139,"        return splitWorker(str, separatorChar, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2168,"        return splitWorker(str, separatorChars, -1, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2202,"        return splitWorker(str, separatorChars, max, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2229,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2260,"        return splitByWholeSeparatorWorker(str, separator, max, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2289,"        return splitByWholeSeparatorWorker(str, separator, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2322,"        return splitByWholeSeparatorWorker(str, separator, max, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2342,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2343,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2346,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2348,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2349,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2352,        if ((separator == null) || (EMPTY.equals(separator))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2354,"            return splitWorker(str, null, max, preserveAllTokens);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2357,        int separatorLength = separator.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2359,        ArrayList<String> substrings = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2360,        int numberOfSubstrings = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2361,        int beg = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2362,        int end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2363,        while (end < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2364,"            end = str.indexOf(separator, beg);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2366,            if (end > -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2367,                if (end > beg) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2368,                    numberOfSubstrings += 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2370,                    if (numberOfSubstrings == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2371,                        end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2372,                        substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2376,"                        substrings.add(str.substring(beg, end));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2381,                        beg = end + separatorLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2385,                    if (preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2386,                        numberOfSubstrings += 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2387,                        if (numberOfSubstrings == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2388,                            end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2389,                            substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2391,                            substrings.add(EMPTY);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2394,                    beg = end + separatorLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2398,                substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2399,                end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2403,        return substrings.toArray(new String[substrings.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2432,"        return splitWorker(str, null, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2468,"        return splitWorker(str, separatorChar, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2486,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2487,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2489,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2490,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2491,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2493,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2494,"        int i = 0, start = 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2495,        boolean match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2496,        boolean lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2497,        while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2498,            if (str.charAt(i) == separatorChar) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2499,                if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2500,"                    list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2501,                    match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2502,                    lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2504,                start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2505,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2507,            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2508,            match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2509,            i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2511,        if (match || (preserveAllTokens && lastMatch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2512,"            list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2514,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2551,"        return splitWorker(str, separatorChars, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2591,"        return splitWorker(str, separatorChars, max, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2613,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2614,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2616,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2617,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2618,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2620,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2621,        int sizePlus1 = 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2622,"        int i = 0, start = 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2623,        boolean match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2624,        boolean lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2625,        if (separatorChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2627,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2628,                if (Character.isWhitespace(str.charAt(i))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2629,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2630,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2631,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2632,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2633,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2635,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2636,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2638,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2639,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2641,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2642,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2643,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2645,        } else if (separatorChars.length() == 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2647,            char sep = separatorChars.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2648,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2649,                if (str.charAt(i) == sep) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2650,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2651,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2652,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2653,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2654,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2656,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2657,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2659,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2660,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2662,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2663,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2664,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2666,        } else {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2668,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2669,                if (separatorChars.indexOf(str.charAt(i)) >= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2670,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2671,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2672,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2673,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2674,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2676,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2677,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2679,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2680,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2682,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2683,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2684,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2687,        if (match || (preserveAllTokens && lastMatch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2688,"            list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2690,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2713,"        return splitByCharacterType(str, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2741,"        return splitByCharacterType(str, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2759,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2760,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2762,        if (str.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2763,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2765,        char[] c = str.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2766,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2767,        int tokenStart = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2768,        int currentType = Character.getType(c[tokenStart]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2769,        for (int pos = tokenStart + 1; pos < c.length; pos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2770,            int type = Character.getType(c[pos]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2771,            if (type == currentType) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2772,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2774,            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2775,                int newTokenStart = pos - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2776,                if (newTokenStart != tokenStart) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2777,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2778,                    tokenStart = newTokenStart;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2780,            } else {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2781,"                list.add(new String(c, tokenStart, pos - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2782,                tokenStart = pos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2784,            currentType = type;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2786,"        list.add(new String(c, tokenStart, c.length - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2787,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2813,"        return join(array, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2839,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2840,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2843,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2873,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2874,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2876,        int bufSize = (endIndex - startIndex);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2877,        if (bufSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2878,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2881,        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2882,        StringBuilder buf = new StringBuilder(bufSize);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2884,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2885,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2886,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2888,            if (array[i] != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2889,                buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2892,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2920,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2921,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2923,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2954,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2955,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2957,        if (separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2958,            separator = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2963,        int bufSize = (endIndex - startIndex);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2964,        if (bufSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2965,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2968,        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()),0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2971,        StringBuilder buf = new StringBuilder(bufSize);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2973,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2974,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2975,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2977,            if (array[i] != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2978,                buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,2981,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3001,        if (iterator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3002,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3004,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3005,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3007,        Object first = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3008,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3009,            return ObjectUtils.toString(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3013,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3014,        if (first != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3015,            buf.append(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3018,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3019,            buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3020,            Object obj = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3021,            if (obj != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3022,                buf.append(obj);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3024,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3026,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3045,        if (iterator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3046,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3048,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3049,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3051,        Object first = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3052,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3053,            return ObjectUtils.toString(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3057,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3058,        if (first != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3059,            buf.append(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3062,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3063,            if (separator != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3064,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3066,            Object obj = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3067,            if (obj != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3068,                buf.append(obj);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3070,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3071,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3089,        if (iterable == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3090,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3092,"        return join(iterable.iterator(), separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3110,        if (iterable == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3111,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3113,"        return join(iterable.iterator(), separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3133,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3134,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3136,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3137,        char[] chs = new char[sz];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3138,        int count = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3139,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3140,            if (!Character.isWhitespace(str.charAt(i))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3141,                chs[count++] = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3144,        if (count == sz) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3145,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3147,"        return new String(chs, 0, count);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3177,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3178,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3180,        if (str.startsWith(remove)){,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3181,            return str.substring(remove.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3183,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3212,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3213,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3215,"        if (startsWithIgnoreCase(str, remove)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3216,            return str.substring(remove.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3218,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3246,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3247,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3249,        if (str.endsWith(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3250,"            return str.substring(0, str.length() - remove.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3252,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3280,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3281,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3283,"        if (endsWithIgnoreCase(str, remove)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3284,"            return str.substring(0, str.length() - remove.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3286,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3313,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3314,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3316,"        return replace(str, remove, EMPTY, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3339,        if (isEmpty(str) || str.indexOf(remove) == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3340,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3342,        char[] chars = str.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3343,        int pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3344,        for (int i = 0; i < chars.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3345,            if (chars[i] != remove) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3346,                chars[pos++] = chars[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3349,"        return new String(chars, 0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3378,"        return replace(text, searchString, replacement, 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3405,"        return replace(text, searchString, replacement, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3437,        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3438,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3440,        int start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3441,"        int end = text.indexOf(searchString, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3442,        if (end == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3443,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3445,        int replLength = searchString.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3446,        int increase = replacement.length() - replLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3447,        increase = (increase < 0 ? 0 : increase);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3448,        increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3449,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3450,        while (end != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3451,"            buf.append(text.substring(start, end)).append(replacement);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3452,            start = end + replLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3453,            if (--max == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3454,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3456,"            end = text.indexOf(searchString, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3458,        buf.append(text.substring(start));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3459,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3502,"        return replaceEach(text, searchList, replacementList, false, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3553,        int timeToLive = searchList == null ? 0 : searchList.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3554,"        return replaceEach(text, searchList, replacementList, true, timeToLive);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3620,"            throw new IllegalStateException(""TimeToLive of "" + timeToLive + "" is less than 0: "" + text);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3628,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: """,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3648,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3678,                increase += 3 * greater; // assume 3 matches,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3704,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3727,            return result;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3730,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3756,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3757,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3759,"        return str.replace(searchChar, replaceChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3799,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3800,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3802,        if (replaceChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3803,            replaceChars = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3805,        boolean modified = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3806,        int replaceCharsLength = replaceChars.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3807,        int strLength = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3808,        StringBuilder buf = new StringBuilder(strLength);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3809,        for (int i = 0; i < strLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3810,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3811,            int index = searchChars.indexOf(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3812,            if (index >= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3813,                modified = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3814,                if (index < replaceCharsLength) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3815,                    buf.append(replaceChars.charAt(index));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3818,                buf.append(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3821,        if (modified) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3822,            return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3824,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3859,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3860,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3862,        if (overlay == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3863,            overlay = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3865,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3866,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3867,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3869,        if (start > len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3870,            start = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3872,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3873,            end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3875,        if (end > len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3876,            end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3878,        if (start > end) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3879,            int temp = start;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3880,            start = end;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3881,            end = temp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3883,        return new StringBuilder(len + start - end + overlay.length() + 1),0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3918,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3919,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3922,        if (str.length() == 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3923,            char ch = str.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3924,            if (ch == CharUtils.CR || ch == CharUtils.LF) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3925,                return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3927,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3930,        int lastIdx = str.length() - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3931,        char last = str.charAt(lastIdx);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3933,        if (last == CharUtils.LF) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3934,            if (str.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3935,                lastIdx--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3937,        } else if (last != CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3938,            lastIdx++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3940,"        return str.substring(0, lastIdx);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3970,        if (isEmpty(str) || separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3971,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3973,        if (str.endsWith(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3974,"            return str.substring(0, str.length() - separator.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,3976,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4005,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4006,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4008,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4009,        if (strLen < 2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4010,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4012,        int lastIdx = strLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4013,"        String ret = str.substring(0, lastIdx);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4014,        char last = str.charAt(lastIdx);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4015,        if (last == CharUtils.LF) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4016,            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4017,"                return ret.substring(0, lastIdx - 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4020,        return ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4049,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4050,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4052,        if (repeat <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4053,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4055,        int inputLength = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4056,        if (repeat == 1 || inputLength == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4057,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4059,        if (inputLength == 1 && repeat <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4060,"            return padding(repeat, str.charAt(0));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4063,        int outputLength = inputLength * repeat;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4064,        switch (inputLength) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4066,                char ch = str.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4067,                char[] output1 = new char[outputLength];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4068,                for (int i = repeat - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4069,                    output1[i] = ch;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4071,                return new String(output1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4073,                char ch0 = str.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4074,                char ch1 = str.charAt(1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4075,                char[] output2 = new char[outputLength];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4076,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4077,                    output2[i] = ch0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4078,                    output2[i + 1] = ch1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4080,                return new String(output2);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4082,                StringBuilder buf = new StringBuilder(outputLength);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4083,                for (int i = 0; i < repeat; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4084,                    buf.append(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4086,                return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4110,        if(str == null || separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4111,"            return repeat(str, repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4114,"            String result = repeat(str + separator, repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4115,"            return removeEnd(result, separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4143,        if (repeat < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4144,"            throw new IndexOutOfBoundsException(""Cannot pad a negative amount: "" + repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4146,        final char[] buf = new char[repeat];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4147,        for (int i = 0; i < buf.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4148,            buf[i] = padChar;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4150,        return new String(buf);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4173,"        return rightPad(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4198,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4199,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4201,        int pads = size - str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4202,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4203,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4205,        if (pads > PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4206,"            return rightPad(str, size, String.valueOf(padChar));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4208,"        return str.concat(padding(pads, padChar));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4235,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4236,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4238,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4239,"            padStr = "" "";",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4241,        int padLen = padStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4242,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4243,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4244,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4245,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4247,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4248,"            return rightPad(str, size, padStr.charAt(0));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4251,        if (pads == padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4252,            return str.concat(padStr);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4253,        } else if (pads < padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4254,"            return str.concat(padStr.substring(0, pads));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4256,            char[] padding = new char[pads];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4257,            char[] padChars = padStr.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4258,            for (int i = 0; i < pads; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4259,                padding[i] = padChars[i % padLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4261,            return str.concat(new String(padding));,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4285,"        return leftPad(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4310,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4311,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4313,        int pads = size - str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4314,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4315,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4317,        if (pads > PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4318,"            return leftPad(str, size, String.valueOf(padChar));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4320,"        return padding(pads, padChar).concat(str);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4347,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4348,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4350,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4351,"            padStr = "" "";",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4353,        int padLen = padStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4354,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4355,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4356,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4357,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4359,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4360,"            return leftPad(str, size, padStr.charAt(0));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4363,        if (pads == padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4364,            return padStr.concat(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4365,        } else if (pads < padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4366,"            return padStr.substring(0, pads).concat(str);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4368,            char[] padding = new char[pads];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4369,            char[] padChars = padStr.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4370,            for (int i = 0; i < pads; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4371,                padding[i] = padChars[i % padLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4373,            return new String(padding).concat(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4386,        return str == null ? 0 : str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4415,"        return center(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4443,        if (str == null || size <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4444,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4446,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4447,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4448,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4449,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4451,"        str = leftPad(str, strLen + pads / 2, padChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4452,"        str = rightPad(str, size, padChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4453,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4483,        if (str == null || size <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4484,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4486,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4487,"            padStr = "" "";",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4489,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4490,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4491,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4492,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4494,"        str = leftPad(str, strLen + pads / 2, padStr);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4495,"        str = rightPad(str, size, padStr);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4496,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4521,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4522,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4524,        return str.toUpperCase();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4544,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4545,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4547,        return str.toUpperCase(locale);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4570,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4571,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4573,        return str.toLowerCase();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4593,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4594,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4596,        return str.toLowerCase(locale);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4621,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4622,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4624,        return new StringBuilder(strLen),0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4652,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4653,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4655,        return new StringBuilder(strLen),0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4690,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4691,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4693,        StringBuilder buffer = new StringBuilder(strLen);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4695,        char ch = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4696,        for (int i = 0; i < strLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4697,            ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4698,            if (Character.isUpperCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4699,                ch = Character.toLowerCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4700,            } else if (Character.isTitleCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4701,                ch = Character.toLowerCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4702,            } else if (Character.isLowerCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4703,                ch = Character.toUpperCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4705,            buffer.append(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4707,        return buffer.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4732,        if (isEmpty(str) || isEmpty(sub)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4733,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4735,        int count = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4736,        int idx = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4737,"        while ((idx = str.indexOf(sub, idx)) != -1) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4738,            count++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4739,            idx += sub.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4741,        return count;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4765,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4766,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4768,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4769,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4770,            if (Character.isLetter(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4771,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4774,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4799,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4800,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4802,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4803,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4804,            if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4805,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4808,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4832,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4833,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4835,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4836,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4837,            if (Character.isLetterOrDigit(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4838,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4841,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4866,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4867,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4869,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4870,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4871,            if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4872,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4875,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4904,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4905,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4907,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4908,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4909,            if (CharUtils.isAsciiPrintable(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4910,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4913,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4938,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4939,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4941,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4942,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4943,            if (Character.isDigit(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4944,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4947,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4974,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4975,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4977,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4978,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4979,            if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4980,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,4983,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5006,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5007,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5009,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5010,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5011,            if ((Character.isWhitespace(str.charAt(i)) == false)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5012,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5015,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5036,        if (str == null || isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5037,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5039,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5040,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5041,            if (Character.isLowerCase(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5042,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5045,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5066,        if (str == null || isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5067,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5069,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5070,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5071,            if (Character.isUpperCase(str.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5072,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5075,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5097,        return str == null ? EMPTY : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5118,        return str == null ? defaultStr : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5139,        return StringUtils.isEmpty(str) ? defaultStr : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5159,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5160,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5162,        return new StringBuilder(str).reverse().toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5185,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5186,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5190,"        String[] strs = split(str, separatorChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5191,        ArrayUtils.reverse(strs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5192,"        return join(strs, separatorChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5230,"        return abbreviate(str, 0, maxWidth);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5269,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5270,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5272,        if (maxWidth < 4) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5273,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5275,        if (str.length() <= maxWidth) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5276,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5278,        if (offset > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5279,            offset = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5281,        if ((str.length() - offset) < (maxWidth - 3)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5282,            offset = str.length() - (maxWidth - 3);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5284,        if (offset <= 4) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5285,"            return str.substring(0, maxWidth - 3) + ""..."";",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5287,        if (maxWidth < 7) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5288,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5290,        if ((offset + (maxWidth - 3)) < str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5291,"            return ""..."" + abbreviate(str.substring(offset), maxWidth - 3);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5293,"        return ""..."" + str.substring(str.length() - (maxWidth - 3));",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5324,        if (str1 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5325,            return str2;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5327,        if (str2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5328,            return str1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5330,"        int at = indexOfDifference(str1, str2);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5331,        if (at == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5332,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5334,        return str2.substring(at);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5361,        if (str1 == str2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5362,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5364,        if (str1 == null || str2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5365,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5368,        for (i = 0; i < str1.length() && i < str2.length(); ++i) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5369,            if (str1.charAt(i) != str2.charAt(i)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5370,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5373,        if (i < str2.length() || i < str1.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5374,            return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5376,        return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5411,        if (strs == null || strs.length <= 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5412,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5414,        boolean anyStringNull = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5415,        boolean allStringsNull = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5416,        int arrayLen = strs.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5417,        int shortestStrLen = Integer.MAX_VALUE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5418,        int longestStrLen = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5423,        for (int i = 0; i < arrayLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5424,            if (strs[i] == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5425,                anyStringNull = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5426,                shortestStrLen = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5428,                allStringsNull = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5429,"                shortestStrLen = Math.min(strs[i].length(), shortestStrLen);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5430,"                longestStrLen = Math.max(strs[i].length(), longestStrLen);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5435,        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5436,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5440,        if (shortestStrLen == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5441,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5445,        int firstDiff = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5446,        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5447,            char comparisonChar = strs[0].charAt(stringPos);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5448,            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5449,                if (strs[arrayPos].charAt(stringPos) != comparisonChar) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5450,                    firstDiff = stringPos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5451,                    break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5454,            if (firstDiff != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5455,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5459,        if (firstDiff == -1 && shortestStrLen != longestStrLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5463,            return shortestStrLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5465,        return firstDiff;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5502,        if (strs == null || strs.length == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5503,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5505,        int smallestIndexOfDiff = indexOfDifference(strs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5506,        if (smallestIndexOfDiff == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5508,            if (strs[0] == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5509,                return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5511,            return strs[0];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5512,        } else if (smallestIndexOfDiff == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5514,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5517,"            return strs[0].substring(0, smallestIndexOfDiff);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5558,        if (s == null || t == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5559,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5579,        int n = s.length(); // length of s,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5580,        int m = t.length(); // length of t,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5582,        if (n == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5583,            return m;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5584,        } else if (m == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5585,            return n;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5588,        if (n > m) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5590,            String tmp = s;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5591,            s = t;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5592,            t = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5593,            n = m;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5594,            m = t.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5597,"        int p[] = new int[n+1]; //'previous' cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5598,"        int d[] = new int[n+1]; // cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5609,        for (i = 0; i<=n; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5610,            p[i] = i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5613,        for (j = 1; j<=m; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5614,            t_j = t.charAt(j-1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5615,            d[0] = j;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5617,            for (i=1; i<=n; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5618,                cost = s.charAt(i-1)==t_j ? 0 : 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5620,"                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5624,            _d = p;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5625,            p = d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5626,            d = _d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5631,        return p[n];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5680,"        return startsWith(str, prefix, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5705,"        return startsWith(str, prefix, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5720,        if (str == null || prefix == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5721,            return (str == null && prefix == null);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5723,        if (prefix.length() > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5724,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5726,"        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5748,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5749,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5751,        for (int i = 0; i < searchStrings.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5752,            String searchString = searchStrings[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5753,"            if (StringUtils.startsWith(string, searchString)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5754,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5757,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5786,"        return endsWith(str, suffix, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5812,"        return endsWith(str, suffix, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5827,        if (str == null || suffix == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5828,            return (str == null && suffix == null);,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5830,        if (suffix.length() > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5831,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5833,        int strOffset = str.length() - suffix.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,39,5834,"        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());",0.0,0,,0
