project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/lang3/StringEscapeUtils,6,556,        return ESCAPE_CSV.translate(input);,1.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,156,            if(index != 0) {,0.5,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,160,"            if (StringUtils.containsNone(input.toString(), CSV_SEARCH_CHARS)) {",0.5,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,161,                out.write(input.toString());,0.5,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,167,            return input.length();,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1737,        if (cs == null || searchChars == null) {,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1740,        int csLen = cs.length();,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1741,        int csLast = csLen - 1;,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1742,        int searchLen = searchChars.length;,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1743,        int searchLast = searchLen - 1;,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1744,        for (int i = 0; i < csLen; i++) {,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1745,            char ch = cs.charAt(i);,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1746,            for (int j = 0; j < searchLen; j++) {,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1747,                if (searchChars[j] == ch) {,0.5,0,,0
org/apache/commons/lang3/StringUtils,6,1763,        return true;,0.5,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,268,    static class CsvUnescaper extends CharSequenceTranslator {,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,272,        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,273,        private static final char[] CSV_SEARCH_CHARS = ,0.04167,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,108,        CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];,0.04167,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,109,        newArray[0] = this;,0.04167,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,110,"        System.arraycopy(translators, 0, newArray, 1, translators.length);",0.04167,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,111,        return new AggregateTranslator(newArray);,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,52,    public static final CharSequenceTranslator ESCAPE_JAVA = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,72,    public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,94,    public static final CharSequenceTranslator ESCAPE_XML = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,109,    public static final CharSequenceTranslator ESCAPE_HTML3 = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,124,    public static final CharSequenceTranslator ESCAPE_HTML4 = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,140,    public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,183,    public static final CharSequenceTranslator UNESCAPE_JAVA = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,206,    public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,217,    public static final CharSequenceTranslator UNESCAPE_HTML3 = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,233,    public static final CharSequenceTranslator UNESCAPE_HTML4 = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,250,    public static final CharSequenceTranslator UNESCAPE_XML = ,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,266,    public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();,0.04167,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,40,    public AggregateTranslator(CharSequenceTranslator... translators) {,0.04167,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,41,        this.translators = ArrayUtils.clone(translators);,0.04167,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,42,    },0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,145,    static class CsvEscaper extends CharSequenceTranslator {,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,149,        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);,0.04167,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,150,        private static final char[] CSV_SEARCH_CHARS = ,0.04167,0,,0
org/apache/commons/lang3/ArrayUtils,6,320,        if (array == null) {,0.04167,0,,0
org/apache/commons/lang3/ArrayUtils,6,323,        return array.clone();,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,35,    private static final String[][] ISO8859_1_ESCAPE = {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,139,    private static final String[][] ISO8859_1_UNESCAPE = invert(ISO8859_1_ESCAPE);,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,148,    private static final String[][] HTML40_EXTENDED_ESCAPE = {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,350,    private static final String[][] HTML40_EXTENDED_UNESCAPE = invert(HTML40_EXTENDED_ESCAPE);,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,359,    private static final String[][] BASIC_ESCAPE = {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,371,    private static final String[][] BASIC_UNESCAPE = invert(BASIC_ESCAPE);,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,378,    private static final String[][] APOS_ESCAPE = {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,387,    private static final String[][] APOS_UNESCAPE = invert(APOS_ESCAPE);,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,396,    private static final String[][] JAVA_CTRL_CHARS_ESCAPE = {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,409,    private static final String[][] JAVA_CTRL_CHARS_UNESCAPE = invert(JAVA_CTRL_CHARS_ESCAPE);,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,34,    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,138,    public static String[][] ISO8859_1_UNESCAPE() { return ISO8859_1_UNESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,147,    public static String[][] HTML40_EXTENDED_ESCAPE() { return HTML40_EXTENDED_ESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,349,    public static String[][] HTML40_EXTENDED_UNESCAPE() { return HTML40_EXTENDED_UNESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,358,    public static String[][] BASIC_ESCAPE() { return BASIC_ESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,370,    public static String[][] BASIC_UNESCAPE() { return BASIC_UNESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,377,    public static String[][] APOS_ESCAPE() { return APOS_ESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,386,    public static String[][] APOS_UNESCAPE() { return APOS_UNESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,395,    public static String[][] JAVA_CTRL_CHARS_ESCAPE() { return JAVA_CTRL_CHARS_ESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,408,    public static String[][] JAVA_CTRL_CHARS_UNESCAPE() { return JAVA_CTRL_CHARS_UNESCAPE.clone(); },0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,417,        String[][] newarray = new String[array.length][2];,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,418,        for(int i = 0; i<array.length; i++) {,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,419,            newarray[i][0] = array[i][1];,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,420,            newarray[i][1] = array[i][0];,0.04167,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,422,        return newarray;,0.04167,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,40,    public LookupTranslator(CharSequence[]... lookup) {,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,41,"        lookupMap = new HashMap<CharSequence, CharSequence>();",0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,42,        int _shortest = Integer.MAX_VALUE;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,43,        int _longest = 0;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,44,        if (lookup != null) {,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,45,            for (CharSequence[] seq : lookup) {,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,46,"                this.lookupMap.put(seq[0], seq[1]);",0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,47,                int sz = seq[0].length();,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,48,                if (sz < _shortest) {,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,49,                    _shortest = sz;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,51,                if (sz > _longest) {,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,52,                    _longest = sz;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,56,        shortest = _shortest;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,57,        longest = _longest;,0.04,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,58,    },0.04,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,34,public class OctalUnescaper extends CharSequenceTranslator {,0.04,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,36,    private static int OCTAL_MAX = 377;,0.04,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,85,"        return new UnicodeEscaper(codepointLow, codepointHigh, false);",0.03846,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,30,public class UnicodeUnescaper extends CharSequenceTranslator {,0.03704,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,35,"    public static enum OPTION { semiColonRequired, semiColonOptional, errorIfNoSemiColon }",0.03704,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,56,    public NumericEntityUnescaper(OPTION... options) {,0.03704,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,57,        if(options.length > 0) {,0.03704,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,60,            this.options = EnumSet.copyOf(Arrays.asList(new OPTION[] { OPTION.semiColonRequired }));,0.03704,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,62,    },0.03704,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,51,"    private UnicodeEscaper(int below, int above, boolean between) {",0.03704,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,52,        this.below = below;,0.03704,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,53,        this.above = above;,0.03704,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,54,        this.between = between;,0.03704,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,55,    },0.03704,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,94,            for (int pt = 0; pt < consumed; pt++) {,0.03333,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,95,"                pos += Character.charCount(Character.codePointAt(input, pos));",0.03333,1,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,29,public abstract class CodePointTranslator extends CharSequenceTranslator {,0.03226,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,54,        if (input == null) {,0.02857,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,58,            StringWriter writer = new StringWriter(input.length() * 2);,0.02857,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,59,"            translate(input, writer);",0.02857,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,76,        if (out == null) {,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,79,        if (input == null) {,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,82,        int pos = 0;,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,83,        int len = input.length();,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,84,        while (pos < len) {,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,85,"            int consumed = translate(input, pos, out);",0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,86,            if (consumed == 0) {,0.02703,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,32,public abstract class CharSequenceTranslator {,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,49,    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,53,    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,57,    public static final String[] EMPTY_STRING_ARRAY = new String[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,61,    public static final long[] EMPTY_LONG_ARRAY = new long[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,65,    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,69,    public static final int[] EMPTY_INT_ARRAY = new int[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,73,    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,77,    public static final short[] EMPTY_SHORT_ARRAY = new short[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,81,    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,85,    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,89,    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,93,    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,97,    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,101,    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,105,    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,109,    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,113,    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,117,    public static final char[] EMPTY_CHAR_ARRAY = new char[0];,0.02564,0,,0
org/apache/commons/lang3/ArrayUtils,6,121,    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];,0.02564,0,,0
org/apache/commons/lang3/StringUtils,6,159,"    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(""(?: \\s|[\\s&&[^ ]])\\s*"");",0.01064,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,279,            if(index != 0) {,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,280,"                throw new IllegalStateException(""CsvUnescaper should never reach the [1] index"");",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,283,            if ( input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE ) {,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,284,                out.write(input.toString());,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,285,                return input.length();,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,289,"            String quoteless = input.subSequence(1, input.length() - 1).toString();",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,291,"            if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS) ) {",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,293,"                out.write(StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR));",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,295,                out.write(input.toString());,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,297,            return input.length();,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,55,            return null;,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,60,            return writer.toString();,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,61,        } catch (IOException ioe) {,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,63,            throw new RuntimeException(ioe);,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,77,"            throw new IllegalArgumentException(""The Writer must not be null"");",0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,80,            return;,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,87,"                char[] c = Character.toChars(Character.codePointAt(input, pos));",0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,88,                out.write(c);,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,89,                pos+= c.length;,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,90,                continue;,0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,97,        },0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,98,    },0.0,0,,0
org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,122,        return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,314,      super();,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,315,    },0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,341,        return ESCAPE_JAVA.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,370,        return ESCAPE_ECMASCRIPT.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,383,        return UNESCAPE_JAVA.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,400,        return UNESCAPE_ECMASCRIPT.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,433,        return ESCAPE_HTML4.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,446,        return ESCAPE_HTML3.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,468,        return UNESCAPE_HTML4.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,482,        return UNESCAPE_HTML3.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,506,        return ESCAPE_XML.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,527,        return UNESCAPE_XML.translate(input);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,582,        return UNESCAPE_CSV.translate(input);,0.0,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,51,        for (CharSequenceTranslator translator : translators) {,0.0,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,52,"            int consumed = translator.translate(input, index, out);",0.0,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,53,            if(consumed != 0) {,0.0,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,54,                return consumed;,0.0,0,,0
org/apache/commons/lang3/text/translate/AggregateTranslator,6,57,        return 0;,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,157,"                throw new IllegalStateException(""CsvEscaper should never reach the [1] index"");",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,163,                out.write(CSV_QUOTE);,0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,164,"                out.write(StringUtils.replace(input.toString(), CSV_QUOTE_STR, CSV_QUOTE_STR + CSV_QUOTE_STR));",0.0,0,,0
org/apache/commons/lang3/StringEscapeUtils,6,165,                out.write(CSV_QUOTE);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,170,        super();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,171,    },0.0,0,,0
org/apache/commons/lang3/StringUtils,6,195,        return cs == null || cs.length() == 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,214,        return !StringUtils.isEmpty(cs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,235,        if (cs == null || (strLen = cs.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,236,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,238,        for (int i = 0; i < strLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,239,            if (Character.isWhitespace(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,240,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,243,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,264,        return !StringUtils.isBlank(cs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,293,        return str == null ? null : str.trim();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,319,        String ts = trim(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,320,        return isEmpty(ts) ? null : ts;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,345,        return str == null ? EMPTY : str.trim();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,373,"        return strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,400,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,401,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,403,"        str = strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,404,        return str.length() == 0 ? null : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,430,"        return str == null ? EMPTY : strip(str, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,460,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,461,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,463,"        str = stripStart(str, stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,464,"        return stripEnd(str, stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,493,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,494,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,496,        int start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,497,        if (stripChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,498,            while (start != strLen && Character.isWhitespace(str.charAt(start))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,499,                start++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,501,        } else if (stripChars.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,502,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,504,            while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,505,                start++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,508,        return str.substring(start);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,538,        if (str == null || (end = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,539,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,542,        if (stripChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,543,            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,544,                end--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,546,        } else if (stripChars.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,547,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,549,            while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,550,                end--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,553,"        return str.substring(0, end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,578,"        return stripAll(strs, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,608,        if (strs == null || (strsLen = strs.length) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,609,            return strs;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,611,        String[] newArr = new String[strsLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,612,        for (int i = 0; i < strsLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,613,"            newArr[i] = strip(strs[i], stripChars);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,615,        return newArr;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,637,        if(input == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,638,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,640,"        Pattern pattern = Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");//$NON-NLS-1$",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,641,"        String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,643,"        return pattern.matcher(decomposed).replaceAll("""");//$NON-NLS-1$",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,670,        if (cs1 == cs2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,671,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,673,        if (cs1 == null || cs2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,674,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,676,        if (cs1 instanceof String && cs2 instanceof String) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,677,            return cs1.equals(cs2);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,679,"        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,704,        if (str1 == null || str2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,705,            return str1 == str2;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,706,        } else if (str1 == str2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,707,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,708,        } else if (str1.length() != str2.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,709,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,711,"            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,738,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,739,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,741,"        return CharSequenceUtils.indexOf(seq, searchChar, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,771,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,772,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,774,"        return CharSequenceUtils.indexOf(seq, searchChar, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,802,        if (seq == null || searchSeq == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,803,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,805,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,842,        if (seq == null || searchSeq == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,843,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,845,"        return CharSequenceUtils.indexOf(seq, searchSeq, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,883,"        return ordinalIndexOf(str, searchStr, ordinal, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,901,        if (str == null || searchStr == null || ordinal <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,902,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,904,        if (searchStr.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,905,            return lastIndex ? str.length() : 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,907,        int found = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,908,        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,910,            if (lastIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,911,"                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,913,"                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,915,            if (index < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,916,                return index;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,918,            found++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,919,        } while (found < ordinal);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,920,        return index;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,949,"        return indexOfIgnoreCase(str, searchStr, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,985,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,986,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,988,        if (startPos < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,989,            startPos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,991,        int endLimit = str.length() - searchStr.length() + 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,992,        if (startPos > endLimit) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,993,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,995,        if (searchStr.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,996,            return startPos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,998,        for (int i = startPos; i < endLimit; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,999,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1000,                return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1003,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1029,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1030,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1032,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1064,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1065,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1067,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1094,        if (seq == null || searchSeq == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1095,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1097,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1135,"        return ordinalIndexOf(str, searchStr, ordinal, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1168,        if (seq == null || searchSeq == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1169,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1171,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1198,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1199,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1201,"        return lastIndexOfIgnoreCase(str, searchStr, str.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1234,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1235,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1237,        if (startPos > str.length() - searchStr.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1238,            startPos = str.length() - searchStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1240,        if (startPos < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1241,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1243,        if (searchStr.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1244,            return startPos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1247,        for (int i = startPos; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1248,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1249,                return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1252,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1278,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1279,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1281,"        return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1307,        if (seq == null || searchSeq == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1308,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1310,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1338,        if (str == null || searchStr == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1339,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1341,        int len = searchStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1342,        int max = str.length() - len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1343,        for (int i = 0; i <= max; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1344,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1345,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1348,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1361,        if (isEmpty(seq)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1362,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1364,        int strLen = seq.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1365,        for (int i = 0; i < strLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1366,            if (Character.isWhitespace(seq.charAt(i))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1367,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1370,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1399,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1400,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1402,        int csLen = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1403,        int csLast = csLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1404,        int searchLen = searchChars.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1405,        int searchLast = searchLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1406,        for (int i = 0; i < csLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1407,            char ch = cs.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1408,            for (int j = 0; j < searchLen; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1409,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1410,                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1412,                        if (searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1413,                            return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1416,                        return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1421,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1448,        if (isEmpty(cs) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1449,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1451,"        return indexOfAny(cs, searchChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1481,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1482,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1484,        int csLength = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1485,        int searchLength = searchChars.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1486,        int csLast = csLength - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1487,        int searchLast = searchLength - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1488,        for (int i = 0; i < csLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1489,            char ch = cs.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1490,            for (int j = 0; j < searchLength; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1491,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1492,                    if (Character.isHighSurrogate(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1493,                        if (j == searchLast) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1495,                            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1497,                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1498,                            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1502,                        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1507,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1539,        if (searchChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1540,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1542,"        return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1572,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1573,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1575,        int csLen = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1576,        int csLast = csLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1577,        int searchLen = searchChars.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1578,        int searchLast = searchLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1580,        for (int i = 0; i < csLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1581,            char ch = cs.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1582,            for (int j = 0; j < searchLen; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1583,                if (searchChars[j] == ch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1584,                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1585,                        if (searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1586,                            continue outer;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1593,            return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1595,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1622,        if (isEmpty(seq) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1623,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1625,        int strLen = seq.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1626,        for (int i = 0; i < strLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1627,            char ch = seq.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1628,"            boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1629,            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1630,                char ch2 = seq.charAt(i + 1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1631,"                if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1632,                    return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1634,            } else {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1635,                if (!chFound) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1636,                    return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1640,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1669,        if (valid == null || cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1670,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1672,        if (cs.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1673,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1675,        if (valid.length == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1676,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1678,"        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1705,        if (cs == null || validChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1706,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1708,"        return containsOnly(cs, validChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1738,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1748,                    if (Character.isHighSurrogate(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1749,                        if (j == searchLast) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1751,                            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1753,                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1754,                            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1758,                        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1790,        if (cs == null || invalidChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1791,            return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1793,"        return containsNone(cs, invalidChars.toCharArray());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1826,        if (str == null || searchStrs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1827,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1829,        int sz = searchStrs.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1832,        int ret = Integer.MAX_VALUE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1834,        int tmp = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1835,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1836,            CharSequence search = searchStrs[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1837,            if (search == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1838,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1840,"            tmp = CharSequenceUtils.indexOf(str, search, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1841,            if (tmp == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1842,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1845,            if (tmp < ret) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1846,                ret = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1850,        return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1880,        if (str == null || searchStrs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1881,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1883,        int sz = searchStrs.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1884,        int ret = INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1885,        int tmp = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1886,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1887,            CharSequence search = searchStrs[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1888,            if (search == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1889,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1891,"            tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1892,            if (tmp > ret) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1893,                ret = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1896,        return ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1926,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1927,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1931,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1932,            start = str.length() + start; // remember start is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1935,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1936,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1938,        if (start > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1939,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1942,        return str.substring(start);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1981,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1982,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1986,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1987,            end = str.length() + end; // remember end is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1989,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1990,            start = str.length() + start; // remember start is negative,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1994,        if (end > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1995,            end = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,1999,        if (start > end) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2000,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2003,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2004,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2006,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2007,            end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2010,"        return str.substring(start, end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2036,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2037,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2039,        if (len < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2040,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2042,        if (str.length() <= len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2043,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2045,"        return str.substring(0, len);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2069,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2070,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2072,        if (len < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2073,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2075,        if (str.length() <= len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2076,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2078,        return str.substring(str.length() - len);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2107,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2108,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2110,        if (len < 0 || pos > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2111,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2113,        if (pos < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2114,            pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2116,        if (str.length() <= pos + len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2117,            return str.substring(pos);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2119,"        return str.substring(pos, pos + len);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2152,        if (isEmpty(str) || separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2153,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2155,        if (separator.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2156,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2158,        int pos = str.indexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2159,        if (pos == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2160,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2162,"        return str.substring(0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2194,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2195,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2197,        if (separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2198,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2200,        int pos = str.indexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2201,        if (pos == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2202,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2204,        return str.substring(pos + separator.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2235,        if (isEmpty(str) || isEmpty(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2236,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2238,        int pos = str.lastIndexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2239,        if (pos == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2240,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2242,"        return str.substring(0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2275,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2276,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2278,        if (isEmpty(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2279,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2281,        int pos = str.lastIndexOf(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2282,        if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2283,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2285,        return str.substring(pos + separator.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2312,"        return substringBetween(str, tag, tag);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2343,        if (str == null || open == null || close == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2344,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2346,        int start = str.indexOf(open);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2347,        if (start != INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2348,"            int end = str.indexOf(close, start + open.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2349,            if (end != INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2350,"                return str.substring(start + open.length(), end);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2353,        return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2379,        if (str == null || isEmpty(open) || isEmpty(close)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2380,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2382,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2383,        if (strLen == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2384,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2386,        int closeLen = close.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2387,        int openLen = open.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2388,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2389,        int pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2390,        while (pos < strLen - closeLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2391,"            int start = str.indexOf(open, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2392,            if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2393,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2395,            start += openLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2396,"            int end = str.indexOf(close, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2397,            if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2398,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2400,"            list.add(str.substring(start, end));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2401,            pos = end + closeLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2402,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2403,        if (list.isEmpty()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2404,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2406,        return list.toArray(new String [list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2437,"        return split(str, null, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2465,"        return splitWorker(str, separatorChar, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2494,"        return splitWorker(str, separatorChars, -1, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2528,"        return splitWorker(str, separatorChars, max, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2555,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2586,"        return splitByWholeSeparatorWorker(str, separator, max, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2615,"        return splitByWholeSeparatorWorker(str, separator, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2648,"        return splitByWholeSeparatorWorker(str, separator, max, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2667,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2668,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2671,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2673,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2674,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2677,        if (separator == null || EMPTY.equals(separator)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2679,"            return splitWorker(str, null, max, preserveAllTokens);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2682,        int separatorLength = separator.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2684,        ArrayList<String> substrings = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2685,        int numberOfSubstrings = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2686,        int beg = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2687,        int end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2688,        while (end < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2689,"            end = str.indexOf(separator, beg);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2691,            if (end > -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2692,                if (end > beg) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2693,                    numberOfSubstrings += 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2695,                    if (numberOfSubstrings == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2696,                        end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2697,                        substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2701,"                        substrings.add(str.substring(beg, end));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2706,                        beg = end + separatorLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2710,                    if (preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2711,                        numberOfSubstrings += 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2712,                        if (numberOfSubstrings == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2713,                            end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2714,                            substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2716,                            substrings.add(EMPTY);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2719,                    beg = end + separatorLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2723,                substrings.add(str.substring(beg));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2724,                end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2728,        return substrings.toArray(new String[substrings.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2757,"        return splitWorker(str, null, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2793,"        return splitWorker(str, separatorChar, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2811,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2812,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2814,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2815,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2816,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2818,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2819,"        int i = 0, start = 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2820,        boolean match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2821,        boolean lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2822,        while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2823,            if (str.charAt(i) == separatorChar) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2824,                if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2825,"                    list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2826,                    match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2827,                    lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2829,                start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2830,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2832,            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2833,            match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2834,            i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2836,        if (match || preserveAllTokens && lastMatch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2837,"            list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2839,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2876,"        return splitWorker(str, separatorChars, -1, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2916,"        return splitWorker(str, separatorChars, max, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2938,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2939,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2941,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2942,        if (len == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2943,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2945,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2946,        int sizePlus1 = 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2947,"        int i = 0, start = 0;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2948,        boolean match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2949,        boolean lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2950,        if (separatorChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2952,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2953,                if (Character.isWhitespace(str.charAt(i))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2954,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2955,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2956,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2957,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2958,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2960,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2961,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2963,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2964,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2966,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2967,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2968,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2970,        } else if (separatorChars.length() == 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2972,            char sep = separatorChars.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2973,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2974,                if (str.charAt(i) == sep) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2975,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2976,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2977,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2978,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2979,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2981,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2982,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2984,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2985,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2987,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2988,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2989,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2991,        } else {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2993,            while (i < len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2994,                if (separatorChars.indexOf(str.charAt(i)) >= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2995,                    if (match || preserveAllTokens) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2996,                        lastMatch = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2997,                        if (sizePlus1++ == max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2998,                            i = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,2999,                            lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3001,"                        list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3002,                        match = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3004,                    start = ++i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3005,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3007,                lastMatch = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3008,                match = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3009,                i++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3012,        if (match || preserveAllTokens && lastMatch) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3013,"            list.add(str.substring(start, i));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3015,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3038,"        return splitByCharacterType(str, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3066,"        return splitByCharacterType(str, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3084,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3085,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3087,        if (str.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3088,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3090,        char[] c = str.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3091,        List<String> list = new ArrayList<String>();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3092,        int tokenStart = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3093,        int currentType = Character.getType(c[tokenStart]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3094,        for (int pos = tokenStart + 1; pos < c.length; pos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3095,            int type = Character.getType(c[pos]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3096,            if (type == currentType) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3097,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3099,            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3100,                int newTokenStart = pos - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3101,                if (newTokenStart != tokenStart) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3102,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3103,                    tokenStart = newTokenStart;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3105,            } else {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3106,"                list.add(new String(c, tokenStart, pos - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3107,                tokenStart = pos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3109,            currentType = type;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3111,"        list.add(new String(c, tokenStart, c.length - tokenStart));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3112,        return list.toArray(new String[list.size()]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3140,"        return join(elements, null);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3166,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3167,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3169,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3198,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3199,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3201,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3230,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3231,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3233,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3262,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3263,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3265,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3294,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3295,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3297,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3326,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3327,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3329,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3358,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3359,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3361,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3390,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3391,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3393,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3424,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3425,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3427,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3428,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3429,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3431,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3432,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3433,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3434,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3436,            if (array[i] != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3437,                buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3440,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3475,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3476,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3478,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3479,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3480,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3482,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3483,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3484,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3485,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3487,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3489,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3524,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3525,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3527,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3528,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3529,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3531,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3532,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3533,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3534,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3536,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3538,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3573,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3574,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3576,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3577,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3578,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3580,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3581,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3582,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3583,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3585,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3587,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3622,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3623,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3625,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3626,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3627,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3629,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3630,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3631,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3632,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3634,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3636,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3671,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3672,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3674,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3675,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3676,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3678,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3679,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3680,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3681,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3683,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3685,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3720,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3721,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3723,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3724,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3725,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3727,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3728,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3729,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3730,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3732,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3734,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3769,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3770,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3772,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3773,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3774,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3776,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3777,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3778,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3779,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3781,            buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3783,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3811,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3812,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3814,"        return join(array, separator, 0, array.length);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3853,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3854,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3856,        if (separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3857,            separator = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3862,        int noOfItems = endIndex - startIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3863,        if (noOfItems <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3864,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3867,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3869,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3870,            if (i > startIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3871,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3873,            if (array[i] != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3874,                buf.append(array[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3877,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3897,        if (iterator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3898,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3900,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3901,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3903,        Object first = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3904,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3905,            return ObjectUtils.toString(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3909,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3910,        if (first != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3911,            buf.append(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3914,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3915,            buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3916,            Object obj = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3917,            if (obj != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3918,                buf.append(obj);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3920,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3922,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3941,        if (iterator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3942,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3944,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3945,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3947,        Object first = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3948,        if (!iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3949,            return ObjectUtils.toString(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3953,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3954,        if (first != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3955,            buf.append(first);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3958,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3959,            if (separator != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3960,                buf.append(separator);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3962,            Object obj = iterator.next();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3963,            if (obj != null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3964,                buf.append(obj);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3966,        },0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3967,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3985,        if (iterable == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3986,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,3988,"        return join(iterable.iterator(), separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4006,        if (iterable == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4007,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4009,"        return join(iterable.iterator(), separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4029,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4030,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4032,        int sz = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4033,        char[] chs = new char[sz];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4034,        int count = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4035,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4036,            if (!Character.isWhitespace(str.charAt(i))) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4037,                chs[count++] = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4040,        if (count == sz) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4041,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4043,"        return new String(chs, 0, count);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4073,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4074,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4076,        if (str.startsWith(remove)){,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4077,            return str.substring(remove.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4079,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4108,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4109,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4111,"        if (startsWithIgnoreCase(str, remove)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4112,            return str.substring(remove.length());,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4114,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4142,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4143,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4145,        if (str.endsWith(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4146,"            return str.substring(0, str.length() - remove.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4148,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4178,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4179,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4181,"        if (endsWithIgnoreCase(str, remove)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4182,"            return str.substring(0, str.length() - remove.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4184,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4211,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4212,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4214,"        return replace(str, remove, EMPTY, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4237,        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4238,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4240,        char[] chars = str.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4241,        int pos = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4242,        for (int i = 0; i < chars.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4243,            if (chars[i] != remove) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4244,                chars[pos++] = chars[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4247,"        return new String(chars, 0, pos);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4276,"        return replace(text, searchString, replacement, 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4300,"        return Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4316,"        return replacePattern(source, regex, StringUtils.EMPTY);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4343,"        return replace(text, searchString, replacement, -1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4375,        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4376,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4378,        int start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4379,"        int end = text.indexOf(searchString, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4380,        if (end == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4381,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4383,        int replLength = searchString.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4384,        int increase = replacement.length() - replLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4385,        increase = increase < 0 ? 0 : increase;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4386,        increase *= max < 0 ? 16 : max > 64 ? 64 : max;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4387,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4388,        while (end != INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4389,"            buf.append(text.substring(start, end)).append(replacement);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4390,            start = end + replLength;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4391,            if (--max == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4392,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4394,"            end = text.indexOf(searchString, start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4396,        buf.append(text.substring(start));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4397,        return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4440,"        return replaceEach(text, searchList, replacementList, false, 0);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4490,        int timeToLive = searchList == null ? 0 : searchList.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4491,"        return replaceEach(text, searchList, replacementList, true, timeToLive);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4548,        if (text == null || text.length() == 0 || searchList == null ||,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4550,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4554,        if (timeToLive < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4555,"            throw new IllegalStateException(""Aborting to protect against StackOverflowError - "" +",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4559,        int searchLength = searchList.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4560,        int replacementLength = replacementList.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4563,        if (searchLength != replacementLength) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4564,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: """,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4571,        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4574,        int textIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4575,        int replaceIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4576,        int tempIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4580,        for (int i = 0; i < searchLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4581,            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4583,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4585,            tempIndex = text.indexOf(searchList[i]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4588,            if (tempIndex == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4589,                noMoreMatchesForReplIndex[i] = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4591,                if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4592,                    textIndex = tempIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4593,                    replaceIndex = i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4600,        if (textIndex == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4601,            return text;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4604,        int start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4607,        int increase = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4610,        for (int i = 0; i < searchList.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4611,            if (searchList[i] == null || replacementList[i] == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4612,                continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4614,            int greater = replacementList[i].length() - searchList[i].length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4615,            if (greater > 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4616,                increase += 3 * greater; // assume 3 matches,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4620,"        increase = Math.min(increase, text.length() / 5);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4622,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4624,        while (textIndex != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4626,            for (int i = start; i < textIndex; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4627,                buf.append(text.charAt(i));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4629,            buf.append(replacementList[replaceIndex]);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4631,            start = textIndex + searchList[replaceIndex].length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4633,            textIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4634,            replaceIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4635,            tempIndex = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4638,            for (int i = 0; i < searchLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4639,                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4641,                    continue;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4643,"                tempIndex = text.indexOf(searchList[i], start);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4646,                if (tempIndex == -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4647,                    noMoreMatchesForReplIndex[i] = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4649,                    if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4650,                        textIndex = tempIndex;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4651,                        replaceIndex = i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4658,        int textLength = text.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4659,        for (int i = start; i < textLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4660,            buf.append(text.charAt(i));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4662,        String result = buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4663,        if (!repeat) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4664,            return result;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4667,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4693,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4694,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4696,"        return str.replace(searchChar, replaceChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4736,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4737,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4739,        if (replaceChars == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4740,            replaceChars = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4742,        boolean modified = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4743,        int replaceCharsLength = replaceChars.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4744,        int strLength = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4745,        StringBuilder buf = new StringBuilder(strLength);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4746,        for (int i = 0; i < strLength; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4747,            char ch = str.charAt(i);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4748,            int index = searchChars.indexOf(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4749,            if (index >= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4750,                modified = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4751,                if (index < replaceCharsLength) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4752,                    buf.append(replaceChars.charAt(index));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4755,                buf.append(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4758,        if (modified) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4759,            return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4761,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4796,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4797,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4799,        if (overlay == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4800,            overlay = EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4802,        int len = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4803,        if (start < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4804,            start = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4806,        if (start > len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4807,            start = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4809,        if (end < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4810,            end = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4812,        if (end > len) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4813,            end = len;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4815,        if (start > end) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4816,            int temp = start;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4817,            start = end;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4818,            end = temp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4820,        return new StringBuilder(len + start - end + overlay.length() + 1),0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4855,        if (isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4856,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4859,        if (str.length() == 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4860,            char ch = str.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4861,            if (ch == CharUtils.CR || ch == CharUtils.LF) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4862,                return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4864,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4867,        int lastIdx = str.length() - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4868,        char last = str.charAt(lastIdx);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4870,        if (last == CharUtils.LF) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4871,            if (str.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4872,                lastIdx--;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4874,        } else if (last != CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4875,            lastIdx++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4877,"        return str.substring(0, lastIdx);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4909,"        return removeEnd(str,separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4938,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4939,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4941,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4942,        if (strLen < 2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4943,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4945,        int lastIdx = strLen - 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4946,"        String ret = str.substring(0, lastIdx);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4947,        char last = str.charAt(lastIdx);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4948,        if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4949,"            return ret.substring(0, lastIdx - 1);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4951,        return ret;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4980,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4981,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4983,        if (repeat <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4984,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4986,        int inputLength = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4987,        if (repeat == 1 || inputLength == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4988,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4990,        if (inputLength == 1 && repeat <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4991,"            return repeat(str.charAt(0), repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4994,        int outputLength = inputLength * repeat;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4995,        switch (inputLength) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4997,"                return repeat(str.charAt(0), repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,4999,                char ch0 = str.charAt(0);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5000,                char ch1 = str.charAt(1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5001,                char[] output2 = new char[outputLength];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5002,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5003,                    output2[i] = ch0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5004,                    output2[i + 1] = ch1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5006,                return new String(output2);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5008,                StringBuilder buf = new StringBuilder(outputLength);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5009,                for (int i = 0; i < repeat; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5010,                    buf.append(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5012,                return buf.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5037,        if(str == null || separator == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5038,"            return repeat(str, repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5041,"            String result = repeat(str + separator, repeat);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5042,"            return removeEnd(result, separator);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5069,        char[] buf = new char[repeat];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5070,        for (int i = repeat - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5071,            buf[i] = ch;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5073,        return new String(buf);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5096,"        return rightPad(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5121,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5122,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5124,        int pads = size - str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5125,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5126,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5128,        if (pads > PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5129,"            return rightPad(str, size, String.valueOf(padChar));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5131,"        return str.concat(repeat(padChar, pads));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5158,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5159,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5161,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5162,            padStr = SPACE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5164,        int padLen = padStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5165,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5166,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5167,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5168,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5170,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5171,"            return rightPad(str, size, padStr.charAt(0));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5174,        if (pads == padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5175,            return str.concat(padStr);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5176,        } else if (pads < padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5177,"            return str.concat(padStr.substring(0, pads));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5179,            char[] padding = new char[pads];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5180,            char[] padChars = padStr.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5181,            for (int i = 0; i < pads; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5182,                padding[i] = padChars[i % padLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5184,            return str.concat(new String(padding));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5208,"        return leftPad(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5233,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5234,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5236,        int pads = size - str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5237,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5238,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5240,        if (pads > PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5241,"            return leftPad(str, size, String.valueOf(padChar));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5243,"        return repeat(padChar, pads).concat(str);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5270,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5271,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5273,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5274,            padStr = SPACE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5276,        int padLen = padStr.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5277,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5278,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5279,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5280,            return str; // returns original String when possible,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5282,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5283,"            return leftPad(str, size, padStr.charAt(0));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5286,        if (pads == padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5287,            return padStr.concat(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5288,        } else if (pads < padLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5289,"            return padStr.substring(0, pads).concat(str);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5291,            char[] padding = new char[pads];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5292,            char[] padChars = padStr.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5293,            for (int i = 0; i < pads; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5294,                padding[i] = padChars[i % padLen];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5296,            return new String(padding).concat(str);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5312,        return cs == null ? 0 : cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5341,"        return center(str, size, ' ');",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5369,        if (str == null || size <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5370,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5372,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5373,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5374,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5375,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5377,"        str = leftPad(str, strLen + pads / 2, padChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5378,"        str = rightPad(str, size, padChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5379,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5409,        if (str == null || size <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5410,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5412,        if (isEmpty(padStr)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5413,            padStr = SPACE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5415,        int strLen = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5416,        int pads = size - strLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5417,        if (pads <= 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5418,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5420,"        str = leftPad(str, strLen + pads / 2, padStr);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5421,"        str = rightPad(str, size, padStr);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5422,        return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5447,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5448,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5450,        return str.toUpperCase();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5470,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5471,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5473,        return str.toUpperCase(locale);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5496,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5497,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5499,        return str.toLowerCase();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5519,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5520,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5522,        return str.toLowerCase(locale);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5547,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5548,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5550,        return new StringBuilder(strLen),0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5578,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5579,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5581,        return new StringBuilder(strLen),0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5615,        if (StringUtils.isEmpty(str)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5616,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5619,        char[] buffer = str.toCharArray();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5621,        for (int i = 0; i < buffer.length; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5622,            char ch = buffer[i];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5623,            if (Character.isUpperCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5624,                buffer[i] = Character.toLowerCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5625,            } else if (Character.isTitleCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5626,                buffer[i] = Character.toLowerCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5627,            } else if (Character.isLowerCase(ch)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5628,                buffer[i] = Character.toUpperCase(ch);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5631,        return new String(buffer);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5657,        if (isEmpty(str) || isEmpty(sub)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5658,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5660,        int count = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5661,        int idx = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5662,"        while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5663,            count++;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5664,            idx += sub.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5666,        return count;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5692,        if (cs == null || cs.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5693,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5695,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5696,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5697,            if (Character.isLetter(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5698,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5701,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5727,        if (cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5728,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5730,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5731,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5732,            if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5733,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5736,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5762,        if (cs == null || cs.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5763,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5765,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5766,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5767,            if (Character.isLetterOrDigit(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5768,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5771,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5797,        if (cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5798,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5800,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5801,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5802,            if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5803,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5806,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5836,        if (cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5837,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5839,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5840,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5841,            if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5842,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5845,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5879,        if (cs == null || cs.length() == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5880,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5882,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5883,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5884,            if (Character.isDigit(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5885,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5888,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5916,        if (cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5917,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5919,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5920,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5921,            if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5922,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5925,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5949,        if (cs == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5950,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5952,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5953,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5954,            if (Character.isWhitespace(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5955,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5958,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5981,        if (cs == null || isEmpty(cs)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5982,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5984,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5985,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5986,            if (Character.isLowerCase(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5987,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,5990,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6013,        if (cs == null || isEmpty(cs)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6014,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6016,        int sz = cs.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6017,        for (int i = 0; i < sz; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6018,            if (Character.isUpperCase(cs.charAt(i)) == false) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6019,                return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6022,        return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6044,        return str == null ? EMPTY : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6065,        return str == null ? defaultStr : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6087,        return StringUtils.isBlank(str) ? defaultStr : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6109,        return StringUtils.isEmpty(str) ? defaultStr : str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6129,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6130,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6132,        return new StringBuilder(str).reverse().toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6155,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6156,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6160,"        String[] strs = split(str, separatorChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6161,        ArrayUtils.reverse(strs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6162,"        return join(strs, separatorChar);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6200,"        return abbreviate(str, 0, maxWidth);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6239,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6240,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6242,        if (maxWidth < 4) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6243,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6245,        if (str.length() <= maxWidth) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6246,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6248,        if (offset > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6249,            offset = str.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6251,        if (str.length() - offset < maxWidth - 3) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6252,            offset = str.length() - (maxWidth - 3);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6254,"        final String abrevMarker = ""..."";",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6255,        if (offset <= 4) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6256,"            return str.substring(0, maxWidth - 3) + abrevMarker;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6258,        if (maxWidth < 7) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6259,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6261,        if (offset + maxWidth - 3 < str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6262,"            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6264,        return abrevMarker + str.substring(str.length() - (maxWidth - 3));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6297,        if (isEmpty(str) || isEmpty(middle)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6298,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6301,        if (length >= str.length() || length < middle.length()+2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6302,            return str;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6305,        int targetSting = length-middle.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6306,        int startOffset = targetSting/2+targetSting%2;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6307,        int endOffset = str.length()-targetSting/2;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6309,        StringBuilder builder = new StringBuilder(length);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6310,"        builder.append(str.substring(0,startOffset));",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6311,        builder.append(middle);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6312,        builder.append(str.substring(endOffset));,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6314,        return builder.toString();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6345,        if (str1 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6346,            return str2;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6348,        if (str2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6349,            return str1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6351,"        int at = indexOfDifference(str1, str2);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6352,        if (at == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6353,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6355,        return str2.substring(at);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6384,        if (cs1 == cs2) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6385,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6387,        if (cs1 == null || cs2 == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6388,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6391,        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6392,            if (cs1.charAt(i) != cs2.charAt(i)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6393,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6396,        if (i < cs2.length() || i < cs1.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6397,            return i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6399,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6435,        if (css == null || css.length <= 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6436,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6438,        boolean anyStringNull = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6439,        boolean allStringsNull = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6440,        int arrayLen = css.length;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6441,        int shortestStrLen = Integer.MAX_VALUE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6442,        int longestStrLen = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6447,        for (int i = 0; i < arrayLen; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6448,            if (css[i] == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6449,                anyStringNull = true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6450,                shortestStrLen = 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6452,                allStringsNull = false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6453,"                shortestStrLen = Math.min(css[i].length(), shortestStrLen);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6454,"                longestStrLen = Math.max(css[i].length(), longestStrLen);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6459,        if (allStringsNull || longestStrLen == 0 && !anyStringNull) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6460,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6464,        if (shortestStrLen == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6465,            return 0;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6469,        int firstDiff = -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6470,        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6471,            char comparisonChar = css[0].charAt(stringPos);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6472,            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6473,                if (css[arrayPos].charAt(stringPos) != comparisonChar) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6474,                    firstDiff = stringPos;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6475,                    break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6478,            if (firstDiff != -1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6479,                break;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6483,        if (firstDiff == -1 && shortestStrLen != longestStrLen) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6487,            return shortestStrLen;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6489,        return firstDiff;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6526,        if (strs == null || strs.length == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6527,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6529,        int smallestIndexOfDiff = indexOfDifference(strs);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6530,        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6532,            if (strs[0] == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6533,                return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6535,            return strs[0];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6536,        } else if (smallestIndexOfDiff == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6538,            return EMPTY;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6541,"            return strs[0].substring(0, smallestIndexOfDiff);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6584,        if (s == null || t == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6585,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6605,        int n = s.length(); // length of s,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6606,        int m = t.length(); // length of t,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6608,        if (n == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6609,            return m;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6610,        } else if (m == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6611,            return n;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6614,        if (n > m) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6616,            CharSequence tmp = s;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6617,            s = t;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6618,            t = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6619,            n = m;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6620,            m = t.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6623,"        int p[] = new int[n + 1]; //'previous' cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6624,"        int d[] = new int[n + 1]; // cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6635,        for (i = 0; i <= n; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6636,            p[i] = i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6639,        for (j = 1; j <= m; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6640,            t_j = t.charAt(j - 1);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6641,            d[0] = j;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6643,            for (i = 1; i <= n; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6644,                cost = s.charAt(i - 1) == t_j ? 0 : 1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6646,"                d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6650,            _d = p;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6651,            p = d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6652,            d = _d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6657,        return p[n];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6693,        if (s == null || t == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6694,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6696,        if (threshold < 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6697,"            throw new IllegalArgumentException(""Threshold must not be negative"");",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6744,        int n = s.length(); // length of s,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6745,        int m = t.length(); // length of t,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6748,        if (n == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6749,            return m <= threshold ? m : -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6750,        } else if (m == 0) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6751,            return n <= threshold ? n : -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6754,        if (n > m) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6756,            CharSequence tmp = s;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6757,            s = t;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6758,            t = tmp;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6759,            n = m;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6760,            m = t.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6763,"        int p[] = new int[n + 1]; // 'previous' cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6764,"        int d[] = new int[n + 1]; // cost array, horizontally",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6768,"        int boundary = Math.min(n, threshold) + 1;",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6769,        for (int i = 0; i < boundary; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6770,            p[i] = i;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6774,"        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6775,"        Arrays.fill(d, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6778,        for (int j = 1; j <= m; j++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6779,            char t_j = t.charAt(j - 1); // jth character of t,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6780,            d[0] = j;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6783,"            int min = Math.max(1, j - threshold);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6784,"            int max = Math.min(n, j + threshold);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6787,            if (min > max) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6788,                return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6792,            if (min > 1) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6793,                d[min - 1] = Integer.MAX_VALUE;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6797,            for (int i = min; i <= max; i++) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6798,                if (s.charAt(i - 1) == t_j) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6800,                    d[i] = p[i - 1];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6803,"                    d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6808,            _d = p;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6809,            p = d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6810,            d = _d;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6815,        if (p[n] <= threshold) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6816,            return p[n];,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6818,            return -1;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6848,"        return startsWith(str, prefix, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6874,"        return startsWith(str, prefix, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6889,        if (str == null || prefix == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6890,            return str == null && prefix == null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6892,        if (prefix.length() > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6893,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6895,"        return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6918,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6919,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6921,        for (CharSequence searchString : searchStrings) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6922,"            if (StringUtils.startsWith(string, searchString)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6923,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6926,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6956,"        return endsWith(str, suffix, false);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6983,"        return endsWith(str, suffix, true);",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6998,        if (str == null || suffix == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,6999,            return str == null && suffix == null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7001,        if (suffix.length() > str.length()) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7002,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7004,        int strOffset = str.length() - suffix.length();,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7005,"        return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7050,        if (str == null) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7051,            return null;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7053,        return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7075,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7076,            return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7078,        for (CharSequence searchString : searchStrings) {,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7079,"            if (StringUtils.endsWith(string, searchString)) {",0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7080,                return true;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7083,        return false;,0.0,0,,0
org/apache/commons/lang3/StringUtils,6,7101,"        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,138,      super();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,139,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,159,"        return toString(array, ""{}"");",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,175,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,176,            return stringIfNull;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,178,"        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,190,        return new HashCodeBuilder().append(array).toHashCode();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,204,"        return new EqualsBuilder().append(array1, array2).isEquals();",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,235,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,236,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,238,"        final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,239,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,240,            Object object = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,241,"            if (object instanceof Map.Entry<?, ?>) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,242,"                Map.Entry<?,?> entry = (Map.Entry<?,?>) object;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,243,"                map.put(entry.getKey(), entry.getValue());",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,244,            } else if (object instanceof Object[]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,245,                Object[] entry = (Object[]) object;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,246,                if (entry.length < 2) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,247,"                    throw new IllegalArgumentException(""Array element "" + i + "", '""",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,251,"                map.put(entry[0], entry[1]);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,252,            } else {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,253,"                throw new IllegalArgumentException(""Array element "" + i + "", '""",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,258,        return map;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,301,        return items;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,321,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,336,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,337,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,339,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,352,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,353,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,355,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,368,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,369,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,371,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,384,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,385,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,387,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,400,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,401,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,403,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,416,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,417,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,419,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,432,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,433,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,435,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,448,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,449,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,451,        return array.clone();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,470,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,471,            return EMPTY_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,473,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,490,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,491,            return EMPTY_STRING_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,493,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,510,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,511,            return EMPTY_LONG_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,513,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,530,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,531,            return EMPTY_INT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,533,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,550,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,551,            return EMPTY_SHORT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,553,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,570,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,571,            return EMPTY_CHAR_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,573,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,590,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,591,            return EMPTY_BYTE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,593,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,610,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,611,            return EMPTY_DOUBLE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,613,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,630,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,631,            return EMPTY_FLOAT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,633,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,650,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,651,            return EMPTY_BOOLEAN_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,653,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,670,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,671,            return EMPTY_LONG_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,673,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,690,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,691,            return EMPTY_INTEGER_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,693,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,710,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,711,            return EMPTY_SHORT_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,713,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,730,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,731,            return EMPTY_CHARACTER_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,733,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,750,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,751,            return EMPTY_BYTE_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,753,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,770,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,771,            return EMPTY_DOUBLE_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,773,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,790,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,791,            return EMPTY_FLOAT_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,793,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,810,        if (array == null || array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,811,            return EMPTY_BOOLEAN_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,813,        return array;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,847,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,848,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,850,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,851,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,853,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,854,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,856,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,857,        Class<?> type = array.getClass().getComponentType();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,858,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,860,"            final T[] emptyArray = (T[]) Array.newInstance(type, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,861,            return emptyArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,864,"        T[] subarray = (T[]) Array.newInstance(type, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,865,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,866,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,889,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,890,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,892,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,893,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,895,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,896,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,898,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,899,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,900,            return EMPTY_LONG_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,903,        long[] subarray = new long[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,904,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,905,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,928,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,929,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,931,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,932,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,934,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,935,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,937,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,938,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,939,            return EMPTY_INT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,942,        int[] subarray = new int[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,943,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,944,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,967,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,968,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,970,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,971,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,973,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,974,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,976,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,977,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,978,            return EMPTY_SHORT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,981,        short[] subarray = new short[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,982,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,983,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1006,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1007,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1009,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1010,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1012,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1013,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1015,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1016,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1017,            return EMPTY_CHAR_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1020,        char[] subarray = new char[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1021,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1022,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1045,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1046,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1048,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1049,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1051,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1052,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1054,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1055,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1056,            return EMPTY_BYTE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1059,        byte[] subarray = new byte[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1060,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1061,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1084,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1085,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1087,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1088,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1090,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1091,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1093,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1094,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1095,            return EMPTY_DOUBLE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1098,        double[] subarray = new double[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1099,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1100,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1123,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1124,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1126,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1127,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1129,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1130,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1132,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1133,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1134,            return EMPTY_FLOAT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1137,        float[] subarray = new float[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1138,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1139,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1162,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1163,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1165,        if (startIndexInclusive < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1166,            startIndexInclusive = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1168,        if (endIndexExclusive > array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1169,            endIndexExclusive = array.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1171,        int newSize = endIndexExclusive - startIndexInclusive;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1172,        if (newSize <= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1173,            return EMPTY_BOOLEAN_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1176,        boolean[] subarray = new boolean[newSize];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1177,"        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1178,        return subarray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1195,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1198,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1200,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1213,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1216,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1218,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1231,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1234,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1236,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1249,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1252,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1254,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1267,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1270,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1272,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1285,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1288,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1290,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1303,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1306,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1308,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1321,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1324,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1326,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1339,        if ((array1 == null && array2 != null && array2.length > 0) ||,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1342,                return false;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1344,        return true;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1369,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1370,            return 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1372,        return Array.getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1385,        if (array1 == null || array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1386,"            throw new IllegalArgumentException(""The Array must not be null"");",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1388,        return array1.getClass().getName().equals(array2.getClass().getName());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1403,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1404,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1406,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1407,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1409,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1410,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1411,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1412,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1413,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1414,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1416,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1426,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1427,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1429,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1430,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1432,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1433,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1434,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1435,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1436,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1437,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1439,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1449,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1450,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1452,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1453,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1455,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1456,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1457,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1458,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1459,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1460,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1462,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1472,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1473,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1475,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1476,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1478,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1479,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1480,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1481,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1482,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1483,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1485,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1495,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1496,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1498,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1499,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1501,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1502,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1503,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1504,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1505,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1506,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1508,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1518,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1519,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1521,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1522,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1524,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1525,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1526,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1527,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1528,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1529,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1531,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1541,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1542,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1544,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1545,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1547,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1548,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1549,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1550,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1551,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1552,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1554,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1564,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1565,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1567,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1568,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1570,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1571,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1572,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1573,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1574,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1575,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1577,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1587,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1588,            return;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1590,        int i = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1591,        int j = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1593,        while (j > i) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1594,            tmp = array[j];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1595,            array[j] = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1596,            array[i] = tmp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1597,            j--;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1598,            i++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1600,    },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1618,"        return indexOf(array, objectToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1636,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1637,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1639,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1640,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1642,        if (objectToFind == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1643,            for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1644,                if (array[i] == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1645,                    return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1648,        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1649,            for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1650,                if (objectToFind.equals(array[i])) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1651,                    return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1655,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1669,"        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1687,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1688,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1690,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1691,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1692,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1693,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1695,        if (objectToFind == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1696,            for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1697,                if (array[i] == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1698,                    return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1701,        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1702,            for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1703,                if (objectToFind.equals(array[i])) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1704,                    return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1708,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1721,"        return indexOf(array, objectToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1737,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1755,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1756,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1758,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1759,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1761,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1762,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1763,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1766,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1780,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1798,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1799,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1801,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1802,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1803,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1804,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1806,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1807,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1808,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1811,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1824,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1840,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1858,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1859,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1861,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1862,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1864,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1865,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1866,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1869,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1883,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1901,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1902,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1904,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1905,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1906,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1907,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1909,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1910,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1911,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1914,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1927,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1943,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1961,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1962,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1964,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1965,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1967,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1968,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1969,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1972,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,1986,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2004,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2005,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2007,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2008,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2009,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2010,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2012,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2013,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2014,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2017,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2030,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2047,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2066,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2067,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2069,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2070,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2072,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2073,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2074,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2077,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2092,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2111,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2112,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2114,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2115,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2116,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2117,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2119,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2120,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2121,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2124,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2138,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2154,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2172,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2173,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2175,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2176,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2178,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2179,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2180,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2183,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2197,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2215,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2216,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2218,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2219,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2220,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2221,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2223,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2224,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2225,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2228,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2241,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2257,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2274,"        return indexOf(array, valueToFind, 0, tolerance);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2292,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2293,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2295,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2296,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2298,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2299,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2300,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2303,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2324,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2325,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2327,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2328,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2330,        double min = valueToFind - tolerance;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2331,        double max = valueToFind + tolerance;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2332,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2333,            if (array[i] >= min && array[i] <= max) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2334,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2337,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2351,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2368,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2386,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2387,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2389,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2390,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2391,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2392,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2394,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2395,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2396,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2399,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2420,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2421,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2423,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2424,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2425,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2426,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2428,        double min = valueToFind - tolerance;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2429,        double max = valueToFind + tolerance;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2430,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2431,            if (array[i] >= min && array[i] <= max) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2432,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2435,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2448,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2465,"        return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2481,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2499,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2500,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2502,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2503,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2505,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2506,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2507,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2510,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2524,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2542,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2543,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2545,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2546,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2547,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2548,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2550,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2551,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2552,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2555,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2568,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2584,"        return indexOf(array, valueToFind, 0);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2603,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2604,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2606,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2607,            startIndex = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2609,        for (int i = startIndex; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2610,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2611,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2614,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2629,"        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2647,        if (ArrayUtils.isEmpty(array)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2648,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2650,        if (startIndex < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2651,            return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2652,        } else if (startIndex >= array.length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2653,            startIndex = array.length - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2655,        for (int i = startIndex; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2656,            if (valueToFind == array[i]) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2657,                return i;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2660,        return INDEX_NOT_FOUND;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2673,"        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2691,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2692,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2693,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2694,            return EMPTY_CHAR_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2696,        final char[] result = new char[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2697,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2698,            result[i] = array[i].charValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2700,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2713,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2714,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2715,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2716,            return EMPTY_CHAR_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2718,        final char[] result = new char[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2719,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2720,            Character b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2721,            result[i] = (b == null ? valueForNull : b.charValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2723,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2735,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2736,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2737,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2738,            return EMPTY_CHARACTER_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2740,        final Character[] result = new Character[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2741,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2742,            result[i] = Character.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2744,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2759,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2760,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2761,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2762,            return EMPTY_LONG_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2764,        final long[] result = new long[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2765,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2766,            result[i] = array[i].longValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2768,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2781,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2782,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2783,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2784,            return EMPTY_LONG_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2786,        final long[] result = new long[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2787,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2788,            Long b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2789,            result[i] = (b == null ? valueForNull : b.longValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2791,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2803,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2804,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2805,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2806,            return EMPTY_LONG_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2808,        final Long[] result = new Long[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2809,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2810,            result[i] = Long.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2812,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2827,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2828,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2829,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2830,            return EMPTY_INT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2832,        final int[] result = new int[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2833,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2834,            result[i] = array[i].intValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2836,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2849,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2850,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2851,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2852,            return EMPTY_INT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2854,        final int[] result = new int[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2855,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2856,            Integer b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2857,            result[i] = (b == null ? valueForNull : b.intValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2859,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2871,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2872,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2873,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2874,            return EMPTY_INTEGER_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2876,        final Integer[] result = new Integer[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2877,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2878,            result[i] = Integer.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2880,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2895,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2896,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2897,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2898,            return EMPTY_SHORT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2900,        final short[] result = new short[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2901,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2902,            result[i] = array[i].shortValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2904,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2917,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2918,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2919,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2920,            return EMPTY_SHORT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2922,        final short[] result = new short[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2923,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2924,            Short b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2925,            result[i] = (b == null ? valueForNull : b.shortValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2927,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2939,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2940,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2941,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2942,            return EMPTY_SHORT_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2944,        final Short[] result = new Short[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2945,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2946,            result[i] = Short.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2948,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2963,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2964,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2965,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2966,            return EMPTY_BYTE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2968,        final byte[] result = new byte[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2969,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2970,            result[i] = array[i].byteValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2972,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2985,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2986,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2987,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2988,            return EMPTY_BYTE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2990,        final byte[] result = new byte[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2991,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2992,            Byte b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2993,            result[i] = (b == null ? valueForNull : b.byteValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,2995,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3007,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3008,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3009,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3010,            return EMPTY_BYTE_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3012,        final Byte[] result = new Byte[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3013,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3014,            result[i] = Byte.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3016,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3031,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3032,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3033,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3034,            return EMPTY_DOUBLE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3036,        final double[] result = new double[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3037,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3038,            result[i] = array[i].doubleValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3040,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3053,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3054,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3055,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3056,            return EMPTY_DOUBLE_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3058,        final double[] result = new double[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3059,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3060,            Double b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3061,            result[i] = (b == null ? valueForNull : b.doubleValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3063,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3075,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3076,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3077,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3078,            return EMPTY_DOUBLE_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3080,        final Double[] result = new Double[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3081,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3082,            result[i] = Double.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3084,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3099,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3100,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3101,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3102,            return EMPTY_FLOAT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3104,        final float[] result = new float[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3105,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3106,            result[i] = array[i].floatValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3108,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3121,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3122,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3123,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3124,            return EMPTY_FLOAT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3126,        final float[] result = new float[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3127,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3128,            Float b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3129,            result[i] = (b == null ? valueForNull : b.floatValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3131,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3143,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3144,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3145,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3146,            return EMPTY_FLOAT_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3148,        final Float[] result = new Float[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3149,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3150,            result[i] = Float.valueOf(array[i]);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3152,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3167,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3168,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3169,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3170,            return EMPTY_BOOLEAN_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3172,        final boolean[] result = new boolean[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3173,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3174,            result[i] = array[i].booleanValue();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3176,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3189,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3190,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3191,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3192,            return EMPTY_BOOLEAN_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3194,        final boolean[] result = new boolean[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3195,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3196,            Boolean b = array[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3197,            result[i] = (b == null ? valueForNull : b.booleanValue());,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3199,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3211,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3212,            return null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3213,        } else if (array.length == 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3214,            return EMPTY_BOOLEAN_OBJECT_ARRAY;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3216,        final Boolean[] result = new Boolean[array.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3217,        for (int i = 0; i < array.length; i++) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3218,            result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3220,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3232,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3243,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3254,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3265,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3276,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3287,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3298,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3309,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3320,        return array == null || array.length == 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3333,         return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3344,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3355,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3366,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3377,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3388,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3399,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3410,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3421,        return (array != null && array.length != 0);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3449,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3450,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3451,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3452,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3454,        final Class<?> type1 = array1.getClass().getComponentType();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3456,"        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3457,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3459,"            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3473,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3460,        } catch (ArrayStoreException ase) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3467,            final Class<?> type2 = array2.getClass().getComponentType();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3468,            if (!type1.isAssignableFrom(type2)){,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3469,"                throw new IllegalArgumentException(""Cannot store ""+type2.getName()+"" in an array of """,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3472,"            throw ase; // No, so rethrow original",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3474,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3495,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3496,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3497,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3498,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3500,        boolean[] joinedArray = new boolean[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3501,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3502,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3503,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3524,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3525,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3526,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3527,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3529,        char[] joinedArray = new char[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3530,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3531,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3532,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3553,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3554,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3555,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3556,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3558,        byte[] joinedArray = new byte[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3559,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3560,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3561,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3582,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3583,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3584,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3585,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3587,        short[] joinedArray = new short[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3588,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3589,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3590,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3611,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3612,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3613,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3614,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3616,        int[] joinedArray = new int[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3617,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3618,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3619,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3640,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3641,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3642,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3643,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3645,        long[] joinedArray = new long[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3646,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3647,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3648,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3669,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3670,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3671,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3672,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3674,        float[] joinedArray = new float[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3675,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3676,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3677,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3698,        if (array1 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3699,            return clone(array2);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3700,        } else if (array2 == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3701,            return clone(array1);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3703,        double[] joinedArray = new double[array1.length + array2.length];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3704,"        System.arraycopy(array1, 0, joinedArray, 0, array1.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3705,"        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3706,        return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3740,        if (array != null){,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3741,            type = array.getClass();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3742,        } else if (element != null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3743,            type = element.getClass();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3745,"            throw new IllegalArgumentException(""Arguments cannot both be null"");",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3748,"        T[] newArray = (T[]) copyArrayGrow1(array, type);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3749,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3750,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3775,"        boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3776,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3777,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3802,"        byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3803,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3804,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3829,"        char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3830,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3831,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3856,"        double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3857,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3858,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3883,"        float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3884,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3885,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3910,"        int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3911,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3912,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3937,"        long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3938,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3939,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3964,"        short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3965,        newArray[newArray.length - 1] = element;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3966,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3979,        if (array != null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3980,            int arrayLength = Array.getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3981,"            Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3982,"            System.arraycopy(array, 0, newArray, 0, arrayLength);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3983,            return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,3985,"        return Array.newInstance(newArrayComponentType, 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4019,        Class<?> clss = null;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4020,        if (array != null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4021,            clss = array.getClass().getComponentType();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4022,        } else if (element != null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4023,            clss = element.getClass();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4025,"            throw new IllegalArgumentException(""Array and element cannot both be null"");",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4028,"        final T[] newArray = (T[]) add(array, index, element, clss);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4029,        return newArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4060,"        return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4092,"        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4123,"        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4154,"        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4185,"        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4216,"        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4247,"        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4278,"        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4293,        if (array == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4294,            if (index != 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4295,"                throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4297,"            Object joinedArray = Array.newInstance(clss, 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4298,"            Array.set(joinedArray, 0, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4299,            return joinedArray;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4301,        int length = Array.getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4302,        if (index > length || index < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4303,"            throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: "" + length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4305,"        Object result = Array.newInstance(clss, length + 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4306,"        System.arraycopy(array, 0, result, 0, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4307,"        Array.set(result, index, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4308,        if (index < length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4309,"            System.arraycopy(array, index, result, index + 1, length - index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4311,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4345,"        return (T[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4375,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4376,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4377,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4379,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4411,"        return (boolean[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4440,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4441,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4442,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4444,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4476,"        return (byte[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4505,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4506,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4507,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4509,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4541,"        return (char[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4570,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4571,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4572,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4574,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4606,"        return (double[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4635,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4636,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4637,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4639,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4671,"        return (float[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4700,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4701,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4702,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4704,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4736,"        return (int[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4765,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4766,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4767,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4769,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4801,"        return (long[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4830,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4831,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4832,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4834,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4866,"        return (short[]) remove((Object) array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4895,"        int index = indexOf(array, element);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4896,        if (index == INDEX_NOT_FOUND) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4897,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4899,"        return remove(array, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4924,        int length = getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4925,        if (index < 0 || index >= length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4926,"            throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: "" + length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4929,"        Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4930,"        System.arraycopy(array, 0, result, 0, index);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4931,        if (index < length - 1) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4932,"            System.arraycopy(array, index + 1, result, index, length - index - 1);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4935,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4966,"        return (T[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4998,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,4999,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5001,"        HashMap<T, MutableInt> occurrences = new HashMap<T, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5002,        for (T v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5003,            MutableInt count = occurrences.get(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5004,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5005,"                occurrences.put(v, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5007,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5010,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5011,"        for (Map.Entry<T, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5012,            T v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5013,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5014,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5015,"                found = indexOf(array, v, found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5016,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5017,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5019,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5021,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5023,"        T[] result = (T[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5024,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5057,"        return (byte[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5088,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5089,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5091,"        HashMap<Byte, MutableInt> occurrences = new HashMap<Byte, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5092,        for (byte v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5093,            Byte boxed = Byte.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5094,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5095,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5096,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5098,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5101,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5102,"        for (Map.Entry<Byte, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5103,            Byte v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5104,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5105,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5106,"                found = indexOf(array, v.byteValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5107,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5108,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5110,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5112,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5113,"        return (byte[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5146,"        return (short[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5177,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5178,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5180,"        HashMap<Short, MutableInt> occurrences = new HashMap<Short, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5181,        for (short v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5182,            Short boxed = Short.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5183,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5184,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5185,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5187,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5190,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5191,"        for (Map.Entry<Short, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5192,            Short v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5193,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5194,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5195,"                found = indexOf(array, v.shortValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5196,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5197,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5199,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5201,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5202,"        return (short[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5235,"        return (int[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5266,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5267,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5269,"        HashMap<Integer, MutableInt> occurrences = new HashMap<Integer, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5270,        for (int v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5271,            Integer boxed = Integer.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5272,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5273,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5274,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5276,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5279,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5280,"        for (Map.Entry<Integer, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5281,            Integer v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5282,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5283,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5284,"                found = indexOf(array, v.intValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5285,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5286,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5288,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5290,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5291,"        return (int[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5324,"        return (char[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5355,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5356,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5358,"        HashMap<Character, MutableInt> occurrences = new HashMap<Character, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5359,        for (char v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5360,            Character boxed = Character.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5361,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5362,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5363,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5365,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5368,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5369,"        for (Map.Entry<Character, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5370,            Character v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5371,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5372,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5373,"                found = indexOf(array, v.charValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5374,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5375,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5377,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5379,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5380,"        return (char[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5413,"        return (long[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5444,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5445,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5447,"        HashMap<Long, MutableInt> occurrences = new HashMap<Long, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5448,        for (long v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5449,            Long boxed = Long.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5450,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5451,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5452,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5454,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5457,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5458,"        for (Map.Entry<Long, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5459,            Long v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5460,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5461,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5462,"                found = indexOf(array, v.longValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5463,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5464,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5466,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5468,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5469,"        return (long[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5502,"        return (float[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5533,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5534,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5536,"        HashMap<Float, MutableInt> occurrences = new HashMap<Float, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5537,        for (float v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5538,            Float boxed = Float.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5539,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5540,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5541,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5543,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5546,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5547,"        for (Map.Entry<Float, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5548,            Float v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5549,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5550,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5551,"                found = indexOf(array, v.floatValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5552,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5553,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5555,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5557,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5558,"        return (float[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5591,"        return (double[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5622,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5623,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5625,"        HashMap<Double, MutableInt> occurrences = new HashMap<Double, MutableInt>(values.length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5626,        for (double v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5627,            Double boxed = Double.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5628,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5629,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5630,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5632,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5635,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5636,"        for (Map.Entry<Double, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5637,            Double v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5638,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5639,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5640,"                found = indexOf(array, v.doubleValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5641,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5642,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5644,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5646,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5647,"        return (double[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5676,"        return (boolean[]) removeAll((Object) array, clone(indices));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5707,        if (isEmpty(array) || isEmpty(values)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5708,            return clone(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5710,"        HashMap<Boolean, MutableInt> occurrences = new HashMap<Boolean, MutableInt>(2); // only two possible values here",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5711,        for (boolean v : values) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5712,            Boolean boxed = Boolean.valueOf(v);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5713,            MutableInt count = occurrences.get(boxed);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5714,            if (count == null) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5715,"                occurrences.put(boxed, new MutableInt(1));",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5717,                count.increment();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5720,        BitSet toRemove = new BitSet();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5721,"        for (Map.Entry<Boolean, MutableInt> e : occurrences.entrySet()) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5722,            Boolean v = e.getKey();,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5723,            int found = 0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5724,"            for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) {",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5725,"                found = indexOf(array, v.booleanValue(), found);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5726,                if (found < 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5727,                    break;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5729,                toRemove.set(found++);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5731,        },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5732,"        return (boolean[]) removeAll(array, toRemove);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5744,        int length = getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5745,"        int diff = 0; // number of distinct indexes, i.e. number of entries that will be removed",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5747,        if (isNotEmpty(indices)) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5748,            Arrays.sort(indices);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5750,            int i = indices.length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5751,            int prevIndex = length;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5752,            while (--i >= 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5753,                int index = indices[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5754,                if (index < 0 || index >= length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5755,"                    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: "" + length);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5757,                if (index >= prevIndex) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5758,                    continue;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5760,                diff++;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5761,                prevIndex = index;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5762,            },0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5764,"        Object result = Array.newInstance(array.getClass().getComponentType(), length - diff);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5765,        if (diff < length) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5766,            int end = length; // index just after last copy,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5767,            int dest = length - diff; // number of entries so far not copied,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5768,            for (int i = indices.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5769,                int index = indices[i];,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5770,                if (end - index > 1) { // same as (cp > 0),0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5771,                    int cp = end - index - 1;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5772,                    dest -= cp;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5773,"                    System.arraycopy(array, index + 1, result, dest, cp);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5776,                end = index;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5778,            if (end > 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5779,"                System.arraycopy(array, 0, result, 0, end);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5782,        return result;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5795,        final int srcLength = ArrayUtils.getLength(array);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5802,        final int removals = indices.cardinality(); // true bits are items to remove,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5803,"        Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5804,        int srcIndex=0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5805,        int destIndex=0;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5808,        while((set = indices.nextSetBit(srcIndex)) != -1){,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5809,            count = set - srcIndex;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5810,            if (count > 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5811,"                System.arraycopy(array, srcIndex, result, destIndex, count);",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5812,                destIndex += count;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5814,            srcIndex = indices.nextClearBit(set);,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5816,        count = srcLength - srcIndex;,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5817,        if (count > 0) {,0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5818,"            System.arraycopy(array, srcIndex, result, destIndex, count);            ",0.0,0,,0
org/apache/commons/lang3/ArrayUtils,6,5820,        return result;,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,65,        int max = longest;,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,66,        if (index + longest > input.length()) {,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,67,            max = input.length() - index;,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,70,        for (int i = max; i >= shortest; i--) {,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,71,"            CharSequence subSeq = input.subSequence(index, index + i);",0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,72,            CharSequence result = lookupMap.get(subSeq);,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,73,            if (result != null) {,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,74,                out.write(result.toString());,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,75,                return i;,0.0,0,,0
org/apache/commons/lang3/text/translate/LookupTranslator,6,78,        return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,37,        if (input.charAt(index) == '\\' && index + 1 < input.length() && input.charAt(index + 1) == 'u') {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,39,            int i = 2;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,40,            while (index + i < input.length() && input.charAt(index + i) == 'u') {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,41,                i++;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,44,            if (index + i < input.length() && input.charAt(index + i) == '+') {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,45,                i++;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,48,            if (index + i + 4 <= input.length()) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,50,"                CharSequence unicode = input.subSequence(index + i, index + i + 4);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,53,"                    int value = Integer.parseInt(unicode.toString(), 16);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,54,                    out.write((char) value);,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,57,                },0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,55,                } catch (NumberFormatException nfe) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,56,"                    throw new IllegalArgumentException(""Unable to parse unicode value: "" + unicode, nfe);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,58,                return i + 4;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,60,"                throw new IllegalArgumentException(""Less than 4 hex digits in unicode value: '"" + input.subSequence(index, input.length())",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeUnescaper,6,64,        return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,58,            this.options = EnumSet.copyOf(Arrays.asList(options));,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,71,        return options == null ? false : options.contains(option);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,79,        int seqEnd = input.length();,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,81,        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,82,            int start = index + 2;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,83,            boolean isHex = false;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,85,            char firstChar = input.charAt(start);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,86,            if(firstChar == 'x' || firstChar == 'X') {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,87,                start++;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,88,                isHex = true;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,91,                if(start == seqEnd) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,92,                    return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,96,            int end = start;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,98,            while(end < seqEnd && ( input.charAt(end) >= '0' && input.charAt(end) <= '9' ||,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,102,                end++;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,105,            boolean semiNext = end != seqEnd && input.charAt(end) == ';';,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,107,            if(!semiNext) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,108,                if(isSet(OPTION.semiColonRequired)) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,109,                    return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,111,                if(isSet(OPTION.errorIfNoSemiColon)) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,112,"                    throw new IllegalArgumentException(""Semi-colon required at end of numeric entity"");",0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,118,                if(isHex) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,119,"                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);",0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,121,"                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);",0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,125,            },0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,123,            } catch(NumberFormatException nfe) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,124,                return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,127,            if(entityValue > 0xFFFF) {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,128,                char[] chrs = Character.toChars(entityValue);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,129,                out.write(chrs[0]);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,130,                out.write(chrs[1]);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,131,            } else {,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,132,                out.write(entityValue);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,135,            return 2 + end - start + (isHex ? 1 : 0) + (semiNext ? 1 : 0);,0.0,0,,0
org/apache/commons/lang3/text/translate/NumericEntityUnescaper,6,137,        return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,43,        if(input.charAt(index) == '\\' && index < (input.length() - 1) && Character.isDigit(input.charAt(index + 1)) ) {,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,44,            int start = index + 1;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,46,            int end = index + 2;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,47,            while ( end < input.length() && Character.isDigit(input.charAt(end)) ) {,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,48,                end++;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,49,"                if ( Integer.parseInt(input.subSequence(start, end).toString(), 10) > OCTAL_MAX) {",0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,50,                    end--; // rollback,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,51,                    break;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,55,"            out.write( Integer.parseInt(input.subSequence(start, end).toString(), 8) );",0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,56,            return 1 + end - start;,0.0,0,,0
org/apache/commons/lang3/text/translate/OctalUnescaper,6,58,        return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,37,"        int codepoint = Character.codePointAt(input, index);",0.0,0,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,38,"        boolean consumed = translate(codepoint, out);",0.0,0,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,39,        if (consumed) {,0.0,0,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,40,            return 1;,0.0,0,,0
org/apache/commons/lang3/text/translate/CodePointTranslator,6,42,            return 0;,0.0,0,,0
org/apache/commons/lang3/text/translate/EntityArrays,6,27,public class EntityArrays {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,38,"        this(0, Integer.MAX_VALUE, true);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,39,    },0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,64,"        return outsideOf(codepoint, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,74,"        return outsideOf(0, codepoint);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,96,"        return new UnicodeEscaper(codepointLow, codepointHigh, true);",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,104,        if(between) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,105,            if (codepoint < below || codepoint > above) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,106,                return false;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,109,            if (codepoint >= below && codepoint <= above) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,110,                return false;,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,115,        if (codepoint > 0xffff) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,118,"            out.write(""\\u"" + hex(codepoint));",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,119,        } else if (codepoint > 0xfff) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,120,"            out.write(""\\u"" + hex(codepoint));",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,121,        } else if (codepoint > 0xff) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,122,"            out.write(""\\u0"" + hex(codepoint));",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,123,        } else if (codepoint > 0xf) {,0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,124,"            out.write(""\\u00"" + hex(codepoint));",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,126,"            out.write(""\\u000"" + hex(codepoint));",0.0,0,,0
org/apache/commons/lang3/text/translate/UnicodeEscaper,6,128,        return true;,0.0,0,,0
