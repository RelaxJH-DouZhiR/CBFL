project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",3.0,0,,0
org/joda/time/Period,5,1631,                result = result.withYears(years);,1.125,1,,0
org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,1.0,0,,0
org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",1.0,0,,0
org/joda/time/Period,5,1629,            months = months % 12;,1.0,1,,0
org/joda/time/Period,5,1630,            if (years != 0) {,1.0,1,,0
org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",0.81818,1,,0
org/joda/time/Period,5,1625,        int years = getYears();,0.5625,0,,0
org/joda/time/Period,5,1626,        int months = getMonths();,0.5625,0,,0
org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0.5625,0,,0
org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0.5,0,,0
org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",0.5,0,,0
org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0.5,0,,0
org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,0.5,0,,0
org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,0.5,0,,0
org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0.5,0,,0
org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0.5,0,,0
org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",0.5,0,,0
org/joda/time/PeriodType,5,535,        if (cached != null) {,0.5,0,,0
org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0.5,0,,0
org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,0.5,0,,0
org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,0.5,0,,0
org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,0.5,0,,0
org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,0.5,0,,0
org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,0.5,0,,0
org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,0.5,0,,0
org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,0.5,0,,0
org/joda/time/PeriodType,5,564,        if (list.size() > 0) {,0.5,0,,0
org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",0.5,0,,0
org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,0.5,0,,0
org/joda/time/PeriodType,5,571,        if (checkedType != null) {,0.5,0,,0
org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);",0.5,0,,0
org/joda/time/PeriodType,5,576,        return type;,0.5,0,,0
org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,0.5,0,,0
org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.5,0,,0
org/joda/time/Period,5,445,    },0.375,0,,0
org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,0.375,0,,0
org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,0.375,0,,0
org/joda/time/Period,5,444,"        super(duration, type, chronology);",0.34615,0,,0
org/joda/time/PeriodType,5,372,        PeriodType type = cMonths;,0.34615,0,,0
org/joda/time/PeriodType,5,373,        if (type == null) {,0.34615,0,,0
org/joda/time/PeriodType,5,374,            type = new PeriodType(,0.34615,0,,0
org/joda/time/PeriodType,5,379,            cMonths = type;,0.34615,0,,0
org/joda/time/PeriodType,5,381,        return type;,0.34615,0,,0
org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,0.33333,0,,0
org/joda/time/PeriodType,5,223,        if (type == null) {,0.33333,0,,0
org/joda/time/PeriodType,5,224,            type = new PeriodType(,0.33333,0,,0
org/joda/time/PeriodType,5,232,            cYWD = type;,0.33333,0,,0
org/joda/time/PeriodType,5,234,        return type;,0.33333,0,,0
org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,0.33333,0,,0
org/joda/time/PeriodType,5,279,        if (type == null) {,0.33333,0,,0
org/joda/time/PeriodType,5,280,            type = new PeriodType(,0.33333,0,,0
org/joda/time/PeriodType,5,287,            cYD = type;,0.33333,0,,0
org/joda/time/PeriodType,5,289,        return type;,0.33333,0,,0
org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,0.33333,0,,0
org/joda/time/PeriodType,5,505,        for (int i = 0; i < types.length; i++) {,0.33333,0,,0
org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0.33333,0,,0
org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",0.33333,0,,0
org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0.33333,0,,0
org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0.33333,0,,0
org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0.33333,0,,0
org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());",0.33333,0,,0
org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0.33333,0,,0
org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",0.33333,0,,0
org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());",0.33333,0,,0
org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",0.33333,0,,0
org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());",0.33333,0,,0
org/joda/time/PeriodType,5,520,"            cache.put(time(), time());",0.33333,0,,0
org/joda/time/PeriodType,5,521,"            cache.put(years(), years());",0.33333,0,,0
org/joda/time/PeriodType,5,522,"            cache.put(months(), months());",0.33333,0,,0
org/joda/time/PeriodType,5,523,"            cache.put(weeks(), weeks());",0.33333,0,,0
org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",0.33333,0,,0
org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",0.33333,0,,0
org/joda/time/PeriodType,5,526,"            cache.put(minutes(), minutes());",0.33333,0,,0
org/joda/time/PeriodType,5,527,"            cache.put(seconds(), seconds());",0.33333,0,,0
org/joda/time/PeriodType,5,528,"            cache.put(millis(), millis());",0.33333,0,,0
org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",0.33333,0,,0
org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,0.33333,0,,0
org/joda/time/PeriodType,5,532,        if (cached instanceof PeriodType) {,0.33333,0,,0
org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",0.33333,0,,0
org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0.33333,0,,0
org/joda/time/PeriodType,5,770,"        return withFieldRemoved(5, ""NoMinutes"");",0.33333,0,,0
org/joda/time/PeriodType,5,851,        int hash = 0;,0.33333,0,,0
org/joda/time/PeriodType,5,852,        for (int i = 0; i < iTypes.length; i++) {,0.33333,0,,0
org/joda/time/PeriodType,5,853,            hash += iTypes[i].hashCode();,0.33333,0,,0
org/joda/time/PeriodType,5,855,        return hash;,0.33333,0,,0
org/joda/time/PeriodType,5,779,"        return withFieldRemoved(6, ""NoSeconds"");",0.125,0,,0
org/joda/time/PeriodType,5,809,                types[i - 1] = iTypes[i];,0.11111,0,,0
org/joda/time/PeriodType,5,163,        PeriodType type = cYMD;,0.08333,0,,0
org/joda/time/PeriodType,5,164,        if (type == null) {,0.08333,0,,0
org/joda/time/PeriodType,5,165,            type = new PeriodType(,0.08333,0,,0
org/joda/time/PeriodType,5,173,            cYMD = type;,0.08333,0,,0
org/joda/time/PeriodType,5,175,        return type;,0.08333,0,,0
org/joda/time/PeriodType,5,193,        PeriodType type = cYWDTime;,0.08333,0,,0
org/joda/time/PeriodType,5,194,        if (type == null) {,0.08333,0,,0
org/joda/time/PeriodType,5,195,            type = new PeriodType(,0.08333,0,,0
org/joda/time/PeriodType,5,205,            cYWDTime = type;,0.08333,0,,0
org/joda/time/PeriodType,5,207,        return type;,0.08333,0,,0
org/joda/time/Period,5,737,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",0.07692,0,,0
org/joda/time/Period,5,746,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",0.07692,0,,0
org/joda/time/Period,5,755,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",0.07627,0,,0
org/joda/time/Period,5,764,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0.07627,0,,0
org/joda/time/Period,5,774,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",0.07627,0,,0
org/joda/time/Period,5,783,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",0.07627,0,,0
org/joda/time/Period,5,801,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0.07627,0,,0
org/joda/time/Period,5,792,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0.075,0,,0
org/joda/time/base/AbstractPeriod,5,95,        int[] result = new int[size()];,0.072,0,,0
org/joda/time/base/AbstractPeriod,5,96,        for (int i = 0; i < result.length; i++) {,0.072,0,,0
org/joda/time/base/AbstractPeriod,5,97,            result[i] = getValue(i);,0.072,0,,0
org/joda/time/base/AbstractPeriod,5,99,        return result;,0.072,0,,0
org/joda/time/PeriodType,5,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,0.07143,0,,0
org/joda/time/PeriodType,5,480,        PeriodType type = cMillis;,0.05556,0,,0
org/joda/time/PeriodType,5,481,        if (type == null) {,0.05556,0,,0
org/joda/time/PeriodType,5,482,            type = new PeriodType(,0.05556,0,,0
org/joda/time/PeriodType,5,487,            cMillis = type;,0.05556,0,,0
org/joda/time/PeriodType,5,489,        return type;,0.05556,0,,0
org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0.04762,0,,0
org/joda/time/DurationFieldType,5,266,            if (this == obj) {,0.04762,0,,0
org/joda/time/DurationFieldType,5,267,                return true;,0.04762,0,,0
org/joda/time/PeriodType,5,134,        PeriodType type = cYMDTime;,0.04348,0,,0
org/joda/time/PeriodType,5,135,        if (type == null) {,0.04348,0,,0
org/joda/time/PeriodType,5,136,            type = new PeriodType(,0.04348,0,,0
org/joda/time/PeriodType,5,146,            cYMDTime = type;,0.04348,0,,0
org/joda/time/PeriodType,5,148,        return type;,0.04348,0,,0
org/joda/time/Period,5,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0.04306,0,,0
org/joda/time/Period,5,330,    },0.04306,0,,0
org/joda/time/PeriodType,5,807,                types[i] = iTypes[i];,0.03704,0,,0
org/joda/time/PeriodType,5,816,                indices[i] = iIndices[i];,0.03704,0,,0
org/joda/time/PeriodType,5,305,        PeriodType type = cDTime;,0.03571,0,,0
org/joda/time/PeriodType,5,306,        if (type == null) {,0.03571,0,,0
org/joda/time/PeriodType,5,307,            type = new PeriodType(,0.03571,0,,0
org/joda/time/PeriodType,5,316,            cDTime = type;,0.03571,0,,0
org/joda/time/PeriodType,5,318,        return type;,0.03571,0,,0
org/joda/time/PeriodType,5,354,        PeriodType type = cYears;,0.03571,0,,0
org/joda/time/PeriodType,5,355,        if (type == null) {,0.03571,0,,0
org/joda/time/PeriodType,5,356,            type = new PeriodType(,0.03571,0,,0
org/joda/time/PeriodType,5,361,            cYears = type;,0.03571,0,,0
org/joda/time/PeriodType,5,363,        return type;,0.03571,0,,0
org/joda/time/PeriodType,5,608,        return iName;,0.03571,0,,0
org/joda/time/PeriodType,5,799,        int fieldIndex = iIndices[indicesIndex];,0.03571,0,,0
org/joda/time/PeriodType,5,800,        if (fieldIndex == -1) {,0.03571,0,,0
org/joda/time/PeriodType,5,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,0.03571,0,,0
org/joda/time/PeriodType,5,805,        for (int i = 0; i < iTypes.length; i++) {,0.03571,0,,0
org/joda/time/PeriodType,5,806,            if (i < fieldIndex) {,0.03571,0,,0
org/joda/time/PeriodType,5,808,            } else if (i > fieldIndex) {,0.03571,0,,0
org/joda/time/PeriodType,5,813,        int[] indices = new int[8];,0.03571,0,,0
org/joda/time/PeriodType,5,814,        for (int i = 0; i < indices.length; i++) {,0.03571,0,,0
org/joda/time/PeriodType,5,815,            if (i < indicesIndex) {,0.03571,0,,0
org/joda/time/PeriodType,5,817,            } else if (i > indicesIndex) {,0.03571,0,,0
org/joda/time/PeriodType,5,820,                indices[i] = -1;,0.03571,0,,0
org/joda/time/PeriodType,5,823,"        return new PeriodType(getName() + name, types, indices);",0.03571,0,,0
org/joda/time/PeriodType,5,674,        int realIndex = iIndices[index];,0.03321,0,,0
org/joda/time/PeriodType,5,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,0.03321,0,,0
org/joda/time/base/BasePeriod,5,94,    },0.03,0,,0
org/joda/time/base/BasePeriod,5,90,        super();,0.0298,0,,0
org/joda/time/base/BasePeriod,5,91,        type = checkPeriodType(type);,0.0298,0,,0
org/joda/time/base/BasePeriod,5,92,        iType = type;,0.0298,0,,0
org/joda/time/base/BasePeriod,5,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",0.0298,0,,0
org/joda/time/base/BasePeriod,5,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0.0298,0,,0
org/joda/time/base/BasePeriod,5,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0.0298,0,,0
org/joda/time/base/BasePeriod,5,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0.0298,0,,0
org/joda/time/base/BasePeriod,5,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0.0298,0,,0
org/joda/time/base/BasePeriod,5,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0.0298,0,,0
org/joda/time/base/BasePeriod,5,462,        return newValues;,0.0298,0,,0
org/joda/time/base/BasePeriod,5,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0.0297,0,,0
org/joda/time/base/BasePeriod,5,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",0.0297,0,,0
org/joda/time/base/BasePeriod,5,453,        int[] newValues = new int[size()];,0.02941,0,,0
org/joda/time/base/BasePeriod,5,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0.02941,0,,0
org/joda/time/PeriodType,5,390,        PeriodType type = cWeeks;,0.02632,0,,0
org/joda/time/PeriodType,5,391,        if (type == null) {,0.02632,0,,0
org/joda/time/PeriodType,5,392,            type = new PeriodType(,0.02632,0,,0
org/joda/time/PeriodType,5,397,            cWeeks = type;,0.02632,0,,0
org/joda/time/PeriodType,5,399,        return type;,0.02632,0,,0
org/joda/time/base/BasePeriod,5,397,            values[index] = newValue;,0.02624,0,,0
org/joda/time/base/BasePeriod,5,399,    },0.02624,0,,0
org/joda/time/base/BasePeriod,5,390,        int index = indexOf(type);,0.02601,0,,0
org/joda/time/base/BasePeriod,5,391,        if (index == -1) {,0.02601,0,,0
org/joda/time/PeriodType,5,444,        PeriodType type = cMinutes;,0.02564,0,,0
org/joda/time/PeriodType,5,445,        if (type == null) {,0.02564,0,,0
org/joda/time/PeriodType,5,446,            type = new PeriodType(,0.02564,0,,0
org/joda/time/PeriodType,5,451,            cMinutes = type;,0.02564,0,,0
org/joda/time/PeriodType,5,453,        return type;,0.02564,0,,0
org/joda/time/PeriodType,5,462,        PeriodType type = cSeconds;,0.02564,0,,0
org/joda/time/PeriodType,5,463,        if (type == null) {,0.02564,0,,0
org/joda/time/PeriodType,5,464,            type = new PeriodType(,0.02564,0,,0
org/joda/time/PeriodType,5,469,            cSeconds = type;,0.02564,0,,0
org/joda/time/PeriodType,5,471,        return type;,0.02564,0,,0
org/joda/time/PeriodType,5,426,        PeriodType type = cHours;,0.025,0,,0
org/joda/time/PeriodType,5,427,        if (type == null) {,0.025,0,,0
org/joda/time/PeriodType,5,428,            type = new PeriodType(,0.025,0,,0
org/joda/time/PeriodType,5,433,            cHours = type;,0.025,0,,0
org/joda/time/PeriodType,5,435,        return type;,0.025,0,,0
org/joda/time/PeriodType,5,650,                return i;,0.02368,0,,0
org/joda/time/base/AbstractPeriod,5,137,        return getPeriodType().indexOf(type);,0.0235,0,,0
org/joda/time/PeriodType,5,648,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0235,0,,0
org/joda/time/PeriodType,5,649,            if (iTypes[i] == type) {,0.0235,0,,0
org/joda/time/PeriodType,5,408,        PeriodType type = cDays;,0.02273,0,,0
org/joda/time/PeriodType,5,409,        if (type == null) {,0.02273,0,,0
org/joda/time/PeriodType,5,410,            type = new PeriodType(,0.02273,0,,0
org/joda/time/PeriodType,5,415,            cDays = type;,0.02273,0,,0
org/joda/time/PeriodType,5,417,        return type;,0.02273,0,,0
org/joda/time/DateTimeUtils,5,321,        return type;,0.02074,0,,0
org/joda/time/Period,5,298,"        super(0L, null, null);",0.01982,0,,0
org/joda/time/Period,5,299,    },0.01982,0,,0
org/joda/time/Period,5,65,    public static final Period ZERO = new Period();,0.01982,0,,0
org/joda/time/field/FieldUtils,5,70,        return sum;,0.01903,0,,0
org/joda/time/field/FieldUtils,5,64,        int sum = val1 + val2;,0.01895,0,,0
org/joda/time/field/FieldUtils,5,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.01895,0,,0
org/joda/time/DateTimeUtils,5,319,            return PeriodType.standard();,0.01844,0,,0
org/joda/time/base/BasePeriod,5,254,        super();,0.01804,0,,0
org/joda/time/base/BasePeriod,5,255,        type = checkPeriodType(type);,0.01804,0,,0
org/joda/time/base/BasePeriod,5,256,        chrono = DateTimeUtils.getChronology(chrono);,0.01804,0,,0
org/joda/time/base/BasePeriod,5,257,        iType = type;,0.01804,0,,0
org/joda/time/base/BasePeriod,5,258,"        iValues = chrono.get(this, duration);",0.01804,0,,0
org/joda/time/base/BasePeriod,5,259,    },0.01804,0,,0
org/joda/time/chrono/BaseChronology,5,276,        int size = period.size();,0.01741,0,,0
org/joda/time/chrono/BaseChronology,5,277,        int[] values = new int[size];,0.01741,0,,0
org/joda/time/chrono/BaseChronology,5,278,        if (duration != 0) {,0.01741,0,,0
org/joda/time/chrono/BaseChronology,5,289,        return values;,0.01741,0,,0
org/joda/time/base/BasePeriod,5,329,        return iValues[index];,0.01705,0,,0
org/joda/time/PeriodType,5,333,        PeriodType type = cTime;,0.01695,0,,0
org/joda/time/PeriodType,5,334,        if (type == null) {,0.01695,0,,0
org/joda/time/PeriodType,5,335,            type = new PeriodType(,0.01695,0,,0
org/joda/time/PeriodType,5,343,            cTime = type;,0.01695,0,,0
org/joda/time/PeriodType,5,345,        return type;,0.01695,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,157,            return false;,0.01613,0,,0
org/joda/time/PeriodType,5,102,        PeriodType type = cStandard;,0.0159,0,,0
org/joda/time/PeriodType,5,103,        if (type == null) {,0.0159,0,,0
org/joda/time/PeriodType,5,104,            type = new PeriodType(,0.0159,0,,0
org/joda/time/PeriodType,5,114,            cStandard = type;,0.0159,0,,0
org/joda/time/PeriodType,5,116,        return type;,0.0159,0,,0
org/joda/time/DateTimeUtils,5,318,        if (type == null) {,0.0156,0,,0
org/joda/time/base/BasePeriod,5,308,        return DateTimeUtils.getPeriodType(type);,0.0156,0,,0
org/joda/time/base/BasePeriod,5,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,0.01538,0,,0
org/joda/time/base/BasePeriod,5,318,        return iType;,0.01538,0,,0
org/joda/time/base/AbstractPeriod,5,45,        super();,0.01538,0,,0
org/joda/time/base/AbstractPeriod,5,46,    },0.01538,0,,0
org/joda/time/base/AbstractPeriod,5,56,        return getPeriodType().size();,0.01538,0,,0
org/joda/time/PeriodType,5,617,        return iTypes.length;,0.01538,0,,0
org/joda/time/base/BasePeriod,5,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,0.01538,0,,0
org/joda/time/PeriodType,5,595,        super();,0.01183,0,,0
org/joda/time/PeriodType,5,596,        iName = name;,0.01183,0,,0
org/joda/time/PeriodType,5,597,        iTypes = types;,0.01183,0,,0
org/joda/time/PeriodType,5,598,        iIndices = indices;,0.01183,0,,0
org/joda/time/PeriodType,5,599,    },0.01183,0,,0
org/joda/time/PeriodType,5,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",0.01183,0,,0
org/joda/time/PeriodType,5,58,    static int YEAR_INDEX = 0;,0.01183,0,,0
org/joda/time/PeriodType,5,59,    static int MONTH_INDEX = 1;,0.01183,0,,0
org/joda/time/PeriodType,5,60,    static int WEEK_INDEX = 2;,0.01183,0,,0
org/joda/time/PeriodType,5,61,    static int DAY_INDEX = 3;,0.01183,0,,0
org/joda/time/PeriodType,5,62,    static int HOUR_INDEX = 4;,0.01183,0,,0
org/joda/time/PeriodType,5,63,    static int MINUTE_INDEX = 5;,0.01183,0,,0
org/joda/time/PeriodType,5,64,    static int SECOND_INDEX = 6;,0.01183,0,,0
org/joda/time/PeriodType,5,65,    static int MILLI_INDEX = 7;,0.01183,0,,0
org/joda/time/PeriodType,5,251,        PeriodType type = cYDTime;,0.01124,0,,0
org/joda/time/PeriodType,5,252,        if (type == null) {,0.01124,0,,0
org/joda/time/PeriodType,5,253,            type = new PeriodType(,0.01124,0,,0
org/joda/time/PeriodType,5,262,            cYDTime = type;,0.01124,0,,0
org/joda/time/PeriodType,5,264,        return type;,0.01124,0,,0
org/joda/time/DateTimeUtils,5,285,            return ISOChronology.getInstance();,0.01051,0,,0
org/joda/time/chrono/BaseChronology,5,284,"                    current = field.add(current, value);",0.0098,0,,0
org/joda/time/chrono/BaseChronology,5,285,                    values[i] = value;,0.0098,0,,0
org/joda/time/chrono/BaseChronology,5,279,            long current = 0;,0.00962,0,,0
org/joda/time/chrono/BaseChronology,5,280,            for (int i = 0; i < size; i++) {,0.00962,0,,0
org/joda/time/chrono/BaseChronology,5,281,                DurationField field = period.getFieldType(i).getField(this);,0.00962,0,,0
org/joda/time/chrono/BaseChronology,5,282,                if (field.isPrecise()) {,0.00962,0,,0
org/joda/time/chrono/BaseChronology,5,283,"                    int value = field.getDifference(duration, current);",0.00962,0,,0
org/joda/time/chrono/ISOChronology,5,77,        return INSTANCE_UTC;,0.00889,0,,0
org/joda/time/chrono/ISOChronology,5,86,        return getInstance(DateTimeZone.getDefault());,0.00822,0,,0
org/joda/time/DateTimeUtils,5,287,        return chrono;,0.00666,0,,0
org/joda/time/DurationFieldType,5,296,                    return chronology.weeks();,0.00654,0,,0
org/joda/time/chrono/ISOChronology,5,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00641,0,,0
org/joda/time/chrono/ISOChronology,5,108,"                cCache.put(zone, chrono);",0.00641,0,,0
org/joda/time/chrono/ISOChronology,5,96,        if (zone == null) {,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,100,        ISOChronology chrono = cFastCache[index];,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,101,        if (chrono != null && chrono.getZone() == zone) {,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,104,        synchronized (cCache) {,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,105,            chrono = cCache.get(zone);,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,106,            if (chrono == null) {,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,110,        },0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,111,        cFastCache[index] = chrono;,0.00638,0,,0
org/joda/time/chrono/ISOChronology,5,112,        return chrono;,0.00638,0,,0
org/joda/time/DateTimeUtils,5,100,        checkPermission();,0.00625,0,,0
org/joda/time/DateTimeUtils,5,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00625,0,,0
org/joda/time/DateTimeUtils,5,102,    },0.00625,0,,0
org/joda/time/DateTimeUtils,5,114,        checkPermission();,0.00625,0,,0
org/joda/time/DateTimeUtils,5,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.00625,0,,0
org/joda/time/DateTimeUtils,5,116,    },0.00625,0,,0
org/joda/time/DateTimeUtils,5,161,        SecurityManager sm = System.getSecurityManager();,0.00625,0,,0
org/joda/time/DateTimeUtils,5,162,        if (sm != null) {,0.00625,0,,0
org/joda/time/DateTimeUtils,5,165,    },0.00625,0,,0
org/joda/time/DateTimeUtils,5,547,        FixedMillisProvider(long fixedMillis) {,0.00625,0,,0
org/joda/time/DateTimeUtils,5,548,            iMillis = fixedMillis;,0.00625,0,,0
org/joda/time/DateTimeUtils,5,549,        },0.00625,0,,0
org/joda/time/DateTimeZone,5,175,        SecurityManager sm = System.getSecurityManager();,0.00602,0,,0
org/joda/time/DateTimeZone,5,176,        if (sm != null) {,0.00602,0,,0
org/joda/time/DateTimeZone,5,179,        if (zone == null) {,0.00602,0,,0
org/joda/time/DateTimeZone,5,182,        synchronized(DateTimeZone.class) {,0.00602,0,,0
org/joda/time/DateTimeZone,5,183,            cDefault = zone;,0.00602,0,,0
org/joda/time/DateTimeZone,5,184,        },0.00602,0,,0
org/joda/time/DateTimeZone,5,185,    },0.00602,0,,0
org/joda/time/chrono/ISOChronology,5,133,        return INSTANCE_UTC;,0.00594,0,,0
org/joda/time/tz/CachedDateTimeZone,5,123,        return iZone.hashCode();,0.00581,0,,0
org/joda/time/DateTimeZone,5,1273,        return 57 + getID().hashCode();,0.00566,0,,0
org/joda/time/field/UnsupportedDurationField,5,218,        return 0;,0.00565,0,,0
org/joda/time/field/ScaledDurationField,5,109,        return getWrappedField().getUnitMillis() * iScalar;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,81,"        super(base, zone);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,82,    },0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,55,        if (base == null) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,58,        base = base.withUTC();,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,59,        if (base == null) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,62,        if (zone == null) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,65,"        return new ZonedChronology(base, zone);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,85,        return (DateTimeZone)getParam();,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,154,"        fields.eras = convertField(fields.eras, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,155,"        fields.centuries = convertField(fields.centuries, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,156,"        fields.years = convertField(fields.years, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,157,"        fields.months = convertField(fields.months, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,159,"        fields.weeks = convertField(fields.weeks, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,160,"        fields.days = convertField(fields.days, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,163,"        fields.hours = convertField(fields.hours, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,164,"        fields.minutes = convertField(fields.minutes, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,165,"        fields.seconds = convertField(fields.seconds, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,166,"        fields.millis = convertField(fields.millis, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,170,"        fields.year = convertField(fields.year, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,174,"        fields.era = convertField(fields.era, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,180,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,194,    },0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,197,        if (field == null || !field.isSupported()) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,198,            return field;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,200,        if (converted.containsKey(field)) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,201,            return (DurationField)converted.get(field);,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,204,"        converted.put(field, zonedField);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,205,        return zonedField;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,209,        if (field == null || !field.isSupported()) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,212,        if (converted.containsKey(field)) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,215,        ZonedDateTimeField zonedField =,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,220,"        converted.put(field, zonedField);",0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,221,        return zonedField;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,387,            super(field.getType());,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,388,            if (!field.isSupported()) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,391,            iField = field;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,392,            iZone = zone;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,393,            iDurationField = durationField;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,394,            iTimeField = useTimeArithmetic(durationField);,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,395,            iRangeDurationField = rangeDurationField;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,396,            iLeapDurationField = leapDurationField;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,397,        },0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,281,            super(field.getType());,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,282,            if (!field.isSupported()) {,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,285,            iField = field;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,286,            iTimeField = useTimeArithmetic(field);,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,287,            iZone = zone;,0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,288,        },0.00565,0,,0
org/joda/time/chrono/ZonedChronology,5,295,            return iField.getUnitMillis();,0.00565,0,,0
org/joda/time/field/MillisDurationField,5,49,        return DurationFieldType.millis();,0.00563,0,,0
org/joda/time/field/MillisDurationField,5,155,        return (int) getUnitMillis();,0.00563,0,,0
org/joda/time/field/ScaledDurationField,5,147,        long scalar = iScalar;,0.00563,0,,0
org/joda/time/field/ScaledDurationField,5,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.00563,0,,0
org/joda/time/field/ScaledDurationField,5,149,        hash += getType().hashCode();,0.00563,0,,0
org/joda/time/field/ScaledDurationField,5,150,        hash += getWrappedField().hashCode();,0.00563,0,,0
org/joda/time/field/ScaledDurationField,5,151,        return hash;,0.00563,0,,0
org/joda/time/field/DecoratedDurationField,5,69,        return iField;,0.00563,0,,0
org/joda/time/field/BaseDateTimeField,5,726,        return null;,0.00563,0,,0
org/joda/time/field/PreciseDurationField,5,142,        long millis = iUnitMillis;,0.00563,0,,0
org/joda/time/field/PreciseDurationField,5,143,        int hash = (int) (millis ^ (millis >>> 32));,0.00563,0,,0
org/joda/time/field/PreciseDurationField,5,144,        hash += getType().hashCode();,0.00563,0,,0
org/joda/time/field/PreciseDurationField,5,145,        return hash;,0.00563,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,102,        return getWrappedField().getLeapDurationField();,0.00563,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,112,        return iChronology.days();,0.00563,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,335,        return iChronology.days();,0.00563,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,221,        return iChronology.weeks();,0.00563,0,,0
org/joda/time/DateTimeZone,5,148,                        },0.00563,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,95,        return iChronology.weeks();,0.00563,0,,0
org/joda/time/DateTimeZone,5,134,        DateTimeZone zone = cDefault;,0.00562,0,,0
org/joda/time/DateTimeZone,5,135,        if (zone == null) {,0.00562,0,,0
org/joda/time/DateTimeZone,5,136,            synchronized(DateTimeZone.class) {,0.00562,0,,0
org/joda/time/DateTimeZone,5,137,                zone = cDefault;,0.00562,0,,0
org/joda/time/DateTimeZone,5,138,                if (zone == null) {,0.00562,0,,0
org/joda/time/DateTimeZone,5,139,                    DateTimeZone temp = null;,0.00562,0,,0
org/joda/time/DateTimeZone,5,142,"                            String id = System.getProperty(""user.timezone"");",0.00562,0,,0
org/joda/time/DateTimeZone,5,143,                            if (id != null) {  // null check avoids stack overflow,0.00562,0,,0
org/joda/time/DateTimeZone,5,144,                                temp = forID(id);,0.00562,0,,0
org/joda/time/DateTimeZone,5,149,                        if (temp == null) {,0.00562,0,,0
org/joda/time/DateTimeZone,5,154,                    },0.00562,0,,0
org/joda/time/DateTimeZone,5,155,                    if (temp == null) {,0.00562,0,,0
org/joda/time/DateTimeZone,5,158,                    cDefault = zone = temp;,0.00562,0,,0
org/joda/time/DateTimeZone,5,160,            },0.00562,0,,0
org/joda/time/DateTimeZone,5,162,        return zone;,0.00562,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00562,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,132,        return null;,0.00562,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,161,            return iUnitMillis;,0.00561,0,,0
org/joda/time/chrono/AssembledChronology,5,315,        return iParam;,0.00559,0,,0
org/joda/time/field/BaseDurationField,5,55,        return iType;,0.00559,0,,0
org/joda/time/field/DecoratedDateTimeField,5,91,        return iField.getRangeDurationField();,0.00559,0,,0
org/joda/time/field/RemainderDateTimeField,5,140,        return iRangeField;,0.00559,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,57,        return iChronology.years();,0.00559,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,209,        return null;,0.00559,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,59,        return iChronology.weekyears();,0.00559,0,,0
org/joda/time/field/PreciseDateTimeField,5,123,        return iRangeField;,0.00558,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,96,        return null;,0.00558,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,52,        return iChronology.months();,0.00558,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,316,        return iChronology.years();,0.00558,0,,0
org/joda/time/DateTimeUtils,5,284,        if (chrono == null) {,0.00557,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,142,        return iUnitField;,0.00557,0,,0
org/joda/time/chrono/ISOChronology,5,122,"        super(base, null);",0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,123,    },0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,68,    },0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00556,0,,0
org/joda/time/chrono/ISOChronology,5,180,    },0.00556,0,,0
org/joda/time/chrono/GregorianChronology,5,81,        return INSTANCE_UTC;,0.00556,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,47,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00556,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,48,    },0.00556,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,41,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00556,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,88,        return 0;,0.00556,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,92,        return getWrappedField().getMaximumValue();,0.00556,0,,0
org/joda/time/chrono/AssembledChronology,5,321,            fields.copyFieldsFrom(iBase);,0.0055,0,,0
org/joda/time/chrono/AssembledChronology,5,372,            flags = ,0.0055,0,,0
org/joda/time/chrono/BasicChronology,5,146,        return DateTimeZone.UTC;,0.00549,0,,0
org/joda/time/chrono/BasicChronology,5,143,        if ((base = getBase()) != null) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,148,"        super(base, param, minDaysInFirstWeek);",0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,149,    },0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,72,    },0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,100,"        return getInstance(zone, 4);",0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,111,        if (zone == null) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,115,        synchronized (cCache) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,117,            if (chronos == null) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,118,                chronos = new GregorianChronology[7];,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,119,"                cCache.put(zone, chronos);",0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,126,            },0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,127,            if (chrono == null) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,128,                if (zone == DateTimeZone.UTC) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,137,        },0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,138,        return chrono;,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,191,        if (getBase() == null) {,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,192,            super.assemble(fields);,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,194,    },0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,225,        return MAX_YEAR;,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,229,        return MILLIS_PER_YEAR;,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,237,        return MILLIS_PER_MONTH;,0.00548,0,,0
org/joda/time/chrono/GregorianChronology,5,45,public final class GregorianChronology extends BasicGJChronology {,0.00548,0,,0
org/joda/time/chrono/BasicChronology,5,700,        return 12;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,75,"        super(base, param, minDaysInFirstWeek);",0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,76,    },0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,56,        long minSum = 0;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,57,        long maxSum = 0;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,58,        for (int i = 0; i < 11; i++) {,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,61,            minSum += millis;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,66,            maxSum += millis;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00548,0,,0
org/joda/time/chrono/BasicGJChronology,5,69,    },0.00548,0,,0
org/joda/time/chrono/AssembledChronology,5,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,100,        iBase = base;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,101,        iParam = param;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,102,        setFields();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,103,    },0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,156,        return iMillis;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,160,        return iMillisOfSecond;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,164,        return iMillisOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,168,        return iSeconds;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,172,        return iSecondOfMinute;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,176,        return iSecondOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,180,        return iMinutes;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,184,        return iMinuteOfHour;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,188,        return iMinuteOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,192,        return iHours;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,196,        return iHourOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,200,        return iClockhourOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,204,        return iHalfdays;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,208,        return iHourOfHalfday;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,212,        return iClockhourOfHalfday;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,216,        return iHalfdayOfDay;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,220,        return iDays;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,224,        return iDayOfWeek;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,228,        return iDayOfMonth;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,232,        return iDayOfYear;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,236,        return iWeeks;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,240,        return iWeekOfWeekyear;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,244,        return iWeekyears;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,248,        return iWeekyear;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,252,        return iWeekyearOfCentury;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,256,        return iMonths;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,260,        return iMonthOfYear;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,264,        return iYears;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,268,        return iYear;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,272,        return iYearOfEra;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,276,        return iYearOfCentury;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,280,        return iCenturies;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,284,        return iCenturyOfEra;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,288,        return iEras;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,292,        return iEra;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,308,        return iBase;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,319,        Fields fields = new Fields();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,320,        if (iBase != null) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,323,        assemble(fields);,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,369,        if (iBase == null) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,370,            flags = 0;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,385,        iBaseFlags = flags;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,386,    },0.00546,0,,0
org/joda/time/chrono/BaseChronology,5,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,164,        return MILLIS_OF_SECOND_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,173,        return MILLIS_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,182,        return SECOND_OF_MINUTE_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,191,        return SECOND_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,200,        return MINUTE_OF_HOUR_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,209,        return MINUTE_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,218,        return HOUR_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,236,        return HOUR_OF_HALFDAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,254,        return HALFDAY_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,264,        return DAY_OF_WEEK_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,273,        return DAY_OF_MONTH_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,282,        return DAY_OF_YEAR_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,300,        return WEEKYEAR_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,318,        return MONTH_OF_YEAR_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,336,        return YEAR_OF_ERA_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,345,        return YEAR_OF_CENTURY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,354,        return CENTURY_OF_ERA_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,363,        return ERA_TYPE;,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,92,        return false;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,452,            return iUnitType;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,457,            return iRangeType;,0.00546,0,,0
org/joda/time/field/MillisDurationField,5,44,        super();,0.00546,0,,0
org/joda/time/field/MillisDurationField,5,45,    },0.00546,0,,0
org/joda/time/field/MillisDurationField,5,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.00546,0,,0
org/joda/time/field/MillisDurationField,5,62,        return true;,0.00546,0,,0
org/joda/time/field/MillisDurationField,5,71,        return true;,0.00546,0,,0
org/joda/time/field/MillisDurationField,5,80,        return 1;,0.00546,0,,0
org/joda/time/field/ScaledDurationField,5,47,"        super(field, type);",0.00546,0,,0
org/joda/time/field/ScaledDurationField,5,48,        if (scalar == 0 || scalar == 1) {,0.00546,0,,0
org/joda/time/field/ScaledDurationField,5,51,        iScalar = scalar;,0.00546,0,,0
org/joda/time/field/ScaledDurationField,5,52,    },0.00546,0,,0
org/joda/time/field/DecoratedDurationField,5,52,        super(type);,0.00546,0,,0
org/joda/time/field/DecoratedDurationField,5,53,        if (field == null) {,0.00546,0,,0
org/joda/time/field/DecoratedDurationField,5,56,        if (!field.isSupported()) {,0.00546,0,,0
org/joda/time/field/DecoratedDurationField,5,59,        iField = field;,0.00546,0,,0
org/joda/time/field/DecoratedDurationField,5,60,    },0.00546,0,,0
org/joda/time/field/BaseDurationField,5,47,        super();,0.00546,0,,0
org/joda/time/field/BaseDurationField,5,48,        if (type == null) {,0.00546,0,,0
org/joda/time/field/BaseDurationField,5,51,        iType = type;,0.00546,0,,0
org/joda/time/field/BaseDurationField,5,52,    },0.00546,0,,0
org/joda/time/field/BaseDurationField,5,66,        return true;,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,56,        super(type);,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,57,        iUnitMillis = unitMillis;,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,58,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,59,    },0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,138,        return iDurationField;,0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,50,        super();,0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,51,        if (type == null) {,0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,54,        iType = type;,0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,55,    },0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,58,        return iType;,0.00546,0,,0
org/joda/time/field/BaseDateTimeField,5,69,        return true;,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,55,        super(type);,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,56,        if (field == null) {,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,59,        if (!field.isSupported()) {,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,62,        iField = field;,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,63,    },0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,71,        return iField;,0.00546,0,,0
org/joda/time/field/DecoratedDateTimeField,5,87,        return iField.getDurationField();,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,152,        LinkedDurationField(DurationFieldType type) {,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,153,            super(type);,0.00546,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,154,        },0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,47,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,48,    },0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,59,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,60,    },0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,74,"        super(field, type);",0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,76,        if (offset == 0) {,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,80,        iOffset = offset;,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,82,        if (minValue < (field.getMinimumValue() + offset)) {,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,83,            iMin = field.getMinimumValue() + offset;,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,87,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,88,            iMax = field.getMaximumValue() + offset;,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,92,    },0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,175,        return iMin;,0.00546,0,,0
org/joda/time/field/OffsetDateTimeField,5,184,        return iMax;,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,53,"        super(field, type);",0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,55,        if (divisor < 2) {,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,59,        DurationField rangeField = field.getDurationField();,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,60,        if (rangeField == null) {,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,63,            iRangeField = new ScaledDurationField(,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,67,        iDivisor = divisor;,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,68,    },0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,77,"        this(dividedField, dividedField.getType());",0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,78,    },0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,88,"        super(dividedField.getWrappedField(), type);",0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,89,        iDivisor = dividedField.iDivisor;,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,90,        iRangeField = dividedField.iDurationField;,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,91,    },0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,149,        return 0;,0.00546,0,,0
org/joda/time/field/RemainderDateTimeField,5,159,        return iDivisor - 1;,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,57,"        super(field, type);",0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,59,        if (divisor < 2) {,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,63,        DurationField unitField = field.getDurationField();,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,64,        if (unitField == null) {,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,67,            iDurationField = new ScaledDurationField(,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,71,        iDivisor = divisor;,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,73,        int i = field.getMinimumValue();,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,74,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,76,        int j = field.getMaximumValue();,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,77,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,79,        iMin = min;,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,80,        iMax = max;,0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,81,    },0.00546,0,,0
org/joda/time/field/DividedDateTimeField,5,183,        return iDurationField;,0.00546,0,,0
org/joda/time/field/PreciseDurationField,5,43,        super(type);,0.00546,0,,0
org/joda/time/field/PreciseDurationField,5,44,        iUnitMillis = unitMillis;,0.00546,0,,0
org/joda/time/field/PreciseDurationField,5,45,    },0.00546,0,,0
org/joda/time/field/PreciseDurationField,5,54,        return true;,0.00546,0,,0
org/joda/time/field/PreciseDurationField,5,63,        return iUnitMillis;,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,49,        super(type);,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,51,        if (!unit.isPrecise()) {,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,55,        iUnitMillis = unit.getUnitMillis();,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,56,        if (iUnitMillis < 1) {,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,60,        iUnitField = unit;,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,61,    },0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,151,        return 0;,0.00546,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,155,        return iUnitMillis;,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,58,"        super(type, unit);",0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,60,        if (!range.isPrecise()) {,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,64,        long rangeMillis = range.getUnitMillis();,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,65,        iRange = (int)(rangeMillis / getUnitMillis());,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,66,        if (iRange < 2) {,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,70,        iRangeField = range;,0.00546,0,,0
org/joda/time/field/PreciseDateTimeField,5,71,    },0.00546,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,46,"        super(field, type);",0.00546,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,47,        if (field.getMinimumValue() != 0) {,0.00546,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,50,    },0.00546,0,,0
org/joda/time/tz/FixedDateTimeZone,5,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,436,        Fields() {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,437,        },0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,445,                if (isSupported(f = chrono.millis())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,446,                    millis = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,448,                if (isSupported(f = chrono.seconds())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,449,                    seconds = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,451,                if (isSupported(f = chrono.minutes())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,452,                    minutes = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,454,                if (isSupported(f = chrono.hours())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,455,                    hours = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,457,                if (isSupported(f = chrono.halfdays())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,458,                    halfdays = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,460,                if (isSupported(f = chrono.days())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,461,                    days = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,463,                if (isSupported(f = chrono.weeks())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,464,                    weeks = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,466,                if (isSupported(f = chrono.weekyears())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,467,                    weekyears = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,469,                if (isSupported(f = chrono.months())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,470,                    months = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,472,                if (isSupported(f = chrono.years())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,473,                    years = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,475,                if (isSupported(f = chrono.centuries())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,476,                    centuries = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,478,                if (isSupported(f = chrono.eras())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,486,                    millisOfSecond = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,489,                    millisOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,492,                    secondOfMinute = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,495,                    secondOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,498,                    minuteOfHour = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,501,                    minuteOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,504,                    hourOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,507,                    clockhourOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,510,                    hourOfHalfday = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,513,                    clockhourOfHalfday = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,516,                    halfdayOfDay = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,519,                    dayOfWeek = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,522,                    dayOfMonth = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,525,                    dayOfYear = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,528,                    weekOfWeekyear = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,530,                if (isSupported(f = chrono.weekyear())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,531,                    weekyear = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,534,                    weekyearOfCentury = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,537,                    monthOfYear = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,539,                if (isSupported(f = chrono.year())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,540,                    year = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,543,                    yearOfEra = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,546,                    yearOfCentury = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,549,                    centuryOfEra = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,551,                if (isSupported(f = chrono.era())) {,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,552,                    era = f;,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,555,        },0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,558,            return field == null ? false : field.isSupported();,0.00546,0,,0
org/joda/time/chrono/AssembledChronology,5,562,            return field == null ? false : field.isSupported();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,131,"        super(base, param);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,139,    },0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,76,        cMillisField = MillisDurationField.INSTANCE;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,77,        cSecondsField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,79,        cMinutesField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,81,        cHoursField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,83,        cHalfdaysField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,85,        cDaysField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,87,        cWeeksField = new PreciseDurationField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,93,        cMillisOfDayField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,99,        cSecondOfDayField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,108,        cHourOfDayField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,120,        cHalfdayOfDayField = new HalfdayField();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,121,    },0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,250,        fields.millis = cMillisField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,251,        fields.seconds = cSecondsField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,252,        fields.minutes = cMinutesField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,253,        fields.hours = cHoursField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,254,        fields.halfdays = cHalfdaysField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,255,        fields.days = cDaysField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,256,        fields.weeks = cWeeksField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,258,        fields.millisOfSecond = cMillisOfSecondField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,259,        fields.millisOfDay = cMillisOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,260,        fields.secondOfMinute = cSecondOfMinuteField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,261,        fields.secondOfDay = cSecondOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,262,        fields.minuteOfHour = cMinuteOfHourField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,263,        fields.minuteOfDay = cMinuteOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,264,        fields.hourOfDay = cHourOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,265,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,266,        fields.clockhourOfDay = cClockhourOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,268,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,273,        fields.year = new BasicYearDateTimeField(this);,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,277,        DateTimeField field = new OffsetDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,279,        fields.centuryOfEra = new DividedDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,282,        field = new RemainderDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,284,        fields.yearOfCentury = new OffsetDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,287,        fields.era = new GJEraDateTimeField(this);,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,288,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,289,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,290,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,291,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,292,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,293,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,295,        field = new RemainderDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,297,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,303,        fields.years = fields.year.getDurationField();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,304,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,305,        fields.months = fields.monthOfYear.getDurationField();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,306,        fields.weekyears = fields.weekyear.getDurationField();,0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,307,    },0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,50,abstract class BasicChronology extends AssembledChronology {,0.00546,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,47,        super(DateTimeFieldType.era());,0.00546,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,48,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,49,    },0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,760,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00546,0,,0
org/joda/time/chrono/BasicChronology,5,761,        },0.00546,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,46,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00546,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,47,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,48,    },0.00546,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,120,        return iChronology.getMaxYear();,0.00546,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,41,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00546,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,42,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,43,    },0.00546,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,94,        return 1;,0.00546,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,98,        return getWrappedField().getMaximumValue();,0.00546,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,46,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00546,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,47,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,48,    },0.00546,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,42,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00546,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,43,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,44,    },0.00546,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,42,"        super(DateTimeFieldType.dayOfYear(), days);",0.00546,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,43,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,44,    },0.00546,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,38,"        super(chronology, 2);",0.00546,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,39,    },0.00546,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,52,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00546,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,53,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,54,        iMax = iChronology.getMaxMonth();,0.00546,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,55,        iLeapMonth = leapMonth;,0.00546,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,56,    },0.00546,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,45,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00546,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,46,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,47,    },0.00546,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,43,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00546,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,44,        iChronology = chronology;,0.00546,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,45,    },0.00546,0,,0
org/joda/time/DateTimeFieldType,5,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,327,        return YEAR_TYPE;,0.00546,0,,0
org/joda/time/DurationFieldType,5,278,            return (1 << iOrdinal);,0.00546,0,,0
org/joda/time/DurationField,5,30,public abstract class DurationField implements Comparable<DurationField> {,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,71,        iType = type;,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,72,    },0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,49,        if (cCache == null) {,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,51,            field = null;,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,53,            field = cCache.get(type);,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,55,        if (field == null) {,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,56,            field = new UnsupportedDurationField(type);,0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,57,"            cCache.put(type, field);",0.00546,0,,0
org/joda/time/field/UnsupportedDurationField,5,59,        return field;,0.00546,0,,0
org/joda/time/DateTimeField,5,33,public abstract class DateTimeField {,0.00546,0,,0
org/joda/time/Chronology,5,63,public abstract class Chronology {,0.00546,0,,0
org/joda/time/chrono/BaseChronology,5,54,        super();,0.00546,0,,0
org/joda/time/chrono/BaseChronology,5,55,    },0.00546,0,,0
org/joda/time/DurationFieldType,5,141,        return HALFDAYS_TYPE;,0.00546,0,,0
org/joda/time/DurationFieldType,5,169,        return WEEKYEARS_TYPE;,0.00546,0,,0
org/joda/time/DurationFieldType,5,196,        return CENTURIES_TYPE;,0.00546,0,,0
org/joda/time/DurationFieldType,5,205,        return ERAS_TYPE;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,153,        super();,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,154,        iName = name;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,155,    },0.00546,0,,0
org/joda/time/DateTimeFieldType,5,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,444,            super(name);,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,445,            iOrdinal = ordinal;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,446,            iUnitType = unitType;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,447,            iRangeType = rangeType;,0.00546,0,,0
org/joda/time/DateTimeFieldType,5,448,        },0.00546,0,,0
org/joda/time/DurationFieldType,5,105,        return MILLIS_TYPE;,0.00533,0,,0
org/joda/time/DurationFieldType,5,178,        return MONTHS_TYPE;,0.00529,0,,0
org/joda/time/DurationFieldType,5,187,        return YEARS_TYPE;,0.00528,0,,0
org/joda/time/DurationFieldType,5,160,        return WEEKS_TYPE;,0.00526,0,,0
org/joda/time/DurationFieldType,5,114,        return SECONDS_TYPE;,0.00525,0,,0
org/joda/time/DurationFieldType,5,123,        return MINUTES_TYPE;,0.00525,0,,0
org/joda/time/DurationFieldType,5,132,        return HOURS_TYPE;,0.00525,0,,0
org/joda/time/DurationFieldType,5,151,        return DAYS_TYPE;,0.00525,0,,0
org/joda/time/DateTimeUtils,5,41,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.0052,0,,0
org/joda/time/DateTimeUtils,5,43,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0052,0,,0
org/joda/time/DateTimeUtils,5,49,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.0052,0,,0
org/joda/time/DateTimeUtils,5,50,"        map.put(""UT"", DateTimeZone.UTC);",0.0052,0,,0
org/joda/time/DateTimeUtils,5,51,"        map.put(""UTC"", DateTimeZone.UTC);",0.0052,0,,0
org/joda/time/DateTimeUtils,5,52,"        map.put(""GMT"", DateTimeZone.UTC);",0.0052,0,,0
org/joda/time/DateTimeUtils,5,53,"        put(map, ""EST"", ""America/New_York"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,54,"        put(map, ""EDT"", ""America/New_York"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,55,"        put(map, ""CST"", ""America/Chicago"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,56,"        put(map, ""CDT"", ""America/Chicago"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,57,"        put(map, ""MST"", ""America/Denver"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,58,"        put(map, ""MDT"", ""America/Denver"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,59,"        put(map, ""PST"", ""America/Los_Angeles"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,60,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.0052,0,,0
org/joda/time/DateTimeUtils,5,61,        cZoneNames = Collections.unmodifiableMap(map);,0.0052,0,,0
org/joda/time/DateTimeUtils,5,62,    },0.0052,0,,0
org/joda/time/DateTimeUtils,5,65,"            map.put(name, DateTimeZone.forID(id));",0.0052,0,,0
org/joda/time/DateTimeUtils,5,68,        },0.0052,0,,0
org/joda/time/DateTimeUtils,5,69,    },0.0052,0,,0
org/joda/time/DateTimeUtils,5,526,    static class SystemMillisProvider implements MillisProvider {,0.0052,0,,0
org/joda/time/DurationFieldType,5,94,        super();,0.00492,0,,0
org/joda/time/DurationFieldType,5,95,        iName = name;,0.00492,0,,0
org/joda/time/DurationFieldType,5,96,    },0.00492,0,,0
org/joda/time/DurationFieldType,5,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00492,0,,0
org/joda/time/DurationFieldType,5,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00492,0,,0
org/joda/time/DurationFieldType,5,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00492,0,,0
org/joda/time/DurationFieldType,5,259,            super(name);,0.00492,0,,0
org/joda/time/DurationFieldType,5,260,            iOrdinal = ordinal;,0.00492,0,,0
org/joda/time/DurationFieldType,5,261,        },0.00492,0,,0
org/joda/time/DateTimeZone,5,714,    protected DateTimeZone(String id) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,715,        if (id == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,718,        iID = id;,0.00478,0,,0
org/joda/time/DateTimeZone,5,719,    },0.00478,0,,0
org/joda/time/DateTimeZone,5,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00478,0,,0
org/joda/time/DateTimeZone,5,116,        setProvider0(null);,0.00478,0,,0
org/joda/time/DateTimeZone,5,117,        setNameProvider0(null);,0.00478,0,,0
org/joda/time/DateTimeZone,5,118,    },0.00478,0,,0
org/joda/time/DateTimeZone,5,205,        if (id == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,208,"        if (id.equals(""UTC"")) {",0.00478,0,,0
org/joda/time/DateTimeZone,5,211,        DateTimeZone zone = cProvider.getZone(id);,0.00478,0,,0
org/joda/time/DateTimeZone,5,212,        if (zone != null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,213,            return zone;,0.00478,0,,0
org/joda/time/DateTimeZone,5,443,        if (provider == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,444,            provider = getDefaultProvider();,0.00478,0,,0
org/joda/time/DateTimeZone,5,446,        Set<String> ids = provider.getAvailableIDs();,0.00478,0,,0
org/joda/time/DateTimeZone,5,447,        if (ids == null || ids.size() == 0) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,451,"        if (!ids.contains(""UTC"")) {",0.00478,0,,0
org/joda/time/DateTimeZone,5,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00478,0,,0
org/joda/time/DateTimeZone,5,457,        cProvider = provider;,0.00478,0,,0
org/joda/time/DateTimeZone,5,458,        cAvailableIDs = ids;,0.00478,0,,0
org/joda/time/DateTimeZone,5,459,    },0.00478,0,,0
org/joda/time/DateTimeZone,5,471,        Provider provider = null;,0.00478,0,,0
org/joda/time/DateTimeZone,5,474,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");",0.00478,0,,0
org/joda/time/DateTimeZone,5,475,            if (providerClass != null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,484,        },0.00478,0,,0
org/joda/time/DateTimeZone,5,486,        if (provider == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,488,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00478,0,,0
org/joda/time/DateTimeZone,5,491,            },0.00478,0,,0
org/joda/time/DateTimeZone,5,494,        if (provider == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,498,        return provider;,0.00478,0,,0
org/joda/time/DateTimeZone,5,539,        if (nameProvider == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,540,            nameProvider = getDefaultNameProvider();,0.00478,0,,0
org/joda/time/DateTimeZone,5,542,        cNameProvider = nameProvider;,0.00478,0,,0
org/joda/time/DateTimeZone,5,543,    },0.00478,0,,0
org/joda/time/DateTimeZone,5,554,        NameProvider nameProvider = null;,0.00478,0,,0
org/joda/time/DateTimeZone,5,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00478,0,,0
org/joda/time/DateTimeZone,5,557,            if (providerClass != null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,566,        },0.00478,0,,0
org/joda/time/DateTimeZone,5,568,        if (nameProvider == null) {,0.00478,0,,0
org/joda/time/DateTimeZone,5,569,            nameProvider = new DefaultNameProvider();,0.00478,0,,0
org/joda/time/DateTimeZone,5,572,        return nameProvider;,0.00478,0,,0
org/joda/time/DateTimeZone,5,731,        return iID;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,95,        if (in instanceof DataInput) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,110,        switch (in.readUnsignedByte()) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,183,        int v = in.readUnsignedByte();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,184,        switch (v >> 6) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,188,            return v * (30 * 60000L);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,193,            v |= (in.readUnsignedByte()) << 16;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,194,            v |= (in.readUnsignedByte()) << 8;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,195,            v |= (in.readUnsignedByte());,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,196,            return v * 60000L;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,201,            w |= (in.readUnsignedByte()) << 24;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,202,            w |= (in.readUnsignedByte()) << 16;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,203,            w |= (in.readUnsignedByte()) << 8;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,204,            w |= (in.readUnsignedByte());,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,205,            return w * 1000L;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,209,            return in.readLong();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1503,            super(id);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1504,            iTransitions = transitions;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1505,            iWallOffsets = wallOffsets;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1506,            iStandardOffsets = standardOffsets;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1507,            iNameKeys = nameKeys;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1508,            iTailZone = tailZone;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1509,        },0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1344,            int poolSize = in.readUnsignedShort();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1345,            String[] pool = new String[poolSize];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1346,            for (int i=0; i<poolSize; i++) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1347,                pool[i] = in.readUTF();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1350,            int size = in.readInt();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1351,            long[] transitions = new long[size];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1352,            int[] wallOffsets = new int[size];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1353,            int[] standardOffsets = new int[size];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1354,            String[] nameKeys = new String[size];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1356,            for (int i=0; i<size; i++) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1357,                transitions[i] = readMillis(in);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1358,                wallOffsets[i] = (int)readMillis(in);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1359,                standardOffsets[i] = (int)readMillis(in);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1362,                    if (poolSize < 256) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1363,                        index = in.readUnsignedByte();,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1367,                    nameKeys[i] = pool[index];,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1370,                },0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1373,            DSTZone tailZone = null;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1374,            if (in.readBoolean()) {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1375,"                tailZone = DSTZone.readFrom(in, id);",0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1378,            return new PrecalculatedZone,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,87,        super(zone.getID());,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,84,    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,88,        iZone = zone;,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,89,    },0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,42,        },0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,45,        if (i == null) {,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,48,            cacheSize = 512; // (1 << 9),0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,61,        cInfoCacheMask = cacheSize - 1;,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,62,    },0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,68,        if (zone instanceof CachedDateTimeZone) {,0.00478,0,,0
org/joda/time/tz/CachedDateTimeZone,5,71,        return new CachedDateTimeZone(zone);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1179,            super(id);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1180,            iStandardOffset = standardOffset;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1181,            iStartRecurrence = startRecurrence;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1182,            iEndRecurrence = endRecurrence;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1183,        },0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1169,"            return new DSTZone(id, (int)readMillis(in), ",0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,38,        super(id);,0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,39,        iNameKey = nameKey;,0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,40,        iWallOffset = wallOffset;,0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,41,        iStandardOffset = standardOffset;,0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,42,    },0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,88,        if (this == obj) {,0.00478,0,,0
org/joda/time/tz/FixedDateTimeZone,5,89,            return true;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,504,        {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,509,            iMode = mode;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,510,            iMonthOfYear = monthOfYear;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,511,            iDayOfMonth = dayOfMonth;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,512,            iDayOfWeek = dayOfWeek;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,513,            iAdvance = advanceDayOfWeek;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,514,            iMillisOfDay = millisOfDay;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,515,        },0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,82,"        this(resourcePath, null, false);",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,83,    },0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,106,    {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,107,        if (resourcePath == null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,110,"        if (!resourcePath.endsWith(""/"")) {",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,111,            resourcePath += '/';,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,114,        iFileDir = null;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,115,        iResourcePath = resourcePath;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,117,        if (loader == null && !favorSystemLoader) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,118,            loader = getClass().getClassLoader();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,121,        iLoader = loader;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,124,    },0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,135,        if (id == null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,139,        Object obj = iZoneInfoMap.get(id);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,140,        if (obj == null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,144,        if (id.equals(obj)) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,146,            return loadZoneData(id);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,149,        if (obj instanceof SoftReference<?>) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,151,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,152,            DateTimeZone tz = ref.get();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,153,            if (tz != null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,154,                return tz;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,173,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,195,        if (iFileDir != null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,198,            String path = iResourcePath.concat(name);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,199,            if (iLoader != null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,200,                in = iLoader.getResourceAsStream(path);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,204,            if (in == null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,213,        return in;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,223,        InputStream in = null;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,225,            in = openResource(id);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,226,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,227,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,228,            return tz;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,235,                if (in != null) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,236,                    in.close();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,239,            },0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,251,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,252,        DataInputStream din = new DataInputStream(in);,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,254,"            readZoneInfoMap(din, map);",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,257,                din.close();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,259,            },0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,261,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,262,        return map;,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,273,        int size = din.readUnsignedShort();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,274,        String[] pool = new String[size];,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,275,        for (int i=0; i<size; i++) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,276,            pool[i] = din.readUTF().intern();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,280,        size = din.readUnsignedShort();,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,281,        for (int i=0; i<size; i++) {,0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,283,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,286,            },0.00478,0,,0
org/joda/time/tz/ZoneInfoProvider,5,288,    },0.00478,0,,0
org/joda/time/tz/DefaultNameProvider,5,39,    public DefaultNameProvider() {,0.00478,0,,0
org/joda/time/tz/DefaultNameProvider,5,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00478,0,,0
org/joda/time/tz/DefaultNameProvider,5,40,    },0.00478,0,,0
org/joda/time/tz/DefaultNameProvider,5,99,        return new HashMap(7);,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,748,            iOfYear = ofYear;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,749,            iNameKey = nameKey;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,750,            iSaveMillis = saveMillis;,0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,751,        },0.00478,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00478,0,,0
org/joda/time/field/BaseDurationField,5,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.00472,0,,0
org/joda/time/field/PreciseDurationField,5,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.00472,0,,0
org/joda/time/field/PreciseDurationField,5,115,        return difference / iUnitMillis;,0.00472,0,,0
org/joda/time/field/FieldUtils,5,100,        long diff = val1 - val2;,0.00448,0,,0
org/joda/time/field/FieldUtils,5,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.00448,0,,0
org/joda/time/field/FieldUtils,5,106,        return diff;,0.00448,0,,0
org/joda/time/DurationFieldType,5,294,                    return chronology.months();,0.00395,0,,0
org/joda/time/DurationFieldType,5,298,                    return chronology.days();,0.00366,0,,0
org/joda/time/field/FieldUtils,5,204,            return (int) value;,0.00366,0,,0
org/joda/time/field/FieldUtils,5,203,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.00358,0,,0
org/joda/time/base/AbstractPeriod,5,68,        return getPeriodType().getFieldType(index);,0.00282,0,,0
org/joda/time/PeriodType,5,628,        return iTypes[index];,0.00282,0,,0
org/joda/time/DurationFieldType,5,282,            chronology = DateTimeUtils.getChronology(chronology);,0.00222,0,,0
org/joda/time/DurationFieldType,5,284,            switch (iOrdinal) {,0.00222,0,,0
org/joda/time/field/PreciseDurationField,5,104,        long addition = value * iUnitMillis;  // safe,0.0018,0,,0
org/joda/time/field/PreciseDurationField,5,105,"        return FieldUtils.safeAdd(instant, addition);",0.0018,0,,0
org/joda/time/field/FieldUtils,5,82,        long sum = val1 + val2;,0.0015,0,,0
org/joda/time/field/FieldUtils,5,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0015,0,,0
org/joda/time/field/FieldUtils,5,88,        return sum;,0.0015,0,,0
org/joda/time/DateTimeUtils,5,571,        OffsetMillisProvider(long offsetMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,572,            iMillis = offsetMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,5,573,        },0.0,0,,0
org/joda/time/DateTimeUtils,5,580,            return System.currentTimeMillis() + iMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,5,75,        super();,0.0,0,,0
org/joda/time/DateTimeUtils,5,76,    },0.0,0,,0
org/joda/time/DateTimeUtils,5,66,        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,88,        return cMillisProvider.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,5,129,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,5,130,        if (offsetMillis == 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,131,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,5,133,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,5,135,    },0.0,0,,0
org/joda/time/DateTimeUtils,5,148,        if (millisProvider == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,149,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,5,151,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,5,152,        cMillisProvider = millisProvider;,0.0,0,,0
org/joda/time/DateTimeUtils,5,153,    },0.0,0,,0
org/joda/time/DateTimeUtils,5,163,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,,0
org/joda/time/DateTimeUtils,5,178,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,179,            return DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,5,181,        return instant.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,5,196,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,197,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,5,199,        Chronology chrono = instant.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,5,200,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,201,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,5,203,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,5,219,        Chronology chrono = null;,0.0,0,,0
org/joda/time/DateTimeUtils,5,220,        if (start != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,221,            chrono = start.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,5,222,        } else if (end != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,223,            chrono = end.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,5,225,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,226,            chrono = ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,5,228,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,5,243,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,244,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,5,246,        Chronology chrono = interval.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,5,247,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,248,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,5,250,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,5,266,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,267,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,5,268,"            interval = new Interval(now, now);",0.0,0,,0
org/joda/time/DateTimeUtils,5,270,        return interval;,0.0,0,,0
org/joda/time/DateTimeUtils,5,301,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,302,            return DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeUtils,5,304,        return zone;,0.0,0,,0
org/joda/time/DateTimeUtils,5,335,        if (duration == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,336,            return 0L;,0.0,0,,0
org/joda/time/DateTimeUtils,5,338,        return duration.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,5,366,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,367,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,5,369,        DurationFieldType lastType = null;,0.0,0,,0
org/joda/time/DateTimeUtils,5,370,        for (int i = 0; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,371,            DateTimeField loopField = partial.getField(i);,0.0,0,,0
org/joda/time/DateTimeUtils,5,372,            if (i > 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,373,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,374,                    return false;,0.0,0,,0
org/joda/time/DateTimeUtils,5,377,            lastType = loopField.getDurationField().getType();,0.0,0,,0
org/joda/time/DateTimeUtils,5,379,        return true;,0.0,0,,0
org/joda/time/DateTimeUtils,5,397,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,,0
org/joda/time/DateTimeUtils,5,398,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,,0
org/joda/time/DateTimeUtils,5,399,        } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,5,400,            return new DateFormatSymbols(locale);,0.0,0,,0
org/joda/time/DateTimeUtils,5,429,        return cZoneNames;,0.0,0,,0
org/joda/time/DateTimeUtils,5,441,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,,0
org/joda/time/DateTimeUtils,5,442,    },0.0,0,,0
org/joda/time/DateTimeUtils,5,468,        double epochDay = epochMillis / 86400000d;,0.0,0,,0
org/joda/time/DateTimeUtils,5,469,        return epochDay + 2440587.5d;,0.0,0,,0
org/joda/time/DateTimeUtils,5,488,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,,0
org/joda/time/DateTimeUtils,5,501,        double epochDay = julianDay - 2440587.5d;,0.0,0,,0
org/joda/time/DateTimeUtils,5,502,        return (long) (epochDay * 86400000d);,0.0,0,,0
org/joda/time/Period,5,312,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,313,    },0.0,0,,0
org/joda/time/Period,5,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0.0,0,,0
org/joda/time/Period,5,353,    },0.0,0,,0
org/joda/time/Period,5,382,        super(duration);,0.0,0,,0
org/joda/time/Period,5,383,    },0.0,0,,0
org/joda/time/Period,5,402,"        super(duration, type, null);",0.0,0,,0
org/joda/time/Period,5,403,    },0.0,0,,0
org/joda/time/Period,5,423,"        super(duration, null, chronology);",0.0,0,,0
org/joda/time/Period,5,424,    },0.0,0,,0
org/joda/time/Period,5,455,"        super(startInstant, endInstant, null, null);",0.0,0,,0
org/joda/time/Period,5,456,    },0.0,0,,0
org/joda/time/Period,5,466,"        super(startInstant, endInstant, type, null);",0.0,0,,0
org/joda/time/Period,5,467,    },0.0,0,,0
org/joda/time/Period,5,478,"        super(startInstant, endInstant, null, chrono);",0.0,0,,0
org/joda/time/Period,5,479,    },0.0,0,,0
org/joda/time/Period,5,490,"        super(startInstant, endInstant, type, chrono);",0.0,0,,0
org/joda/time/Period,5,491,    },0.0,0,,0
org/joda/time/Period,5,509,"        super(startInstant, endInstant, null);",0.0,0,,0
org/joda/time/Period,5,510,    },0.0,0,,0
org/joda/time/Period,5,528,"        super(startInstant, endInstant, type);",0.0,0,,0
org/joda/time/Period,5,529,    },0.0,0,,0
org/joda/time/Period,5,562,"        super(start, end, null);",0.0,0,,0
org/joda/time/Period,5,563,    },0.0,0,,0
org/joda/time/Period,5,596,"        super(start, end, type);",0.0,0,,0
org/joda/time/Period,5,597,    },0.0,0,,0
org/joda/time/Period,5,606,"        super(startInstant, duration, null);",0.0,0,,0
org/joda/time/Period,5,607,    },0.0,0,,0
org/joda/time/Period,5,617,"        super(startInstant, duration, type);",0.0,0,,0
org/joda/time/Period,5,618,    },0.0,0,,0
org/joda/time/Period,5,627,"        super(duration, endInstant, null);",0.0,0,,0
org/joda/time/Period,5,628,    },0.0,0,,0
org/joda/time/Period,5,638,"        super(duration, endInstant, type);",0.0,0,,0
org/joda/time/Period,5,639,    },0.0,0,,0
org/joda/time/Period,5,654,"        super(period, null, null);",0.0,0,,0
org/joda/time/Period,5,655,    },0.0,0,,0
org/joda/time/Period,5,671,"        super(period, type, null);",0.0,0,,0
org/joda/time/Period,5,672,    },0.0,0,,0
org/joda/time/Period,5,688,"        super(period, null, chrono);",0.0,0,,0
org/joda/time/Period,5,689,    },0.0,0,,0
org/joda/time/Period,5,706,"        super(period, type, chrono);",0.0,0,,0
org/joda/time/Period,5,707,    },0.0,0,,0
org/joda/time/Period,5,716,"        super(values, type);",0.0,0,,0
org/joda/time/Period,5,717,    },0.0,0,,0
org/joda/time/Period,5,81,"        return parse(str, ISOPeriodFormat.standard());",0.0,0,,0
org/joda/time/Period,5,92,        return formatter.parsePeriod(str);,0.0,0,,0
org/joda/time/Period,5,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,127,"        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,144,"        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,161,"        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,178,"        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,195,"        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0.0,0,,0
org/joda/time/Period,5,257,        if (start == null || end == null) {,0.0,0,,0
org/joda/time/Period,5,258,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0.0,0,,0
org/joda/time/Period,5,260,        if (start.size() != end.size()) {,0.0,0,,0
org/joda/time/Period,5,261,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,,0
org/joda/time/Period,5,263,        DurationFieldType[] types = new DurationFieldType[start.size()];,0.0,0,,0
org/joda/time/Period,5,264,        int[] values = new int[start.size()];,0.0,0,,0
org/joda/time/Period,5,265,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/Period,5,266,            if (start.getFieldType(i) != end.getFieldType(i)) {,0.0,0,,0
org/joda/time/Period,5,267,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,,0
org/joda/time/Period,5,269,            types[i] = start.getFieldType(i).getDurationType();,0.0,0,,0
org/joda/time/Period,5,270,            if (i > 0 && types[i - 1] == types[i]) {,0.0,0,,0
org/joda/time/Period,5,271,"                throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");",0.0,0,,0
org/joda/time/Period,5,273,            values[i] = end.getValue(i) - start.getValue(i);,0.0,0,,0
org/joda/time/Period,5,275,"        return new Period(values, PeriodType.forFields(types));",0.0,0,,0
org/joda/time/Period,5,727,        return this;,0.0,0,,0
org/joda/time/Period,5,816,        type = DateTimeUtils.getPeriodType(type);,0.0,0,,0
org/joda/time/Period,5,817,        if (type.equals(getPeriodType())) {,0.0,0,,0
org/joda/time/Period,5,818,            return this;,0.0,0,,0
org/joda/time/Period,5,820,"        return new Period(this, type);",0.0,0,,0
org/joda/time/Period,5,834,        if (period == null) {,0.0,0,,0
org/joda/time/Period,5,835,            return this;,0.0,0,,0
org/joda/time/Period,5,837,        int[] newValues = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,838,"        newValues = super.mergePeriodInto(newValues, period);",0.0,0,,0
org/joda/time/Period,5,839,"        return new Period(newValues, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,854,        if (field == null) {,0.0,0,,0
org/joda/time/Period,5,855,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/Period,5,857,        int[] newValues = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,858,"        super.setFieldInto(newValues, field, value);",0.0,0,,0
org/joda/time/Period,5,859,"        return new Period(newValues, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,873,        if (field == null) {,0.0,0,,0
org/joda/time/Period,5,874,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/Period,5,876,        if (value == 0) {,0.0,0,,0
org/joda/time/Period,5,877,            return this;,0.0,0,,0
org/joda/time/Period,5,879,        int[] newValues = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,880,"        super.addFieldInto(newValues, field, value);",0.0,0,,0
org/joda/time/Period,5,881,"        return new Period(newValues, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,897,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,910,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,911,"        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);",0.0,0,,0
org/joda/time/Period,5,912,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,925,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,926,"        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",0.0,0,,0
org/joda/time/Period,5,927,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,940,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,941,"        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);",0.0,0,,0
org/joda/time/Period,5,942,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,955,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,956,"        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",0.0,0,,0
org/joda/time/Period,5,957,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,970,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,971,"        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",0.0,0,,0
org/joda/time/Period,5,972,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,985,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,986,"        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",0.0,0,,0
org/joda/time/Period,5,987,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1000,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1001,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",0.0,0,,0
org/joda/time/Period,5,1002,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1024,        if (period == null) {,0.0,0,,0
org/joda/time/Period,5,1025,            return this;,0.0,0,,0
org/joda/time/Period,5,1027,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1028,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1029,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1030,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1031,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1032,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1033,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));",0.0,0,,0
org/joda/time/Period,5,1034,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1035,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1036,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1050,        if (years == 0) {,0.0,0,,0
org/joda/time/Period,5,1051,            return this;,0.0,0,,0
org/joda/time/Period,5,1053,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1054,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);",0.0,0,,0
org/joda/time/Period,5,1055,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1068,        if (months == 0) {,0.0,0,,0
org/joda/time/Period,5,1069,            return this;,0.0,0,,0
org/joda/time/Period,5,1071,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1072,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);",0.0,0,,0
org/joda/time/Period,5,1073,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1086,        if (weeks == 0) {,0.0,0,,0
org/joda/time/Period,5,1087,            return this;,0.0,0,,0
org/joda/time/Period,5,1089,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1090,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",0.0,0,,0
org/joda/time/Period,5,1091,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1104,        if (days == 0) {,0.0,0,,0
org/joda/time/Period,5,1105,            return this;,0.0,0,,0
org/joda/time/Period,5,1107,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1108,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);",0.0,0,,0
org/joda/time/Period,5,1109,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1122,        if (hours == 0) {,0.0,0,,0
org/joda/time/Period,5,1123,            return this;,0.0,0,,0
org/joda/time/Period,5,1125,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1126,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",0.0,0,,0
org/joda/time/Period,5,1127,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1140,        if (minutes == 0) {,0.0,0,,0
org/joda/time/Period,5,1141,            return this;,0.0,0,,0
org/joda/time/Period,5,1143,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1144,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",0.0,0,,0
org/joda/time/Period,5,1145,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1158,        if (seconds == 0) {,0.0,0,,0
org/joda/time/Period,5,1159,            return this;,0.0,0,,0
org/joda/time/Period,5,1161,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1162,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",0.0,0,,0
org/joda/time/Period,5,1163,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1176,        if (millis == 0) {,0.0,0,,0
org/joda/time/Period,5,1177,            return this;,0.0,0,,0
org/joda/time/Period,5,1179,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1180,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",0.0,0,,0
org/joda/time/Period,5,1181,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1203,        if (period == null) {,0.0,0,,0
org/joda/time/Period,5,1204,            return this;,0.0,0,,0
org/joda/time/Period,5,1206,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1207,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1208,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1209,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1210,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1211,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1212,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));",0.0,0,,0
org/joda/time/Period,5,1213,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1214,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));",0.0,0,,0
org/joda/time/Period,5,1215,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1229,        return plusYears(-years);,0.0,0,,0
org/joda/time/Period,5,1242,        return plusMonths(-months);,0.0,0,,0
org/joda/time/Period,5,1255,        return plusWeeks(-weeks);,0.0,0,,0
org/joda/time/Period,5,1268,        return plusDays(-days);,0.0,0,,0
org/joda/time/Period,5,1281,        return plusHours(-hours);,0.0,0,,0
org/joda/time/Period,5,1294,        return plusMinutes(-minutes);,0.0,0,,0
org/joda/time/Period,5,1307,        return plusSeconds(-seconds);,0.0,0,,0
org/joda/time/Period,5,1320,        return plusMillis(-millis);,0.0,0,,0
org/joda/time/Period,5,1334,        if (this == ZERO || scalar == 1) {,0.0,0,,0
org/joda/time/Period,5,1335,            return this;,0.0,0,,0
org/joda/time/Period,5,1337,        int[] values = getValues();  // cloned,0.0,0,,0
org/joda/time/Period,5,1338,        for (int i = 0; i < values.length; i++) {,0.0,0,,0
org/joda/time/Period,5,1339,"            values[i] = FieldUtils.safeMultiply(values[i], scalar);",0.0,0,,0
org/joda/time/Period,5,1341,"        return new Period(values, getPeriodType());",0.0,0,,0
org/joda/time/Period,5,1352,        return multipliedBy(-1);,0.0,0,,0
org/joda/time/Period,5,1376,"        checkYearsAndMonths(""Weeks"");",0.0,0,,0
org/joda/time/Period,5,1377,        long millis = getMillis();  // assign to a long,0.0,0,,0
org/joda/time/Period,5,1378,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/Period,5,1379,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/Period,5,1380,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/Period,5,1381,        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/Period,5,1382,        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/Period,5,1383,        return Weeks.weeks(FieldUtils.safeToInt(weeks));,0.0,0,,0
org/joda/time/Period,5,1406,"        checkYearsAndMonths(""Days"");",0.0,0,,0
org/joda/time/Period,5,1407,        long millis = getMillis();  // assign to a long,0.0,0,,0
org/joda/time/Period,5,1408,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/Period,5,1409,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/Period,5,1410,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/Period,5,1411,        long days = millis / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/Period,5,1412,"        days = FieldUtils.safeAdd(days, getDays());",0.0,0,,0
org/joda/time/Period,5,1413,"        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));",0.0,0,,0
org/joda/time/Period,5,1414,        return Days.days(FieldUtils.safeToInt(days));,0.0,0,,0
org/joda/time/Period,5,1437,"        checkYearsAndMonths(""Hours"");",0.0,0,,0
org/joda/time/Period,5,1438,        long millis = getMillis();  // assign to a long,0.0,0,,0
org/joda/time/Period,5,1439,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/Period,5,1440,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/Period,5,1441,        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/Period,5,1442,"        hours = FieldUtils.safeAdd(hours, getHours());",0.0,0,,0
org/joda/time/Period,5,1443,"        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));",0.0,0,,0
org/joda/time/Period,5,1444,"        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));",0.0,0,,0
org/joda/time/Period,5,1445,        return Hours.hours(FieldUtils.safeToInt(hours));,0.0,0,,0
org/joda/time/Period,5,1468,"        checkYearsAndMonths(""Minutes"");",0.0,0,,0
org/joda/time/Period,5,1469,        long millis = getMillis();  // assign to a long,0.0,0,,0
org/joda/time/Period,5,1470,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/Period,5,1471,        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/Period,5,1472,"        minutes = FieldUtils.safeAdd(minutes, getMinutes());",0.0,0,,0
org/joda/time/Period,5,1473,"        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));",0.0,0,,0
org/joda/time/Period,5,1474,"        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));",0.0,0,,0
org/joda/time/Period,5,1475,"        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));",0.0,0,,0
org/joda/time/Period,5,1476,        return Minutes.minutes(FieldUtils.safeToInt(minutes));,0.0,0,,0
org/joda/time/Period,5,1499,"        checkYearsAndMonths(""Seconds"");",0.0,0,,0
org/joda/time/Period,5,1500,        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/Period,5,1501,"        seconds = FieldUtils.safeAdd(seconds, getSeconds());",0.0,0,,0
org/joda/time/Period,5,1502,"        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));",0.0,0,,0
org/joda/time/Period,5,1503,"        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));",0.0,0,,0
org/joda/time/Period,5,1504,"        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));",0.0,0,,0
org/joda/time/Period,5,1505,"        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));",0.0,0,,0
org/joda/time/Period,5,1506,        return Seconds.seconds(FieldUtils.safeToInt(seconds));,0.0,0,,0
org/joda/time/Period,5,1529,"        checkYearsAndMonths(""Duration"");",0.0,0,,0
org/joda/time/Period,5,1530,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",0.0,0,,0
org/joda/time/Period,5,1531,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0.0,0,,0
org/joda/time/Period,5,1532,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,0.0,0,,0
org/joda/time/Period,5,1533,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,0.0,0,,0
org/joda/time/Period,5,1534,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0.0,0,,0
org/joda/time/Period,5,1535,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,,0
org/joda/time/Period,5,1536,        return new Duration(millis);,0.0,0,,0
org/joda/time/Period,5,1546,        if (getMonths() != 0) {,0.0,0,,0
org/joda/time/Period,5,1547,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");",0.0,0,,0
org/joda/time/Period,5,1549,        if (getYears() != 0) {,0.0,0,,0
org/joda/time/Period,5,1550,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");",0.0,0,,0
org/joda/time/Period,5,1552,    },0.0,0,,0
org/joda/time/Period,5,1581,        return normalizedStandard(PeriodType.standard());,0.0,0,,0
org/joda/time/Period,5,1633,            if (months != 0) {,0.0,1,,0
org/joda/time/Period,5,1634,                result = result.withMonths(months);,0.0,1,,0
org/joda/time/Period,5,1637,        return result;,0.0,0,,0
org/joda/time/base/BasePeriod,5,106,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,107,        type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,108,        chrono = DateTimeUtils.getChronology(chrono);,0.0,0,,0
org/joda/time/base/BasePeriod,5,109,        iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,110,"        iValues = chrono.get(this, startInstant, endInstant);",0.0,0,,0
org/joda/time/base/BasePeriod,5,111,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,122,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,123,        type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,124,        if (startInstant == null && endInstant == null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,125,            iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,126,            iValues = new int[size()];,0.0,0,,0
org/joda/time/base/BasePeriod,5,128,            long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,129,            long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,130,"            Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",0.0,0,,0
org/joda/time/base/BasePeriod,5,131,            iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,132,"            iValues = chrono.get(this, startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,134,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,155,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,156,        if (start == null || end == null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,157,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0.0,0,,0
org/joda/time/base/BasePeriod,5,159,        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,161,            type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,162,            long startMillis = ((BaseLocal) start).getLocalMillis();,0.0,0,,0
org/joda/time/base/BasePeriod,5,163,            long endMillis = ((BaseLocal) end).getLocalMillis();,0.0,0,,0
org/joda/time/base/BasePeriod,5,164,            Chronology chrono = start.getChronology();,0.0,0,,0
org/joda/time/base/BasePeriod,5,165,            chrono = DateTimeUtils.getChronology(chrono);,0.0,0,,0
org/joda/time/base/BasePeriod,5,166,            iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,167,"            iValues = chrono.get(this, startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,168,        } else {,0.0,0,,0
org/joda/time/base/BasePeriod,5,169,            if (start.size() != end.size()) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,170,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,,0
org/joda/time/base/BasePeriod,5,172,"            for (int i = 0, isize = start.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/BasePeriod,5,173,                if (start.getFieldType(i) != end.getFieldType(i)) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,174,"                    throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,,0
org/joda/time/base/BasePeriod,5,177,            if (DateTimeUtils.isContiguous(start) == false) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,178,"                throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");",0.0,0,,0
org/joda/time/base/BasePeriod,5,180,            iType = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,181,            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,0.0,0,,0
org/joda/time/base/BasePeriod,5,182,"            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",0.0,0,,0
org/joda/time/base/BasePeriod,5,184,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,194,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,195,        type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,196,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,197,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,0.0,0,,0
org/joda/time/base/BasePeriod,5,198,"        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,199,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,200,        iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,201,"        iValues = chrono.get(this, startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,202,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,212,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,213,        type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,214,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,0.0,0,,0
org/joda/time/base/BasePeriod,5,215,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,216,"        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,217,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,218,        iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,219,"        iValues = chrono.get(this, startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,220,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,231,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,235,        iType = PeriodType.standard();,0.0,0,,0
org/joda/time/base/BasePeriod,5,236,"        int[] values = ISOChronology.getInstanceUTC().get(DUMMY_PERIOD, duration);",0.0,0,,0
org/joda/time/base/BasePeriod,5,237,        iValues = new int[8];,0.0,0,,0
org/joda/time/base/BasePeriod,5,238,"        System.arraycopy(values, 0, iValues, 4, 4);",0.0,0,,0
org/joda/time/base/BasePeriod,5,239,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,271,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,272,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,0.0,0,,0
org/joda/time/base/BasePeriod,5,273,        type = (type == null ? converter.getPeriodType(period) : type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,274,        type = checkPeriodType(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,275,        iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,276,        if (this instanceof ReadWritablePeriod) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,277,            iValues = new int[size()];,0.0,0,,0
org/joda/time/base/BasePeriod,5,278,            chrono = DateTimeUtils.getChronology(chrono);,0.0,0,,0
org/joda/time/base/BasePeriod,5,279,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",0.0,0,,0
org/joda/time/base/BasePeriod,5,281,"            iValues = new MutablePeriod(period, type, chrono).getValues();",0.0,0,,0
org/joda/time/base/BasePeriod,5,283,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,293,        super();,0.0,0,,0
org/joda/time/base/BasePeriod,5,294,        iType = type;,0.0,0,,0
org/joda/time/base/BasePeriod,5,295,        iValues = values;,0.0,0,,0
org/joda/time/base/BasePeriod,5,296,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,350,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,351,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,352,"        long endMillis = chrono.add(this, startMillis, 1);",0.0,0,,0
org/joda/time/base/BasePeriod,5,353,"        return new Duration(startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,374,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,375,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,0.0,0,,0
org/joda/time/base/BasePeriod,5,376,"        long startMillis = chrono.add(this, endMillis, -1);",0.0,0,,0
org/joda/time/base/BasePeriod,5,377,"        return new Duration(startMillis, endMillis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,392,            if (newValue != 0) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,393,                throw new IllegalArgumentException(,0.0,0,,0
org/joda/time/base/BasePeriod,5,409,        if (period == null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,410,            setValues(new int[size()]);,0.0,0,,0
org/joda/time/base/BasePeriod,5,412,            setPeriodInternal(period);,0.0,0,,0
org/joda/time/base/BasePeriod,5,414,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,420,        int[] newValues = new int[size()];,0.0,0,,0
org/joda/time/base/BasePeriod,5,421,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/BasePeriod,5,422,            DurationFieldType type = period.getFieldType(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,423,            int value = period.getValue(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,424,"            checkAndUpdate(type, newValues, value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,426,        setValues(newValues);,0.0,0,,0
org/joda/time/base/BasePeriod,5,427,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,444,"        int[] newValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",0.0,0,,0
org/joda/time/base/BasePeriod,5,445,        setValues(newValues);,0.0,0,,0
org/joda/time/base/BasePeriod,5,446,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,474,"        setFieldInto(iValues, field, value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,475,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,486,        int index = indexOf(field);,0.0,0,,0
org/joda/time/base/BasePeriod,5,487,        if (index == -1) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,488,            if (value != 0 || field == null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,489,                throw new IllegalArgumentException(,0.0,0,,0
org/joda/time/base/BasePeriod,5,493,            values[index] = value;,0.0,0,,0
org/joda/time/base/BasePeriod,5,495,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,505,"        addFieldInto(iValues, field, value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,506,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,517,        int index = indexOf(field);,0.0,0,,0
org/joda/time/base/BasePeriod,5,518,        if (index == -1) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,519,            if (value != 0 || field == null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,520,                throw new IllegalArgumentException(,0.0,0,,0
org/joda/time/base/BasePeriod,5,524,"            values[index] = FieldUtils.safeAdd(values[index], value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,526,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,535,        if (period != null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,536,"            setValues(mergePeriodInto(getValues(), period));",0.0,0,,0
org/joda/time/base/BasePeriod,5,538,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,549,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/BasePeriod,5,550,            DurationFieldType type = period.getFieldType(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,551,            int value = period.getValue(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,552,"            checkAndUpdate(type, values, value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,554,        return values;,0.0,0,,0
org/joda/time/base/BasePeriod,5,564,        if (period != null) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,565,"            setValues(addPeriodInto(getValues(), period));",0.0,0,,0
org/joda/time/base/BasePeriod,5,567,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,578,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/BasePeriod,5,579,            DurationFieldType type = period.getFieldType(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,580,            int value = period.getValue(i);,0.0,0,,0
org/joda/time/base/BasePeriod,5,581,            if (value != 0) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,582,                int index = indexOf(type);,0.0,0,,0
org/joda/time/base/BasePeriod,5,583,                if (index == -1) {,0.0,0,,0
org/joda/time/base/BasePeriod,5,584,                    throw new IllegalArgumentException(,0.0,0,,0
org/joda/time/base/BasePeriod,5,587,"                    values[index] = FieldUtils.safeAdd(getValue(index), value);",0.0,0,,0
org/joda/time/base/BasePeriod,5,591,        return values;,0.0,0,,0
org/joda/time/base/BasePeriod,5,603,        iValues[index] = value;,0.0,0,,0
org/joda/time/base/BasePeriod,5,604,    },0.0,0,,0
org/joda/time/base/BasePeriod,5,616,"        System.arraycopy(values, 0, iValues, 0, iValues.length);",0.0,0,,0
org/joda/time/base/BasePeriod,5,617,    },0.0,0,,0
org/joda/time/base/AbstractPeriod,5,79,        DurationFieldType[] result = new DurationFieldType[size()];,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,80,        for (int i = 0; i < result.length; i++) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,81,            result[i] = getFieldType(i);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,83,        return result;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,113,        int index = indexOf(type);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,114,        if (index == -1) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,115,            return 0;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,117,        return getValue(index);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,127,        return getPeriodType().isSupported(type);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,147,        return new Period(this);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,158,        return new MutablePeriod(this);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,183,        if (this == period) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,184,            return true;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,186,        if (period instanceof ReadablePeriod == false) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,187,            return false;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,189,        ReadablePeriod other = (ReadablePeriod) period;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,190,        if (size() != other.size()) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,191,            return false;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,193,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/AbstractPeriod,5,194,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,195,                return false;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,198,        return true;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,207,        int total = 17;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,208,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,,0
org/joda/time/base/AbstractPeriod,5,209,            total = 27 * total + getValue(i);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,210,            total = 27 * total + getFieldType(i).hashCode();,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,212,        return total;,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,228,        return ISOPeriodFormat.standard().print(this);,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,240,        if (formatter == null) {,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,241,            return toString();,0.0,0,,0
org/joda/time/base/AbstractPeriod,5,243,        return formatter.print(this);,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,97,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,102,            return chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,143,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,144,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,146,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,147,            return this;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,149,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,160,"        String str = ""ISOChronology"";",0.0,0,,0
org/joda/time/chrono/ISOChronology,5,161,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,162,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,163,            str = str + '[' + zone.getID() + ']';,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,165,        return str;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,191,        if (this == obj) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,192,            return true;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,194,        if (obj instanceof ISOChronology) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,195,            ISOChronology chrono = (ISOChronology) obj;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,196,            return getZone().equals(chrono.getZone());,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,198,        return false;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,,0
org/joda/time/chrono/ISOChronology,5,217,        return new Stub(getZone());,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,107,        if ((base = iBase) != null) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,108,            return base.getZone();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,110,        return null;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,148,            return base.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,151,        return super.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,389,        in.defaultReadObject();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,390,        setFields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,391,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,5,102,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,132,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,183,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,184,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,185,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,186,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,187,            if (value < field.getMinimumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,188,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,192,            if (value > field.getMaximumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,193,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,199,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,200,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,201,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,203,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,208,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,213,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,5,223,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,224,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,225,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,228,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,242,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,255,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,256,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,257,        if (startInstant != endInstant) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,258,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,261,"                startInstant = field.add(startInstant, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,262,                values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,265,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,301,        if (scalar != 0 && period != null) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,,0
org/joda/time/chrono/BaseChronology,5,304,                if (value != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,309,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,322,        if (duration == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,323,            return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,,0
org/joda/time/chrono/BaseChronology,5,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,,0
org/joda/time/chrono/BaseChronology,5,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,,0
org/joda/time/PeriodType,5,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");",0.0,0,,0
org/joda/time/PeriodType,5,507,"                throw new IllegalArgumentException(""Types array must not contain null"");",0.0,0,,0
org/joda/time/PeriodType,5,533,            return (PeriodType) cached;,0.0,0,,0
org/joda/time/PeriodType,5,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);",0.0,0,,0
org/joda/time/PeriodType,5,544,            type = type.withMonthsRemoved();,0.0,0,,0
org/joda/time/PeriodType,5,547,            type = type.withWeeksRemoved();,0.0,0,,0
org/joda/time/PeriodType,5,550,            type = type.withDaysRemoved();,0.0,0,,0
org/joda/time/PeriodType,5,565,"            cache.put(inPartType, list);",0.0,0,,0
org/joda/time/PeriodType,5,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);",0.0,0,,0
org/joda/time/PeriodType,5,572,"            cache.put(checkPartType, checkedType);",0.0,0,,0
org/joda/time/PeriodType,5,573,            return checkedType;,0.0,0,,0
org/joda/time/PeriodType,5,638,        return (indexOf(type) >= 0);,0.0,0,,0
org/joda/time/PeriodType,5,653,        return -1;,0.0,0,,0
org/joda/time/PeriodType,5,662,"        return ""PeriodType["" + getName() + ""]"";",0.0,0,,0
org/joda/time/PeriodType,5,692,        values[realIndex] = newValue;,0.0,0,,0
org/joda/time/PeriodType,5,693,        return true;,0.0,0,,0
org/joda/time/PeriodType,5,707,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/PeriodType,5,708,            return false;,0.0,0,,0
org/joda/time/PeriodType,5,710,        int realIndex = iIndices[index];,0.0,0,,0
org/joda/time/PeriodType,5,711,        if (realIndex == -1) {,0.0,0,,0
org/joda/time/PeriodType,5,712,"            throw new UnsupportedOperationException(""Field is not supported"");",0.0,0,,0
org/joda/time/PeriodType,5,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);",0.0,0,,0
org/joda/time/PeriodType,5,715,        return true;,0.0,0,,0
org/joda/time/PeriodType,5,734,"        return withFieldRemoved(1, ""NoMonths"");",0.0,0,,0
org/joda/time/PeriodType,5,743,"        return withFieldRemoved(2, ""NoWeeks"");",0.0,0,,0
org/joda/time/PeriodType,5,752,"        return withFieldRemoved(3, ""NoDays"");",0.0,0,,0
org/joda/time/PeriodType,5,801,            return this;,0.0,0,,0
org/joda/time/PeriodType,5,835,        if (this == obj) {,0.0,0,,0
org/joda/time/PeriodType,5,836,            return true;,0.0,0,,0
org/joda/time/PeriodType,5,838,        if (obj instanceof PeriodType == false) {,0.0,0,,0
org/joda/time/PeriodType,5,839,            return false;,0.0,0,,0
org/joda/time/PeriodType,5,841,        PeriodType other = (PeriodType) obj;,0.0,0,,0
org/joda/time/PeriodType,5,842,"        return (Arrays.equals(iTypes, other.iTypes));",0.0,0,,0
org/joda/time/DurationFieldType,5,216,        return iName;,0.0,0,,0
org/joda/time/DurationFieldType,5,234,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DurationFieldType,5,243,        return getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,109,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,110,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,111,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,112,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,113,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,114,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,115,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,116,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,117,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,130,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,131,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,132,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,133,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,134,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,135,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,136,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,137,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,138,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,151,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,152,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,153,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,154,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,155,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,156,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,157,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,158,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,159,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,172,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,173,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,174,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,175,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,176,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,177,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,178,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,179,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,180,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,190,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,191,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,192,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,193,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,194,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,195,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,196,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,197,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,198,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,208,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,209,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,210,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,211,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,212,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,213,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,214,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,215,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,216,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,225,"        super(createMessage(fieldName, value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,226,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,227,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,228,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,229,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,230,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,231,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,232,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,233,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,234,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,5,41,        StringBuilder buf = new StringBuilder(),0.0,0,,0
org/joda/time/IllegalFieldValueException,5,44,        if (lowerBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,45,            if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,46,"                buf.append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,50,        } else if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,53,"            buf.append(""must be in the range ["")",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,59,        if (explain != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,60,"            buf.append("": "").append(explain);",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,63,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,76,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,77,"            buf.append(""null"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,79,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,80,            buf.append(value);,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,81,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,86,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,243,        return iDateTimeFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,252,        return iDurationFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,261,        return iFieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,270,        return iNumberValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,279,        return iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,288,        String value = iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,289,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,290,            value = String.valueOf(iNumberValue);,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,292,        return value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,301,        return iLowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,310,        return iUpperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,314,        return iMessage;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,323,        if (iMessage == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,324,            iMessage = message;,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,325,        } else if (message != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,5,326,"            iMessage = message + "": "" + iMessage;",0.0,0,,0
org/joda/time/IllegalFieldValueException,5,328,    },0.0,0,,0
org/joda/time/DateTimeFieldType,5,378,        return iName;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,410,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,419,        return getName();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,,0
org/joda/time/DurationFieldType,5,272,            return false;,0.0,0,,0
org/joda/time/DurationFieldType,5,286,                    return chronology.eras();,0.0,0,,0
org/joda/time/DurationFieldType,5,288,                    return chronology.centuries();,0.0,0,,0
org/joda/time/DurationFieldType,5,290,                    return chronology.weekyears();,0.0,0,,0
org/joda/time/DurationFieldType,5,292,                    return chronology.years();,0.0,0,,0
org/joda/time/DurationFieldType,5,300,                    return chronology.halfdays();,0.0,0,,0
org/joda/time/DurationFieldType,5,302,                    return chronology.hours();,0.0,0,,0
org/joda/time/DurationFieldType,5,304,                    return chronology.minutes();,0.0,0,,0
org/joda/time/DurationFieldType,5,306,                    return chronology.seconds();,0.0,0,,0
org/joda/time/DurationFieldType,5,308,                    return chronology.millis();,0.0,0,,0
org/joda/time/DurationFieldType,5,311,                    throw new InternalError();,0.0,0,,0
org/joda/time/DurationFieldType,5,321,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DurationFieldType,5,323,                    return ERAS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,325,                    return CENTURIES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,327,                    return WEEKYEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,329,                    return YEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,331,                    return MONTHS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,333,                    return WEEKS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,335,                    return DAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,337,                    return HALFDAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,339,                    return HOURS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,341,                    return MINUTES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,343,                    return SECONDS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,345,                    return MILLIS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,5,348,                    return this;,0.0,0,,0
org/joda/time/DurationField,5,209,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,5,210,"            return subtract(instant, (long) value);",0.0,0,,0
org/joda/time/DurationField,5,212,"        return add(instant, -value);",0.0,0,,0
org/joda/time/DurationField,5,224,        if (value == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,5,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/DurationField,5,227,"        return add(instant, -value);",0.0,0,,0
org/joda/time/JodaTimePermission,5,57,        super(name);,0.0,0,,0
org/joda/time/JodaTimePermission,5,58,    },0.0,0,,0
org/joda/time/DateTimeZone,5,716,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,5,146,                        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,,0
org/joda/time/DateTimeZone,5,152,                    } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,156,                        temp = UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,,0
org/joda/time/DateTimeZone,5,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,5,206,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,5,209,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,5,216,            int offset = parseOffset(id);,0.0,0,,0
org/joda/time/DateTimeZone,5,217,            if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,5,218,                return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,220,                id = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,5,221,"                return fixedOffsetZone(id, offset);",0.0,0,,0
org/joda/time/DateTimeZone,5,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,5,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,,0
org/joda/time/DateTimeZone,5,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,274,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.0,0,,0
org/joda/time/DateTimeZone,5,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,,0
org/joda/time/DateTimeZone,5,279,        if (minutesOffset < -59 || minutesOffset > 59) {,0.0,0,,0
org/joda/time/DateTimeZone,5,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,5,282,        if (hoursOffset > 0 && minutesOffset < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,5,285,        int offset = 0;,0.0,0,,0
org/joda/time/DateTimeZone,5,287,            int hoursInMinutes = hoursOffset * 60;,0.0,0,,0
org/joda/time/DateTimeZone,5,288,            if (hoursInMinutes < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,0.0,0,,0
org/joda/time/DateTimeZone,5,291,                minutesOffset = hoursInMinutes + minutesOffset;,0.0,0,,0
org/joda/time/DateTimeZone,5,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,,0
org/joda/time/DateTimeZone,5,296,        },0.0,0,,0
org/joda/time/DateTimeZone,5,294,        } catch (ArithmeticException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,295,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,,0
org/joda/time/DateTimeZone,5,297,        return forOffsetMillis(offset);,0.0,0,,0
org/joda/time/DateTimeZone,5,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.0,0,,0
org/joda/time/DateTimeZone,5,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,,0
org/joda/time/DateTimeZone,5,310,        String id = printOffset(millisOffset);,0.0,0,,0
org/joda/time/DateTimeZone,5,311,"        return fixedOffsetZone(id, millisOffset);",0.0,0,,0
org/joda/time/DateTimeZone,5,330,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,331,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,5,333,        final String id = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,5,334,"        if (id.equals(""UTC"")) {",0.0,0,,0
org/joda/time/DateTimeZone,5,335,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,339,        DateTimeZone dtz = null;,0.0,0,,0
org/joda/time/DateTimeZone,5,340,        String convId = getConvertedId(id);,0.0,0,,0
org/joda/time/DateTimeZone,5,341,        if (convId != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,342,            dtz = cProvider.getZone(convId);,0.0,0,,0
org/joda/time/DateTimeZone,5,344,        if (dtz == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,345,            dtz = cProvider.getZone(id);,0.0,0,,0
org/joda/time/DateTimeZone,5,347,        if (dtz != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,348,            return dtz;,0.0,0,,0
org/joda/time/DateTimeZone,5,352,        if (convId == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,353,            convId = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,5,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,5,355,                convId = convId.substring(3);,0.0,0,,0
org/joda/time/DateTimeZone,5,356,                int offset = parseOffset(convId);,0.0,0,,0
org/joda/time/DateTimeZone,5,357,                if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,5,358,                    return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,360,                    convId = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,5,361,"                    return fixedOffsetZone(convId, offset);",0.0,0,,0
org/joda/time/DateTimeZone,5,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,5,377,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,378,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,380,        if (iFixedOffsetCache == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,,0
org/joda/time/DateTimeZone,5,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,5,385,        if (ref != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,386,            zone = ref.get();,0.0,0,,0
org/joda/time/DateTimeZone,5,387,            if (zone != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,388,                return zone;,0.0,0,,0
org/joda/time/DateTimeZone,5,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,,0
org/joda/time/DateTimeZone,5,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,,0
org/joda/time/DateTimeZone,5,393,        return zone;,0.0,0,,0
org/joda/time/DateTimeZone,5,402,        return cAvailableIDs;,0.0,0,,0
org/joda/time/DateTimeZone,5,415,        return cProvider;,0.0,0,,0
org/joda/time/DateTimeZone,5,429,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,5,430,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,5,433,        setProvider0(provider);,0.0,0,,0
org/joda/time/DateTimeZone,5,434,    },0.0,0,,0
org/joda/time/DateTimeZone,5,448,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/DateTimeZone,5,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,5,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,,0
org/joda/time/DateTimeZone,5,477,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,5,480,                },0.0,0,,0
org/joda/time/DateTimeZone,5,478,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,479,                    throw new RuntimeException(ex);,0.0,0,,0
org/joda/time/DateTimeZone,5,482,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,489,            } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,490,                ex.printStackTrace();,0.0,0,,0
org/joda/time/DateTimeZone,5,495,            provider = new UTCProvider();,0.0,0,,0
org/joda/time/DateTimeZone,5,511,        return cNameProvider;,0.0,0,,0
org/joda/time/DateTimeZone,5,525,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,5,526,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,5,529,        setNameProvider0(nameProvider);,0.0,0,,0
org/joda/time/DateTimeZone,5,530,    },0.0,0,,0
org/joda/time/DateTimeZone,5,559,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,5,562,                },0.0,0,,0
org/joda/time/DateTimeZone,5,560,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,561,                    throw new RuntimeException(ex);,0.0,0,,0
org/joda/time/DateTimeZone,5,564,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,583,"        Map<String, String> map = cZoneIdConversion;",0.0,0,,0
org/joda/time/DateTimeZone,5,584,        if (map == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,586,"            map = new HashMap<String, String>();",0.0,0,,0
org/joda/time/DateTimeZone,5,587,"            map.put(""GMT"", ""UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,5,588,"            map.put(""WET"", ""WET"");",0.0,0,,0
org/joda/time/DateTimeZone,5,589,"            map.put(""CET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,5,590,"            map.put(""MET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,5,591,"            map.put(""ECT"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,5,592,"            map.put(""EET"", ""EET"");",0.0,0,,0
org/joda/time/DateTimeZone,5,593,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,,0
org/joda/time/DateTimeZone,5,594,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,5,595,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,,0
org/joda/time/DateTimeZone,5,596,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,,0
org/joda/time/DateTimeZone,5,597,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,5,598,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,,0
org/joda/time/DateTimeZone,5,599,"            map.put(""CST"", ""America/Chicago"");",0.0,0,,0
org/joda/time/DateTimeZone,5,600,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,5,601,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,,0
org/joda/time/DateTimeZone,5,602,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,,0
org/joda/time/DateTimeZone,5,603,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,,0
org/joda/time/DateTimeZone,5,604,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,,0
org/joda/time/DateTimeZone,5,605,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,,0
org/joda/time/DateTimeZone,5,606,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,,0
org/joda/time/DateTimeZone,5,607,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,,0
org/joda/time/DateTimeZone,5,608,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,,0
org/joda/time/DateTimeZone,5,609,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,,0
org/joda/time/DateTimeZone,5,610,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,,0
org/joda/time/DateTimeZone,5,611,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,,0
org/joda/time/DateTimeZone,5,612,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,,0
org/joda/time/DateTimeZone,5,613,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,,0
org/joda/time/DateTimeZone,5,614,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,,0
org/joda/time/DateTimeZone,5,615,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,,0
org/joda/time/DateTimeZone,5,616,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,,0
org/joda/time/DateTimeZone,5,617,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,,0
org/joda/time/DateTimeZone,5,618,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,,0
org/joda/time/DateTimeZone,5,619,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,,0
org/joda/time/DateTimeZone,5,620,            cZoneIdConversion = map;,0.0,0,,0
org/joda/time/DateTimeZone,5,622,        return map.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,5,628,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,5,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,,0
org/joda/time/DateTimeZone,5,656,        StringBuffer buf = new StringBuffer();,0.0,0,,0
org/joda/time/DateTimeZone,5,657,        if (offset >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,658,            buf.append('+');,0.0,0,,0
org/joda/time/DateTimeZone,5,660,            buf.append('-');,0.0,0,,0
org/joda/time/DateTimeZone,5,661,            offset = -offset;,0.0,0,,0
org/joda/time/DateTimeZone,5,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,5,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,,0
org/joda/time/DateTimeZone,5,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,5,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,5,669,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,5,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,,0
org/joda/time/DateTimeZone,5,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,5,672,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,673,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,5,676,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,5,677,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,5,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/DateTimeZone,5,679,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,5,680,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,681,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,5,684,        buf.append('.');,0.0,0,,0
org/joda/time/DateTimeZone,5,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,,0
org/joda/time/DateTimeZone,5,686,        return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,5,695,        if (cOffsetFormatter == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/DateTimeZone,5,700,        return cOffsetFormatter;,0.0,0,,0
org/joda/time/DateTimeZone,5,754,"        return getShortName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,5,769,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,770,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,5,772,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,5,773,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,774,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,5,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,5,777,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,778,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,5,780,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,5,794,"        return getName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,5,809,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,810,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,5,812,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,5,813,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,814,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,5,816,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,5,817,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,818,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,5,820,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,5,838,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,839,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/DateTimeZone,5,841,        return getOffset(instant.getMillis());,0.0,0,,0
org/joda/time/DateTimeZone,5,869,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,,0
org/joda/time/DateTimeZone,5,907,        final int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,5,909,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,5,910,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,5,912,        if (offsetLocal != offsetAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,5,915,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,919,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,5,920,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,5,921,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,5,922,                    return offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,5,924,            },0.0,0,,0
org/joda/time/DateTimeZone,5,925,        } else if (offsetLocal >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,926,            long prev = previousTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,5,927,            if (prev < instantAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,5,928,                int offsetPrev = getOffset(prev);,0.0,0,,0
org/joda/time/DateTimeZone,5,929,                int diff = offsetPrev - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,5,930,                if (instantAdjusted - prev <= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,5,931,                    return offsetPrev;,0.0,0,,0
org/joda/time/DateTimeZone,5,935,        return offsetAdjusted;,0.0,0,,0
org/joda/time/DateTimeZone,5,949,        int offset = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,5,950,        long instantLocal = instantUTC + offset;,0.0,0,,0
org/joda/time/DateTimeZone,5,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,5,955,        return instantLocal;,0.0,0,,0
org/joda/time/DateTimeZone,5,976,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,5,977,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,,0
org/joda/time/DateTimeZone,5,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,5,979,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,,0
org/joda/time/DateTimeZone,5,980,            return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,982,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,,0
org/joda/time/DateTimeZone,5,999,        int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,5,1001,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,5,1003,        if (offsetLocal != offset) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1007,            if (strict || offsetLocal < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1009,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,5,1010,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1011,                    nextLocal = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,5,1013,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,,0
org/joda/time/DateTimeZone,5,1014,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1015,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,5,1017,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1019,                    if (strict) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1021,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,,0
org/joda/time/DateTimeZone,5,1026,                        offset = offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,5,1032,        long instantUTC = instantLocal - offset;,0.0,0,,0
org/joda/time/DateTimeZone,5,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,5,1037,        return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,5,1051,        if (newZone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1052,            newZone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,5,1054,        if (newZone == this) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1055,            return oldInstant;,0.0,0,,0
org/joda/time/DateTimeZone,5,1057,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,,0
org/joda/time/DateTimeZone,5,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,,0
org/joda/time/DateTimeZone,5,1168,        if (isFixed()) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1169,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,5,1172,            localDateTime.toDateTime(this);,0.0,0,,0
org/joda/time/DateTimeZone,5,1173,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,5,1174,        } catch (IllegalInstantException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1175,            return true;,0.0,0,,0
org/joda/time/DateTimeZone,5,1190,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,5,1191,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,5,1192,        long offsetBefore = getOffset(instantBefore);,0.0,0,,0
org/joda/time/DateTimeZone,5,1193,        long offsetAfter = getOffset(instantAfter);,0.0,0,,0
org/joda/time/DateTimeZone,5,1194,        if (offsetBefore <= offsetAfter) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,,0
org/joda/time/DateTimeZone,5,1199,        long diff = offsetBefore - offsetAfter;,0.0,0,,0
org/joda/time/DateTimeZone,5,1200,        long transition = nextTransition(instantBefore);,0.0,0,,0
org/joda/time/DateTimeZone,5,1201,        long overlapStart = transition - diff;,0.0,0,,0
org/joda/time/DateTimeZone,5,1202,        long overlapEnd = transition + diff;,0.0,0,,0
org/joda/time/DateTimeZone,5,1203,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1204,          return instant;  // not an overlap,0.0,0,,0
org/joda/time/DateTimeZone,5,1208,        long afterStart = instant - overlapStart;,0.0,0,,0
org/joda/time/DateTimeZone,5,1209,        if (afterStart >= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1211,          return earlierOrLater ? instant : instant - diff;,0.0,0,,0
org/joda/time/DateTimeZone,5,1214,          return earlierOrLater ? instant + diff : instant;,0.0,0,,0
org/joda/time/DateTimeZone,5,1256,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,,0
org/joda/time/DateTimeZone,5,1281,        return getID();,0.0,0,,0
org/joda/time/DateTimeZone,5,1291,        return new Stub(iID);,0.0,0,,0
org/joda/time/DateTimeUtils,5,532,            return System.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeZone,5,628,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,5,631,                return null;,0.0,0,,0
org/joda/time/DateTimeZone,5,634,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,5,637,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,5,640,                return getClass().getName();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,79,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,83,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,101,        return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,110,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,119,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,128,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,137,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,146,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,155,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,164,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,173,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,182,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,191,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,200,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,209,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,227,        return 0;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,238,        if (this == obj) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,239,            return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,242,            if (other.getName() == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,243,                return (getName() == null);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,245,            return (other.getName().equals(getName()));,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,247,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,256,        return getName().hashCode();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,272,        return getInstance(iType);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,5,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,83,        if (type == null || durationField == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,84,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,86,        iType = type;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,87,        iDurationField = durationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,88,    },0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,55,        if (cCache == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,57,            field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,59,            field = cCache.get(type);,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,61,                field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,64,        if (field == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,66,"            cCache.put(type, field);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,68,        return field;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,95,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,99,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,108,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,117,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,126,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,135,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,144,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,153,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,162,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,171,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,180,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,189,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,198,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,207,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,216,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,225,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,234,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,243,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,252,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,261,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,270,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,297,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,306,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,315,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,324,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,333,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,343,        return iDurationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,352,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,361,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,370,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,379,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,388,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,397,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,406,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,415,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,424,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,433,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,442,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,451,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,460,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,469,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,478,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,487,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,496,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,505,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,514,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,523,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,533,"        return ""UnsupportedDateTimeField"";",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,540,"        return getInstance(iType, iDurationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,5,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/DateTimeZone,5,1307,        Stub(String id) {,0.0,0,,0
org/joda/time/DateTimeZone,5,1308,            iID = id;,0.0,0,,0
org/joda/time/DateTimeZone,5,1309,        },0.0,0,,0
org/joda/time/DateTimeZone,5,1312,            out.writeUTF(iID);,0.0,0,,0
org/joda/time/DateTimeZone,5,1313,        },0.0,0,,0
org/joda/time/DateTimeZone,5,1316,            iID = in.readUTF();,0.0,0,,0
org/joda/time/DateTimeZone,5,1317,        },0.0,0,,0
org/joda/time/DateTimeZone,5,1320,            return forID(iID);,0.0,0,,0
org/joda/time/DateTimeFieldType,5,463,            if (this == obj) {,0.0,0,,0
org/joda/time/DateTimeFieldType,5,464,                return true;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,,0
org/joda/time/DateTimeFieldType,5,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,469,            return false;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,475,            return (1 << iOrdinal);,0.0,0,,0
org/joda/time/DateTimeFieldType,5,480,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,,0
org/joda/time/DateTimeFieldType,5,482,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DateTimeFieldType,5,484,                    return chronology.era();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,486,                    return chronology.yearOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,488,                    return chronology.centuryOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,490,                    return chronology.yearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,492,                    return chronology.year();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,494,                    return chronology.dayOfYear();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,496,                    return chronology.monthOfYear();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,498,                    return chronology.dayOfMonth();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,500,                    return chronology.weekyearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,502,                    return chronology.weekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,504,                    return chronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,506,                    return chronology.dayOfWeek();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,508,                    return chronology.halfdayOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,510,                    return chronology.hourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,512,                    return chronology.clockhourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,514,                    return chronology.clockhourOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,516,                    return chronology.hourOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,518,                    return chronology.minuteOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,520,                    return chronology.minuteOfHour();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,522,                    return chronology.secondOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,524,                    return chronology.secondOfMinute();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,526,                    return chronology.millisOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,528,                    return chronology.millisOfSecond();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,531,                    throw new InternalError();,0.0,0,,0
org/joda/time/DateTimeFieldType,5,541,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DateTimeFieldType,5,543,                    return ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,551,                    return YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,561,                    return WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,5,590,                    return this;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,53,"        return ""millis"";",0.0,0,,0
org/joda/time/field/MillisDurationField,5,85,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,5,89,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,93,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,5,97,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,101,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,105,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,109,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,113,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,,0
org/joda/time/field/MillisDurationField,5,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,,0
org/joda/time/field/MillisDurationField,5,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/MillisDurationField,5,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/MillisDurationField,5,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,5,135,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,5,137,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,5,138,            return 0;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,140,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,5,141,            return -1;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,143,            return 1;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,148,        if (obj instanceof MillisDurationField) {,0.0,0,,0
org/joda/time/field/MillisDurationField,5,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,5,151,        return false;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,164,"        return ""DurationField[millis]"";",0.0,0,,0
org/joda/time/field/MillisDurationField,5,171,        return INSTANCE;,0.0,0,,0
org/joda/time/field/MillisDurationField,5,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,72,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,77,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,92,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,97,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,5,119,        return iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,130,        if (this == obj) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,131,            return true;,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,,0
org/joda/time/field/ScaledDurationField,5,138,        return false;,0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,73,        return iField.isPrecise();,0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,81,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,85,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,89,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,93,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,5,101,        return iField.getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,5,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDurationField,5,59,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDurationField,5,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,,0
org/joda/time/field/BaseDurationField,5,91,        return duration / getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,5,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,,0
org/joda/time/field/BaseDurationField,5,123,        return value * getUnitMillis();  // safe,0.0,0,,0
org/joda/time/field/BaseDurationField,5,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,,0
org/joda/time/field/BaseDurationField,5,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,5,147,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,5,149,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,5,150,            return 0;,0.0,0,,0
org/joda/time/field/BaseDurationField,5,152,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,5,153,            return -1;,0.0,0,,0
org/joda/time/field/BaseDurationField,5,155,            return 1;,0.0,0,,0
org/joda/time/field/BaseDurationField,5,165,"        return ""DurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/BaseDurationField,5,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,92,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,119,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,120,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,123,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,124,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,126,                difference++;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,127,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,128,            difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,129,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,131,                difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,132,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,134,        return difference;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,146,        return iUnitMillis;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,62,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,94,"        return getAsText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,106,"        return getAsText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,121,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,153,        return Integer.toString(fieldValue);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,168,"        return getAsShortText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,180,"        return getAsShortText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,195,"        return getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,227,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,253,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,267,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,298,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,299,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,304,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,306,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,307,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,309,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,310,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,311,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,313,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,314,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,326,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,327,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,328,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,330,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,331,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,332,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,334,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,335,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,346,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,379,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,380,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,385,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,387,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,388,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,390,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,391,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,392,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,394,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,395,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,398,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,409,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,410,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,411,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,413,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,414,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,415,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,417,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,418,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,421,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,431,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,461,        int current = get(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,464,"        return set(instant, wrapped);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,495,        int current = values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,586,        values[fieldIndex] = newValue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,590,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,598,        return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,618,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,619,"        return set(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,635,"        return set(instant, text, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,654,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,655,"        return set(instant, fieldIndex, values, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,668,            return Integer.parseInt(text);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,669,        } catch (NumberFormatException ex) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,704,        return false;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,716,        return 0;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,746,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,758,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,772,        return getMinimumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,792,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,804,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,818,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,829,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,830,        if (max >= 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,831,            if (max < 10) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,832,                return 1;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,833,            } else if (max < 100) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,834,                return 2;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,835,            } else if (max < 1000) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,836,                return 3;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,839,        return Integer.toString(max).length();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,850,        return getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,886,        long newInstant = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,887,        if (newInstant != instant) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,888,"            instant = add(newInstant, 1);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,890,        return instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,903,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,904,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,906,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,907,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,911,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,913,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,927,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,928,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,930,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,931,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,935,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,937,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,955,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,956,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,958,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,959,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,963,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,966,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,971,                return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,973,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,994,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,5,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,57,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,60,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,75,        return iField.isLenient();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,79,        return iField.get(instant);,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,83,"        return iField.set(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,95,        return iField.getMinimumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,99,        return iField.getMaximumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,5,103,        return iField.roundFloor(instant);,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,165,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,170,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,175,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,179,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,183,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,187,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,191,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,5,196,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,77,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,85,            iMin = minValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,90,            iMax = maxValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,101,        return super.get(instant) + iOffset;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,113,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,114,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,115,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,127,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,128,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,129,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,141,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,154,"        return super.set(instant, value - iOffset);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,158,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,162,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,166,        return getWrappedField().getLeapDurationField();,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,188,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,192,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,196,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,200,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,204,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,208,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,5,217,        return iOffset;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,56,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,61,            iRangeField = null;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,101,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,102,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,103,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,105,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,119,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,131,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,132,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,133,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,163,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,167,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,171,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,175,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,179,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,183,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,192,        return iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,196,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,197,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,5,199,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,60,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,65,            iDurationField = null;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,91,"        super(remainderField.getWrappedField(), type);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,92,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,93,        iDurationField = remainderField.iRangeField;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,95,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,96,        int i = field.getMinimumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,97,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,99,        int j = field.getMaximumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,100,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,102,        iMin = min;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,103,        iMax = max;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,104,    },0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,113,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,114,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,115,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,117,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,130,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,142,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,154,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,158,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,162,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,174,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,175,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,176,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,192,        return iMin;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,201,        return iMax;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,205,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,206,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,210,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,219,        return iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,223,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,224,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,5,226,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,76,        return duration / iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,88,        return value * iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,5,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,5,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,,0
org/joda/time/field/PreciseDurationField,5,127,        if (this == obj) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,128,            return true;,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,,0
org/joda/time/field/PreciseDurationField,5,133,        return false;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,52,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,57,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,67,        return false;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,79,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,81,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,93,        if (instant >= 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,94,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,96,            instant += 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,97,            return instant - instant % iUnitMillis - iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,110,        if (instant > 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,111,            instant -= 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,112,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,114,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,127,        if (instant >= 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,128,            return instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,130,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,5,164,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,61,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,67,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,80,        if (instant >= 0) {,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,81,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,96,        int thisValue = get(instant);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,97,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,100,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,113,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,132,        return iRange - 1;,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,5,144,        return iRange;,0.0,0,,0
org/joda/time/field/FieldUtils,5,36,        super();,0.0,0,,0
org/joda/time/field/FieldUtils,5,37,    },0.0,0,,0
org/joda/time/field/FieldUtils,5,49,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/field/FieldUtils,5,52,        return -value;,0.0,0,,0
org/joda/time/field/FieldUtils,5,67,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,5,85,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,5,103,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,5,119,        long total = (long) val1 * (long) val2;,0.0,0,,0
org/joda/time/field/FieldUtils,5,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,5,123,        return (int) total;,0.0,0,,0
org/joda/time/field/FieldUtils,5,136,        switch (val2) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,5,141,                return -val1;,0.0,0,,0
org/joda/time/field/FieldUtils,5,143,                return 0L;,0.0,0,,0
org/joda/time/field/FieldUtils,5,145,                return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,5,147,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,5,148,        if (total / val2 != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,5,151,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,5,163,        if (val2 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,164,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,5,166,        if (val1 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,167,            return val2;,0.0,0,,0
org/joda/time/field/FieldUtils,5,169,        if (val1 == 0 || val2 == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,170,            return 0;,0.0,0,,0
org/joda/time/field/FieldUtils,5,172,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,5,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,5,176,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,5,189,        if (dividend == Long.MIN_VALUE && divisor == -1L) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,190,"            throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);",0.0,0,,0
org/joda/time/field/FieldUtils,5,192,        return dividend / divisor;,0.0,0,,0
org/joda/time/field/FieldUtils,5,206,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,,0
org/joda/time/field/FieldUtils,5,218,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,,0
org/joda/time/field/FieldUtils,5,219,        return FieldUtils.safeToInt(val);,0.0,0,,0
org/joda/time/field/FieldUtils,5,233,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,234,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,5,238,    },0.0,0,,0
org/joda/time/field/FieldUtils,5,251,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,252,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,5,256,    },0.0,0,,0
org/joda/time/field/FieldUtils,5,268,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,269,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,5,273,    },0.0,0,,0
org/joda/time/field/FieldUtils,5,292,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,,0
org/joda/time/field/FieldUtils,5,308,        if (minValue >= maxValue) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,309,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,,0
org/joda/time/field/FieldUtils,5,312,        int wrapRange = maxValue - minValue + 1;,0.0,0,,0
org/joda/time/field/FieldUtils,5,313,        value -= minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,5,315,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,316,            return (value % wrapRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,5,319,        int remByRange = (-value) % wrapRange;,0.0,0,,0
org/joda/time/field/FieldUtils,5,321,        if (remByRange == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,322,            return 0 + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,5,324,        return (wrapRange - remByRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,5,337,        if (object1 == object2) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,338,            return true;,0.0,0,,0
org/joda/time/field/FieldUtils,5,340,        if (object1 == null || object2 == null) {,0.0,0,,0
org/joda/time/field/FieldUtils,5,341,            return false;,0.0,0,,0
org/joda/time/field/FieldUtils,5,343,        return object1.equals(object2);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,48,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,53,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,54,        if (value == 0) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,55,            value = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,57,        return value;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,61,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,65,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,69,"        return getWrappedField().addWrapField(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,73,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,77,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,81,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,85,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,86,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,87,        if (value == max) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,88,            value = 0;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,90,"        return getWrappedField().set(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,94,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,98,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,111,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,120,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,129,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,138,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,148,        return getWrappedField().getMaximumValue() + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,158,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,168,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,178,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,182,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,186,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,190,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,194,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,198,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,5,202,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,225,    public DateTimeZoneBuilder() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,227,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,96,"            return readFrom((DataInput)in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,115,                fixed = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,117,            return fixed;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,123,"            throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,142,            long units = millis / (30 * 60000L);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,145,                out.writeByte((int)(units & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,146,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,150,        if (millis % 60000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,152,            long minutes = millis / 60000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,156,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,160,        if (millis % 1000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,162,            long seconds = millis / 1000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,167,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,176,        out.writeLong(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,177,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,217,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,252,        if (iRuleSets.size() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,253,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,258,        iRuleSets.add(new RuleSet());,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,259,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,269,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,277,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,309,        if (fromYear <= toYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,310,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,314,            getLastRuleSet().addRule(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,316,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,320,        if (iRuleSets.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,333,        if (id == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,334,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,343,        DSTZone tailZone = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,345,        long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,346,        int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,348,        int ruleSetCount = iRuleSets.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,351,            Transition next = rs.firstTransition(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,352,            if (next == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,353,                continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,355,"            addTransition(transitions, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,356,            millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,357,            saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,360,            rs = new RuleSet(rs);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,363,"                if (addTransition(transitions, next)) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,364,                    if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,366,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,369,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,370,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,372,                    tailZone = rs.buildTailZone(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,383,        if (transitions.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,384,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,386,                return tailZone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,391,            Transition tr = transitions.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,397,        if (zone.isCachable()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,400,        return zone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,404,        int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,405,        if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,406,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,407,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,410,        Transition last = transitions.get(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,412,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,417,        int offsetForLast = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,418,        if (size >= 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,421,        int offsetForNew = last.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,426,        if (newLocal != lastLocal) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,427,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,428,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,431,        transitions.remove(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,432,"        return addTransition(transitions, tr);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,443,        if (out instanceof DataOutput) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,448,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,475,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1365,                        index = in.readUnsignedShort();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1368,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1369,"                    throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1392,            int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1393,            if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1394,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1397,            long[] trans = new long[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1398,            int[] wallOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1399,            int[] standardOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1400,            String[] nameKeys = new String[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1402,            Transition last = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1403,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1404,                Transition tr = transitions.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1406,                if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1407,                    throw new IllegalArgumentException(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1410,                trans[i] = tr.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1411,                wallOffsets[i] = tr.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1412,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1413,                nameKeys[i] = tr.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1415,                last = tr;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1420,            String[] zoneNameData = new String[5];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1421,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1422,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1423,                String[] set = zoneStrings[j];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1424,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1425,                    zoneNameData = set;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1429,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1431,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1432,                String curNameKey = nameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1433,                String nextNameKey = nameKeys[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1434,                long curOffset = wallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1435,                long nextOffset = wallOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1436,                long curStdOffset = standardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1437,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1438,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1439,                if (curOffset != nextOffset &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1446,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1447,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1448,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1451,                    if (curOffset > nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1452,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1453,                    } else if (curOffset < nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1454,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1455,                        i++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1460,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1461,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1463,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1464,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1467,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1468,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1474,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1483,            return new PrecalculatedZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1512,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1513,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1514,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1515,                return iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1517,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1518,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1519,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1520,                    return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1522,"                return ""UTC"";",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1524,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1525,                return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1527,            return iTailZone.getNameKey(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1531,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1532,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1533,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1534,                return iWallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1536,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1537,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1538,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1539,                    return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1541,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1543,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1544,                return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1546,            return iTailZone.getOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1550,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1551,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1552,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1553,                return iStandardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1555,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1556,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1557,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1558,                    return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1560,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1562,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1563,                return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1565,            return iTailZone.getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1569,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1573,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1574,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1575,            i = (i >= 0) ? (i + 1) : ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1576,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1577,                return transitions[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1579,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1580,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1582,            long end = transitions[transitions.length - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1583,            if (instant < end) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1584,                instant = end;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1586,            return iTailZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1590,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1591,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1592,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1593,                if (instant > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1594,                    return instant - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1596,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1598,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1599,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1600,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1601,                    long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1602,                    if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1603,                        return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1606,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1608,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1609,                long prev = iTailZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1610,                if (prev < instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1611,                    return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1614,            long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1615,            if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1616,                return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1618,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1622,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1623,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1625,            if (obj instanceof PrecalculatedZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1626,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1627,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1637,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1641,            int size = iTransitions.length;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1644,            Set<String> poolSet = new HashSet<String>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1645,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1646,                poolSet.add(iNameKeys[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1649,            int poolSize = poolSet.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1650,            if (poolSize > 65535) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1651,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1653,            String[] pool = new String[poolSize];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1654,            Iterator<String> it = poolSet.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1655,            for (int i=0; it.hasNext(); i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1656,                pool[i] = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1660,            out.writeShort(poolSize);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1661,            for (int i=0; i<poolSize; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1662,                out.writeUTF(pool[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1665,            out.writeInt(size);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1667,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1668,"                writeMillis(out, iTransitions[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1669,"                writeMillis(out, iWallOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1670,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1673,                String nameKey = iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1674,                for (int j=0; j<poolSize; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1675,                    if (pool[j].equals(nameKey)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1676,                        if (poolSize < 256) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1677,                            out.writeByte(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1679,                            out.writeShort(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1681,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1686,            out.writeBoolean(iTailZone != null);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1687,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1688,                iTailZone.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1690,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1693,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1694,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1696,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1697,            if (transitions.length <= 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1698,                return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1703,            double distances = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1704,            int count = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1706,            for (int i=1; i<transitions.length; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1707,                long diff = transitions[i] - transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1708,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1709,                    distances += (double)diff;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1710,                    count++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1714,            if (count > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1715,                double avg = distances / count;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1716,                avg /= 24 * 60 * 60 * 1000;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1717,                if (avg >= 25) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1724,                    return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1728,            return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,40,        } catch (SecurityException e) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,41,            i = null;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,50,            cacheSize = i.intValue();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,52,            cacheSize--;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,53,            int shift = 0;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,54,            while (cacheSize > 0) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,55,                shift++;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,56,                cacheSize >>= 1;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,58,            cacheSize = 1 << shift;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,69,            return (CachedDateTimeZone)zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,95,        return iZone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,99,        return getInfo(instant).getNameKey(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,103,        return getInfo(instant).getOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,111,        return iZone.isFixed();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,115,        return iZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,119,        return iZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,127,        if (this == obj) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,128,            return true;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,133,        return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,140,        int period = (int)(millis >> 32);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,141,        Info[] cache = iInfoCache;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,142,        int index = period & cInfoCacheMask;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,143,        Info info = cache[index];,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,145,            info = createInfo(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,146,            cache[index] = info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,148,        return info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,152,        long periodStart = millis & (0xffffffffL << 32);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,153,"        Info info = new Info(iZone, periodStart);",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,155,        long end = periodStart | 0xffffffffL;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,156,        Info chain = info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,158,            long next = iZone.nextTransition(periodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,159,            if (next == periodStart || next > end) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,160,                break;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,162,            periodStart = next;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,164,        },0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,166,        return info;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1186,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1194,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1198,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1202,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1203,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1204,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1209,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1211,                if (instant > 0 && start < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1213,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1221,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1215,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1217,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1218,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1220,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1224,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1226,                if (instant > 0 && end < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1228,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1236,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1230,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1232,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1233,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1235,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1238,            return (start > end) ? end : start;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1244,            instant++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1246,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1247,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1248,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1253,                start = startRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1255,                if (instant < 0 && start > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1257,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1265,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1259,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1261,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1262,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1264,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1268,                end = endRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1270,                if (instant < 0 && end > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1272,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1280,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1274,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1276,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1277,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1279,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1282,            return ((start > end) ? start : end) - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1286,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1287,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1289,            if (obj instanceof DSTZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1290,                DSTZone other = (DSTZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1291,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1297,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1301,"            writeMillis(out, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1302,            iStartRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1303,            iEndRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1304,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1307,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1308,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1309,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1314,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1322,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1316,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1318,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1319,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1321,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1325,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1333,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1327,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1329,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1330,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1332,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1335,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,45,        return iNameKey;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,49,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,53,        return iStandardOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,57,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,61,        return true;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,65,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,69,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,77,        String id = getID();,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,93,            return,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,5,98,        return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,965,        RuleSet() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,966,            iRules = new ArrayList<Rule>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,967,            iUpperYear = Integer.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,968,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,973,        RuleSet(RuleSet rs) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,974,            iStandardOffset = rs.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,975,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,976,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,977,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,978,            iUpperYear = rs.iUpperYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,979,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,980,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,950,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,951,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,952,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,984,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,988,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,989,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,992,            iInitialNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,993,            iInitialSaveMillis = saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,994,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,997,            if (!iRules.contains(rule)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,998,                iRules.add(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1000,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1003,            iUpperYear = year;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1004,            iUpperOfYear = ofYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1005,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1014,            if (iInitialNameKey != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1016,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1021,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1027,            long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1028,            int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1029,            Transition first = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1032,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1033,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1035,                if (millis == firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1036,"                    first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1037,                    break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1040,                if (millis > firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1041,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1045,                        for (Rule rule : copy) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1046,                            if (rule.getSaveMillis() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1047,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1048,                                break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1050,                        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1052,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1056,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1064,"                first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1066,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1069,            iRules = copy;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1070,            return first;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1085,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1088,            Rule nextRule = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1089,            long nextMillis = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1091,            Iterator<Rule> it = iRules.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1092,            while (it.hasNext()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1093,                Rule rule = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1094,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1095,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1096,                    it.remove();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1097,                    continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1101,                if (next <= nextMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1103,                    nextRule = rule;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1104,                    nextMillis = next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1106,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1108,            if (nextRule == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1109,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1113,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1114,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1118,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1119,                long upperMillis =,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1121,                if (nextMillis >= upperMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1123,                    return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1127,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1134,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1135,                return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1137,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1144,            if (iRules.size() == 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1145,                Rule startRule = iRules.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1146,                Rule endRule = iRules.get(1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1147,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1157,"                    return new DSTZone(id, iStandardOffset,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,1161,            return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,885,"        Transition(long millis, Transition tr) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,886,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,887,            iNameKey = tr.iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,888,            iWallOffset = tr.iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,889,            iStandardOffset = tr.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,890,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,892,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,893,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,894,            iNameKey = rule.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,895,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,896,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,897,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,900,"                   int wallOffset, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,901,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,902,            iNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,903,            iWallOffset = wallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,904,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,905,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,908,            return iMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,912,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,916,            return iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,920,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,924,            return iWallOffset - iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,931,            if (other == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,932,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,934,            return iMillis > other.iMillis &&,0.0,0,,0
org/joda/time/IllegalInstantException,5,53,        super(message);,0.0,0,,0
org/joda/time/IllegalInstantException,5,54,    },0.0,0,,0
org/joda/time/IllegalInstantException,5,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,,0
org/joda/time/IllegalInstantException,5,64,    },0.0,0,,0
org/joda/time/IllegalInstantException,5,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,,0
org/joda/time/IllegalInstantException,5,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,,0
org/joda/time/IllegalInstantException,5,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,,0
org/joda/time/IllegalInstantException,5,80,        if (ex instanceof IllegalInstantException) {,0.0,0,,0
org/joda/time/IllegalInstantException,5,81,            return true;,0.0,0,,0
org/joda/time/IllegalInstantException,5,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,,0
org/joda/time/IllegalInstantException,5,84,            return isIllegalInstant(ex.getCause());,0.0,0,,0
org/joda/time/IllegalInstantException,5,86,        return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,180,"        Info(DateTimeZone zone, long periodStart) {",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,177,        private int iOffset = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,181,            iPeriodStart = periodStart;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,182,            iZoneRef = zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,183,        },0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,187,                if (iNameKey == null) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,190,                return iNameKey;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,192,            return iNextInfo.getNameKey(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,197,                if (iOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,200,                return iOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,202,            return iNextInfo.getOffset(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,210,                return iStandardOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,5,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,817,            iRecurrence = recurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,818,            iFromYear = fromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,819,            iToYear = toYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,820,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,824,            return iFromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,828,            return iToYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,833,            return iRecurrence.getOfYear();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,837,            return iRecurrence.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,841,            return iRecurrence.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,845,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,847,            final int wallOffset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,848,            long testInstant = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,851,            if (instant == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,852,                year = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,854,                year = chrono.year().get(instant + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,857,            if (year < iFromYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,859,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,862,                testInstant -= 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,865,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,867,            if (next > instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,868,                year = chrono.year().get(next + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,869,                if (year > iToYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,871,                    next = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,875,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,522,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,523,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,524,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,525,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,527,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,531,"            long millis = chrono.year().set(0, year);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,536,            if (iDayOfWeek != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,541,            return millis - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,549,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,550,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,551,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,552,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,554,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,558,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,567,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,568,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,569,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,573,"                next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,574,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,575,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,583,            return next - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,591,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,592,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,593,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,594,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,596,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,600,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,609,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,610,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,616,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,625,            return prev - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,629,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,630,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,632,            if (obj instanceof OfYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,633,                OfYear other = (OfYear)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,634,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,642,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,659,            out.writeByte(iMode);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,660,            out.writeByte(iMonthOfYear);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,661,            out.writeByte(iDayOfMonth);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,662,            out.writeByte(iDayOfWeek);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,663,            out.writeBoolean(iAdvance);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,664,"            writeMillis(out, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,665,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,672,"                next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,682,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,673,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,676,"                        next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,680,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,683,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,701,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,692,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,699,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,702,            return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,706,            if (iDayOfMonth >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,713,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,719,            if (daysToAdd != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,720,                if (iAdvance) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,721,                    if (daysToAdd < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,722,                        daysToAdd += 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,725,                    if (daysToAdd > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,726,                        daysToAdd -= 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,731,            return instant;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,57,        if (fileDir == null) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,60,        if (!fileDir.exists()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,63,        if (!fileDir.isDirectory()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,67,        iFileDir = fileDir;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,68,        iResourcePath = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,69,        iLoader = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,72,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,96,"        this(resourcePath, loader, true);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,97,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,136,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,141,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,157,            return loadZoneData(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,161,        return getZone((String)obj);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,182,        ex.printStackTrace();,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,183,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,196,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,202,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,205,                StringBuilder buf = new StringBuilder(40),0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,210,                throw new IOException(buf.toString());,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,238,            } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,229,        } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,230,            uncaughtException(ex);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,231,            iZoneInfoMap.remove(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,232,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,234,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,258,            } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,260,        },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,256,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,284,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,5,285,"                throw new IOException(""Corrupt zone info map"");",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,44,        return nameSet == null ? null : nameSet[0];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,49,        return nameSet == null ? null : nameSet[1];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,54,            return null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,58,        if (byIdCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,63,        if (byNameKeyCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,67,            String[] setEn = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,68,            for (String[] strings : zoneStringsEn) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,70,                setEn = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,71,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,75,            String[] setLoc = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,78,                setLoc = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,79,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,83,            if (setEn != null && setLoc != null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,5,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,754,            return iOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,772,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,776,            return iSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,780,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,781,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,783,            if (obj instanceof Recurrence) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,784,                Recurrence other = (Recurrence)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,785,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,790,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,794,            iOfYear.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,795,            out.writeUTF(iNameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,796,"            writeMillis(out, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,797,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,5,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,,0
org/joda/time/DateTimeUtils,5,556,            return iMillis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,780,"        YearInfo(int year, long firstDayMillis) {",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,781,            iYear = year;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,782,            iFirstDayMillis = firstDayMillis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,783,        },0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,89,        return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,93,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,94,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,96,        if (zone == getParam()) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,97,            return this;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,99,        if (zone == DateTimeZone.UTC) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,100,            return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,102,"        return new ZonedChronology(getBase(), zone);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,109,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,118,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,128,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,138,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,139,        int offset = zone.getOffsetFromLocal(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,140,        localInstant -= offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,141,        if (offset != zone.getOffset(localInstant)) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,142,"            throw new IllegalInstantException(localInstant, zone.getID());",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,144,        return localInstant;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,210,            return field;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,213,            return (DateTimeField)converted.get(field);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,234,        if (this == obj) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,235,            return true;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,237,        if (obj instanceof ZonedChronology == false) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,238,            return false;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,240,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,241,        return,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,389,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,400,            return iField.isLenient();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,404,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,405,            return iField.get(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,409,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,410,"            return iField.getAsText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,414,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,415,"            return iField.getAsShortText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,419,"            return iField.getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,423,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,427,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,428,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,429,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,430,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,432,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,433,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,434,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,439,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,440,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,441,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,442,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,444,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,445,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,446,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,451,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,452,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,453,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,454,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,456,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,457,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,458,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,463,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,464,"            localInstant = iField.set(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,465,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,466,            if (get(result) != value) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,467,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,468,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,469,                ex.initCause(cause);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,470,                throw ex;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,472,            return result;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,477,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,478,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,479,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,483,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,484,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,490,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,491,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,497,            return iDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,501,            return iRangeDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,505,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,506,            return iField.isLeap(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,510,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,511,            return iField.getLeapAmount(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,515,            return iLeapDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,519,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,520,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,521,                instant = iField.roundFloor(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,522,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,524,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,525,                localInstant = iField.roundFloor(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,526,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,531,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,532,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,533,                instant = iField.roundCeiling(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,534,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,536,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,537,                localInstant = iField.roundCeiling(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,538,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,543,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,544,            return iField.remainder(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,548,            return iField.getMinimumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,552,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,553,            return iField.getMinimumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,557,            return iField.getMinimumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,561,"            return iField.getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,565,            return iField.getMaximumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,569,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,570,            return iField.getMaximumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,574,            return iField.getMaximumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,578,"            return iField.getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,582,            return iField.getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,586,            return iField.getMaximumShortTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,590,            int offset = this.iZone.getOffset(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,591,            long sum = instant + offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,593,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,594,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,596,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,283,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,299,"            return iField.getValue(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,307,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,311,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,315,            int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,316,"            instant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,321,            int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,322,"            instant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,327,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,328,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,334,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,335,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,341,            int offset = this.iZone.getOffset(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,342,            long sum = instant + offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,347,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,351,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,352,            long diff = instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,357,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,5,361,            return iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/AssembledChronology,5,479,                    eras = f;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,134,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,144,            return base.getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,153,        if ((base = getBase()) != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,157,        FieldUtils.verifyValueBounds,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,167,        if ((base = getBase()) != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,185,        return iMinDaysInFirstWeek;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,197,        if (this == obj) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,198,            return true;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,200,        if (obj != null && getClass() == obj.getClass()) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,201,            BasicChronology chrono = (BasicChronology) obj;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,205,        return false;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,226,        StringBuilder sb = new StringBuilder(60);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,227,        String name = getClass().getName();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,228,        int index = name.lastIndexOf('.');,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,229,        if (index >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,230,            name = name.substring(index + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,232,        sb.append(name);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,233,        sb.append('[');,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,234,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,235,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,236,            sb.append(zone.getID());,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,238,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,239,"            sb.append("",mdfw="");",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,240,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,242,        sb.append(']');,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,243,        return sb.toString();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,316,        return 366;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,326,        return isLeapYear(year) ? 366 : 365;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,348,        long jan1millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,349,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,351,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,353,            return jan1millis + (8 - jan1dayOfWeek),0.0,0,,0
org/joda/time/chrono/BasicChronology,5,357,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,5,369,        return getYearInfo(year).iFirstDayMillis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,380,        long millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,381,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,382,        return millis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,394,        long millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,395,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,396,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,408,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,409,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,410,        if (i2 < 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,411,            i2 = i2 - unitMillis + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,413,        int year = (int) (i2 / unitMillis);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,415,        long yearStart = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,416,        long diff = instant - yearStart;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,418,        if (diff < 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,419,            year--;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,420,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,423,            if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,424,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,426,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,429,            yearStart += oneYear;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,431,            if (yearStart <= instant) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,433,                year++;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,437,        return year;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,444,"        return getMonthOfYear(millis, getYear(millis));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,457,        int year = getYear(millis);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,458,"        int month = getMonthOfYear(millis, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,459,"        return getDayOfMonth(millis, year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,467,"        int month = getMonthOfYear(millis, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,468,"        return getDayOfMonth(millis, year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,477,        long dateMillis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,478,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,479,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,486,"        return getDayOfYear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,494,        long yearStart = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,495,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,502,        int year = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,503,"        int week = getWeekOfWeekyear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,504,        if (week == 1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,506,        } else if (week > 51) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,509,            return year;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,517,"        return getWeekOfWeekyear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,525,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,526,        if (instant < firstWeekMillis1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,527,            return getWeeksInYear(year - 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,529,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,530,        if (instant >= firstWeekMillis2) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,531,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,533,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,543,        if (instant >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,544,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0,0,,0
org/joda/time/chrono/BasicChronology,5,548,            if (daysSince19700101 < -3) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,553,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,560,        if (instant >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,561,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,5,574,        return 31;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,584,        int thisYear = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,586,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,599,        return getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,614,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,615,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,691,        return getMaxMonth();,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,747,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,748,        if (info == null || info.iYear != year) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,749,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,750,            iYearInfoCache[year & CACHE_MASK] = info;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,752,        return info;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,52,        return false;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,61,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,62,            return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,64,            return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,69,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,81,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,83,        int oldEra = get(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,84,        if (oldEra != era) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,85,            int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,86,"            return iChronology.setYear(instant, -year);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,88,            return instant;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,93,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,97,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,98,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,100,            return Long.MIN_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,105,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,106,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,108,            return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,114,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,119,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,124,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,136,        return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,140,        return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,144,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,5,151,        return iChronology.era();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,112,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,124,                throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,132,                    chrono = new GregorianChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,155,        Chronology base = getBase();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,158,        return base == null ?,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,171,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,181,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,182,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,184,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,185,            return this;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,187,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,202,        int leapYears = year / 100;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,203,        if (year < 0) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,212,            if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,213,                leapYears--;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,221,        return MIN_YEAR;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,233,        return MILLIS_PER_YEAR / 2;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,5,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,93,        return,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,120,        if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,139,        if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,148,        int minuendYear = getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,156,        if (subtrahendRem >= FEB_29) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,158,                if (!isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,166,        int difference = minuendYear - subtrahendYear;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,167,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,168,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,170,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,175,        int thisYear = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,177,        int millisOfDay = getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,180,            if (isLeapYear(thisYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,182,                if (!isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,184,                    dayOfYear--;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,188,                if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,190,                    dayOfYear++;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,196,        instant += millisOfDay;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,5,198,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,764,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/BasicChronology,5,768,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,,0
org/joda/time/chrono/BasicChronology,5,772,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,51,        return false;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,55,        return iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,59,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,60,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,62,        int thisYear = get(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,64,"        return set(instant, newYear);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,68,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,72,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,73,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,76,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,77,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,79,"        return set(instant, wrappedYear);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,83,        FieldUtils.verifyValueBounds,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,85,"        return iChronology.setYear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,89,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,90,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,92,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,100,        return iChronology.isLeapYear(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,104,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,105,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,107,            return 0;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,116,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,124,        return iChronology.getYearMillis(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,128,        int year = get(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,129,        long yearStartMillis = iChronology.getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,130,        if (instant != yearStartMillis) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,132,            instant = iChronology.getYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,134,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,138,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,5,145,        return iChronology.year();,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,46,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,47,        if (year <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,48,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,50,        return year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,54,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,58,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,62,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,66,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,70,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,74,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,86,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,87,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,88,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,90,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,102,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,106,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,110,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,5,117,        return iChronology.yearOfEra();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,57,        return iChronology.getDayOfWeek(instant);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,68,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,79,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,91,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,104,        return DateTimeConstants.MONDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,113,        return DateTimeConstants.SUNDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,123,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,133,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,5,140,        return iChronology.dayOfWeek();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,48,        return iChronology.getDayOfMonth(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,56,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,60,        return iChronology.getDaysInMonthMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,64,        return iChronology.getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,68,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,69,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,70,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,71,                int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,72,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,74,            return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,76,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,80,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,81,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,82,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,83,                int month = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,84,                for (int j = 0; j < size; j++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,85,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,86,                        int year = values[j];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,87,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,90,                return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,93,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,97,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,104,        return iChronology.dayOfMonth();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,53,        return iChronology.getDayOfYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,61,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,65,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,69,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,70,        return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,74,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,75,            int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,76,            return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,78,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,82,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,83,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,84,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,85,                int year = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,86,                return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,89,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,93,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,94,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,5,101,        return iChronology.dayOfYear();,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,43,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,48,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,53,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,58,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,5,63,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,60,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,73,        return iChronology.getMonthOfYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,93,        if (months == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,94,            return instant; // the easy case,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,99,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,104,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,113,        int monthToUse = thisMonth - 1 + months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,114,        if (monthToUse >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,115,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,116,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,118,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,119,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,120,            int remMonthToUse = monthToUse % iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,122,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,123,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,125,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,127,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,128,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,139,        if (dayToUse > maxDay) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,140,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,145,        long datePart =,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,147,        return datePart + timePart;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,152,        int i_months = (int)months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,153,        if (i_months == months) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,154,"            return add(instant, i_months);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,159,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,161,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,162,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,165,        long monthToUse = thisMonth - 1 + months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,166,        if (monthToUse >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,167,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,168,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,170,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,171,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,172,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,173,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,174,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,176,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,177,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,178,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,182,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,185,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,189,        int i_yearToUse = (int)yearToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,190,        int i_monthToUse = (int)monthToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,192,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,193,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,194,        if (dayToUse > maxDay) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,195,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,198,        long datePart =,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,200,        return datePart + timePart;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,207,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,208,            return values;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,210,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,212,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,213,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,214,"            return set(partial, 0, values, newMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,216,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,217,            long instant = 0L;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,218,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,219,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,221,"            instant = add(instant, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,222,"            return iChronology.get(partial, instant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,224,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,239,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,244,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,245,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,248,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,249,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,250,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,251,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,253,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,257,        int minuendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,259,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,261,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,263,            if (subtrahendDom > minuendDom) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,267,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,272,        long minuendRem = minuendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,274,        long subtrahendRem = subtrahendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,277,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,278,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,281,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,301,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,304,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,305,        if (thisDom > maxDom) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,307,            thisDom = maxDom;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,310,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,321,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,322,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,323,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,325,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,330,        return isLeap(instant) ? 1 : 0;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,340,        return MIN;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,345,        return iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,350,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,351,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,352,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,357,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,365,        return iChronology.monthOfYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,50,        return false;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,61,        return iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,73,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,74,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,76,"        return set(instant, get(instant) + years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,80,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,93,"        return add(instant, years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,97,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,98,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,101,        int minuendWeekyear = get(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,102,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,104,        long minuendRem = remainder(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,105,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,108,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,109,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,112,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,113,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,114,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,116,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,134,        int thisWeekyear = get( instant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,135,        if ( thisWeekyear == year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,136,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,141,        int thisDow = iChronology.getDayOfWeek(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,156,        if ( setToWeek > maxOutWeeks ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,157,            setToWeek = maxOutWeeks;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,163,        long workInstant = instant; // Get a copy,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,169,"        workInstant = iChronology.setYear( workInstant, year );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,174,        int workWoyYear = get( workInstant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,180,        if ( workWoyYear < year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,181,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,182,        } else if ( workWoyYear > year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,183,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,205,        return workInstant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,213,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,217,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,225,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,229,        return iChronology.getMaxYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,236,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,237,        if (wow > 1) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,238,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,240,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,244,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,5,251,        return iChronology.weekyear();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,55,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,71,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,76,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,80,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,84,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,88,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,89,        return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,93,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,94,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,95,            return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,97,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,101,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,102,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,103,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,104,                int weekyear = values[i];,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,105,                return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,108,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,112,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,119,        return iChronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,51,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,52,        return year < 0 ? -year : year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,56,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,60,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,64,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,68,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,72,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,76,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,80,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,81,        if (getWrappedField().get(instant) < 0) {,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,82,            year = -year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,84,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,96,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,100,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,104,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,5,111,        return INSTANCE;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,225,        Stub(DateTimeZone zone) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,226,            iZone = zone;,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,227,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,5,230,            return ISOChronology.getInstance(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,234,            out.writeObject(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,235,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,5,240,            iZone = (DateTimeZone)in.readObject();,0.0,0,,0
org/joda/time/chrono/ISOChronology,5,241,        },0.0,0,,0
org/joda/time/base/BasePeriod,5,59,            return 0;,0.0,0,,0
org/joda/time/base/BasePeriod,5,62,            return PeriodType.time();,0.0,0,,0
