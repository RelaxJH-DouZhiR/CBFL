project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.5,1,,0
org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.5,1,,0
org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,0.5,1,,0
org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,0.5,1,,0
org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",0.5,1,,0
org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.5,0,,0
org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0.5,0,,0
org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.5,0,,0
org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0.5,0,,0
org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",0.05882,0,,0
org/joda/time/DateTime,17,333,    },0.05882,0,,0
org/joda/time/DateTime,17,1098,        if (hours == 0) {,0.05,0,,0
org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.05,0,,0
org/joda/time/DateTime,17,1102,        return withMillis(instant);,0.05,0,,0
org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0.01887,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,0.01639,0,,0
org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,0.00862,0,,0
org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.005,0,,0
org/joda/time/chrono/ZonedChronology,17,318,            int offset = getOffsetToAdd(instant);,0.00476,0,,0
org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",0.00476,0,,0
org/joda/time/chrono/ZonedChronology,17,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.00476,0,,0
org/joda/time/base/AbstractInstant,17,424,        return ISODateTimeFormat.dateTime().print(this);,0.00444,0,,0
org/joda/time/chrono/ZonedChronology,17,344,            int offset = this.iZone.getOffset(instant);,0.00383,0,,0
org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,0.00383,0,,0
org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.00383,0,,0
org/joda/time/chrono/ZonedChronology,17,350,            return offset;,0.00383,0,,0
org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0037,0,,0
org/joda/time/base/AbstractInstant,17,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0037,0,,0
org/joda/time/base/AbstractInstant,17,266,        return,0.0037,0,,0
org/joda/time/base/BaseDateTime,17,225,    },0.00339,0,,0
org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.00337,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,0.00275,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,0.00273,0,,0
org/joda/time/DateTimeFieldType,17,522,                    return chronology.secondOfDay();,0.00242,0,,0
org/joda/time/DateTime,17,220,"        super(instant, chronology);",0.00204,0,,0
org/joda/time/DateTime,17,221,    },0.00204,0,,0
org/joda/time/DateTimeUtils,17,167,        Chronology chrono = instant.getChronology();,0.00177,0,,0
org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,0.00177,0,,0
org/joda/time/DateTimeUtils,17,171,        return chrono;,0.00177,0,,0
org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,0.00169,0,,0
org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,0.00166,0,,0
org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,0.00158,0,,0
org/joda/time/chrono/ZonedChronology,17,147,        return instant;,0.00152,0,,0
org/joda/time/chrono/ZonedChronology,17,139,        DateTimeZone zone = getZone();,0.0015,0,,0
org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,0.0015,0,,0
org/joda/time/chrono/ZonedChronology,17,141,        instant -= offset;,0.0015,0,,0
org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,0.0015,0,,0
org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,0.0015,0,,0
org/joda/time/DateTimeFieldType,17,524,                    return chronology.secondOfMinute();,0.00148,0,,0
org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,0.0014,0,,0
org/joda/time/tz/CachedDateTimeZone,17,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0014,0,,0
org/joda/time/tz/CachedDateTimeZone,17,164,        },0.0014,0,,0
org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,0.00139,1,,1
org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,0.00138,1,,1
org/joda/time/DateTimeFieldType,17,498,                    return chronology.dayOfMonth();,0.00136,0,,0
org/joda/time/DateTimeZone,17,882,        final int offsetLocal = getOffset(instantLocal);,0.00136,1,,1
org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,0.00136,0,,0
org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,0.00136,0,,0
org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,0.00136,0,,0
org/joda/time/DateTimeFieldType,17,520,                    return chronology.minuteOfHour();,0.00131,0,,0
org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00129,0,,0
org/joda/time/DateTimeFieldType,17,496,                    return chronology.monthOfYear();,0.00128,0,,0
org/joda/time/DateTimeFieldType,17,516,                    return chronology.hourOfDay();,0.00127,0,,0
org/joda/time/DateTimeFieldType,17,492,                    return chronology.year();,0.00127,0,,0
org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.00125,0,,0
org/joda/time/base/BaseDateTime,17,124,        super();,0.00123,0,,0
org/joda/time/base/BaseDateTime,17,125,        iChronology = checkChronology(chronology);,0.00123,0,,0
org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",0.00123,0,,0
org/joda/time/base/BaseDateTime,17,127,    },0.00123,0,,0
org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,0.00114,0,,0
org/joda/time/chrono/AssembledChronology,17,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00109,0,,0
org/joda/time/DateTimeZone,17,955,            return instantUTC;,0.00104,0,,0
org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,0.00099,0,,0
org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,0.00099,0,,0
org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.00099,0,,0
org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,0.00099,0,,0
org/joda/time/field/PreciseDurationField,17,104,        long addition = value * iUnitMillis;  // safe,0.00096,0,,0
org/joda/time/field/PreciseDurationField,17,105,"        return FieldUtils.safeAdd(instant, addition);",0.00096,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,0.00088,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,0.00088,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1574,                return transitions[i];,0.00088,0,,0
org/joda/time/base/BaseDateTime,17,304,        return iChronology;,0.00087,0,,0
org/joda/time/field/FieldUtils,17,82,        long sum = val1 + val2;,0.00085,0,,0
org/joda/time/field/FieldUtils,17,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.00085,0,,0
org/joda/time/field/FieldUtils,17,88,        return sum;,0.00085,0,,0
org/joda/time/DateTimeFieldType,17,480,            chronology = DateTimeUtils.getChronology(chronology);,0.00084,0,,0
org/joda/time/DateTimeFieldType,17,482,            switch (iOrdinal) {,0.00084,0,,0
org/joda/time/DateTimeZone,17,924,        int offset = getOffset(instantUTC);,0.00078,0,,0
org/joda/time/DateTimeZone,17,925,        long instantLocal = instantUTC + offset;,0.00078,0,,0
org/joda/time/DateTimeZone,17,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.00078,0,,0
org/joda/time/DateTimeZone,17,930,        return instantLocal;,0.00078,0,,0
org/joda/time/base/BaseDateTime,17,295,        return iMillis;,0.00072,0,,0
org/joda/time/field/PreciseDateTimeField,17,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0007,0,,0
org/joda/time/chrono/BasicChronology,17,435,"        return getMonthOfYear(millis, getYear(millis));",0.00066,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,72,        return iChronology.getMonthOfYear(instant);,0.00066,0,,0
org/joda/time/chrono/GregorianChronology,17,213,                leapYears--;,0.00064,0,,0
org/joda/time/chrono/AssembledChronology,17,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.00061,0,,0
org/joda/time/chrono/BasicChronology,17,167,        if ((base = getBase()) != null) {,0.00056,0,,0
org/joda/time/chrono/BasicChronology,17,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.00056,0,,0
org/joda/time/chrono/BasicChronology,17,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.00056,0,,0
org/joda/time/chrono/BasicChronology,17,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.00056,0,,0
org/joda/time/chrono/BasicChronology,17,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.00056,0,,0
org/joda/time/chrono/BasicChronology,17,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,160,                break;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1533,            i = ~i;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1534,            if (i < transitions.length) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,103,        return getInfo(instant).getOffset(instant);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,197,                if (iOffset == Integer.MIN_VALUE) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,200,                return iOffset;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1528,            long[] transitions = iTransitions;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1530,            if (i >= 0) {,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1570,            long[] transitions = iTransitions;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1573,            if (i < transitions.length) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,140,        int period = (int)(millis >> 32);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,141,        Info[] cache = iInfoCache;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,142,        int index = period & cInfoCacheMask;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,143,        Info info = cache[index];,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,145,            info = createInfo(millis);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,146,            cache[index] = info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,148,        return info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,152,        long periodStart = millis & (0xffffffffL << 32);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,153,"        Info info = new Info(iZone, periodStart);",0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,155,        long end = periodStart | 0xffffffffL;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,156,        Info chain = info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,158,            long next = iZone.nextTransition(periodStart);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,159,            if (next == periodStart || next > end) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,166,        return info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,180,"        Info(DateTimeZone zone, long periodStart) {",0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,177,        private int iOffset = Integer.MIN_VALUE;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,181,            iPeriodStart = periodStart;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,182,            iZoneRef = zone;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,17,183,        },0.00056,0,,0
org/joda/time/base/BaseDateTime,17,256,"        iMillis = checkInstant(instant, iChronology);",0.00051,0,,0
org/joda/time/base/BaseDateTime,17,257,    },0.00051,0,,0
org/joda/time/base/BaseDateTime,17,252,        super();,0.00051,0,,0
org/joda/time/base/BaseDateTime,17,253,        iChronology = checkChronology(chronology);,0.00051,0,,0
org/joda/time/base/BaseDateTime,17,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00051,0,,0
org/joda/time/chrono/BasicChronology,17,448,        int year = getYear(millis);,0.00051,0,,0
org/joda/time/chrono/BasicChronology,17,449,"        int month = getMonthOfYear(millis, year);",0.00051,0,,0
org/joda/time/chrono/BasicChronology,17,450,"        return getDayOfMonth(millis, year, month);",0.00051,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,47,        return iChronology.getDayOfMonth(instant);,0.0005,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,54,        return iChronology.getYear(instant);,0.0005,0,,0
org/joda/time/chrono/AssembledChronology,17,107,        if ((base = iBase) != null) {,0.0005,0,,0
org/joda/time/chrono/AssembledChronology,17,108,            return base.getZone();,0.0005,0,,0
org/joda/time/chrono/BasicChronology,17,468,        long dateMillis = getYearMillis(year);,0.0005,0,,0
org/joda/time/chrono/BasicChronology,17,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.0005,0,,0
org/joda/time/chrono/BasicChronology,17,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0005,0,,0
org/joda/time/chrono/BasicGJChronology,17,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.0005,0,,0
org/joda/time/chrono/BasicGJChronology,17,93,        return,0.0005,0,,0
org/joda/time/chrono/BasicChronology,17,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.00049,0,,0
org/joda/time/field/PreciseDateTimeField,17,79,        if (instant >= 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,682,        return getMaxMonth();,0.00049,0,,0
org/joda/time/field/FieldUtils,17,237,    },0.00049,0,,0
org/joda/time/field/FieldUtils,17,232,        if ((value < lowerBound) || (value > upperBound)) {,0.00049,0,,0
org/joda/time/chrono/GregorianChronology,17,233,        return MILLIS_PER_YEAR / 2;,0.00049,0,,0
org/joda/time/chrono/GregorianChronology,17,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.00049,0,,0
org/joda/time/chrono/BasicGJChronology,17,120,        if (isLeapYear(year)) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,401,        if (i2 < 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,404,        int year = (int) (i2 / unitMillis);,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,406,        long yearStart = getYearMillis(year);,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,407,        long diff = instant - yearStart;,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,409,        if (diff < 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,17,428,        return year;,0.00049,0,,0
org/joda/time/chrono/BasicGJChronology,17,139,        if (isLeapYear(year)) {,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,221,        return MIN_YEAR;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,202,        int leapYears = year / 100;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,203,        if (year < 0) {,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,212,            if (isLeapYear(year)) {,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,17,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.00047,0,,0
org/joda/time/base/BaseDateTime,17,284,        return instant;,0.00045,0,,0
org/joda/time/chrono/BasicChronology,17,385,        long millis = getYearMillis(year);,0.00044,0,,0
org/joda/time/chrono/BasicChronology,17,386,"        millis += getTotalMillisByYearMonth(year, month);",0.00044,0,,0
org/joda/time/chrono/BasicChronology,17,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00044,0,,0
org/joda/time/base/BaseDateTime,17,270,        return DateTimeUtils.getChronology(chronology);,0.00044,0,,0
org/joda/time/base/AbstractDateTime,17,51,        super();,0.00044,0,,0
org/joda/time/base/AbstractDateTime,17,52,    },0.00044,0,,0
org/joda/time/chrono/BasicChronology,17,360,        return getYearInfo(year).iFirstDayMillis;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,739,        if (info == null || info.iYear != year) {,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,743,        return info;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,770,"        YearInfo(int year, long firstDayMillis) {",0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,771,            iYear = year;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,772,            iFirstDayMillis = firstDayMillis;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,17,773,        },0.00043,0,,0
org/joda/time/base/AbstractInstant,17,61,        super();,0.00042,0,,0
org/joda/time/base/AbstractInstant,17,62,    },0.00042,0,,0
org/joda/time/chrono/ISOChronology,17,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00039,0,,0
org/joda/time/chrono/ISOChronology,17,108,"                cCache.put(zone, chrono);",0.00039,0,,0
org/joda/time/chrono/ISOChronology,17,96,        if (zone == null) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,100,        ISOChronology chrono = cFastCache[index];,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,101,        if (chrono != null && chrono.getZone() == zone) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,104,        synchronized (cCache) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,105,            chrono = cCache.get(zone);,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,106,            if (chrono == null) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,110,        },0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,111,        cFastCache[index] = chrono;,0.00037,0,,0
org/joda/time/chrono/ISOChronology,17,112,        return chrono;,0.00037,0,,0
org/joda/time/DateTimeUtils,17,255,        return chrono;,0.00037,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00035,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,131,        return null;,0.00035,0,,0
org/joda/time/tz/CachedDateTimeZone,17,123,        return iZone.hashCode();,0.00034,0,,0
org/joda/time/chrono/ISOChronology,17,133,        return INSTANCE_UTC;,0.00034,0,,0
org/joda/time/DateTimeZone,17,1237,        return 57 + getID().hashCode();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,284,            super(field.getType());,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,285,            if (!field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,288,            iField = field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,289,            iTimeField = useTimeArithmetic(field);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,290,            iZone = zone;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,291,        },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,298,            return iField.getUnitMillis();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,82,"        super(base, zone);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,83,    },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,56,        if (base == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,59,        base = base.withUTC();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,60,        if (base == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,63,        if (zone == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,66,"        return new ZonedChronology(base, zone);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,86,        return (DateTimeZone)getParam();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,157,"        fields.eras = convertField(fields.eras, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,158,"        fields.centuries = convertField(fields.centuries, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,159,"        fields.years = convertField(fields.years, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,160,"        fields.months = convertField(fields.months, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,162,"        fields.weeks = convertField(fields.weeks, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,163,"        fields.days = convertField(fields.days, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,166,"        fields.hours = convertField(fields.hours, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,167,"        fields.minutes = convertField(fields.minutes, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,168,"        fields.seconds = convertField(fields.seconds, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,169,"        fields.millis = convertField(fields.millis, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,173,"        fields.year = convertField(fields.year, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,177,"        fields.era = convertField(fields.era, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,197,    },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,200,        if (field == null || !field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,201,            return field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,203,        if (converted.containsKey(field)) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,204,            return (DurationField)converted.get(field);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,207,"        converted.put(field, zonedField);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,208,        return zonedField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,212,        if (field == null || !field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,215,        if (converted.containsKey(field)) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,218,        ZonedDateTimeField zonedField =,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,223,"        converted.put(field, zonedField);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,224,        return zonedField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,389,            super(field.getType());,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,390,            if (!field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,393,            iField = field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,394,            iZone = zone;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,395,            iDurationField = durationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,396,            iTimeField = useTimeArithmetic(durationField);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,397,            iRangeDurationField = rangeDurationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,398,            iLeapDurationField = leapDurationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,17,399,        },0.00034,0,,0
org/joda/time/field/UnsupportedDurationField,17,218,        return 0;,0.00034,0,,0
org/joda/time/field/ScaledDurationField,17,109,        return getWrappedField().getUnitMillis() * iScalar;,0.00034,0,,0
org/joda/time/chrono/AssembledChronology,17,315,        return iParam;,0.00034,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,160,            return iUnitMillis;,0.00033,0,,0
org/joda/time/DateTimeUtils,17,252,        if (chrono == null) {,0.00032,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,111,        return iChronology.days();,0.00032,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,328,        return iChronology.days();,0.00032,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,220,        return iChronology.weeks();,0.00032,0,,0
org/joda/time/field/PreciseDurationField,17,142,        long millis = iUnitMillis;,0.00032,0,,0
org/joda/time/field/PreciseDurationField,17,143,        int hash = (int) (millis ^ (millis >>> 32));,0.00032,0,,0
org/joda/time/field/PreciseDurationField,17,144,        hash += getType().hashCode();,0.00032,0,,0
org/joda/time/field/PreciseDurationField,17,145,        return hash;,0.00032,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,101,        return getWrappedField().getLeapDurationField();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,17,147,        long scalar = iScalar;,0.00032,0,,0
org/joda/time/field/ScaledDurationField,17,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.00032,0,,0
org/joda/time/field/ScaledDurationField,17,149,        hash += getType().hashCode();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,17,150,        hash += getWrappedField().hashCode();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,17,151,        return hash;,0.00032,0,,0
org/joda/time/field/MillisDurationField,17,155,        return (int) getUnitMillis();,0.00032,0,,0
org/joda/time/field/MillisDurationField,17,49,        return DurationFieldType.millis();,0.00032,0,,0
org/joda/time/field/BaseDateTimeField,17,726,        return null;,0.00032,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,94,        return iChronology.weeks();,0.00032,0,,0
org/joda/time/field/DecoratedDateTimeField,17,90,        return iField.getRangeDurationField();,0.00032,0,,0
org/joda/time/field/RemainderDateTimeField,17,139,        return iRangeField;,0.00032,0,,0
org/joda/time/field/DecoratedDurationField,17,69,        return iField;,0.00032,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,208,        return null;,0.00032,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,56,        return iChronology.years();,0.00032,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,58,        return iChronology.weekyears();,0.00032,0,,0
org/joda/time/field/BaseDurationField,17,55,        return iType;,0.00032,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,51,        return iChronology.months();,0.00032,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,309,        return iChronology.years();,0.00032,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,95,        return null;,0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,47,    },0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,87,        return 0;,0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,91,        return getWrappedField().getMaximumValue();,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,122,"        super(base, null);",0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,123,    },0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,68,    },0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00032,0,,0
org/joda/time/chrono/ISOChronology,17,180,    },0.00032,0,,0
org/joda/time/field/PreciseDateTimeField,17,122,        return iRangeField;,0.00032,0,,0
org/joda/time/chrono/GregorianChronology,17,81,        return INSTANCE_UTC;,0.00032,0,,0
org/joda/time/chrono/BasicChronology,17,146,        return DateTimeZone.UTC;,0.00032,0,,0
org/joda/time/chrono/BasicChronology,17,143,        if ((base = getBase()) != null) {,0.00032,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,141,        return iUnitField;,0.00032,0,,0
org/joda/time/chrono/GregorianChronology,17,45,public final class GregorianChronology extends BasicGJChronology {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,148,"        super(base, param, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,149,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,72,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,100,"        return getInstance(zone, 4);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,111,        if (zone == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,115,        synchronized (cCache) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,117,            if (chronos == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,118,                chronos = new GregorianChronology[7];,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,119,"                cCache.put(zone, chronos);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,126,            },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,127,            if (chrono == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,128,                if (zone == DateTimeZone.UTC) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,137,        },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,138,        return chrono;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,191,        if (getBase() == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,192,            super.assemble(fields);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,194,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,225,        return MAX_YEAR;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,229,        return MILLIS_PER_YEAR;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,17,237,        return MILLIS_PER_MONTH;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,17,691,        return 12;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,75,"        super(base, param, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,76,    },0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,56,        long minSum = 0;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,57,        long maxSum = 0;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,58,        for (int i = 0; i < 11; i++) {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,61,            minSum += millis;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,66,            maxSum += millis;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,17,69,    },0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,321,            fields.copyFieldsFrom(iBase);,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,372,            flags = ,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,156,        return iMillis;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,160,        return iMillisOfSecond;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,164,        return iMillisOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,168,        return iSeconds;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,172,        return iSecondOfMinute;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,176,        return iSecondOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,180,        return iMinutes;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,184,        return iMinuteOfHour;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,188,        return iMinuteOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,192,        return iHours;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,196,        return iHourOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,200,        return iClockhourOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,204,        return iHalfdays;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,208,        return iHourOfHalfday;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,212,        return iClockhourOfHalfday;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,216,        return iHalfdayOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,220,        return iDays;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,224,        return iDayOfWeek;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,228,        return iDayOfMonth;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,232,        return iDayOfYear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,236,        return iWeeks;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,240,        return iWeekOfWeekyear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,244,        return iWeekyears;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,248,        return iWeekyear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,252,        return iWeekyearOfCentury;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,256,        return iMonths;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,260,        return iMonthOfYear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,264,        return iYears;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,272,        return iYearOfEra;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,276,        return iYearOfCentury;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,280,        return iCenturies;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,284,        return iCenturyOfEra;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,288,        return iEras;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,292,        return iEra;,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,17,92,        return false;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,445,                if (isSupported(f = chrono.millis())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,446,                    millis = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,448,                if (isSupported(f = chrono.seconds())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,449,                    seconds = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,451,                if (isSupported(f = chrono.minutes())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,452,                    minutes = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,454,                if (isSupported(f = chrono.hours())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,455,                    hours = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,457,                if (isSupported(f = chrono.halfdays())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,458,                    halfdays = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,460,                if (isSupported(f = chrono.days())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,461,                    days = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,463,                if (isSupported(f = chrono.weeks())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,464,                    weeks = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,466,                if (isSupported(f = chrono.weekyears())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,467,                    weekyears = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,469,                if (isSupported(f = chrono.months())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,470,                    months = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,472,                if (isSupported(f = chrono.years())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,473,                    years = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,475,                if (isSupported(f = chrono.centuries())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,476,                    centuries = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,478,                if (isSupported(f = chrono.eras())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,486,                    millisOfSecond = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,489,                    millisOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,492,                    secondOfMinute = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,495,                    secondOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,498,                    minuteOfHour = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,501,                    minuteOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,504,                    hourOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,507,                    clockhourOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,510,                    hourOfHalfday = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,513,                    clockhourOfHalfday = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,516,                    halfdayOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,519,                    dayOfWeek = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,522,                    dayOfMonth = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,525,                    dayOfYear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,528,                    weekOfWeekyear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,530,                if (isSupported(f = chrono.weekyear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,531,                    weekyear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,534,                    weekyearOfCentury = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,537,                    monthOfYear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,539,                if (isSupported(f = chrono.year())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,540,                    year = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,543,                    yearOfEra = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,546,                    yearOfCentury = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,549,                    centuryOfEra = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,551,                if (isSupported(f = chrono.era())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,552,                    era = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,555,        },0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,558,            return field == null ? false : field.isSupported();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,562,            return field == null ? false : field.isSupported();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,17,268,        return iYear;,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,17,53,            field = cCache.get(type);,0.00031,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.0003,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,42,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,43,    },0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,131,"        super(base, param);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,139,    },0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,76,        cMillisField = MillisDurationField.INSTANCE;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,77,        cSecondsField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,79,        cMinutesField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,81,        cHoursField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,83,        cHalfdaysField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,85,        cDaysField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,87,        cWeeksField = new PreciseDurationField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,90,        cMillisOfSecondField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,93,        cMillisOfDayField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,99,        cSecondOfDayField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,102,        cMinuteOfHourField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,105,        cMinuteOfDayField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,108,        cHourOfDayField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,120,        cHalfdayOfDayField = new HalfdayField();,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,121,    },0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,241,        fields.millis = cMillisField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,242,        fields.seconds = cSecondsField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,243,        fields.minutes = cMinutesField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,244,        fields.hours = cHoursField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,245,        fields.halfdays = cHalfdaysField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,246,        fields.days = cDaysField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,247,        fields.weeks = cWeeksField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,249,        fields.millisOfSecond = cMillisOfSecondField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,250,        fields.millisOfDay = cMillisOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,252,        fields.secondOfDay = cSecondOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,253,        fields.minuteOfHour = cMinuteOfHourField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,254,        fields.minuteOfDay = cMinuteOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,255,        fields.hourOfDay = cHourOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,264,        fields.year = new BasicYearDateTimeField(this);,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,268,        DateTimeField field = new OffsetDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,270,        fields.centuryOfEra = new DividedDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,273,        field = new RemainderDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,278,        fields.era = new GJEraDateTimeField(this);,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,286,        field = new RemainderDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,294,        fields.years = fields.year.getDurationField();,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,296,        fields.months = fields.monthOfYear.getDurationField();,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,297,        fields.weekyears = fields.weekyear.getDurationField();,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,298,    },0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,50,abstract class BasicChronology extends AssembledChronology {,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,99,"    protected AssembledChronology(Chronology base, Object param) {",0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,100,        iBase = base;,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,101,        iParam = param;,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,102,        setFields();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,103,    },0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,308,        return iBase;,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,319,        Fields fields = new Fields();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,320,        if (iBase != null) {,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,323,        assemble(fields);,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,369,        if (iBase == null) {,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,370,            flags = 0;,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,385,        iBaseFlags = flags;,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,386,    },0.0003,0,,0
org/joda/time/chrono/BaseChronology,17,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,164,        return MILLIS_OF_SECOND_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,173,        return MILLIS_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,209,        return MINUTE_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,218,        return HOUR_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,236,        return HOUR_OF_HALFDAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,254,        return HALFDAY_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,264,        return DAY_OF_WEEK_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,282,        return DAY_OF_YEAR_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,300,        return WEEKYEAR_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,318,        return MONTH_OF_YEAR_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,336,        return YEAR_OF_ERA_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,345,        return YEAR_OF_CENTURY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,354,        return CENTURY_OF_ERA_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,363,        return ERA_TYPE;,0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.0003,0,,0
org/joda/time/chrono/BasicChronology,17,751,        },0.0003,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.0003,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,46,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,47,    },0.0003,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,119,        return iChronology.getMaxYear();,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,55,        super(type);,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,56,        iUnitMillis = unitMillis;,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,58,    },0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,137,        return iDurationField;,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,151,        LinkedDurationField(DurationFieldType type) {,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,152,            super(type);,0.0003,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,153,        },0.0003,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.0003,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,41,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,42,    },0.0003,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,93,        return 1;,0.0003,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,97,        return getWrappedField().getMaximumValue();,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,54,        super(type);,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,55,        if (field == null) {,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,58,        if (!field.isSupported()) {,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,61,        iField = field;,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,62,    },0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,70,        return iField;,0.0003,0,,0
org/joda/time/field/DecoratedDateTimeField,17,86,        return iField.getDurationField();,0.0003,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.0003,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,52,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,53,        iMax = iChronology.getMaxMonth();,0.0003,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,54,        iLeapMonth = leapMonth;,0.0003,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,55,    },0.0003,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,46,        super(DateTimeFieldType.era());,0.0003,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,47,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,48,    },0.0003,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,37,"        super(chronology, 2);",0.0003,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,38,    },0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,436,        Fields() {,0.0003,0,,0
org/joda/time/chrono/AssembledChronology,17,437,        },0.0003,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.0003,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,45,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,46,    },0.0003,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.0003,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,42,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,43,    },0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,56,"        super(field, type);",0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,58,        if (divisor < 2) {,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,62,        DurationField unitField = field.getDurationField();,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,63,        if (unitField == null) {,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,66,            iDurationField = new ScaledDurationField(,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,70,        iDivisor = divisor;,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,72,        int i = field.getMinimumValue();,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,75,        int j = field.getMaximumValue();,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,78,        iMin = min;,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,79,        iMax = max;,0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,80,    },0.0003,0,,0
org/joda/time/field/DividedDateTimeField,17,182,        return iDurationField;,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,52,"        super(field, type);",0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,54,        if (divisor < 2) {,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,58,        DurationField rangeField = field.getDurationField();,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,59,        if (rangeField == null) {,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,62,            iRangeField = new ScaledDurationField(,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,66,        iDivisor = divisor;,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,67,    },0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,76,"        this(dividedField, dividedField.getType());",0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,77,    },0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,87,"        super(dividedField.getWrappedField(), type);",0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,88,        iDivisor = dividedField.iDivisor;,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,89,        iRangeField = dividedField.iDurationField;,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,90,    },0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,148,        return 0;,0.0003,0,,0
org/joda/time/field/RemainderDateTimeField,17,158,        return iDivisor - 1;,0.0003,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,45,"        super(field, type);",0.0003,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,46,        if (field.getMinimumValue() != 0) {,0.0003,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,49,    },0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,47,    },0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,59,    },0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,73,"        super(field, type);",0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,75,        if (offset == 0) {,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,79,        iOffset = offset;,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,82,            iMin = field.getMinimumValue() + offset;,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,87,            iMax = field.getMaximumValue() + offset;,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,91,    },0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,174,        return iMin;,0.0003,0,,0
org/joda/time/field/OffsetDateTimeField,17,183,        return iMax;,0.0003,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.0003,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,46,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,47,    },0.0003,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.0003,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,43,        iChronology = chronology;,0.0003,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,44,    },0.0003,0,,0
org/joda/time/DateTimeFieldType,17,452,            return iUnitType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,457,            return iRangeType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,273,        return DAY_OF_MONTH_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,327,        return YEAR_TYPE;,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,70,    private UnsupportedDurationField(DurationFieldType type) {,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,71,        iType = type;,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,72,    },0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,49,        if (cCache == null) {,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,51,            field = null;,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,55,        if (field == null) {,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,56,            field = new UnsupportedDurationField(type);,0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,57,"            cCache.put(type, field);",0.0003,0,,0
org/joda/time/field/UnsupportedDurationField,17,59,        return field;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,17,54,        return true;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,200,        return MINUTE_OF_HOUR_TYPE;,0.0003,0,,0
org/joda/time/field/BaseDurationField,17,66,        return true;,0.0003,0,,0
org/joda/time/tz/FixedDateTimeZone,17,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.0003,0,,0
org/joda/time/field/MillisDurationField,17,71,        return true;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,69,        return true;,0.0003,0,,0
org/joda/time/field/MillisDurationField,17,80,        return 1;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,17,63,        return iUnitMillis;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,191,        return SECOND_OF_DAY_TYPE;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,58,        return iType;,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,150,        return 0;,0.0003,0,,0
org/joda/time/Chronology,17,63,public abstract class Chronology {,0.0003,0,,0
org/joda/time/chrono/BaseChronology,17,54,        super();,0.0003,0,,0
org/joda/time/chrono/BaseChronology,17,55,    },0.0003,0,,0
org/joda/time/field/MillisDurationField,17,62,        return true;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,17,43,        super(type);,0.0003,0,,0
org/joda/time/field/PreciseDurationField,17,44,        iUnitMillis = unitMillis;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,17,45,    },0.0003,0,,0
org/joda/time/field/ScaledDurationField,17,47,"        super(field, type);",0.0003,0,,0
org/joda/time/field/ScaledDurationField,17,48,        if (scalar == 0 || scalar == 1) {,0.0003,0,,0
org/joda/time/field/ScaledDurationField,17,51,        iScalar = scalar;,0.0003,0,,0
org/joda/time/field/ScaledDurationField,17,52,    },0.0003,0,,0
org/joda/time/field/DecoratedDurationField,17,52,        super(type);,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,17,53,        if (field == null) {,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,17,56,        if (!field.isSupported()) {,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,17,59,        iField = field;,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,17,60,    },0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,154,        return iUnitMillis;,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,57,"        super(type, unit);",0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,59,        if (!range.isPrecise()) {,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,63,        long rangeMillis = range.getUnitMillis();,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,65,        if (iRange < 2) {,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,69,        iRangeField = range;,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,17,70,    },0.0003,0,,0
org/joda/time/DurationFieldType,17,278,            return (1 << iOrdinal);,0.0003,0,,0
org/joda/time/field/MillisDurationField,17,44,        super();,0.0003,0,,0
org/joda/time/field/MillisDurationField,17,45,    },0.0003,0,,0
org/joda/time/field/MillisDurationField,17,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,48,        super(type);,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,50,        if (!unit.isPrecise()) {,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,54,        iUnitMillis = unit.getUnitMillis();,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,55,        if (iUnitMillis < 1) {,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,59,        iUnitField = unit;,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,60,    },0.0003,0,,0
org/joda/time/DateTimeUtils,17,393,    static class SystemMillisProvider implements MillisProvider {,0.0003,0,,0
org/joda/time/DateTimeUtils,17,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.0003,0,,0
org/joda/time/DateTimeUtils,17,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,182,        return SECOND_OF_MINUTE_TYPE;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,50,        super();,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,51,        if (type == null) {,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,54,        iType = type;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,17,55,    },0.0003,0,,0
org/joda/time/DateTimeField,17,33,public abstract class DateTimeField {,0.0003,0,,0
org/joda/time/DurationFieldType,17,141,        return HALFDAYS_TYPE;,0.0003,0,,0
org/joda/time/DurationFieldType,17,169,        return WEEKYEARS_TYPE;,0.0003,0,,0
org/joda/time/DurationFieldType,17,205,        return ERAS_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,153,        super();,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,154,        iName = name;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,155,    },0.0003,0,,0
org/joda/time/DateTimeFieldType,17,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,444,            super(name);,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,445,            iOrdinal = ordinal;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,446,            iUnitType = unitType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,447,            iRangeType = rangeType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,17,448,        },0.0003,0,,0
org/joda/time/DurationFieldType,17,196,        return CENTURIES_TYPE;,0.00029,0,,0
org/joda/time/field/BaseDurationField,17,47,        super();,0.00029,0,,0
org/joda/time/field/BaseDurationField,17,48,        if (type == null) {,0.00029,0,,0
org/joda/time/field/BaseDurationField,17,51,        iType = type;,0.00029,0,,0
org/joda/time/field/BaseDurationField,17,52,    },0.00029,0,,0
org/joda/time/DurationField,17,30,public abstract class DurationField implements Comparable<DurationField> {,0.00029,0,,0
org/joda/time/DurationFieldType,17,105,        return MILLIS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,178,        return MONTHS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,187,        return YEARS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,160,        return WEEKS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,132,        return HOURS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,151,        return DAYS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,17,114,        return SECONDS_TYPE;,0.00028,0,,0
org/joda/time/DurationFieldType,17,123,        return MINUTES_TYPE;,0.00028,0,,0
org/joda/time/DateTimeZone,17,212,            return zone;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,95,        if (in instanceof DataInput) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,110,        switch (in.readUnsignedByte()) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,183,        int v = in.readUnsignedByte();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,184,        switch (v >> 6) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,188,            return v * (30 * 60000L);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,193,            v |= (in.readUnsignedByte()) << 16;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,194,            v |= (in.readUnsignedByte()) << 8;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,195,            v |= (in.readUnsignedByte());,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,196,            return v * 60000L;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,201,            w |= (in.readUnsignedByte()) << 24;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,202,            w |= (in.readUnsignedByte()) << 16;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,203,            w |= (in.readUnsignedByte()) << 8;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,204,            w |= (in.readUnsignedByte());,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,205,            return w * 1000L;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,209,            return in.readLong();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1500,            super(id);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1501,            iTransitions = transitions;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1502,            iWallOffsets = wallOffsets;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1503,            iStandardOffsets = standardOffsets;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1504,            iNameKeys = nameKeys;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1505,            iTailZone = tailZone;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1506,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1341,            int poolSize = in.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1342,            String[] pool = new String[poolSize];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1343,            for (int i=0; i<poolSize; i++) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1344,                pool[i] = in.readUTF();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1347,            int size = in.readInt();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1348,            long[] transitions = new long[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1349,            int[] wallOffsets = new int[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1350,            int[] standardOffsets = new int[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1351,            String[] nameKeys = new String[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1353,            for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1354,                transitions[i] = readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1355,                wallOffsets[i] = (int)readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1356,                standardOffsets[i] = (int)readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1359,                    if (poolSize < 256) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1360,                        index = in.readUnsignedByte();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1364,                    nameKeys[i] = pool[index];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1367,                },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1370,            DSTZone tailZone = null;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1371,            if (in.readBoolean()) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1375,            return new PrecalculatedZone,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,87,        super(zone.getID());,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,88,        iZone = zone;,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,89,    },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,42,        },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,45,        if (i == null) {,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,48,            cacheSize = 512; // (1 << 9),0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,61,        cInfoCacheMask = cacheSize - 1;,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,62,    },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,68,        if (zone instanceof CachedDateTimeZone) {,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,17,71,        return new CachedDateTimeZone(zone);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1176,            super(id);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1177,            iStandardOffset = standardOffset;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1178,            iStartRecurrence = startRecurrence;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1179,            iEndRecurrence = endRecurrence;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1180,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,504,        {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,509,            iMode = mode;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,510,            iMonthOfYear = monthOfYear;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,511,            iDayOfMonth = dayOfMonth;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,512,            iDayOfWeek = dayOfWeek;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,513,            iAdvance = advanceDayOfWeek;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,514,            iMillisOfDay = millisOfDay;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,515,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,147,            return loadZoneData(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,224,        InputStream in = null;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,226,            in = openResource(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,229,            return tz;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,236,                if (in != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,237,                    in.close();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,240,            },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,748,            iOfYear = ofYear;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,749,            iNameKey = nameKey;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,750,            iSaveMillis = saveMillis;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,751,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00028,0,,0
org/joda/time/DateTimeZone,17,204,        if (id == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,207,"        if (id.equals(""UTC"")) {",0.00028,0,,0
org/joda/time/DateTimeZone,17,210,        DateTimeZone zone = cProvider.getZone(id);,0.00028,0,,0
org/joda/time/DateTimeZone,17,211,        if (zone != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,706,        return iID;,0.00028,0,,0
org/joda/time/DateTimeZone,17,689,    protected DateTimeZone(String id) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,690,        if (id == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,693,        iID = id;,0.00028,0,,0
org/joda/time/DateTimeZone,17,694,    },0.00028,0,,0
org/joda/time/DateTimeZone,17,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00028,0,,0
org/joda/time/DateTimeZone,17,115,        setProvider0(null);,0.00028,0,,0
org/joda/time/DateTimeZone,17,116,        setNameProvider0(null);,0.00028,0,,0
org/joda/time/DateTimeZone,17,117,    },0.00028,0,,0
org/joda/time/DateTimeZone,17,415,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,416,            provider = getDefaultProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,17,418,        Set<String> ids = provider.getAvailableIDs();,0.00028,0,,0
org/joda/time/DateTimeZone,17,419,        if (ids == null || ids.size() == 0) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,423,"        if (!ids.contains(""UTC"")) {",0.00028,0,,0
org/joda/time/DateTimeZone,17,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00028,0,,0
org/joda/time/DateTimeZone,17,429,        cProvider = provider;,0.00028,0,,0
org/joda/time/DateTimeZone,17,430,        cAvailableIDs = ids;,0.00028,0,,0
org/joda/time/DateTimeZone,17,431,    },0.00028,0,,0
org/joda/time/DateTimeZone,17,443,        Provider provider = null;,0.00028,0,,0
org/joda/time/DateTimeZone,17,446,            String providerClass =,0.00028,0,,0
org/joda/time/DateTimeZone,17,448,            if (providerClass != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,458,        },0.00028,0,,0
org/joda/time/DateTimeZone,17,460,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00028,0,,0
org/joda/time/DateTimeZone,17,466,            },0.00028,0,,0
org/joda/time/DateTimeZone,17,469,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,473,        return provider;,0.00028,0,,0
org/joda/time/DateTimeZone,17,514,        if (nameProvider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,515,            nameProvider = getDefaultNameProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,17,517,        cNameProvider = nameProvider;,0.00028,0,,0
org/joda/time/DateTimeZone,17,518,    },0.00028,0,,0
org/joda/time/DateTimeZone,17,529,        NameProvider nameProvider = null;,0.00028,0,,0
org/joda/time/DateTimeZone,17,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00028,0,,0
org/joda/time/DateTimeZone,17,532,            if (providerClass != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,542,        },0.00028,0,,0
org/joda/time/DateTimeZone,17,544,        if (nameProvider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,17,545,            nameProvider = new DefaultNameProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,17,548,        return nameProvider;,0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,17,39,    public DefaultNameProvider() {,0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,17,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,17,40,    },0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,17,99,        return new HashMap(7);,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,38,        super(id);,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,39,        iNameKey = nameKey;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,40,        iWallOffset = wallOffset;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,41,        iStandardOffset = standardOffset;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,42,    },0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,88,        if (this == obj) {,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,17,89,            return true;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,82,"        this(resourcePath, null, false);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,83,    },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,106,    {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,107,        if (resourcePath == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,110,"        if (!resourcePath.endsWith(""/"")) {",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,111,            resourcePath += '/';,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,114,        iFileDir = null;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,115,        iResourcePath = resourcePath;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,117,        if (loader == null && !favorSystemLoader) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,118,            loader = getClass().getClassLoader();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,121,        iLoader = loader;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,124,    },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,136,        if (id == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,140,        Object obj = iZoneInfoMap.get(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,141,        if (obj == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,145,        if (id.equals(obj)) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,150,        if (obj instanceof SoftReference<?>) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,153,            DateTimeZone tz = ref.get();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,154,            if (tz != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,155,                return tz;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,196,        if (iFileDir != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,199,            String path = iResourcePath.concat(name);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,200,            if (iLoader != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,201,                in = iLoader.getResourceAsStream(path);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,205,            if (in == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,214,        return in;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,253,        DataInputStream din = new DataInputStream(in);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,255,"            readZoneInfoMap(din, map);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,258,                din.close();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,260,            },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,263,        return map;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,274,        int size = din.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,275,        String[] pool = new String[size];,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,276,        for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,277,            pool[i] = din.readUTF().intern();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,281,        size = din.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,282,        for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,287,            },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,17,289,    },0.00028,0,,0
org/joda/time/DurationFieldType,17,94,        super();,0.00027,0,,0
org/joda/time/DurationFieldType,17,95,        iName = name;,0.00027,0,,0
org/joda/time/DurationFieldType,17,96,    },0.00027,0,,0
org/joda/time/DurationFieldType,17,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00027,0,,0
org/joda/time/DurationFieldType,17,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00027,0,,0
org/joda/time/DurationFieldType,17,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00027,0,,0
org/joda/time/DurationFieldType,17,259,            super(name);,0.00027,0,,0
org/joda/time/DurationFieldType,17,260,            iOrdinal = ordinal;,0.00027,0,,0
org/joda/time/DurationFieldType,17,261,        },0.00027,0,,0
org/joda/time/DateTimeUtils,17,399,            return System.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,17,43,        super();,0.0,0,,0
org/joda/time/DateTimeUtils,17,44,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,56,        return cMillisProvider.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,17,68,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,17,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,17,70,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,82,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,17,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,17,84,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,97,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,17,98,        if (offsetMillis == 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,17,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,17,103,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,116,        if (millisProvider == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,17,119,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,17,120,        cMillisProvider = millisProvider;,0.0,0,,0
org/joda/time/DateTimeUtils,17,121,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,129,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeUtils,17,130,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,,0
org/joda/time/DateTimeUtils,17,133,    },0.0,0,,0
org/joda/time/DateTimeUtils,17,147,            return DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,17,165,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,169,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,187,        Chronology chrono = null;,0.0,0,,0
org/joda/time/DateTimeUtils,17,188,        if (start != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,189,            chrono = start.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,17,190,        } else if (end != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,191,            chrono = end.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,17,193,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,194,            chrono = ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,196,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,17,211,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,212,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,214,        Chronology chrono = interval.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,17,215,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,216,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,218,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,17,234,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,235,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,17,236,"            interval = new Interval(now, now);",0.0,0,,0
org/joda/time/DateTimeUtils,17,238,        return interval;,0.0,0,,0
org/joda/time/DateTimeUtils,17,253,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,17,269,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,270,            return DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeUtils,17,272,        return zone;,0.0,0,,0
org/joda/time/DateTimeUtils,17,286,        if (type == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,287,            return PeriodType.standard();,0.0,0,,0
org/joda/time/DateTimeUtils,17,289,        return type;,0.0,0,,0
org/joda/time/DateTimeUtils,17,303,        if (duration == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,304,            return 0L;,0.0,0,,0
org/joda/time/DateTimeUtils,17,306,        return duration.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,17,334,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,17,337,        DurationFieldType lastType = null;,0.0,0,,0
org/joda/time/DateTimeUtils,17,338,        for (int i = 0; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,339,            DateTimeField loopField = partial.getField(i);,0.0,0,,0
org/joda/time/DateTimeUtils,17,340,            if (i > 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,342,                    return false;,0.0,0,,0
org/joda/time/DateTimeUtils,17,345,            lastType = loopField.getDurationField().getType();,0.0,0,,0
org/joda/time/DateTimeUtils,17,347,        return true;,0.0,0,,0
org/joda/time/DateTimeUtils,17,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",0.0,0,,0
org/joda/time/DateTimeUtils,17,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",0.0,0,,0
org/joda/time/DateTimeUtils,17,367,        } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,368,        	return new DateFormatSymbols(locale);,0.0,0,,0
org/joda/time/DateTimeUtils,17,438,        OffsetMillisProvider(long offsetMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,439,            iMillis = offsetMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,17,440,        },0.0,0,,0
org/joda/time/DateTimeUtils,17,447,            return System.currentTimeMillis() + iMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,17,414,        FixedMillisProvider(long fixedMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,17,415,            iMillis = fixedMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,17,416,        },0.0,0,,0
org/joda/time/DateTimeUtils,17,423,            return iMillis;,0.0,0,,0
org/joda/time/DurationFieldType,17,216,        return iName;,0.0,0,,0
org/joda/time/DurationFieldType,17,234,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DurationFieldType,17,243,        return getName();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,55,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,59,        return iChronology.getDaysInMonthMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,75,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,79,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,80,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,82,                int month = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,83,                for (int j = 0; j < size; j++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,85,                        int year = values[j];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,92,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,103,        return iChronology.dayOfMonth();,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,66,        return false;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,80,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,92,        if (instant >= 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,93,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,95,            instant += 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,109,        if (instant > 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,110,            instant -= 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,113,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,17,163,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,62,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,94,"        return getAsText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,106,"        return getAsText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,121,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,153,        return Integer.toString(fieldValue);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,168,"        return getAsShortText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,180,"        return getAsShortText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,195,"        return getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,227,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,253,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,267,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,298,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,299,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,304,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,306,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,307,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,309,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,310,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,311,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,313,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,314,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,326,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,327,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,328,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,330,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,331,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,332,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,334,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,335,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,346,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,379,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,380,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,385,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,387,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,388,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,390,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,391,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,392,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,394,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,395,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,398,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,409,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,410,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,411,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,413,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,414,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,415,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,417,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,418,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,421,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,431,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,461,        int current = get(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,464,"        return set(instant, wrapped);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,495,        int current = values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,586,        values[fieldIndex] = newValue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,590,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,598,        return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,618,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,619,"        return set(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,635,"        return set(instant, text, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,654,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,655,"        return set(instant, fieldIndex, values, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,668,            return Integer.parseInt(text);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,669,        } catch (NumberFormatException ex) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,704,        return false;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,716,        return 0;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,746,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,758,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,772,        return getMinimumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,792,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,804,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,818,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,829,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,830,        if (max >= 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,831,            if (max < 10) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,832,                return 1;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,833,            } else if (max < 100) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,834,                return 2;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,835,            } else if (max < 1000) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,836,                return 3;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,839,        return Integer.toString(max).length();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,850,        return getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,886,        long newInstant = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,887,        if (newInstant != instant) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,888,"            instant = add(newInstant, 1);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,890,        return instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,903,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,904,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,906,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,907,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,911,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,913,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,927,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,928,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,930,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,931,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,935,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,937,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,955,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,956,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,958,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,959,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,963,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,966,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,971,                return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,973,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,994,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,17,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,109,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,110,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,111,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,112,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,113,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,114,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,115,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,116,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,117,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,130,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,131,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,132,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,133,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,134,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,135,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,136,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,137,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,138,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,151,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,152,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,153,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,154,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,155,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,156,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,157,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,158,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,159,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,172,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,173,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,174,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,175,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,176,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,177,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,178,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,179,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,180,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,190,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,191,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,192,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,193,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,194,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,195,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,196,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,197,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,198,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,208,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,209,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,210,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,211,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,212,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,213,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,214,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,215,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,216,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,225,"        super(createMessage(fieldName, value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,226,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,227,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,228,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,229,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,230,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,231,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,232,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,233,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,234,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,17,41,        StringBuffer buf = new StringBuffer(),0.0,0,,0
org/joda/time/IllegalFieldValueException,17,44,        if (lowerBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,45,            if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,46,"                buf.append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,50,        } else if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,53,"            buf.append(""must be in the range ["")",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,59,        if (explain != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,60,"            buf.append("": "").append(explain);",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,63,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,76,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,77,"            buf.append(""null"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,79,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,80,            buf.append(value);,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,81,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,86,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,243,        return iDateTimeFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,252,        return iDurationFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,261,        return iFieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,270,        return iNumberValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,279,        return iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,288,        String value = iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,289,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,290,            value = String.valueOf(iNumberValue);,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,292,        return value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,301,        return iLowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,310,        return iUpperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,314,        return iMessage;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,323,        if (iMessage == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,324,            iMessage = message;,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,325,        } else if (message != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,17,326,"            iMessage = message + "": "" + iMessage;",0.0,0,,0
org/joda/time/IllegalFieldValueException,17,328,    },0.0,0,,0
org/joda/time/DurationField,17,209,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,17,210,"            return subtract(instant, (long) value);",0.0,0,,0
org/joda/time/DurationField,17,212,"        return add(instant, -value);",0.0,0,,0
org/joda/time/DurationField,17,224,        if (value == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,17,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/DurationField,17,227,"        return add(instant, -value);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,134,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,144,            return base.getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,153,        if ((base = getBase()) != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,157,        FieldUtils.verifyValueBounds,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,185,        return iMinDaysInFirstWeek;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,196,        return super.equals(obj);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,217,        StringBuffer sb = new StringBuffer(60);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,218,        String name = getClass().getName();,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,219,        int index = name.lastIndexOf('.');,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,220,        if (index >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,221,            name = name.substring(index + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,223,        sb.append(name);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,224,        sb.append('[');,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,225,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,226,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,227,            sb.append(zone.getID());,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,230,"            sb.append("",mdfw="");",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,233,        sb.append(']');,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,234,        return sb.toString();,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,307,        return 366;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,339,        long jan1millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,344,            return jan1millis + (8 - jan1dayOfWeek),0.0,0,,0
org/joda/time/chrono/BasicChronology,17,348,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,17,371,        long millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,372,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,373,        return millis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,402,            i2 = i2 - unitMillis + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,410,            year--;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,414,            if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,420,            yearStart += oneYear;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,422,            if (yearStart <= instant) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,424,                year++;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,458,"        int month = getMonthOfYear(millis, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,459,"        return getDayOfMonth(millis, year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,485,        long yearStart = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,493,        int year = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,494,"        int week = getWeekOfWeekyear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,495,        if (week == 1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,497,        } else if (week > 51) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,500,            return year;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,517,        if (instant < firstWeekMillis1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,518,            return getWeeksInYear(year - 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,521,        if (instant >= firstWeekMillis2) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,522,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,534,        if (instant >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0,0,,0
org/joda/time/chrono/BasicChronology,17,539,            if (daysSince19700101 < -3) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,551,        if (instant >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,17,565,        return 31;,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,575,        int thisYear = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,590,        return getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,110,        return null;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,148,            return base.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,151,        return super.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,389,        in.defaultReadObject();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,390,        setFields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,391,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,17,102,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,132,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,183,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,184,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,185,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,186,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,187,            if (value < field.getMinimumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,188,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,192,            if (value > field.getMaximumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,193,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,199,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,200,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,201,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,203,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,208,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,213,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,17,223,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,224,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,225,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,228,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,242,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,255,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,256,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,257,        if (startInstant != endInstant) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,258,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,261,"                startInstant = field.add(startInstant, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,262,                values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,265,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,276,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,277,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,278,        if (duration != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,279,            long current = 0;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,280,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,282,                if (field.isPrecise()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,283,"                    int value = field.getDifference(duration, current);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,284,"                    current = field.add(current, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,285,                    values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,289,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,301,        if (scalar != 0 && period != null) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,,0
org/joda/time/chrono/BaseChronology,17,304,                if (value != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,309,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,322,        if (duration == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,323,            return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,,0
org/joda/time/chrono/BaseChronology,17,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,,0
org/joda/time/chrono/BaseChronology,17,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,,0
org/joda/time/DateTimeFieldType,17,378,        return iName;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,410,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,419,        return getName();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/BasicChronology,17,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,,0
org/joda/time/chrono/BasicChronology,17,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,95,        int thisValue = get(instant);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,112,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,131,        return iRange - 1;,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,17,143,        return iRange;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,50,        return false;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,58,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,59,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,61,        int thisYear = get(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,63,"        return set(instant, newYear);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,71,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,72,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,75,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,78,"        return set(instant, wrappedYear);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,82,        FieldUtils.verifyValueBounds,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,84,"        return iChronology.setYear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,99,        return iChronology.isLeapYear(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,104,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,106,            return 0;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,115,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,123,        return iChronology.getYearMillis(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,127,        int year = get(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,129,        if (instant != yearStartMillis) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,131,            instant = iChronology.getYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,133,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,137,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,17,144,        return iChronology.year();,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,125,                difference++;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,127,            difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,130,                difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,133,        return difference;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,145,        return iUnitMillis;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,156,            return false;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,164,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,169,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,190,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,17,195,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/BaseDurationField,17,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDurationField,17,59,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDurationField,17,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,,0
org/joda/time/field/BaseDurationField,17,91,        return duration / getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,17,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,,0
org/joda/time/field/BaseDurationField,17,123,        return value * getUnitMillis();  // safe,0.0,0,,0
org/joda/time/field/BaseDurationField,17,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,,0
org/joda/time/field/BaseDurationField,17,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/BaseDurationField,17,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,17,147,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,17,149,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,17,150,            return 0;,0.0,0,,0
org/joda/time/field/BaseDurationField,17,152,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,17,153,            return -1;,0.0,0,,0
org/joda/time/field/BaseDurationField,17,155,            return 1;,0.0,0,,0
org/joda/time/field/BaseDurationField,17,165,"        return ""DurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/BaseDurationField,17,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,286,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,324,            int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,325,"            instant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,331,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,338,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,355,            long diff = instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,360,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,364,            return iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,90,        return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,94,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,95,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,97,        if (zone == getParam()) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,98,            return this;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,100,        if (zone == DateTimeZone.UTC) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,101,            return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,143,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,213,            return field;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,216,            return (DateTimeField)converted.get(field);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,237,        if (this == obj) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,238,            return true;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,241,            return false;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,244,        return,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,391,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,402,            return iField.isLenient();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,407,            return iField.get(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,412,"            return iField.getAsText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,429,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,430,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,432,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,435,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,441,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,442,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,444,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,447,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,453,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,454,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,456,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,466,"            localInstant = iField.set(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,468,            if (get(result) != value) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,474,            return result;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,486,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,493,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,499,            return iDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,503,            return iRangeDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,508,            return iField.isLeap(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,513,            return iField.getLeapAmount(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,517,            return iLeapDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,521,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,522,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,523,                instant = iField.roundFloor(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,524,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,533,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,534,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,536,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,546,            return iField.remainder(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,550,            return iField.getMinimumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,555,            return iField.getMinimumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,559,            return iField.getMinimumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,563,"            return iField.getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,567,            return iField.getMaximumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,572,            return iField.getMaximumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,576,            return iField.getMaximumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,580,"            return iField.getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,584,            return iField.getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,592,            int offset = this.iZone.getOffset(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,593,            long sum = instant + offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,17,598,            return offset;,0.0,0,,0
org/joda/time/DateTimeZone,17,691,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,17,133,        DateTimeZone zone = cDefault;,0.0,0,,0
org/joda/time/DateTimeZone,17,134,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,135,            synchronized(DateTimeZone.class) {,0.0,0,,0
org/joda/time/DateTimeZone,17,136,                zone = cDefault;,0.0,0,,0
org/joda/time/DateTimeZone,17,137,                if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,138,                    DateTimeZone temp = null;,0.0,0,,0
org/joda/time/DateTimeZone,17,141,"                            String id = System.getProperty(""user.timezone"");",0.0,0,,0
org/joda/time/DateTimeZone,17,142,                            if (id != null) {  // null check avoids stack overflow,0.0,0,,0
org/joda/time/DateTimeZone,17,143,                                temp = forID(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,147,                        },0.0,0,,0
org/joda/time/DateTimeZone,17,145,                        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,148,                        if (temp == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,149,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,,0
org/joda/time/DateTimeZone,17,153,                    },0.0,0,,0
org/joda/time/DateTimeZone,17,151,                    } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,154,                    if (temp == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,155,                        temp = UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,157,                    cDefault = zone = temp;,0.0,0,,0
org/joda/time/DateTimeZone,17,159,            },0.0,0,,0
org/joda/time/DateTimeZone,17,161,        return zone;,0.0,0,,0
org/joda/time/DateTimeZone,17,174,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,17,175,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,,0
org/joda/time/DateTimeZone,17,178,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,17,181,        synchronized(DateTimeZone.class) {,0.0,0,,0
org/joda/time/DateTimeZone,17,182,            cDefault = zone;,0.0,0,,0
org/joda/time/DateTimeZone,17,183,        },0.0,0,,0
org/joda/time/DateTimeZone,17,184,    },0.0,0,,0
org/joda/time/DateTimeZone,17,205,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,17,208,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,17,215,            int offset = parseOffset(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,216,            if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,17,217,                return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,219,                id = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,17,220,"                return fixedOffsetZone(id, offset);",0.0,0,,0
org/joda/time/DateTimeZone,17,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,17,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,,0
org/joda/time/DateTimeZone,17,254,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,255,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,,0
org/joda/time/DateTimeZone,17,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,17,260,        int offset = 0;,0.0,0,,0
org/joda/time/DateTimeZone,17,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,,0
org/joda/time/DateTimeZone,17,263,            if (hoursInMinutes < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,17,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,17,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,,0
org/joda/time/DateTimeZone,17,271,        },0.0,0,,0
org/joda/time/DateTimeZone,17,269,        } catch (ArithmeticException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,270,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,,0
org/joda/time/DateTimeZone,17,272,        return forOffsetMillis(offset);,0.0,0,,0
org/joda/time/DateTimeZone,17,282,        String id = printOffset(millisOffset);,0.0,0,,0
org/joda/time/DateTimeZone,17,283,"        return fixedOffsetZone(id, millisOffset);",0.0,0,,0
org/joda/time/DateTimeZone,17,302,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,303,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,17,305,        final String id = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,17,306,"        if (id.equals(""UTC"")) {",0.0,0,,0
org/joda/time/DateTimeZone,17,307,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,311,        DateTimeZone dtz = null;,0.0,0,,0
org/joda/time/DateTimeZone,17,312,        String convId = getConvertedId(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,313,        if (convId != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,314,            dtz = cProvider.getZone(convId);,0.0,0,,0
org/joda/time/DateTimeZone,17,316,        if (dtz == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,317,            dtz = cProvider.getZone(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,319,        if (dtz != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,320,            return dtz;,0.0,0,,0
org/joda/time/DateTimeZone,17,324,        if (convId == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,325,            convId = zone.getDisplayName();,0.0,0,,0
org/joda/time/DateTimeZone,17,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,17,327,                convId = convId.substring(3);,0.0,0,,0
org/joda/time/DateTimeZone,17,328,                int offset = parseOffset(convId);,0.0,0,,0
org/joda/time/DateTimeZone,17,329,                if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,17,330,                    return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,332,                    convId = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,17,333,"                    return fixedOffsetZone(convId, offset);",0.0,0,,0
org/joda/time/DateTimeZone,17,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,17,349,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,350,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,352,        if (iFixedOffsetCache == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,,0
org/joda/time/DateTimeZone,17,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,357,        if (ref != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,358,            zone = ref.get();,0.0,0,,0
org/joda/time/DateTimeZone,17,359,            if (zone != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,360,                return zone;,0.0,0,,0
org/joda/time/DateTimeZone,17,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,,0
org/joda/time/DateTimeZone,17,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,,0
org/joda/time/DateTimeZone,17,365,        return zone;,0.0,0,,0
org/joda/time/DateTimeZone,17,374,        return cAvailableIDs;,0.0,0,,0
org/joda/time/DateTimeZone,17,387,        return cProvider;,0.0,0,,0
org/joda/time/DateTimeZone,17,401,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,17,402,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,17,405,        setProvider0(provider);,0.0,0,,0
org/joda/time/DateTimeZone,17,406,    },0.0,0,,0
org/joda/time/DateTimeZone,17,420,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/DateTimeZone,17,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,17,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,,0
org/joda/time/DateTimeZone,17,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,17,454,                },0.0,0,,0
org/joda/time/DateTimeZone,17,451,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,452,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,17,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,17,456,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,463,            } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,464,                Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,17,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,17,470,            provider = new UTCProvider();,0.0,0,,0
org/joda/time/DateTimeZone,17,486,        return cNameProvider;,0.0,0,,0
org/joda/time/DateTimeZone,17,500,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,17,501,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,17,504,        setNameProvider0(nameProvider);,0.0,0,,0
org/joda/time/DateTimeZone,17,505,    },0.0,0,,0
org/joda/time/DateTimeZone,17,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,17,538,                },0.0,0,,0
org/joda/time/DateTimeZone,17,535,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,536,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,17,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,17,540,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,559,"        Map<String, String> map = cZoneIdConversion;",0.0,0,,0
org/joda/time/DateTimeZone,17,560,        if (map == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,562,"            map = new HashMap<String, String>();",0.0,0,,0
org/joda/time/DateTimeZone,17,563,"            map.put(""GMT"", ""UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,17,564,"            map.put(""WET"", ""WET"");",0.0,0,,0
org/joda/time/DateTimeZone,17,565,"            map.put(""CET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,17,566,"            map.put(""MET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,17,567,"            map.put(""ECT"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,17,568,"            map.put(""EET"", ""EET"");",0.0,0,,0
org/joda/time/DateTimeZone,17,569,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,,0
org/joda/time/DateTimeZone,17,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,17,571,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,,0
org/joda/time/DateTimeZone,17,572,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,,0
org/joda/time/DateTimeZone,17,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,17,574,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,,0
org/joda/time/DateTimeZone,17,575,"            map.put(""CST"", ""America/Chicago"");",0.0,0,,0
org/joda/time/DateTimeZone,17,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,17,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,,0
org/joda/time/DateTimeZone,17,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,,0
org/joda/time/DateTimeZone,17,579,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,,0
org/joda/time/DateTimeZone,17,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,,0
org/joda/time/DateTimeZone,17,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,,0
org/joda/time/DateTimeZone,17,582,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,,0
org/joda/time/DateTimeZone,17,583,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,,0
org/joda/time/DateTimeZone,17,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,,0
org/joda/time/DateTimeZone,17,585,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,,0
org/joda/time/DateTimeZone,17,586,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,,0
org/joda/time/DateTimeZone,17,587,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,,0
org/joda/time/DateTimeZone,17,588,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,,0
org/joda/time/DateTimeZone,17,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,,0
org/joda/time/DateTimeZone,17,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,,0
org/joda/time/DateTimeZone,17,591,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,,0
org/joda/time/DateTimeZone,17,592,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,,0
org/joda/time/DateTimeZone,17,593,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,,0
org/joda/time/DateTimeZone,17,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,,0
org/joda/time/DateTimeZone,17,595,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,,0
org/joda/time/DateTimeZone,17,596,            cZoneIdConversion = map;,0.0,0,,0
org/joda/time/DateTimeZone,17,598,        return map.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,17,604,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,17,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,,0
org/joda/time/DateTimeZone,17,631,        StringBuffer buf = new StringBuffer();,0.0,0,,0
org/joda/time/DateTimeZone,17,632,        if (offset >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,633,            buf.append('+');,0.0,0,,0
org/joda/time/DateTimeZone,17,635,            buf.append('-');,0.0,0,,0
org/joda/time/DateTimeZone,17,636,            offset = -offset;,0.0,0,,0
org/joda/time/DateTimeZone,17,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,17,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,,0
org/joda/time/DateTimeZone,17,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,17,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,17,644,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,17,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,,0
org/joda/time/DateTimeZone,17,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,17,647,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,648,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,17,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,17,652,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,17,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/DateTimeZone,17,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,17,655,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,656,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,17,659,        buf.append('.');,0.0,0,,0
org/joda/time/DateTimeZone,17,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,,0
org/joda/time/DateTimeZone,17,661,        return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,17,670,        if (cOffsetFormatter == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/DateTimeZone,17,675,        return cOffsetFormatter;,0.0,0,,0
org/joda/time/DateTimeZone,17,729,"        return getShortName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,17,744,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,745,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,17,747,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,17,748,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,749,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,17,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,17,752,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,753,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,17,755,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,17,769,"        return getName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,17,784,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,785,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,17,787,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,17,788,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,789,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,17,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,17,792,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,793,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,17,795,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,17,813,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/DateTimeZone,17,816,        return getOffset(instant.getMillis());,0.0,0,,0
org/joda/time/DateTimeZone,17,844,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,,0
org/joda/time/DateTimeZone,17,890,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,894,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,17,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,17,896,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,17,897,                    return offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,17,899,            },0.0,0,,0
org/joda/time/DateTimeZone,17,901,            long prev = previousTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,17,902,            if (prev < instantAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,17,903,                int offsetPrev = getOffset(prev);,0.0,0,,0
org/joda/time/DateTimeZone,17,904,                int diff = offsetPrev - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,17,905,                if (instantAdjusted - prev <= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,17,906,                    return offsetPrev;,0.0,0,,0
org/joda/time/DateTimeZone,17,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,17,957,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,,0
org/joda/time/DateTimeZone,17,974,        int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,17,976,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,17,978,        if (offsetLocal != offset) {,0.0,0,,0
org/joda/time/DateTimeZone,17,982,            if (strict || offsetLocal < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,17,985,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,,0
org/joda/time/DateTimeZone,17,986,                    nextLocal = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,17,988,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,,0
org/joda/time/DateTimeZone,17,989,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,,0
org/joda/time/DateTimeZone,17,990,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,17,992,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,17,994,                    if (strict) {,0.0,0,,0
org/joda/time/DateTimeZone,17,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,,0
org/joda/time/DateTimeZone,17,1003,                        offset = offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,17,1009,        long instantUTC = instantLocal - offset;,0.0,0,,0
org/joda/time/DateTimeZone,17,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,17,1014,        return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,17,1028,        if (newZone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1029,            newZone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,17,1031,        if (newZone == this) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1032,            return oldInstant;,0.0,0,,0
org/joda/time/DateTimeZone,17,1034,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,,0
org/joda/time/DateTimeZone,17,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,,0
org/joda/time/DateTimeZone,17,1145,        if (isFixed()) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1146,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,17,1149,            localDateTime.toDateTime(this);,0.0,0,,0
org/joda/time/DateTimeZone,17,1150,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,17,1151,        } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1152,            return true;,0.0,0,,0
org/joda/time/DateTimeZone,17,1170,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,,0
org/joda/time/DateTimeZone,17,1220,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,,0
org/joda/time/DateTimeZone,17,1245,        return getID();,0.0,0,,0
org/joda/time/DateTimeZone,17,1255,        return new Stub(iID);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,45,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,46,        if (year <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,47,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,49,        return year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,53,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,57,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,87,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,89,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,101,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,105,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,109,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,17,116,        return iChronology.yearOfEra();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,74,        return iField.isLenient();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,78,        return iField.get(instant);,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,82,"        return iField.set(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,94,        return iField.getMinimumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,98,        return iField.getMaximumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,17,102,        return iField.roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,59,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,92,        if (months == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,93,            return instant; // the easy case,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,103,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,113,        if (monthToUse >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,118,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,121,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,122,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,126,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,127,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,138,        if (dayToUse > maxDay) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,139,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,144,        long datePart =,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,146,        return datePart + timePart;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,151,        int i_months = (int)months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,152,        if (i_months == months) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,153,"            return add(instant, i_months);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,160,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,165,        if (monthToUse >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,170,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,172,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,173,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,176,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,177,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,184,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,188,        int i_yearToUse = (int)yearToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,189,        int i_monthToUse = (int)monthToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,193,        if (dayToUse > maxDay) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,194,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,197,        long datePart =,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,199,        return datePart + timePart;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,206,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,207,            return values;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,209,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,210,            long instant = 0L;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,214,"            instant = add(instant, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,215,"            return iChronology.get(partial, instant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,237,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,241,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,250,        int minuendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,254,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,256,            if (subtrahendDom > minuendDom) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,265,        long minuendRem = minuendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,267,        long subtrahendRem = subtrahendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,270,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,271,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,274,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,294,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,298,        if (thisDom > maxDom) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,300,            thisDom = maxDom;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,314,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,315,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,318,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,323,        return isLeap(instant) ? 1 : 0;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,333,        return MIN;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,338,        return iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,343,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,344,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,345,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,350,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,358,        return iChronology.monthOfYear();,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,51,        return false;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,61,            return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,63,            return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,82,        int oldEra = get(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,83,        if (oldEra != era) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,84,            int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,85,"            return iChronology.setYear(instant, -year);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,87,            return instant;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,97,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,99,            return Long.MIN_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,105,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,107,            return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,113,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,118,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,123,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,135,        return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,139,        return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,17,150,        return iChronology.era();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,79,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,83,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,101,        return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,110,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,119,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,128,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,137,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,146,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,155,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,164,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,173,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,182,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,191,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,200,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,209,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,227,        return 0;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,238,        if (this == obj) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,239,            return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,242,            if (other.getName() == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,243,                return (getName() == null);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,245,            return (other.getName().equals(getName()));,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,247,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,256,        return getName().hashCode();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,272,        return getInstance(iType);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,17,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,50,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,51,        return year < 0 ? -year : year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,55,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,59,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,81,            year = -year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,83,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,95,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,99,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,103,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,17,110,        return INSTANCE;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,216,        Stub(DateTimeZone zone) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,217,            iZone = zone;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,218,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,17,221,            return ISOChronology.getInstance(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,225,            out.writeObject(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,226,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,17,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,232,        },0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,17,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,148,        int minuendYear = getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,156,        if (subtrahendRem >= FEB_29) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,158,                if (!isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,166,        int difference = minuendYear - subtrahendYear;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,167,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,168,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,170,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,175,        int thisYear = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,177,        int millisOfDay = getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,180,            if (isLeapYear(thisYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,182,                if (!isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,184,                    dayOfYear--;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,188,                if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,190,                    dayOfYear++;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,196,        instant += millisOfDay;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,17,198,        return instant;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,17,479,                    eras = f;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,49,        return false;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,60,        return iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,72,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,73,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,75,"        return set(instant, get(instant) + years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,92,"        return add(instant, years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,103,        long minuendRem = remainder(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,112,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,113,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,115,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,133,        int thisWeekyear = get( instant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,134,        if ( thisWeekyear == year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,135,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,155,        if ( setToWeek > maxOutWeeks ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,156,            setToWeek = maxOutWeeks;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,162,        long workInstant = instant; // Get a copy,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,168,"        workInstant = iChronology.setYear( workInstant, year );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,173,        int workWoyYear = get( workInstant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,179,        if ( workWoyYear < year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,181,        } else if ( workWoyYear > year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,204,        return workInstant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,224,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,228,        return iChronology.getMaxYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,236,        if (wow > 1) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,239,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,243,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,17,250,        return iChronology.weekyear();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,52,        return iChronology.getDayOfYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,60,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,64,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,68,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,69,        return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,75,            return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,77,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,81,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,82,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,84,                int year = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,85,                return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,88,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,17,100,        return iChronology.dayOfYear();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,83,        if (type == null || durationField == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,84,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,86,        iType = type;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,87,        iDurationField = durationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,88,    },0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,55,        if (cCache == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,57,            field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,59,            field = cCache.get(type);,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,61,                field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,64,        if (field == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,66,"            cCache.put(type, field);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,68,        return field;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,95,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,99,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,108,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,117,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,126,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,135,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,144,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,153,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,162,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,171,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,180,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,189,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,198,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,207,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,216,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,225,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,234,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,243,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,252,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,261,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,270,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,297,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,306,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,315,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,324,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,333,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,343,        return iDurationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,352,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,361,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,370,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,379,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,388,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,397,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,406,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,415,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,424,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,433,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,442,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,451,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,460,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,469,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,478,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,487,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,496,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,505,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,514,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,523,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,533,"        return ""UnsupportedDateTimeField"";",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,540,"        return getInstance(iType, iDurationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,17,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/chrono/ISOChronology,17,77,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,97,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,102,            return chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,143,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,144,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,146,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,147,            return this;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,149,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,160,"        String str = ""ISOChronology"";",0.0,0,,0
org/joda/time/chrono/ISOChronology,17,161,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,162,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,163,            str = str + '[' + zone.getID() + ']';,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,165,        return str;,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,190,        return super.equals(obj);,0.0,0,,0
org/joda/time/chrono/ISOChronology,17,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,,0
org/joda/time/chrono/ISOChronology,17,208,        return new Stub(getZone());,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,112,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,124,                throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,132,                    chrono = new GregorianChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,155,        Chronology base = getBase();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,158,        return base == null ?,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,171,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,181,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,182,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,184,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,185,            return this;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,187,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/GregorianChronology,17,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,64,            iDurationField = null;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,90,"        super(remainderField.getWrappedField(), type);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,92,        iDurationField = remainderField.iRangeField;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,94,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,95,        int i = field.getMinimumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,98,        int j = field.getMaximumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,101,        iMin = min;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,102,        iMax = max;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,103,    },0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,112,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,113,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,114,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,191,        return iMin;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,200,        return iMax;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,204,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,218,        return iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,222,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,223,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,17,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,60,            iRangeField = null;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,100,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,101,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,102,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,162,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,166,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,182,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,191,        return iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,195,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,196,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,17,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,76,        return duration / iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,88,        return value * iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,17,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,17,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,,0
org/joda/time/field/PreciseDurationField,17,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/PreciseDurationField,17,115,        return difference / iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,127,        if (this == obj) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,128,            return true;,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,,0
org/joda/time/field/PreciseDurationField,17,133,        return false;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,52,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,53,        if (value == 0) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,54,            value = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,56,        return value;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,60,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,64,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,84,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,86,        if (value == max) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,87,            value = 0;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,89,"        return getWrappedField().set(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,93,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,110,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,119,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,128,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,137,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,181,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,185,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,17,201,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,84,            iMin = minValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,89,            iMax = maxValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,100,        return super.get(instant) + iOffset;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,112,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,114,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,126,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,128,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,153,"        return super.set(instant, value - iOffset);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,157,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,165,        return getWrappedField().getLeapDurationField();,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,187,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,191,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,207,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,17,216,        return iOffset;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,56,        return iChronology.getDayOfWeek(instant);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,103,        return DateTimeConstants.MONDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,112,        return DateTimeConstants.SUNDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,17,139,        return iChronology.dayOfWeek();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,79,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,83,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,96,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,100,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,101,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,103,                int weekyear = values[i];,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,107,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,118,        return iChronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,463,            if (this == obj) {,0.0,0,,0
org/joda/time/DateTimeFieldType,17,464,                return true;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,,0
org/joda/time/DateTimeFieldType,17,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,469,            return false;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,475,            return (1 << iOrdinal);,0.0,0,,0
org/joda/time/DateTimeFieldType,17,484,                    return chronology.era();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,486,                    return chronology.yearOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,488,                    return chronology.centuryOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,490,                    return chronology.yearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,494,                    return chronology.dayOfYear();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,500,                    return chronology.weekyearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,502,                    return chronology.weekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,504,                    return chronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,506,                    return chronology.dayOfWeek();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,508,                    return chronology.halfdayOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,510,                    return chronology.hourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,512,                    return chronology.clockhourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,514,                    return chronology.clockhourOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,518,                    return chronology.minuteOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,526,                    return chronology.millisOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,528,                    return chronology.millisOfSecond();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,531,                    throw new InternalError();,0.0,0,,0
org/joda/time/DateTimeFieldType,17,541,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DateTimeFieldType,17,543,                    return ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,551,                    return YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,561,                    return WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,17,590,                    return this;,0.0,0,,0
org/joda/time/DateTimeZone,17,604,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,17,606,                return null;,0.0,0,,0
org/joda/time/DateTimeZone,17,609,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,17,612,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,17,615,                return getClass().getName();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,44,        return nameSet == null ? null : nameSet[0];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,49,        return nameSet == null ? null : nameSet[1];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,54,            return null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,58,        if (byIdCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,63,        if (byNameKeyCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,67,            String[] setEn = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,68,            for (String[] strings : zoneStringsEn) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,70,                setEn = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,71,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,75,            String[] setLoc = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,78,                setLoc = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,79,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,83,            if (setEn != null && setLoc != null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,17,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,225,    public DateTimeZoneBuilder() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,227,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,96,"            return readFrom((DataInput)in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,115,                fixed = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,117,            return fixed;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,123,"            throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,142,            long units = millis / (30 * 60000L);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,145,                out.writeByte((int)(units & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,146,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,150,        if (millis % 60000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,152,            long minutes = millis / 60000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,156,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,160,        if (millis % 1000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,162,            long seconds = millis / 1000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,167,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,176,        out.writeLong(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,177,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,217,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,252,        if (iRuleSets.size() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,253,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,258,        iRuleSets.add(new RuleSet());,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,259,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,269,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,277,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,309,        if (fromYear <= toYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,310,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,314,            getLastRuleSet().addRule(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,316,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,320,        if (iRuleSets.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,333,        if (id == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,334,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,343,        DSTZone tailZone = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,345,        long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,346,        int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,348,        int ruleSetCount = iRuleSets.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,351,            Transition next = rs.firstTransition(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,352,            if (next == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,353,                continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,355,"            addTransition(transitions, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,356,            millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,357,            saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,360,            rs = new RuleSet(rs);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,363,"                if (addTransition(transitions, next)) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,364,                    if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,366,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,369,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,370,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,372,                    tailZone = rs.buildTailZone(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,383,        if (transitions.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,384,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,386,                return tailZone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,391,            Transition tr = transitions.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,397,        if (zone.isCachable()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,400,        return zone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,404,        int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,405,        if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,406,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,407,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,410,        Transition last = transitions.get(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,412,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,417,        int offsetForLast = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,418,        if (size >= 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,421,        int offsetForNew = last.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,426,        if (newLocal != lastLocal) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,427,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,428,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,431,        transitions.remove(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,432,"        return addTransition(transitions, tr);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,443,        if (out instanceof DataOutput) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,448,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,475,    },0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,45,        return iNameKey;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,49,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,53,        return iStandardOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,57,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,61,        return true;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,65,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,69,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,77,        String id = getID();,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,93,            return,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,17,98,        return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1362,                        index = in.readUnsignedShort();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1389,            int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1390,            if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1391,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1394,            long[] trans = new long[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1395,            int[] wallOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1396,            int[] standardOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1397,            String[] nameKeys = new String[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1399,            Transition last = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1400,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1401,                Transition tr = transitions.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1404,                    throw new IllegalArgumentException(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1407,                trans[i] = tr.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1412,                last = tr;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1417,            String[] zoneNameData = new String[5];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1420,                String[] set = zoneStrings[j];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1422,                    zoneNameData = set;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1429,                String curNameKey = nameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1431,                long curOffset = wallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1433,                long curStdOffset = standardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1436,                if (curOffset != nextOffset &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1448,                    if (curOffset > nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1450,                    } else if (curOffset < nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1452,                        i++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1457,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1465,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1471,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1480,            return new PrecalculatedZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1509,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1511,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1512,                return iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1514,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1515,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1516,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1517,                    return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1519,"                return ""UTC"";",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1521,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1522,                return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1524,            return iTailZone.getNameKey(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1538,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1540,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1541,                return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1543,            return iTailZone.getOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1547,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1549,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1550,                return iStandardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1552,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1553,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1554,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1555,                    return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1557,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1559,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1560,                return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1566,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1576,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1577,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1579,            long end = transitions[transitions.length - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1580,            if (instant < end) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1581,                instant = end;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1583,            return iTailZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1587,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1589,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1591,                    return instant - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1593,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1595,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1596,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1597,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1598,                    long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1600,                        return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1603,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1605,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1607,                if (prev < instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1608,                    return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1611,            long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1613,                return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1615,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1619,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1620,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1624,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1634,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1638,            int size = iTransitions.length;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1642,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1643,                poolSet.add(iNameKeys[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1646,            int poolSize = poolSet.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1647,            if (poolSize > 65535) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1650,            String[] pool = new String[poolSize];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1653,                pool[i] = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1657,            out.writeShort(poolSize);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1659,                out.writeUTF(pool[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1662,            out.writeInt(size);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1664,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1670,                String nameKey = iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1673,                        if (poolSize < 256) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1674,                            out.writeByte(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1676,                            out.writeShort(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1678,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1683,            out.writeBoolean(iTailZone != null);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1684,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1685,                iTailZone.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1687,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1690,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1691,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1693,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1694,            if (transitions.length <= 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1695,                return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1700,            double distances = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1701,            int count = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1706,                    distances += (double)diff;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1707,                    count++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1711,            if (count > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1712,                double avg = distances / count;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1714,                if (avg >= 25) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1721,                    return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1725,            return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,40,        } catch (SecurityException e) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,41,            i = null;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,50,            cacheSize = i.intValue();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,52,            cacheSize--;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,53,            int shift = 0;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,54,            while (cacheSize > 0) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,55,                shift++;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,56,                cacheSize >>= 1;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,58,            cacheSize = 1 << shift;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,69,            return (CachedDateTimeZone)zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,95,        return iZone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,99,        return getInfo(instant).getNameKey(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,111,        return iZone.isFixed();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,115,        return iZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,119,        return iZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,127,        if (this == obj) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,128,            return true;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,133,        return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1191,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1195,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1199,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1206,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1208,                if (instant > 0 && start < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1210,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1218,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1212,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1214,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1215,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1217,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1221,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1223,                if (instant > 0 && end < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1225,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1233,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1227,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1229,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1230,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1232,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1235,            return (start > end) ? end : start;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1241,            instant++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1243,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1250,                start = startRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1252,                if (instant < 0 && start > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1254,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1262,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1256,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1258,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1259,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1261,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1265,                end = endRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1267,                if (instant < 0 && end > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1269,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1277,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1271,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1273,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1274,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1276,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1279,            return ((start > end) ? start : end) - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1283,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1284,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1286,            if (obj instanceof DSTZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1287,                DSTZone other = (DSTZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1288,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1294,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1298,"            writeMillis(out, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1299,            iStartRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1300,            iEndRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1301,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1304,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1311,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1319,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1313,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1315,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1316,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1318,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1322,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1330,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1324,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1326,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1327,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1329,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,963,        RuleSet() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,964,            iRules = new ArrayList<Rule>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,966,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,971,        RuleSet(RuleSet rs) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,976,            iUpperYear = rs.iUpperYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,978,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,950,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,981,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,985,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,986,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,989,            iInitialNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,990,            iInitialSaveMillis = saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,991,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,994,            if (!iRules.contains(rule)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,995,                iRules.add(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,997,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1000,            iUpperYear = year;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1001,            iUpperOfYear = ofYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1002,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1011,            if (iInitialNameKey != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1024,            long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1025,            int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1026,            Transition first = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1030,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1032,                if (millis == firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1033,"                    first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1034,                    break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1037,                if (millis > firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1038,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1042,                        for (Rule rule : copy) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1045,                                break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1047,                        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1049,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1061,"                first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1063,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1066,            iRules = copy;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1067,            return first;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1085,            Rule nextRule = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1089,            while (it.hasNext()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1090,                Rule rule = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1092,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1093,                    it.remove();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1094,                    continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1098,                if (next <= nextMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1100,                    nextRule = rule;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1101,                    nextMillis = next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1103,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1105,            if (nextRule == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1106,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1111,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1116,                long upperMillis =,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1118,                if (nextMillis >= upperMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1120,                    return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1132,                return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1141,            if (iRules.size() == 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1142,                Rule startRule = iRules.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1143,                Rule endRule = iRules.get(1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,1158,            return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,883,"        Transition(long millis, Transition tr) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,884,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,885,            iNameKey = tr.iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,886,            iWallOffset = tr.iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,888,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,891,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,892,            iNameKey = rule.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,894,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,895,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,898,"                   int wallOffset, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,899,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,900,            iNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,901,            iWallOffset = wallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,902,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,903,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,906,            return iMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,910,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,914,            return iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,918,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,922,            return iWallOffset - iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,929,            if (other == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,930,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,932,            return iMillis > other.iMillis &&,0.0,0,,0
org/joda/time/JodaTimePermission,17,57,        super(name);,0.0,0,,0
org/joda/time/JodaTimePermission,17,58,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,522,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,523,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,524,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,525,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,527,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,531,"            long millis = chrono.year().set(0, year);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,536,            if (iDayOfWeek != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,541,            return millis - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,549,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,550,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,551,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,552,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,554,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,558,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,567,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,568,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,569,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,573,"                next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,574,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,575,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,583,            return next - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,591,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,592,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,593,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,594,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,596,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,600,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,609,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,610,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,616,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,625,            return prev - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,629,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,630,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,632,            if (obj instanceof OfYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,633,                OfYear other = (OfYear)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,634,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,642,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,659,            out.writeByte(iMode);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,660,            out.writeByte(iMonthOfYear);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,661,            out.writeByte(iDayOfMonth);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,662,            out.writeByte(iDayOfWeek);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,663,            out.writeBoolean(iAdvance);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,664,"            writeMillis(out, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,665,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,672,"                next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,682,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,673,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,676,"                        next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,680,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,683,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,701,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,692,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,699,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,702,            return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,706,            if (iDayOfMonth >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,713,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,719,            if (daysToAdd != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,720,                if (iAdvance) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,721,                    if (daysToAdd < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,722,                        daysToAdd += 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,725,                    if (daysToAdd > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,726,                        daysToAdd -= 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,731,            return instant;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,57,        if (fileDir == null) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,60,        if (!fileDir.exists()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,63,        if (!fileDir.isDirectory()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,67,        iFileDir = fileDir;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,68,        iResourcePath = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,69,        iLoader = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,72,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,96,"        this(resourcePath, loader, true);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,97,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,137,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,142,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,158,            return loadZoneData(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,162,        return getZone((String)obj);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,183,        Thread t = Thread.currentThread();,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,185,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,206,                StringBuffer buf = new StringBuffer(40),0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,211,                throw new IOException(buf.toString());,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,239,            } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,230,        } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,231,            uncaughtException(e);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,232,            iZoneInfoMap.remove(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,233,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,235,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,259,            } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,261,        },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,257,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,285,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,17,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,187,                if (iNameKey == null) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,190,                return iNameKey;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,192,            return iNextInfo.getNameKey(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,210,                return iStandardOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,17,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,817,            iRecurrence = recurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,818,            iFromYear = fromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,819,            iToYear = toYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,820,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,823,            return iFromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,827,            return iToYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,831,            return iRecurrence.getOfYear();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,835,            return iRecurrence.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,839,            return iRecurrence.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,846,            long testInstant = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,849,            if (instant == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,850,                year = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,855,            if (year < iFromYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,860,                testInstant -= 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,865,            if (next > instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,866,                year = chrono.year().get(next + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,867,                if (year > iToYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,869,                    next = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,873,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,754,            return iOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,772,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,776,            return iSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,780,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,781,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,783,            if (obj instanceof Recurrence) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,784,                Recurrence other = (Recurrence)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,785,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,790,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,794,            iOfYear.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,795,            out.writeUTF(iNameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,796,"            writeMillis(out, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,797,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,17,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,,0
org/joda/time/DateTime,17,155,        super();,0.0,0,,0
org/joda/time/DateTime,17,156,    },0.0,0,,0
org/joda/time/DateTime,17,168,        super(zone);,0.0,0,,0
org/joda/time/DateTime,17,169,    },0.0,0,,0
org/joda/time/DateTime,17,182,        super(chronology);,0.0,0,,0
org/joda/time/DateTime,17,183,    },0.0,0,,0
org/joda/time/DateTime,17,193,        super(instant);,0.0,0,,0
org/joda/time/DateTime,17,194,    },0.0,0,,0
org/joda/time/DateTime,17,206,"        super(instant, zone);",0.0,0,,0
org/joda/time/DateTime,17,207,    },0.0,0,,0
org/joda/time/DateTime,17,241,"        super(instant, (Chronology) null);",0.0,0,,0
org/joda/time/DateTime,17,242,    },0.0,0,,0
org/joda/time/DateTime,17,265,"        super(instant, zone);",0.0,0,,0
org/joda/time/DateTime,17,266,    },0.0,0,,0
org/joda/time/DateTime,17,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,,0
org/joda/time/DateTime,17,287,    },0.0,0,,0
org/joda/time/DateTime,17,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,,0
org/joda/time/DateTime,17,308,    },0.0,0,,0
org/joda/time/DateTime,17,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,17,359,    },0.0,0,,0
org/joda/time/DateTime,17,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,,0
org/joda/time/DateTime,17,382,    },0.0,0,,0
org/joda/time/DateTime,17,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,17,409,    },0.0,0,,0
org/joda/time/DateTime,17,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,17,437,    },0.0,0,,0
org/joda/time/DateTime,17,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,,0
org/joda/time/DateTime,17,461,    },0.0,0,,0
org/joda/time/DateTime,17,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,17,489,    },0.0,0,,0
org/joda/time/DateTime,17,516,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,17,518,    },0.0,0,,0
org/joda/time/DateTime,17,89,        return new DateTime();,0.0,0,,0
org/joda/time/DateTime,17,101,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTime,17,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,,0
org/joda/time/DateTime,17,104,        return new DateTime(zone);,0.0,0,,0
org/joda/time/DateTime,17,116,        if (chronology == null) {,0.0,0,,0
org/joda/time/DateTime,17,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,,0
org/joda/time/DateTime,17,119,        return new DateTime(chronology);,0.0,0,,0
org/joda/time/DateTime,17,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,,0
org/joda/time/DateTime,17,144,        return formatter.parseDateTime(str);,0.0,0,,0
org/joda/time/DateTime,17,527,        return this;,0.0,0,,0
org/joda/time/DateTime,17,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,,0
org/joda/time/DateTime,17,538,            return this;,0.0,0,,0
org/joda/time/DateTime,17,540,        return super.toDateTimeISO();,0.0,0,,0
org/joda/time/DateTime,17,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,,0
org/joda/time/DateTime,17,551,        if (getZone() == zone) {,0.0,0,,0
org/joda/time/DateTime,17,552,            return this;,0.0,0,,0
org/joda/time/DateTime,17,554,        return super.toDateTime(zone);,0.0,0,,0
org/joda/time/DateTime,17,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,,0
org/joda/time/DateTime,17,565,        if (getChronology() == chronology) {,0.0,0,,0
org/joda/time/DateTime,17,566,            return this;,0.0,0,,0
org/joda/time/DateTime,17,568,        return super.toDateTime(chronology);,0.0,0,,0
org/joda/time/DateTime,17,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,,0
org/joda/time/DateTime,17,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,,0
org/joda/time/DateTime,17,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,,0
org/joda/time/DateTime,17,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,,0
org/joda/time/DateTime,17,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,,0
org/joda/time/DateTime,17,641,        if (newZone == originalZone) {,0.0,0,,0
org/joda/time/DateTime,17,642,            return this;,0.0,0,,0
org/joda/time/DateTime,17,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,,0
org/joda/time/DateTime,17,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,,0
org/joda/time/DateTime,17,709,        Chronology chrono = getChronology();,0.0,0,,0
org/joda/time/DateTime,17,710,        long instant = getMillis();,0.0,0,,0
org/joda/time/DateTime,17,711,"        instant = chrono.year().set(instant, year);",0.0,0,,0
org/joda/time/DateTime,17,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/DateTime,17,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/DateTime,17,714,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,737,        Chronology chrono = getChronology();,0.0,0,,0
org/joda/time/DateTime,17,738,        long instant = getMillis();,0.0,0,,0
org/joda/time/DateTime,17,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/DateTime,17,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/DateTime,17,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/DateTime,17,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/DateTime,17,743,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,,0
org/joda/time/DateTime,17,776,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTime,17,777,            return this;,0.0,0,,0
org/joda/time/DateTime,17,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,,0
org/joda/time/DateTime,17,802,        if (fieldType == null) {,0.0,0,,0
org/joda/time/DateTime,17,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/DateTime,17,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,,0
org/joda/time/DateTime,17,806,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,828,        if (fieldType == null) {,0.0,0,,0
org/joda/time/DateTime,17,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/DateTime,17,831,        if (amount == 0) {,0.0,0,,0
org/joda/time/DateTime,17,832,            return this;,0.0,0,,0
org/joda/time/DateTime,17,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,,0
org/joda/time/DateTime,17,835,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,17,851,            return this;,0.0,0,,0
org/joda/time/DateTime,17,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,,0
org/joda/time/DateTime,17,854,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,17,869,            return this;,0.0,0,,0
org/joda/time/DateTime,17,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,,0
org/joda/time/DateTime,17,890,        if (period == null || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,17,891,            return this;,0.0,0,,0
org/joda/time/DateTime,17,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,,0
org/joda/time/DateTime,17,894,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,909,"        return withDurationAdded(duration, 1);",0.0,0,,0
org/joda/time/DateTime,17,923,"        return withDurationAdded(duration, 1);",0.0,0,,0
org/joda/time/DateTime,17,949,"        return withPeriodAdded(period, 1);",0.0,0,,0
org/joda/time/DateTime,17,976,        if (years == 0) {,0.0,0,,0
org/joda/time/DateTime,17,977,            return this;,0.0,0,,0
org/joda/time/DateTime,17,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,,0
org/joda/time/DateTime,17,980,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1006,        if (months == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1007,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,,0
org/joda/time/DateTime,17,1010,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1032,        if (weeks == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1033,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,,0
org/joda/time/DateTime,17,1036,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1067,        if (days == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1068,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,,0
org/joda/time/DateTime,17,1071,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1099,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1125,        if (minutes == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1126,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,,0
org/joda/time/DateTime,17,1129,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1152,        if (seconds == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1153,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,,0
org/joda/time/DateTime,17,1156,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1178,        if (millis == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1179,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,,0
org/joda/time/DateTime,17,1182,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1197,"        return withDurationAdded(duration, -1);",0.0,0,,0
org/joda/time/DateTime,17,1211,"        return withDurationAdded(duration, -1);",0.0,0,,0
org/joda/time/DateTime,17,1238,"        return withPeriodAdded(period, -1);",0.0,0,,0
org/joda/time/DateTime,17,1265,        if (years == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1266,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,,0
org/joda/time/DateTime,17,1269,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1295,        if (months == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1296,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,,0
org/joda/time/DateTime,17,1299,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1321,        if (weeks == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1322,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,,0
org/joda/time/DateTime,17,1325,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1356,        if (days == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1357,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,,0
org/joda/time/DateTime,17,1360,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1388,        if (hours == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1389,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,,0
org/joda/time/DateTime,17,1392,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1415,        if (minutes == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1416,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,,0
org/joda/time/DateTime,17,1419,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1442,        if (seconds == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1443,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,,0
org/joda/time/DateTime,17,1446,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1469,        if (millis == 0) {,0.0,0,,0
org/joda/time/DateTime,17,1470,            return this;,0.0,0,,0
org/joda/time/DateTime,17,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,,0
org/joda/time/DateTime,17,1473,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,17,1485,        if (type == null) {,0.0,0,,0
org/joda/time/DateTime,17,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/DateTime,17,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,,0
org/joda/time/DateTime,17,1489,        if (field.isSupported() == false) {,0.0,0,,0
org/joda/time/DateTime,17,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,,0
org/joda/time/DateTime,17,1492,"        return new Property(this, field);",0.0,0,,0
org/joda/time/DateTime,17,1503,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1515,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1527,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1538,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1549,"        return new LocalDate(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1560,"        return new LocalTime(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,17,1577,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,,0
org/joda/time/DateTime,17,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,,0
org/joda/time/DateTime,17,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,,0
org/joda/time/DateTime,17,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,,0
org/joda/time/DateTime,17,1641,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,,0
org/joda/time/DateTime,17,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,,0
org/joda/time/DateTime,17,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,,0
org/joda/time/DateTime,17,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,,0
org/joda/time/DateTime,17,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,,0
org/joda/time/DateTime,17,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,,0
org/joda/time/DateTime,17,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,,0
org/joda/time/DateTime,17,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,,0
org/joda/time/DateTime,17,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,,0
org/joda/time/DateTime,17,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,,0
org/joda/time/DateTime,17,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,,0
org/joda/time/DateTime,17,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,,0
org/joda/time/DateTime,17,1840,"        return new Property(this, getChronology().era());",0.0,0,,0
org/joda/time/DateTime,17,1849,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,,0
org/joda/time/DateTime,17,1858,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,,0
org/joda/time/DateTime,17,1867,"        return new Property(this, getChronology().yearOfEra());",0.0,0,,0
org/joda/time/DateTime,17,1876,"        return new Property(this, getChronology().year());",0.0,0,,0
org/joda/time/DateTime,17,1885,"        return new Property(this, getChronology().weekyear());",0.0,0,,0
org/joda/time/DateTime,17,1894,"        return new Property(this, getChronology().monthOfYear());",0.0,0,,0
org/joda/time/DateTime,17,1903,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,,0
org/joda/time/DateTime,17,1912,"        return new Property(this, getChronology().dayOfYear());",0.0,0,,0
org/joda/time/DateTime,17,1921,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,,0
org/joda/time/DateTime,17,1930,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,,0
org/joda/time/DateTime,17,1941,"        return new Property(this, getChronology().hourOfDay());",0.0,0,,0
org/joda/time/DateTime,17,1950,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,,0
org/joda/time/DateTime,17,1959,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,,0
org/joda/time/DateTime,17,1968,"        return new Property(this, getChronology().secondOfDay());",0.0,0,,0
org/joda/time/DateTime,17,1977,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,,0
org/joda/time/DateTime,17,1986,"        return new Property(this, getChronology().millisOfDay());",0.0,0,,0
org/joda/time/DateTime,17,1995,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,,0
org/joda/time/base/BaseDateTime,17,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,,0
org/joda/time/base/BaseDateTime,17,62,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,17,74,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,17,87,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,97,"        this(instant, ISOChronology.getInstance());",0.0,0,,0
org/joda/time/base/BaseDateTime,17,98,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,17,111,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,146,        super();,0.0,0,,0
org/joda/time/base/BaseDateTime,17,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,,0
org/joda/time/base/BaseDateTime,17,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,17,149,        iChronology = chrono;,0.0,0,,0
org/joda/time/base/BaseDateTime,17,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,,0
org/joda/time/base/BaseDateTime,17,151,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,168,        super();,0.0,0,,0
org/joda/time/base/BaseDateTime,17,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,,0
org/joda/time/base/BaseDateTime,17,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,,0
org/joda/time/base/BaseDateTime,17,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,17,172,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,,0
org/joda/time/base/BaseDateTime,17,197,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,17,318,    },0.0,0,,0
org/joda/time/base/BaseDateTime,17,329,        iChronology = checkChronology(chronology);,0.0,0,,0
org/joda/time/base/BaseDateTime,17,330,    },0.0,0,,0
org/joda/time/base/AbstractDateTime,17,66,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/base/AbstractDateTime,17,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,79,        return getChronology().era().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,115,        return getChronology().year().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,130,        return getChronology().weekyear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,270,        if (locale == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,271,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,273,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,,0
org/joda/time/base/AbstractDateTime,17,275,        cal.setTime(toDate());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,276,        return cal;,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,294,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,296,        cal.setTime(toDate());,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,297,        return cal;,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,308,        if (pattern == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,309,            return toString();,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,322,        if (pattern == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,323,            return toString();,0.0,0,,0
org/joda/time/base/AbstractDateTime,17,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,89,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/base/AbstractInstant,17,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,103,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,104,            return false;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,106,        return type.getField(getChronology()).isSupported();,0.0,0,,0
org/joda/time/base/AbstractInstant,17,124,        if (field == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,,0
org/joda/time/base/AbstractInstant,17,127,        return field.get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,137,        return new Instant(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,146,"        return new DateTime(getMillis(), getZone());",0.0,0,,0
org/joda/time/base/AbstractInstant,17,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,,0
org/joda/time/base/AbstractInstant,17,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,166,        chrono = chrono.withZone(zone);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,167,"        return new DateTime(getMillis(), chrono);",0.0,0,,0
org/joda/time/base/AbstractInstant,17,177,"        return new DateTime(getMillis(), chronology);",0.0,0,,0
org/joda/time/base/AbstractInstant,17,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,,0
org/joda/time/base/AbstractInstant,17,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,,0
org/joda/time/base/AbstractInstant,17,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,211,        chrono = chrono.withZone(zone);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,,0
org/joda/time/base/AbstractInstant,17,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,,0
org/joda/time/base/AbstractInstant,17,235,        return new Date(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,260,            return true;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,263,            return false;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,278,        return,0.0,0,,0
org/joda/time/base/AbstractInstant,17,296,        if (this == other) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,297,            return 0;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,300,        long otherMillis = other.getMillis();,0.0,0,,0
org/joda/time/base/AbstractInstant,17,301,        long thisMillis = getMillis();,0.0,0,,0
org/joda/time/base/AbstractInstant,17,304,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,305,            return 0;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,307,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,308,            return -1;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,310,            return 1;,0.0,0,,0
org/joda/time/base/AbstractInstant,17,323,        return (getMillis() > instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,345,        return isAfter(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,357,        return (getMillis() < instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,379,        return isBefore(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,391,        return (getMillis() == instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,17,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,413,        return isEqual(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,436,        if (formatter == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,17,437,            return toString();,0.0,0,,0
org/joda/time/base/AbstractInstant,17,439,        return formatter.print(this);,0.0,0,,0
org/joda/time/base/AbstractInstant,17,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,,0
org/joda/time/DateTime,17,2045,            super();,0.0,0,,0
org/joda/time/DateTime,17,2046,            iInstant = instant;,0.0,0,,0
org/joda/time/DateTime,17,2047,            iField = field;,0.0,0,,0
org/joda/time/DateTime,17,2048,        },0.0,0,,0
org/joda/time/DateTime,17,2054,            oos.writeObject(iInstant);,0.0,0,,0
org/joda/time/DateTime,17,2055,            oos.writeObject(iField.getType());,0.0,0,,0
org/joda/time/DateTime,17,2056,        },0.0,0,,0
org/joda/time/DateTime,17,2062,            iInstant = (DateTime) oos.readObject();,0.0,0,,0
org/joda/time/DateTime,17,2063,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,,0
org/joda/time/DateTime,17,2064,            iField = type.getField(iInstant.getChronology());,0.0,0,,0
org/joda/time/DateTime,17,2065,        },0.0,0,,0
org/joda/time/DateTime,17,2074,            return iField;,0.0,0,,0
org/joda/time/DateTime,17,2083,            return iInstant.getMillis();,0.0,0,,0
org/joda/time/DateTime,17,2093,            return iInstant.getChronology();,0.0,0,,0
org/joda/time/DateTime,17,2102,            return iInstant;,0.0,0,,0
org/joda/time/DateTime,17,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,17,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,17,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,17,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,17,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,,0
org/joda/time/DateTime,17,2203,"            return setCopy(text, null);",0.0,0,,0
org/joda/time/DateTime,17,2227,            return setCopy(getMaximumValue());,0.0,0,,0
org/joda/time/DateTime,17,2244,            return setCopy(getMinimumValue());,0.0,0,,0
org/joda/time/DateTime,17,2254,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,17,2263,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,17,2273,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,17,2283,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,17,2294,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DurationFieldType,17,266,            if (this == obj) {,0.0,0,,0
org/joda/time/DurationFieldType,17,267,                return true;,0.0,0,,0
org/joda/time/DurationFieldType,17,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,,0
org/joda/time/DurationFieldType,17,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,,0
org/joda/time/DurationFieldType,17,272,            return false;,0.0,0,,0
org/joda/time/DurationFieldType,17,282,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,,0
org/joda/time/DurationFieldType,17,284,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DurationFieldType,17,286,                    return chronology.eras();,0.0,0,,0
org/joda/time/DurationFieldType,17,288,                    return chronology.centuries();,0.0,0,,0
org/joda/time/DurationFieldType,17,290,                    return chronology.weekyears();,0.0,0,,0
org/joda/time/DurationFieldType,17,292,                    return chronology.years();,0.0,0,,0
org/joda/time/DurationFieldType,17,294,                    return chronology.months();,0.0,0,,0
org/joda/time/DurationFieldType,17,296,                    return chronology.weeks();,0.0,0,,0
org/joda/time/DurationFieldType,17,298,                    return chronology.days();,0.0,0,,0
org/joda/time/DurationFieldType,17,300,                    return chronology.halfdays();,0.0,0,,0
org/joda/time/DurationFieldType,17,302,                    return chronology.hours();,0.0,0,,0
org/joda/time/DurationFieldType,17,304,                    return chronology.minutes();,0.0,0,,0
org/joda/time/DurationFieldType,17,306,                    return chronology.seconds();,0.0,0,,0
org/joda/time/DurationFieldType,17,308,                    return chronology.millis();,0.0,0,,0
org/joda/time/DurationFieldType,17,311,                    throw new InternalError();,0.0,0,,0
org/joda/time/DurationFieldType,17,321,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DurationFieldType,17,323,                    return ERAS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,325,                    return CENTURIES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,327,                    return WEEKYEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,329,                    return YEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,331,                    return MONTHS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,333,                    return WEEKS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,335,                    return DAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,337,                    return HALFDAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,339,                    return HOURS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,341,                    return MINUTES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,343,                    return SECONDS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,345,                    return MILLIS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,17,348,                    return this;,0.0,0,,0
org/joda/time/DateTimeZone,17,1271,        Stub(String id) {,0.0,0,,0
org/joda/time/DateTimeZone,17,1272,            iID = id;,0.0,0,,0
org/joda/time/DateTimeZone,17,1273,        },0.0,0,,0
org/joda/time/DateTimeZone,17,1276,            out.writeUTF(iID);,0.0,0,,0
org/joda/time/DateTimeZone,17,1277,        },0.0,0,,0
org/joda/time/DateTimeZone,17,1280,            iID = in.readUTF();,0.0,0,,0
org/joda/time/DateTimeZone,17,1281,        },0.0,0,,0
org/joda/time/DateTimeZone,17,1284,            return forID(iID);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,72,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,77,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,92,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,97,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,17,119,        return iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,130,        if (this == obj) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,131,            return true;,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,,0
org/joda/time/field/ScaledDurationField,17,138,        return false;,0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,73,        return iField.isPrecise();,0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,81,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,85,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,89,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,93,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,17,101,        return iField.getUnitMillis();,0.0,0,,0
org/joda/time/field/FieldUtils,17,36,        super();,0.0,0,,0
org/joda/time/field/FieldUtils,17,37,    },0.0,0,,0
org/joda/time/field/FieldUtils,17,49,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/field/FieldUtils,17,52,        return -value;,0.0,0,,0
org/joda/time/field/FieldUtils,17,64,        int sum = val1 + val2;,0.0,0,,0
org/joda/time/field/FieldUtils,17,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,67,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,70,        return sum;,0.0,0,,0
org/joda/time/field/FieldUtils,17,85,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,100,        long diff = val1 - val2;,0.0,0,,0
org/joda/time/field/FieldUtils,17,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,103,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,106,        return diff;,0.0,0,,0
org/joda/time/field/FieldUtils,17,119,        long total = (long) val1 * (long) val2;,0.0,0,,0
org/joda/time/field/FieldUtils,17,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,121,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,124,        return (int) total;,0.0,0,,0
org/joda/time/field/FieldUtils,17,137,        switch (scalar) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,139,            return -val1;,0.0,0,,0
org/joda/time/field/FieldUtils,17,141,            return 0L;,0.0,0,,0
org/joda/time/field/FieldUtils,17,143,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,17,145,        long total = val1 * scalar;,0.0,0,,0
org/joda/time/field/FieldUtils,17,146,        if (total / scalar != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,147,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,150,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,17,162,        if (val2 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,163,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,17,165,        if (val2 == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,166,            return 0;,0.0,0,,0
org/joda/time/field/FieldUtils,17,168,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,17,169,        if (total / val2 != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,170,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,17,173,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,17,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,185,            return (int) value;,0.0,0,,0
org/joda/time/field/FieldUtils,17,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,,0
org/joda/time/field/FieldUtils,17,199,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,,0
org/joda/time/field/FieldUtils,17,200,        return FieldUtils.safeToInt(val);,0.0,0,,0
org/joda/time/field/FieldUtils,17,214,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,215,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,17,219,    },0.0,0,,0
org/joda/time/field/FieldUtils,17,233,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,17,249,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,250,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,17,254,    },0.0,0,,0
org/joda/time/field/FieldUtils,17,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,,0
org/joda/time/field/FieldUtils,17,289,        if (minValue >= maxValue) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,290,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,,0
org/joda/time/field/FieldUtils,17,293,        int wrapRange = maxValue - minValue + 1;,0.0,0,,0
org/joda/time/field/FieldUtils,17,294,        value -= minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,17,296,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,297,            return (value % wrapRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,17,300,        int remByRange = (-value) % wrapRange;,0.0,0,,0
org/joda/time/field/FieldUtils,17,302,        if (remByRange == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,303,            return 0 + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,17,305,        return (wrapRange - remByRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,17,318,        if (object1 == object2) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,319,            return true;,0.0,0,,0
org/joda/time/field/FieldUtils,17,321,        if (object1 == null || object2 == null) {,0.0,0,,0
org/joda/time/field/FieldUtils,17,322,            return false;,0.0,0,,0
org/joda/time/field/FieldUtils,17,324,        return object1.equals(object2);,0.0,0,,0
org/joda/time/field/MillisDurationField,17,53,"        return ""millis"";",0.0,0,,0
org/joda/time/field/MillisDurationField,17,85,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,17,89,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,93,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,17,97,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,101,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,105,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,109,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,113,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,,0
org/joda/time/field/MillisDurationField,17,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,,0
org/joda/time/field/MillisDurationField,17,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/MillisDurationField,17,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/MillisDurationField,17,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,17,135,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,17,137,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,17,138,            return 0;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,140,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,17,141,            return -1;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,143,            return 1;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,148,        if (obj instanceof MillisDurationField) {,0.0,0,,0
org/joda/time/field/MillisDurationField,17,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,17,151,        return false;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,164,"        return ""DurationField[millis]"";",0.0,0,,0
org/joda/time/field/MillisDurationField,17,171,        return INSTANCE;,0.0,0,,0
org/joda/time/field/MillisDurationField,17,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,,0
