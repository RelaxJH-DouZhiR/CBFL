dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.14368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,0,0,0,4,35,4,0.25,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,445,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,441,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,438,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,458,            newTypes[i] = fieldType;,0,0,0,1,2,0,0,0,0,3,24,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0,0,0,1,2,0,0,0,0,3,67,4,0.04167,1,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,296,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,297,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,298,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,299,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.00787,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,249,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,243,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,0,0,0,1,2,0,0,0,0,3,33,4,1.125,1,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0,0,0,6,12,0,0,0,0,18,75,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0,0,0,3,7,0,0,0,0,10,53,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,0,0,3,7,0,0,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,0,0,3,7,0,0,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,335,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",0,0,0,3,6,0,0,0,0,9,55,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,4,0,0,4,42,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,0,0,0,2,4,0,0,0,0,6,39,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,40,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,        if (fromYear <= toYear) {,0,0,0,1,3,0,0,0,0,4,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,        if (id == null) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0,0,0,1,2,0,0,0,0,3,64,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,        DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,1.77778,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,612,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,1805,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,597,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,600,        return type.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,60,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,567,        switch (index) {,0,0,0,1,3,0,0,0,0,4,16,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,573,                return getChronology().dayOfMonth().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,58,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,545,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,560,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,564,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,200,        return new LocalDateTime(,0,0,0,0,1,1,0,0,0,2,25,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,210,        int yearOfEra = calendar.get(Calendar.YEAR);,0,0,0,1,2,0,0,0,0,3,44,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0,0,0,1,2,1,8,0,0,10,28,3,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,548,                return chrono.dayOfMonth();,0,0,0,1,2,1,8,0,0,9,27,1,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,550,                return chrono.millisOfDay();,0,0,0,1,2,1,0,0,0,4,28,4,0.37209,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,529,        return 4;,0,0,0,0,0,1,0,0,0,1,9,4,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,663,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,0.30189,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",0,0,0,2,4,1,0,0,0,7,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,237,            buf.append('-');,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,255,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,82,4,0.16667,0,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,83,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",0,0,0,1,2,0,0,0,0,3,23,4,0.07143,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,0,0,0,0,0,0,0,0,0,0,60,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0,0,0,3,6,0,0,0,0,9,75,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,692,        values[realIndex] = newValue;,0,0,0,1,2,0,0,0,0,3,29,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,693,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,689,        if (realIndex == -1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,            return iText.length();,0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,                int seconds = period.get(DurationFieldType.seconds());,0,0,0,2,4,0,0,0,0,6,54,4,0.04348,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,0,0,0,0,7,42,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,            long instant = 0L;,0,0,0,0,0,0,0,0,0,0,18,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,57,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);",0,0,0,2,4,0,0,0,0,6,64,4,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,515,        if (amount == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,3.55556,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,514,        int index = indexOfSupported(fieldType);,0,0,0,1,2,0,0,0,0,3,40,4,3.04762,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,2.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,339,            DateTimeField loopField = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,46,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0,0,0,3,7,0,0,0,0,10,62,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,1.14286,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,0,0,0,4,44,4,1.14286,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);",0,0,0,2,4,1,0,0,0,7,58,4,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,410,            return chrono.monthOfYear();,0,0,0,1,2,1,0,0,0,4,28,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,412,            return chrono.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,27,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,49,4,0.66667,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,395,        return 2;,0,0,0,0,0,1,0,0,0,1,9,4,0.64646,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,0,0,0,2,5,0,0,0,0,7,80,4,0.62136,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,237,        return (int[]) iValues.clone();,0,0,0,3,6,1,0,0,0,10,31,4,0.47407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,142,                return val1;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,0,0,0,6,78,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.75385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,0,0,0,7,54,4,0.73134,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,            hms = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.57647,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,            if (prev > Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,28,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.42982,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,87,4,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0,0,0,3,6,0,0,0,0,9,59,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,0,0,0,1,2,1,4,0,0,4,27,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,            int offset = getOffsetToAdd(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.00476,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,344,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.0037,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.05556,0,0,-1
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0,0,0,1,2,0,0,0,0,3,61,4,0.03333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,63,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.01282,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,18,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.00833,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0,0,0,1,2,1,0,0,0,4,57,4,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,194,            cutoverInstant = gregorianCutover.toInstant();,0,0,0,1,2,0,10,0,0,10,46,7,0.00129,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,6,0,0,6,33,8,0.008,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,10,0,0,10,26,5,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00341,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,954,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1483,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1490,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1691,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1909,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1913,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1923,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,0,0,0,7,25,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,6,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0,0,0,1,2,0,0,0,0,3,66,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/DateTime,20,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,                builder.appendMinuteOfHour(tokenLen);,0,0,0,1,2,0,0,0,0,3,37,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0,0,0,1,2,0,0,0,0,3,85,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",0,0,0,1,2,0,0,0,0,3,27,4,0.08333,1,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,357,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0,0,0,2,4,0,0,0,0,6,65,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,                break;,0,0,0,0,0,0,0,0,0,0,6,4,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,490,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,508,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",0,0,0,1,2,0,6,0,0,6,22,5,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",0,0,0,1,2,0,0,0,0,3,39,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,    },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,0,0,0,0,7,38,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,570,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,574,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,3.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,            return getWeeksInYear(year - 1);,0,0,0,1,2,1,0,0,0,4,32,4,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,        return parseLocalDateTime(text).toLocalDate();,0,0,0,2,4,1,0,0,0,7,46,4,2.72222,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());",0,0,0,3,6,1,0,0,0,10,56,4,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,2.57895,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,8,0,0,8,78,6,2.04167,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,8,0,0,8,57,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,893,                long nextLocal = nextTransition(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,49,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,894,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0,0,0,1,2,0,0,0,0,3,66,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,895,                if (nextLocal != nextAdjusted) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04167,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,        return iZone.nextTransition(instant);,0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,63,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,                buf.append(':');,0,0,0,1,2,0,8,0,0,11,16,1,0.03409,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03358,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.0298,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0,-1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0,-1
defect4j,time,org/joda/time/DateTime,26,518,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,519,        if (getChronology() == chronology) {,0,0,0,2,5,0,0,0,0,7,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,522,        return super.toDateTime(chronology);,0,0,0,1,2,1,0,0,0,4,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,5,10,1,0,0,0,16,75,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.52083,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,        iChronology = chrono;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,26,843,        return getOffset(instant) == getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.48039,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);",0,0,0,2,4,1,0,0,0,7,45,4,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,51,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,                return iStandardOffset;,0,0,0,0,0,1,0,0,0,1,23,4,0.36364,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,        return ISOChronology.getInstance(zone);,0,0,0,1,2,1,0,0,0,4,39,4,0.35211,0,0,-1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0,0,0,4,8,1,0,0,0,13,84,4,0.34783,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,59,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0,0,0,2,4,0,0,0,0,6,55,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0,0,0,0,0,0,0,0,0,0,13,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02439,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0,0,0,1,2,1,0,0,0,4,24,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,                return period;,0,0,0,0,0,1,0,0,0,1,14,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,2,5,0,0,0,0,7,62,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,3,7,0,0,0,0,10,72,4,0.02174,0,0,-1
