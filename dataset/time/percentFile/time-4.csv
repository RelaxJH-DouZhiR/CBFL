dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,        return MIN;,0,0,0,0,0,1,0,0,0,1,11,4,0.00329,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.00327,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,8,4,0,16,87,1,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,4,0,0,1,3,0,6,2,0,12,32,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,152,        if (thisMillis < otherMillis) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00233,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",2,1,0,1,2,0,4,0,0,7,59,7,0.0021,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,2,0,0,0,0,0,0,2,0,5,32,10,0.0021,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,294,                    return chronology.months();,0,0,0,1,2,1,0,0,0,4,27,4,0.00197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,2,0,0,1,2,1,4,0,0,6,32,4,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,4,0,0,5,1,12,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,2,0,0,1,2,0,0,0,0,2,22,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,4,0,0,1,2,0,0,0,0,5,42,1,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00121,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,480,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00081,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,2,1,0,1,3,0,0,0,0,3,19,7,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,6,1,0,0,0,1,0,0,0,7,14,3,0.00075,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,285,            return ISOChronology.getInstance();,0,0,0,1,2,1,0,0,0,4,35,4,0.00067,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,0,2,0,0,2,8,5,0.00063,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },8,1,0,0,1,0,0,0,0,10,1,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,116,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.0006,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,166,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00058,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,5,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,221,        return MIN_YEAR;,8,0,0,0,0,1,8,0,0,18,16,1,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,77,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,6,0,0,6,46,5,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,108,"                cCache.put(zone, chrono);",4,2,0,1,2,0,0,0,0,6,25,6,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,96,        if (zone == null) {,2,0,0,1,3,0,4,0,0,6,19,5,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,100,        ISOChronology chrono = cFastCache[index];,4,0,0,1,2,0,10,0,0,15,41,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,104,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,105,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,106,            if (chrono == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,111,        cFastCache[index] = chrono;,0,0,0,1,2,0,0,0,0,3,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,112,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00037,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,129,            return iRangeDurationField;,2,0,0,0,0,1,4,0,0,7,27,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,547,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,548,            iMillis = fixedMillis;,12,1,0,0,0,0,10,2,0,29,22,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,549,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,114,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,6,1,0,1,2,0,12,0,0,20,55,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,100,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,1,0,0,0,4,0,0,11,41,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,102,    },2,0,0,0,1,0,8,0,0,10,1,6,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,161,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,3,0,4,0,9,49,2,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,162,        if (sm != null) {,0,0,0,1,3,0,4,0,0,4,17,8,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,287,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,6,1,0,2,4,1,2,0,0,9,70,5,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,132,        return null;,6,0,0,0,0,1,0,2,0,9,12,3,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,133,        return INSTANCE_UTC;,2,0,0,0,0,1,10,0,0,13,20,9,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,175,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,0,0,6,49,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,176,        if (sm != null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,179,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,182,        synchronized(DateTimeZone.class) {,2,0,0,1,3,0,0,0,0,2,34,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,183,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,184,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,123,        return iZone.hashCode();,0,0,1,1,2,1,4,0,0,13,24,3,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,1273,        return 57 + getID().hashCode();,4,1,0,2,4,1,0,0,0,6,31,6,0.00032,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,404,            super(field.getType());,8,1,0,2,4,0,0,0,0,10,23,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,405,            if (!field.isSupported()) {,6,1,1,2,5,0,0,0,0,10,27,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,408,            iField = field;,4,0,0,0,0,0,0,4,0,8,15,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,409,            iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,410,            iDurationField = durationField;,2,0,0,0,0,0,0,0,0,3,31,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,411,            iTimeField = useTimeArithmetic(durationField);,2,1,0,1,2,0,0,0,0,3,46,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,412,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,413,            iLeapDurationField = leapDurationField;,12,2,0,0,0,0,14,4,0,34,39,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,414,        },2,0,0,0,1,0,0,2,0,5,1,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,81,"        super(base, zone);",0,0,0,1,2,0,0,0,0,3,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,55,        if (base == null) {,2,0,0,1,3,0,0,0,0,2,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,58,        base = base.withUTC();,2,0,0,1,2,0,6,0,0,8,22,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,59,        if (base == null) {,6,0,0,1,3,0,0,0,0,6,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,62,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,65,"        return new ZonedChronology(base, zone);",6,1,0,1,2,1,0,4,0,11,39,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,85,        return (DateTimeZone)getParam();,0,0,0,2,4,1,0,0,0,7,32,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0,0,0,1,2,0,0,0,0,3,66,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,154,"        fields.eras = convertField(fields.eras, converted);",4,0,0,1,2,0,0,0,0,5,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,155,"        fields.centuries = convertField(fields.centuries, converted);",14,1,0,1,2,0,4,0,0,21,61,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,156,"        fields.years = convertField(fields.years, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,157,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,159,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,160,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,163,"        fields.hours = convertField(fields.hours, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,164,"        fields.minutes = convertField(fields.minutes, converted);",2,0,0,1,2,0,0,2,0,5,57,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,165,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,166,"        fields.millis = convertField(fields.millis, converted);",4,0,0,1,2,0,0,0,0,5,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,170,"        fields.year = convertField(fields.year, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",2,0,0,1,2,0,0,0,0,2,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,69,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,202,        if (types.length == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,323,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00629,0,0,-1
defect4j,time,org/joda/time/Partial,2,311,        return iTypes.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.00625,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,                    return chronology.years();,4,0,0,1,2,1,16,4,0,24,26,1,0.00459,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.002,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,4,3,0,1,2,1,6,0,0,15,32,1,0.00167,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,2,1,0,1,2,1,2,0,0,5,25,3,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,    },2,0,0,0,1,0,10,0,0,12,1,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,10,1,0,1,3,0,8,0,0,21,32,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,8,1,1,1,2,0,22,0,0,36,22,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,2,0,0,1,2,1,4,0,0,7,32,3,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,            if (value > field.getMaximumValue()) {,0,0,0,2,5,0,0,0,0,7,38,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,4,1,0,2,5,0,10,0,0,15,38,1,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,2,0,0,0,0,1,8,0,0,10,20,1,0.00163,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,4,1,0,2,4,1,8,0,0,13,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,532,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.00131,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,16,1,1,1,2,0,16,4,0,41,53,1,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00128,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,209,                for (int i = chronos.size(); --i >= 0;) {,0,0,0,2,5,0,0,0,0,7,41,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,210,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,10,1,0,1,3,0,28,4,0,44,63,1,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,214,                        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,400,        return iCutoverInstant;,0,0,0,0,0,1,0,0,0,1,23,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",2,1,0,3,6,0,6,0,0,10,62,6,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,285,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,75,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,225,                chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,490,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,514,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00124,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,2,0,0,1,2,1,6,0,0,8,32,5,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,2,0,0,1,2,1,8,0,0,10,32,6,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,310,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,320,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,6,1,0,2,5,0,2,2,0,12,24,3,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,324,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,489,            return result;,2,0,0,0,0,1,0,0,0,2,14,5,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,6,0,0,11,33,1,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,299,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,4,0,0,1,2,0,0,2,0,7,46,5,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",6,0,0,3,6,0,10,4,0,20,105,1,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,197,            if (cutoverDate.getYear() <= 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.00121,0,0,-1
defect4j,time,org/joda/time/Instant,2,144,        return this;,8,0,0,0,0,1,0,0,0,8,12,1,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,0,0,0,2,68,7,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,2,0,0,2,5,0,0,2,0,5,27,6,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",6,1,1,1,2,1,8,2,0,19,47,1,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,999,        int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1001,        int offset = getOffset(instantLocal - offsetLocal);,2,1,0,1,2,0,0,0,0,3,51,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1032,        long instantUTC = instantLocal - offset;,2,0,0,0,0,0,0,0,0,4,40,8,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,492,                    return chronology.year();,8,1,0,1,2,1,0,0,0,9,25,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,480,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00119,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,335,"    public LocalDate(long instant, Chronology chronology) {",6,0,0,1,3,1,0,2,0,9,55,2,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,336,        chronology = DateTimeUtils.getChronology(chronology);,2,0,1,1,2,0,6,0,0,18,53,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",6,0,0,2,4,0,8,0,0,14,86,5,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,339,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0,0,0,2,4,0,0,0,0,6,63,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,341,        iChronology = chronology;,10,1,0,0,0,0,0,0,0,12,25,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,342,    },4,0,0,0,1,0,4,4,0,12,1,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,1462,        return getChronology().year().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,52,4,0.00113,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,259,        if (this == readableInstant) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00109,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,211,            return iRangeDurationField;,6,1,0,0,0,1,32,0,0,39,27,1,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,64,        super(field);,0,0,0,1,2,0,0,0,0,3,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,65,        iChronology = chronology;,6,4,0,0,0,0,4,0,0,15,25,8,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,68,            iMinValue = min + 1;,6,2,0,0,0,0,0,0,0,9,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,74,        iSkip = skip;,0,0,0,0,0,0,0,0,0,0,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,88,        if (value <= iSkip) {,2,0,0,1,3,1,0,4,0,7,21,2,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,91,"        return super.set(millis, value);",4,0,0,1,2,1,4,0,0,8,32,3,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,133,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",4,0,0,1,2,0,0,0,0,5,116,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,4,0,0,1,2,0,8,0,0,14,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,106,        if (zone == null) {,2,1,0,1,3,0,2,2,0,7,19,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,111,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,112,            if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",8,1,0,2,4,0,0,0,0,10,76,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,12,91,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,118,"                cCache.put(zone, chrono);",0,0,0,1,2,0,0,0,0,3,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,120,        },0,0,0,0,1,0,6,0,0,6,1,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,121,        return chrono;,6,0,0,0,0,1,8,2,0,16,14,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,217,        if (getParam() == null) {,2,0,0,2,5,0,0,0,0,2,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,222,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,223,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,227,            field = fields.yearOfEra;,6,0,0,0,0,0,0,0,0,7,25,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,232,            field = fields.weekyear;,28,5,0,0,0,0,6,2,0,45,24,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,42,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,237,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,246,            field = new RemainderDateTimeField(,10,0,0,0,1,0,0,4,0,16,35,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,251,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,253,    },4,1,0,0,1,0,0,0,0,5,1,6,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,619,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,174,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,6,0,0,6,46,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,823,            return iJulianField.getMinimumValue();,8,6,0,1,2,1,10,0,0,26,38,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",2,0,0,1,2,0,0,0,0,4,54,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,154,"        return super.set(instant, value - iOffset);",4,1,0,1,2,1,0,0,0,5,43,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,193,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,2,83,"        return iField.set(instant, value);",4,2,0,1,2,1,14,0,0,20,34,3,0.00107,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,100,        return iMinValue;,0,0,0,0,0,1,10,0,0,10,17,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",10,1,0,2,4,0,4,0,0,16,48,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,2,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,742,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,743,                        instant = gregorianToJulian(instant);,4,0,0,1,2,0,12,0,0,17,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,746,                    if (get(instant) != value) {,4,1,0,2,5,0,0,0,0,5,28,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,675,                return iJulianField.get(instant);,0,1,0,1,2,1,8,0,0,9,33,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,229,        return iChronology.getMaxYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00107,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,186,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,83,            year++;,6,0,0,0,0,0,0,0,0,8,7,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,752,"                instant = iJulianField.set(instant, value);",2,1,0,1,2,0,10,0,0,15,43,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,739,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,740,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,940,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,738,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,765,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,672,            if (instant >= iCutover) {,6,2,0,1,3,0,0,0,0,8,26,1,0.00106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,6,0,0,1,2,3,0,10,0,20,99,1,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,2,1,0,2,4,0,8,0,0,12,51,6,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,52,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,4,0,0,2,4,0,0,0,0,5,55,5,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0,0,0,2,4,0,0,0,0,6,51,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0,0,0,2,4,0,0,0,0,6,55,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1055,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.00105,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.14368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0,0,0,0,0,1,10,0,0,12,7,3,0.13298,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,636,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11161,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",10,0,0,0,1,0,6,2,0,18,46,3,0.11062,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,4,0,0,1,2,0,0,2,0,6,16,4,0.10593,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,            if (iMaxFields == 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,10,1,0,0,0,0,0,0,0,12,66,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,4,1,0,1,4,0,0,0,0,6,26,5,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,2,1,0,0,0,0,0,0,0,3,11,10,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,4,1,0,1,3,0,0,0,0,5,19,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",6,6,0,2,4,0,4,0,0,17,52,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",2,0,0,1,2,0,12,0,0,15,34,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",4,1,0,1,2,0,6,0,0,12,35,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,10,1,0,0,0,1,0,0,0,12,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,4,2,0,10,46,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,                start = startRecurrence.previous,0,0,0,0,0,0,0,0,0,0,32,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,6,3,0,1,3,0,6,2,0,17,31,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,                end = endRecurrence.previous,0,0,0,0,0,0,0,0,0,0,28,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,                if (instant < 0 && end > 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,12,4,0,2,4,1,0,0,0,16,41,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,                long prev = iTailZone.previousTransition(instant);,0,0,0,1,2,0,0,0,0,3,50,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,                if (prev < instant) {,0,0,0,1,3,0,0,0,0,4,21,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,                    return prev;,0,0,0,0,0,1,0,0,0,1,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,61,4,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,4,0,0,0,0,1,0,0,0,4,20,5,0.0947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,            if (iTailZone != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.09363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,2,0,5,10,0,0,0,0,8,55,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,78,        } else {,4,0,1,0,2,0,0,4,0,13,8,3,0.09058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,128,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.08993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1946,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1947,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1951,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1959,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1961,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08961,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,127,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08929,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,12,5,0,1,2,0,0,0,0,19,34,1,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0,0,0,1,3,0,0,2,0,2,13,8,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1599,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.08834,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0,0,1,1,2,0,0,0,0,9,50,9,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",4,1,0,2,4,0,0,0,0,6,76,7,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1479,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1480,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2660,            DateTimePrinter[] elements = iPrinters;,2,1,0,1,2,0,0,0,0,3,39,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2661,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2665,            if (locale == null) {,2,0,0,1,3,0,0,0,0,2,21,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2670,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2671,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,0,0,0,6,78,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2674,        },2,0,0,0,1,0,0,0,0,2,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1218,            buf.append(iValue);,0,0,0,1,2,0,0,0,0,3,19,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1219,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,592,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,0,0,0,9,78,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,593,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,594,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,469,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,470,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,471,"        printTo(buf, millis, chrono);",2,0,0,1,2,0,0,0,0,2,29,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,472,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,628,        DateTimePrinter printer = requirePrinter();,0,0,0,1,2,0,0,0,0,3,43,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,629,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,632,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,633,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,634,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,635,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,6,1,0,3,7,0,0,2,0,9,65,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,641,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,0,0,2,4,0,0,0,0,5,79,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,642,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08418,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,926,            long prev = previousTransition(instantAdjusted);,8,0,0,1,2,0,0,0,0,9,48,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,927,            if (prev < instantAdjusted) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,928,                int offsetPrev = getOffset(prev);,18,1,0,1,2,0,4,4,0,27,33,1,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,929,                int diff = offsetPrev - offsetLocal;,8,1,0,0,0,0,0,12,0,21,36,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,930,                if (instantAdjusted - prev <= diff) {,0,0,0,1,3,0,0,0,0,4,37,4,0.08389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,83,                digits = 4;,4,1,0,0,0,0,4,0,0,12,11,9,0.08224,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,80,            if (value < 1000) {,4,1,0,1,3,3,0,4,0,13,19,1,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,82,            } else if (value < 10000) {,2,0,0,1,4,0,0,0,0,2,27,6,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.08197,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,0,0,0,13,50,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,199,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,200,        if (chrono == null) {,2,0,0,1,3,0,6,2,0,10,21,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,203,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07669,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,0.07645,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,196,        if (instant == null) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0753,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07508,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,63,            for (; size > 1; size--) {,0,1,0,1,3,0,8,0,0,9,26,5,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,66,            buf.append((char)(value + '0'));,16,2,0,3,6,0,12,0,0,33,32,1,0.07418,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,181,        return instant.getMillis();,0,0,0,1,2,1,0,0,0,4,27,4,0.07184,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,551,            } else if (iMode == 's') {,14,2,0,1,4,0,2,2,0,23,26,3,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,554,                offset = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,726,                        daysToAdd -= 7;,2,0,0,0,0,0,0,0,0,3,15,11,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,725,                    if (daysToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,20,9,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,144,        return localInstant;,2,0,0,0,0,1,0,0,0,2,20,4,0.07102,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1307,            int standardOffset = iStandardOffset;,0,0,0,0,0,0,0,0,0,0,37,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1308,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1309,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1314,                start = startRecurrence.next,2,0,0,0,0,0,0,0,0,2,28,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1322,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1325,                end = endRecurrence.next,12,3,0,0,0,0,0,0,0,15,24,1,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1333,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1335,            return (start > end) ? startRecurrence : endRecurrence;,2,0,0,1,2,1,4,0,0,6,55,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1546,            return iTailZone.getOffset(instant);,2,1,0,1,2,1,0,0,0,3,36,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,138,        DateTimeZone zone = getZone();,8,1,0,1,2,0,4,0,0,14,30,1,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,139,        int offset = zone.getOffsetFromLocal(localInstant);,2,0,0,1,2,0,0,2,0,5,51,6,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,141,        if (offset != zone.getOffset(localInstant)) {,0,0,0,2,5,0,0,0,0,7,45,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.07003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,178,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06983,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.06983,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,524,                    return chronology.secondOfMinute();,12,2,0,1,2,1,0,0,0,14,35,1,0.06944,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,162,            periodStart = next;,0,0,0,0,0,0,0,0,0,0,19,4,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",16,0,0,2,4,0,12,8,0,38,57,3,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2654,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.06887,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,            yearToUse = thisYear + (monthToUse / iMax);,10,2,0,1,2,0,0,2,0,15,43,3,0.0672,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,            monthToUse = (monthToUse % iMax) + 1;,8,3,0,1,2,0,0,0,0,12,37,1,0.0672,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,667,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,668,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,671,        return printer;,4,1,0,0,0,1,8,0,0,14,15,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,        if (months == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,        if (monthToUse >= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",8,0,0,1,2,0,0,0,0,10,67,1,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,        if (dayToUse > maxDay) {,8,1,0,1,3,0,10,2,0,23,24,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,        return datePart + timePart;,0,0,0,0,0,1,0,0,0,1,27,4,0.06702,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,925,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.06614,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1202,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1203,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1204,            Recurrence endRecurrence = iEndRecurrence;,10,0,0,0,0,0,0,2,0,13,42,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1209,                start = startRecurrence.next,0,1,0,0,0,0,4,0,0,5,28,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1211,                if (instant > 0 && start < 0) {,4,3,0,1,3,0,0,0,0,7,31,7,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1221,            },6,1,0,0,1,0,4,0,0,12,1,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1224,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1226,                if (instant > 0 && end < 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1236,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1238,            return (start > end) ? end : start;,0,0,0,1,2,1,0,0,0,4,35,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1582,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1583,            if (instant < end) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1586,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,6,0,0,6,41,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,4,0,0,6,34,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);",4,0,0,1,2,0,10,0,0,15,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0,0,0,2,4,0,0,0,0,6,48,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,4,1,0,0,0,3,0,16,0,24,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,4,0,0,7,21,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,720,                if (iAdvance) {,4,0,0,1,3,0,6,2,0,12,15,1,0.06579,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,0,0,0,4,35,4,0.25,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,445,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,441,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,438,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,458,            newTypes[i] = fieldType;,0,0,0,1,2,0,0,0,0,3,24,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0,0,0,1,2,0,0,0,0,3,67,4,0.04167,1,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,296,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,297,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,298,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,299,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.00787,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,249,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,243,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,333,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,304,                    return chronology.minutes();,0,0,0,1,2,1,4,0,0,4,28,7,0.00629,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.0061,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00565,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,302,                    return chronology.hours();,0,0,0,1,2,1,4,0,0,4,26,7,0.00549,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,282,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00392,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00324,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,818,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00284,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,804,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,200,            int value = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,202,"            if (value < field.getMinimumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,184,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.00265,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.00228,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00228,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,59,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,101,        return ((month - 1) * MILLIS_PER_MONTH);,0,0,0,2,4,1,0,0,0,7,40,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,148,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,158,        return MILLIS_PER_MONTH;,0,0,0,0,0,1,0,0,0,1,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,524,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,108,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,123,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,125,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,135,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,136,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,141,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,146,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0,0,0,1,2,0,0,0,0,3,41,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,152,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,209,        int relativeYear = year - 1687;,0,0,0,0,0,0,0,0,0,0,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,233,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,248,        if (getBase() == null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,252,"            fields.year = new SkipDateTimeField(this, fields.year);",0,0,0,1,2,0,0,0,0,3,55,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,255,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,257,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,259,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,51,public final class CopticChronology extends BasicFixedMonthChronology {,0,0,0,0,1,0,0,0,0,1,71,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,982,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,8,0,0,13,47,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,999,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1001,        int offset = getOffset(instantLocal - offsetLocal);,10,1,0,1,2,0,2,0,0,14,51,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1032,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,10,6,0,3,7,0,0,0,0,16,69,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,4,0,0,7,35,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",8,0,0,2,4,0,8,0,0,17,48,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",20,5,0,2,4,0,18,4,0,52,52,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,18,0,0,25,56,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,4,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,378,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,480,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",10,0,0,1,2,0,8,2,0,21,68,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,483,            if (get(result) != value) {,4,1,0,2,5,0,4,2,0,12,27,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,489,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,532,            return iLeapDurationField;,18,1,0,0,0,1,6,2,0,28,26,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,565,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,582,            return iField.getMaximumValue();,10,0,0,1,2,1,4,2,0,17,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,4,83,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,174,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,6,0,0,8,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,193,            cutoverInstant = DEFAULT_CUTOVER;,0,0,0,0,0,0,0,0,0,0,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",2,0,0,1,2,1,4,0,0,7,71,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,672,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,675,                return iJulianField.get(instant);,0,0,0,1,2,1,0,0,0,4,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,742,                    if (instant + iGapDuration < iCutover) {,6,1,0,1,3,0,2,0,0,9,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,743,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,14,0,0,17,37,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,746,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,752,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,4,2,0,9,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,940,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,154,"        return super.set(instant, value - iOffset);",0,0,0,1,2,1,0,0,0,4,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,82,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,186,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,211,            return iRangeDurationField;,4,0,0,0,0,1,0,0,0,4,27,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,133,"        super(base, param);",6,1,0,1,2,0,0,0,0,7,19,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,134,    },2,0,0,0,1,0,8,0,0,11,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",8,0,0,1,2,3,4,4,0,21,85,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0,0,0,1,2,0,0,0,0,3,116,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,106,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,111,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,112,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",10,0,0,2,4,0,2,0,0,14,76,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,118,"                cCache.put(zone, chrono);",8,1,0,1,2,0,0,0,0,10,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,120,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,121,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,217,        if (getParam() == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,222,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,223,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,227,            field = fields.yearOfEra;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,232,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,4,0,0,4,42,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",12,2,0,1,2,0,2,2,0,19,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,237,            fields.centuryOfEra = new DividedDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,246,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,8,0,0,8,51,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,251,            fields.era = ERA_FIELD;,20,0,0,0,0,0,12,6,0,40,23,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,253,    },28,2,1,0,1,0,6,0,0,40,1,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,54,    },0,0,0,0,1,0,0,2,0,4,1,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,66,        int min = super.getMinimumValue();,12,0,0,1,2,0,4,0,0,17,34,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",2,0,1,2,4,0,10,0,0,15,72,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,88,        if (value <= iSkip) {,16,1,0,1,3,0,4,0,0,23,21,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,410,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,6,0,0,15,25,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,421,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,422,            return iField.get(localInstant);,0,0,0,1,2,1,6,0,0,6,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,514,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,4,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0,0,0,4,8,0,0,0,0,12,71,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,738,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,739,"                instant = iGregorianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,740,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,765,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,823,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,38,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,78,        if (year <= 0) {,2,1,0,1,3,0,0,2,0,5,16,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0,0,0,2,4,1,0,0,0,7,84,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,100,        return iMinValue;,2,2,0,0,0,1,8,0,0,12,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,4,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,527,        return this;,4,1,0,0,0,1,0,0,0,5,12,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,209,                for (int i = chronos.size(); --i >= 0;) {,4,1,0,2,5,0,4,0,0,10,41,8,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,210,                    chrono = chronos.get(i);,8,0,0,1,2,0,4,0,0,13,24,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,12,0,0,18,63,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,214,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,400,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,51,        super(DateTimeFieldType.era());,2,0,0,2,4,3,4,16,0,25,31,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,52,        iEraText = text;,8,0,0,0,0,0,0,2,0,12,16,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,53,    },4,0,0,0,1,0,0,0,0,4,1,7,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,111,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,454,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,455,"            super(field, field.getType());",6,0,0,2,4,0,4,0,0,11,30,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,456,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,457,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,458,            iLeapDurationField = leapDurationField;,0,0,0,0,0,0,0,0,0,0,39,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,459,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,391,        LimitDurationField(DurationField field) {,0,0,0,1,3,0,0,0,0,4,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,393,        },0,0,0,0,1,0,0,2,0,4,1,6,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,99,"        super(base, null);",4,0,0,1,2,0,0,0,0,5,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,102,        iUpperLimit = upperLimit;,0,0,0,0,0,0,0,0,0,0,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,67,        if (base == null) {,4,2,0,1,3,0,8,0,0,15,19,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,8,1,0,1,2,0,4,0,0,15,65,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",8,0,0,3,6,4,0,10,0,21,77,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",6,0,0,1,2,0,0,12,0,19,66,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,213,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,216,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,217,"        fields.weekyears = convertField(fields.weekyears, converted);",14,0,0,1,2,0,4,0,0,20,61,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,218,"        fields.weeks = convertField(fields.weeks, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,0,0,0,1,2,0,0,0,0,3,33,4,1.125,1,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0,0,0,6,12,0,0,0,0,18,75,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0,0,0,3,7,0,0,0,0,10,53,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,0,0,3,7,0,0,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,0,0,3,7,0,0,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,564,        if (list.size() > 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);",0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,445,    },0,0,0,0,1,0,0,0,0,1,1,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/Period,5,444,"        super(duration, type, chronology);",0,0,0,1,2,0,0,0,0,3,34,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,372,        PeriodType type = cMonths;,0,0,0,0,0,0,0,0,0,0,26,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,            type = new PeriodType(,0,0,0,0,1,0,4,0,0,4,22,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,224,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,234,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,280,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,505,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,3,6,0,8,0,0,8,50,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,3,6,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,3,6,0,0,0,0,9,48,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,3,6,0,0,0,0,9,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,520,"            cache.put(time(), time());",0,0,0,3,6,0,0,0,0,9,26,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,521,"            cache.put(years(), years());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,522,"            cache.put(months(), months());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,523,"            cache.put(weeks(), weeks());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",2,1,0,3,6,0,8,0,0,12,26,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",2,0,0,3,6,0,4,0,0,6,28,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,526,"            cache.put(minutes(), minutes());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,527,"            cache.put(seconds(), seconds());",0,0,0,3,6,0,0,0,0,9,32,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,528,"            cache.put(millis(), millis());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",6,0,0,1,2,0,6,4,0,18,58,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,2,0,0,1,2,0,6,2,0,10,38,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,532,        if (cached instanceof PeriodType) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",2,0,0,1,2,1,0,2,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,1,2,1,6,0,0,7,38,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,770,"        return withFieldRemoved(5, ""NoMinutes"");",0,0,0,1,2,1,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,851,        int hash = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,852,        for (int i = 0; i < iTypes.length; i++) {,24,3,1,1,3,0,32,4,0,69,41,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,853,            hash += iTypes[i].hashCode();,2,0,1,2,4,0,2,0,0,9,29,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,855,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,779,"        return withFieldRemoved(6, ""NoSeconds"");",0,0,0,1,2,1,0,0,0,4,40,4,0.125,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,809,                types[i - 1] = iTypes[i];,8,1,1,2,4,0,4,2,0,26,25,1,0.11111,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,163,        PeriodType type = cYMD;,0,0,0,0,0,0,0,0,0,0,23,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,164,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,165,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,175,        return type;,2,1,1,0,0,1,8,0,0,15,12,3,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,193,        PeriodType type = cYWDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,194,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,195,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,205,            cYWDTime = type;,4,0,0,0,0,0,0,0,0,5,16,5,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,207,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.08333,0,0,-1
defect4j,time,org/joda/time/Period,5,737,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",6,1,0,2,4,1,4,0,0,11,68,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,746,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",8,0,1,2,4,1,4,0,0,17,69,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,755,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",8,0,0,2,4,1,4,0,0,13,68,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,764,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0,0,0,2,4,1,0,0,0,7,67,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,774,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",6,0,0,2,4,1,4,0,0,10,68,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,783,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",4,1,0,2,4,1,0,0,0,5,70,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,801,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0,0,0,2,4,1,0,0,0,7,69,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,792,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0,0,0,2,4,1,0,0,0,7,70,4,0.075,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,95,        int[] result = new int[size()];,4,0,0,3,6,0,2,0,0,7,31,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,96,        for (int i = 0; i < result.length; i++) {,4,1,0,1,3,0,8,0,0,13,41,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,97,            result[i] = getValue(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,99,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.072,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,2,0,0,4,8,0,6,0,0,9,56,3,0.07143,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,480,        PeriodType type = cMillis;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,481,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,482,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,487,            cMillis = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,489,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,1,2,1,2,0,0,3,39,5,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,266,            if (this == obj) {,4,2,0,1,3,0,0,0,0,6,18,1,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,267,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04762,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,134,        PeriodType type = cYMDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,135,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,136,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,146,            cYMDTime = type;,0,0,0,0,0,0,0,0,0,0,16,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,148,        return type;,4,0,0,0,0,1,4,2,0,10,12,3,0.04348,0,0,-1
defect4j,time,org/joda/time/Period,5,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0,0,0,2,4,0,0,0,0,6,90,4,0.04306,0,0,-1
defect4j,time,org/joda/time/Period,5,330,    },2,0,0,0,1,3,0,4,0,10,1,2,0.04306,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,807,                types[i] = iTypes[i];,0,0,0,2,4,0,0,0,0,6,21,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,816,                indices[i] = iIndices[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,305,        PeriodType type = cDTime;,4,0,0,0,0,0,0,2,0,6,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,306,        if (type == null) {,12,1,0,1,3,0,0,4,0,19,19,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,307,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,316,            cDTime = type;,12,0,0,0,0,0,0,2,0,17,14,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,318,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,354,        PeriodType type = cYears;,0,0,0,0,0,0,0,0,0,0,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,355,        if (type == null) {,4,1,0,1,3,0,4,0,0,10,19,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,356,            type = new PeriodType(,4,0,0,0,1,0,0,2,0,7,22,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,361,            cYears = type;,12,3,0,0,0,0,6,2,0,23,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,363,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,608,        return iName;,4,0,0,0,0,1,2,2,0,10,13,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,799,        int fieldIndex = iIndices[indicesIndex];,4,1,1,1,2,0,4,0,0,14,40,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,800,        if (fieldIndex == -1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,0,0,0,3,6,0,0,0,0,9,62,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,805,        for (int i = 0; i < iTypes.length; i++) {,0,0,0,1,3,0,0,2,0,2,41,8,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,806,            if (i < fieldIndex) {,20,10,0,1,3,0,0,0,0,34,21,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,808,            } else if (i > fieldIndex) {,4,1,0,1,4,0,0,0,0,5,28,7,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,813,        int[] indices = new int[8];,2,0,0,2,4,0,0,0,0,2,27,5,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,814,        for (int i = 0; i < indices.length; i++) {,26,3,0,1,3,3,0,12,0,46,42,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,815,            if (i < indicesIndex) {,6,1,0,1,3,0,6,0,0,13,23,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,817,            } else if (i > indicesIndex) {,0,0,0,1,4,0,0,0,0,5,30,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,820,                indices[i] = -1;,0,0,0,1,2,0,0,0,0,3,16,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,823,"        return new PeriodType(getName() + name, types, indices);",4,0,0,2,4,1,0,0,0,4,56,6,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,674,        int realIndex = iIndices[index];,6,1,0,1,2,0,0,0,0,7,32,5,0.03321,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,0,0,0,2,4,1,0,0,0,7,58,4,0.03321,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,94,    },2,0,0,0,1,0,6,0,0,9,1,4,0.03,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,91,        type = checkPeriodType(type);,0,0,0,1,2,0,0,0,0,3,29,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,92,        iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",2,0,0,1,2,0,18,0,0,21,108,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,2,4,0,10,0,0,10,58,5,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0,0,0,2,4,0,0,0,0,6,60,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",2,2,0,2,4,0,4,0,0,8,64,8,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,2,4,0,10,0,0,10,64,5,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0,0,0,2,4,0,0,0,0,6,62,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,462,        return newValues;,4,0,0,0,0,2,0,0,0,5,17,1,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",10,1,0,2,4,0,0,8,0,19,62,4,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",2,0,0,2,4,0,14,0,0,16,60,3,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,453,        int[] newValues = new int[size()];,8,0,0,3,6,1,2,0,0,11,34,1,0.02941,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,2,4,0,10,0,0,10,60,5,0.02941,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.18182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,0,0,0,3,78,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.17241,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0,0,0,1,3,0,0,0,0,4,18,4,0.10256,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0,0,0,2,4,1,0,0,0,7,32,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0,0,0,0,0,1,0,0,0,1,42,4,0.05634,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,2,1,0,0,0,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,2,1,1,1,2,0,0,0,0,5,33,8,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,0,0,0,6,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,531,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05519,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,48,    },2,1,0,0,1,0,0,0,0,3,1,5,0.05519,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,632,        if (this == partial) {,6,2,0,1,3,0,8,0,0,16,22,1,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,635,        if (partial instanceof LocalDate) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,636,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,0.05479,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,4,1,0,0,0,0,0,0,0,6,30,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,229,                leapYears++;,0,0,0,0,0,0,0,0,0,0,12,4,0.05,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,41,        StringBuilder buf = new StringBuilder(),0,0,0,1,2,0,0,0,0,3,39,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,63,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,4,1,0,1,3,0,0,0,0,5,22,3,0.04327,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04327,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.04318,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.03863,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,55,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03704,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.03551,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,50,4,0.03279,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,6,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.03226,0,0,-1
defect4j,time,org/joda/time/Instant,6,144,        return this;,2,0,1,0,0,1,0,4,0,8,12,4,0.03045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,8,0,0,11,46,1,0.03045,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,54,        super();,6,1,0,1,2,0,4,0,0,12,8,4,0.027,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.027,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.02629,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,8,4,0,1,2,0,4,0,0,19,36,1,0.0252,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",20,3,0,2,4,0,4,4,0,32,105,1,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,511,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,512,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,21,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,515,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,516,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,518,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,519,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.02518,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,886,        long newInstant = roundFloor(instant);,0,0,0,1,2,0,0,0,0,3,38,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,888,"            instant = add(newInstant, 1);",6,1,0,1,2,0,18,0,0,26,29,3,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,943,"            this(julianField, gregorianField, null, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,944,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,954,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,0,0,1,2,0,4,2,0,17,71,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,955,        },8,2,0,0,1,0,0,0,0,10,1,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,965,        {,2,1,0,0,1,0,0,0,0,3,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,966,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0,0,0,1,2,0,0,0,0,3,69,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,967,            if (durationField == null) {,0,0,0,1,3,0,6,0,0,7,28,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,968,"                durationField = new LinkedDurationField(iDurationField, this);",6,0,1,1,2,0,0,2,0,17,62,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,970,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,971,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,621,"            this(julianField, gregorianField, cutoverMillis, false);",2,0,0,1,2,0,8,0,0,10,56,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,622,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,631,"                     long cutoverMillis, boolean convertByWeekyear) {",6,0,0,0,2,0,6,0,0,12,48,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,632,            super(gregorianField.getType());,0,0,0,2,4,0,0,0,0,6,32,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,633,            iJulianField = julianField;,14,2,0,0,0,0,4,2,0,24,27,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,634,            iGregorianField = gregorianField;,0,0,0,0,0,0,0,0,0,0,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,635,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,4,25,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,636,            iConvertByWeekyear = convertByWeekyear;,0,0,0,0,0,0,0,0,0,0,39,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,639,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,16,0,0,22,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,641,            DurationField rangeField = gregorianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,66,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,642,            if (rangeField == null) {,2,0,0,1,3,0,0,4,0,7,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,643,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,645,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,646,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,773,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,270,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,6,1,0,1,2,2,0,4,0,14,69,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,84,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,190,        zone = DateTimeUtils.getZone(zone);,8,0,0,1,2,0,6,0,0,15,35,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,192,        if (gregorianCutover == null) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,199,        synchronized (cCache) {,2,0,0,1,3,0,8,0,0,10,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,200,            ArrayList<GJChronology> chronos = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,201,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,202,                chronos = new ArrayList<GJChronology>(2);,4,0,0,1,2,1,4,4,0,14,41,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,203,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,214,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,215,                chrono = new GJChronology,2,1,0,0,0,0,0,0,0,3,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,227,            chronos.add(chrono);,0,0,0,1,2,0,6,0,0,6,20,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,228,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,229,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,474,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,1,39,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,476,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,477,        GregorianChronology gregorian = (GregorianChronology)params[1];,6,0,1,2,4,0,4,6,0,18,63,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,478,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,479,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,481,        iJulianChronology = julian;,10,3,0,0,0,0,0,0,0,14,27,3,0.02515,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0,0,0,2,4,1,0,0,0,7,47,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.03361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0,0,0,1,2,0,0,0,0,3,74,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,0,0,0,3,40,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0,0,0,0,0,0,0,0,0,0,33,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0,0,0,1,2,1,0,0,0,4,23,4,0.01375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,0,0,3,7,0,0,0,0,10,77,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.01303,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,2,0,0,1,2,0,6,0,0,8,31,6,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,4,0,0,0,0,0,0,0,0,5,16,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1247,            if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.0127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1240,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01266,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1359,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1367,            if (length >= 9) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1372,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1373,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },4,1,0,0,1,0,0,0,0,5,1,6,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1382,                while (i < position) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1385,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1390,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,6,1,0,0,0,1,0,0,0,8,16,1,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,6,0,0,1,2,0,6,2,0,15,40,3,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,363,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,419,            for (int i=0; i<high; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,262,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,6,3,0,0,0,0,0,0,0,9,41,10,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,274,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,276,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,468,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,6,0,0,0,0,0,0,0,0,8,15,1,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,471,            iLocale = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,8,1,0,1,3,0,10,2,0,21,23,1,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,2,0,0,0,0,0,0,0,0,3,26,6,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,4,3,0,1,3,0,4,0,0,11,44,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",2,0,0,2,4,0,0,0,0,2,57,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2743,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1356,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.01208,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1332,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1333,            int length = 0;,0,0,0,0,0,0,4,0,0,4,15,5,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1334,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,6,1,0,1,2,0,4,0,0,11,40,8,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,18,11,0,2,5,0,6,0,0,37,55,1,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1362,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,932,        return parser;,4,1,0,0,0,1,0,0,0,5,14,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,120,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,121,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,4,0,0,1,2,0,8,0,0,14,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,6,0,0,0,0,0,0,0,0,9,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,128,    },4,0,0,0,1,0,0,0,0,5,1,5,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,8,0,0,0,0,0,0,4,0,13,32,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,4,1,0,0,0,1,0,0,0,5,24,1,0.01064,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.01058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1401,"            super(fieldType, maxParsedDigits, signed);",4,0,0,1,2,0,0,2,0,6,42,7,0.0105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0105,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,155,            return 1;,2,0,0,0,0,1,2,2,0,6,9,4,0.01039,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,146,        long otherMillis = otherField.getUnitMillis();,0,0,0,1,2,0,0,0,0,3,46,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,149,        if (thisMillis == otherMillis) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,87,4,0.01018,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00988,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1358,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1359,            ymd = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1365,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.00976,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,294,                    return chronology.months();,2,1,0,1,2,1,4,0,0,7,27,3,0.00966,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,298,                    return chronology.days();,4,0,0,1,2,1,4,0,0,9,25,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1653,        if (lte == null) {,6,2,0,1,3,0,0,0,0,9,18,6,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,36,3,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.00832,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,129,        super();,8,0,0,1,2,0,4,0,0,13,8,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,130,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,131,        iParser = parser;,2,0,0,0,0,0,0,0,0,2,17,6,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,132,        iLocale = locale;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,133,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,134,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,135,        iZone = zone;,10,1,0,0,0,0,10,0,0,23,13,3,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,136,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,137,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,138,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1703,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1704,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1708,        return ze;,2,0,0,0,0,1,4,0,0,7,10,7,0.00745,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2139,                est += iMinFields - 1;,12,1,0,0,0,0,4,0,0,19,22,1,0.00733,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2137,            int est = 1 + iMinFields << 1;,0,0,0,0,0,0,0,0,0,0,30,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2138,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,6,4,0,2,5,0,4,0,0,14,74,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2144,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2274,            return estimatePrintedLength();,8,0,0,1,2,1,6,0,0,15,31,1,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1091,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00676,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,4,0,0,11,33,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2125,            if (minFields <= 0 || maxFields < minFields) {,8,3,0,1,3,0,0,0,0,11,46,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2128,            if (minFields > 4) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2133,            iMaxFields = maxFields;,2,1,0,0,0,0,0,0,0,3,23,8,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2134,        },4,1,0,0,1,0,0,0,0,5,1,4,0.00671,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,282,            chronology = DateTimeUtils.getChronology(chronology);,8,3,0,1,2,2,6,4,0,25,53,1,0.00661,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1681,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1682,            sme = new DateTimeFormatterBuilder(),8,4,0,1,2,0,0,2,0,15,36,3,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.00654,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,144,        return localInstant;,6,0,0,0,0,1,0,0,0,7,20,1,0.00653,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1662,        if (hde == null) {,4,0,0,1,3,0,0,4,0,8,18,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1663,            hde = new DateTimeFormatterBuilder(),8,5,0,1,2,0,0,0,0,13,36,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00651,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,138,        DateTimeZone zone = getZone();,6,0,0,1,2,0,8,2,0,16,30,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,139,        int offset = zone.getOffsetFromLocal(localInstant);,10,0,0,1,2,0,6,4,0,20,51,1,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,141,        if (offset != zone.getOffset(localInstant)) {,4,1,1,2,5,0,6,0,0,16,45,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00645,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,71,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00625,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.0062,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,928,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00593,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,938,        return offsetAdjusted;,10,0,1,0,0,1,0,0,0,14,22,1,0.00589,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,910,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,912,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,913,        final int offsetAdjusted = getOffset(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,54,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0,0,0,0,0,0,0,0,0,0,38,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0,0,0,1,2,1,0,0,0,4,31,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0,0,0,1,3,0,0,0,0,4,62,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0,0,0,1,2,0,0,0,0,3,38,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0,0,0,1,4,0,0,0,0,5,22,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0,0,0,1,2,0,0,0,0,3,71,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0,0,0,1,2,0,8,0,0,8,56,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,59,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,669,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,742,        Chronology chrono = selectChronology(iChrono);,0,0,0,1,2,0,0,0,0,3,46,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",14,0,0,1,2,0,0,4,0,19,101,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,26,10,0,1,3,0,22,4,0,66,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,6,1,0,1,3,3,0,12,0,22,24,1,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,10,1,0,1,3,1,0,4,0,17,33,1,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,2,0,1,0,0,1,0,0,0,7,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,2,0,0,1,2,0,8,0,0,11,40,7,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",6,3,1,1,2,0,0,0,0,12,25,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,6,0,0,0,0,0,0,0,0,6,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,365,            for (int i = 0; i < count; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,4,2,0,1,3,0,0,0,0,7,18,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,378,        },8,0,0,0,1,0,0,0,0,10,1,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,380,        if (iOffset != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,8,1,0,1,3,0,0,0,0,9,16,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,6,0,0,16,28,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,427,    },4,0,0,0,1,0,0,0,0,4,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,929,        return parser;,0,0,0,0,0,1,0,2,0,2,14,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,120,        super();,0,0,0,1,2,0,10,0,0,10,8,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,18,0,0,18,54,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,122,        iMillis = instantLocal;,0,0,0,0,0,0,8,0,0,8,23,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,2,1,0,1,2,0,0,0,0,3,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,12,1,0,0,0,0,0,0,0,15,27,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,128,    },8,0,0,0,1,0,0,0,0,10,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,925,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,926,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,0,0,0,0,0,0,0,0,0,0,8,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,7,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,6,2,0,1,3,0,0,0,0,8,17,5,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,6,0,0,7,40,9,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2278,            int limit = text.length() - position;,0,0,0,1,2,0,0,0,0,3,37,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2281,            if (iZeroOffsetParseText != null) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,12,2,0,2,5,0,4,0,0,19,30,1,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,4,2,0,12,56,1,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,742,        Chronology chrono = selectChronology(iChrono);,6,2,0,1,2,0,4,2,0,14,46,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,745,        if (newPos >= 0) {,18,4,1,1,3,0,4,0,0,29,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,257,        if (iChrono == chrono) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,369,                for (int i = 0; i < count; i++) {,12,3,1,1,3,0,0,2,0,34,33,3,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,345,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,363,        long millis = iMillis;,6,1,0,0,0,0,4,0,0,12,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,365,            for (int i = 0; i < count; i++) {,8,2,0,1,3,2,8,2,0,24,33,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,368,            if (resetFields) {,4,0,0,1,3,0,0,0,0,4,18,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,378,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,380,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,416,        if (high > 10) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,929,        return parser;,6,1,0,0,0,1,0,4,0,11,14,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,120,        super();,2,0,0,1,2,0,0,2,0,5,8,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,73,    private SavedField[] iSavedFields = new SavedField[8];,12,5,0,2,4,0,8,0,0,26,54,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,10,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,122,        iMillis = instantLocal;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,123,        iZone = chrono.getZone();,6,0,0,1,2,0,4,0,0,11,25,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,124,        iChrono = chrono.withUTC();,2,0,0,1,2,0,4,0,0,7,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,127,        iDefaultYear = defaultYear;,0,0,0,0,0,0,0,0,0,0,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,128,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,925,        DateTimeParser parser = iParser;,12,0,0,0,0,0,0,2,0,15,32,1,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,926,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,74,            int d = ((value + 1) * 13421772) >> 27;,4,0,0,2,4,0,0,0,0,5,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,75,            buf.append((char) (d + '0'));,0,0,0,3,6,0,0,0,0,9,29,4,0.00242,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,335,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",0,0,0,3,6,0,0,0,0,9,55,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,4,0,0,4,42,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,0,0,0,2,4,0,0,0,0,6,39,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,40,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,        if (ldp == null) {,0,0,0,1,3,0,0,0,0,4,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,        return ldp;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,        if (iZone == zone) {,0,0,0,1,3,0,0,0,0,4,20,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.66667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,                int month = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,0,0,3,7,0,0,0,0,10,58,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,        switch (text.length()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,                return append0(new StringLiteral(text));,0,0,0,2,4,1,0,0,0,7,40,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,2,4,1,0,0,0,7,66,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,79,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1614,        if (we == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1619,        return we;,0,0,0,0,0,1,0,0,0,1,10,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1629,        return wwe;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1633,        if (dwe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1649,        return dye;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,308,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,312,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,321,        for (i = 0; i < length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,326,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,8,0,0,8,30,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0,0,0,3,6,0,0,0,0,9,63,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,347,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,357,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1150,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2794,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2795,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2797,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2798,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,                if (parser != null) {,14,2,0,1,3,0,8,4,0,30,21,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2800,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2801,                    if (len > est) {,0,0,0,1,3,0,0,0,0,4,16,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2802,                        est = len;,0,0,0,0,0,0,0,0,0,0,10,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2805,            },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2806,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2807,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2623,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2624,                iPrintedLengthEstimate = 0;,0,0,0,0,0,0,0,0,0,0,27,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,364,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,367,        DurationFieldType lastType = null;,2,1,0,0,0,0,0,0,0,3,34,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,368,        for (int i = 0; i < partial.size(); i++) {,16,1,0,2,5,0,8,0,0,27,42,3,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,369,            DateTimeField loopField = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,46,5,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,370,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,371,                if (loopField.getRangeDurationField().getType() != lastType) {,10,0,0,3,7,0,18,0,0,30,62,1,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,375,            lastType = loopField.getDurationField().getType();,0,0,0,2,4,0,0,0,0,6,50,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,377,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,        if (start.size() != end.size()) {,4,1,0,3,7,0,8,0,0,14,33,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,95,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,55,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,96,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,0,0,3,7,0,0,0,0,10,51,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,100,        if (DateTimeUtils.isContiguous(start) == false) {,0,0,0,2,5,0,0,0,0,7,49,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,2,0,0,3,6,0,10,2,0,14,81,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,        return values[0];,20,2,0,1,2,1,4,4,0,32,17,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,        return MIN;,10,0,0,0,0,1,0,4,0,15,11,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,344,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,486,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,        if (maxDigits < minDigits) {,2,0,0,1,3,0,2,0,0,5,28,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1585,        if (ye == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1590,        return ye;,0,0,0,0,0,1,0,0,0,1,10,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,        if (mye == null) {,8,2,0,1,3,0,0,2,0,13,18,3,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,        return mye;,2,0,0,0,0,1,0,0,0,3,11,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,        if (dme == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,6,0,0,8,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,        return dme;,2,0,0,0,0,1,0,2,0,5,11,6,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",2,0,0,2,5,0,0,0,0,2,57,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,242,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,173,        return iParser;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,155,        if (start instanceof LocalDate && end instanceof LocalDate)   {,12,2,0,1,3,0,0,6,0,21,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,162,        return Months.months(amount);,0,0,0,1,2,1,6,0,0,6,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,135,        if (start instanceof LocalDate && end instanceof LocalDate)   {,10,1,0,1,3,0,0,4,0,16,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",4,1,0,1,2,0,14,2,0,21,61,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,142,        return Days.days(amount);,0,0,0,1,2,1,0,0,0,4,25,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);",16,2,0,1,2,0,0,0,0,18,42,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1464,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1465,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1468,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,            super();,10,1,0,1,2,0,8,0,0,20,8,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1321,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,        },6,0,0,0,1,0,8,4,0,18,1,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1326,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,217,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());",6,2,0,3,6,1,0,0,0,8,62,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,384,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,385,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,386,        return this;,10,1,0,0,0,4,4,0,0,18,12,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,397,        return append0(new CharacterLiteral(c));,8,1,1,2,4,1,0,2,0,14,40,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,434,        if (fieldType == null) {,10,1,0,1,3,0,0,0,0,11,24,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,437,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,440,        if (minDigits < 0 || maxDigits <= 0) {,4,1,0,1,3,0,0,0,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,443,        if (minDigits <= 1) {,8,1,0,1,3,0,10,0,0,20,21,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1155,                f = new Composite(iElementPairs);,0,0,0,1,2,0,0,0,0,3,33,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1167,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1177,                return ((Composite)f).isParser();,12,0,0,3,6,4,6,6,0,28,33,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2615,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2617,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,6,8,0,17,51,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2618,            List<Object> parserList = new ArrayList<Object>();,2,0,1,1,2,0,4,8,0,19,50,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2620,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,0,0,0,3,49,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,6,0,1,3,7,0,4,0,0,16,58,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2626,                int size = printerList.size();,8,0,0,1,2,0,4,14,0,27,30,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2627,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2628,                int printEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2629,                for (int i=0; i<size; i++) {,10,1,0,1,3,0,0,0,0,12,28,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2631,                    printEst += printer.estimatePrintedLength();,0,0,0,1,2,0,0,0,0,3,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2632,                    iPrinters[i] = printer;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2634,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,10,0,0,3,7,0,4,2,0,17,56,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2641,                int size = parserList.size();,0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2642,                iParsers = new DateTimeParser[size];,2,0,0,1,2,0,6,0,0,8,36,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2643,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2646,                    parseEst += parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,7,42,9,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2647,                    iParsers[i] = parser;,0,0,0,1,2,0,0,0,0,3,21,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2649,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2651,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2747,            return iPrinters != null;,2,1,0,0,0,1,4,0,0,7,25,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2751,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2759,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2760,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2761,                Object element = elementPairs.get(i);,4,0,0,1,2,0,12,2,0,19,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2762,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2765,                    printerList.add(element);,2,0,0,1,2,0,10,0,0,12,25,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2768,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2769,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2772,                    parserList.add(element);,0,0,0,1,2,0,6,0,0,6,24,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2775,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2780,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1207,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1208,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1209,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1212,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1236,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,181,        chronology = DateTimeUtils.getChronology(chronology);,4,0,0,1,2,1,6,0,0,12,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,183,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,184,        iValues = values;,4,0,0,0,0,0,0,0,0,5,17,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,183,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,185,            int value = values[i];,4,1,0,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,199,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,201,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,202,"            if (value < field.getMinimumValue(partial, values)) {",6,1,0,2,5,0,12,0,0,20,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,        if (fromYear <= toYear) {,0,0,0,1,3,0,0,0,0,4,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,        if (id == null) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0,0,0,1,2,0,0,0,0,3,64,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,        DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,        int ruleSetCount = iRuleSets.size();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,        for (int i=0; i<ruleSetCount; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,            RuleSet rs = iRuleSets.get(i);,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,            Transition next = rs.firstTransition(millis);,0,0,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,            millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,            saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,            rs = new RuleSet(rs);,0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {",0,0,0,2,5,0,0,0,0,7,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,                saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,                    tailZone = rs.buildTailZone(id);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,        if (transitions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,        if (zone.isCachable()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,0,0,0,0,7,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,        if (size >= 2) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,            transitions.add(tr);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,            iToYear = toYear;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,            return iToYear;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,            long testInstant = instant;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,            if (instant == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,                year = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,                year = chrono.year().get(instant + wallOffset);,0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,            if (year < iFromYear) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,                testInstant -= 1;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,                year = chrono.year().get(next + wallOffset);,0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,                if (year > iToYear) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,            if (iMode == 'w') {,0,0,0,1,3,0,0,0,0,4,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,            if (iDayOfMonth >= 0) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0,0,0,2,4,0,0,0,0,6,56,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,        RuleSet() {,0,0,0,1,3,0,0,0,0,4,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,            iRules = new ArrayList<Rule>(10);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,            iUpperYear = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,        RuleSet(RuleSet rs) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,            iInitialNameKey = rs.iInitialNameKey;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,            iUpperOfYear = rs.iUpperOfYear;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,995,                iRules.add(rule);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,997,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1011,            if (iInitialNameKey != null) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0,0,0,1,2,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,            long millis = Long.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,            int saveMillis = 0;,6,0,0,0,0,0,0,2,0,8,19,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,            Transition first = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,6,2,0,15,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1032,                if (millis == firstMillis) {,0,0,0,1,3,0,0,0,0,4,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,                if (millis > firstMillis) {,4,1,0,1,3,0,0,0,0,5,27,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,                    if (first == null) {,2,1,0,1,3,0,0,0,0,3,20,9,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,                        for (Rule rule : copy) {,0,0,0,1,3,0,0,0,0,4,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,                            if (rule.getSaveMillis() == 0) {,8,1,0,2,5,0,10,2,0,22,32,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",12,0,0,1,2,0,0,4,0,19,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1045,                                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1047,                        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,                    if (first == null) {,10,4,0,1,3,0,6,0,0,20,20,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,            iRules = copy;,6,1,0,0,0,0,2,0,0,9,14,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,            return first;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,            Rule nextRule = null;,4,2,0,0,0,0,0,0,0,6,21,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1086,            long nextMillis = Long.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1088,            Iterator<Rule> it = iRules.iterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,            while (it.hasNext()) {,8,1,0,2,5,0,0,0,0,10,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,                Rule rule = it.next();,8,5,1,1,2,0,14,2,0,34,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",2,0,0,1,2,0,10,0,0,12,60,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1092,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,                if (next <= nextMillis) {,4,0,0,1,3,2,18,2,0,27,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,                    nextRule = rule;,6,0,0,0,0,0,0,0,0,7,16,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1101,                    nextMillis = next;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1103,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1105,            if (nextRule == null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,2,1,0,3,7,0,14,0,0,17,50,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,            if (iUpperYear < Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",8,0,0,1,2,1,0,2,0,10,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,            if (iUpperYear == Integer.MAX_VALUE) {,2,0,0,1,3,0,0,0,0,2,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,                return Long.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,22,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,            if (iRules.size() == 2) {,0,1,0,2,5,0,4,0,0,5,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1142,                Rule startRule = iRules.get(0);,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,                Rule endRule = iRules.get(1);,4,1,0,1,2,0,4,2,0,11,29,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,4,0,0,1,3,0,0,0,0,5,49,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,",0,0,0,0,1,1,0,0,0,2,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {",8,0,0,1,3,0,0,2,0,10,56,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,            iMillis = millis;,2,0,0,0,0,0,0,0,0,2,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,            iNameKey = rule.getNameKey();,0,0,0,1,2,0,4,0,0,4,29,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,            iWallOffset = standardOffset + rule.getSaveMillis();,8,2,0,1,2,0,4,0,0,15,52,1,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,1.77778,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,612,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,1805,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,597,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,600,        return type.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,60,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,567,        switch (index) {,0,0,0,1,3,0,0,0,0,4,16,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,573,                return getChronology().dayOfMonth().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,58,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,545,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,560,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,564,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,200,        return new LocalDateTime(,0,0,0,0,1,1,0,0,0,2,25,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,210,        int yearOfEra = calendar.get(Calendar.YEAR);,0,0,0,1,2,0,0,0,0,3,44,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0,0,0,1,2,1,8,0,0,10,28,3,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,548,                return chrono.dayOfMonth();,0,0,0,1,2,1,8,0,0,9,27,1,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,550,                return chrono.millisOfDay();,0,0,0,1,2,1,0,0,0,4,28,4,0.37209,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,529,        return 4;,0,0,0,0,0,1,0,0,0,1,9,4,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,663,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,0.30189,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,233,        if (date == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.28571,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,        if (date == null) {,2,0,0,1,3,0,14,0,0,16,19,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,        return super.equals(obj);,0,0,0,1,2,1,0,0,0,4,25,4,0.2735,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,        if (this == partial) {,2,0,0,1,3,0,0,0,0,2,22,4,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,14,0,0,1,2,0,4,4,0,24,38,3,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,6,0,0,2,5,0,4,0,0,11,44,1,0.25806,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",16,2,0,2,5,0,8,0,0,27,57,1,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0,0,0,4,8,0,0,0,0,12,83,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0,0,0,0,0,0,6,0,0,6,32,11,0.20847,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0,0,0,2,4,0,0,0,0,6,68,4,0.20253,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.20253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.19104,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.17778,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,2,0,0,1,2,1,4,0,0,6,31,4,0.17021,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0,0,0,3,7,0,0,0,0,10,54,4,0.128,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();",0,0,0,3,6,1,0,0,0,10,50,4,0.12308,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,499,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,503,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,6,0,0,0,0,0,0,0,0,7,23,3,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,505,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11679,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,2,0,0,0,0,1,8,2,0,12,20,6,0.10774,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,445,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2,0,0,1,2,0,4,4,0,10,78,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,448,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,450,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,        return iLocalMillis;,4,0,0,0,0,1,6,0,0,10,20,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,2,0,0,1,3,0,4,0,0,6,19,5,0.09756,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,        return iChronology;,16,4,0,0,0,1,16,4,0,42,19,1,0.09249,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08649,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,650,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.08122,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",4,1,0,2,4,0,6,0,0,11,35,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0,0,0,2,4,0,0,0,0,6,48,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0,0,0,2,4,0,0,0,0,6,52,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,2,2,0,6,56,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,0,0,0,2,53,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,82,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",10,1,1,1,2,1,0,0,0,13,43,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,12,0,1,1,2,1,4,2,0,23,32,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,8,1,0,1,3,0,0,0,0,10,26,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,4,0,0,1,2,1,6,0,0,11,33,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,2,0,0,1,3,0,4,0,0,6,26,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,711,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,712,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,714,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,715,                        instant = gregorianToJulian(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,724,"                instant = iJulianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,43,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0,0,0,1,3,0,0,2,0,3,26,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,737,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,38,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,41,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,912,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,915,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,0,0,0,4,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,192,            cutoverInstant = DEFAULT_CUTOVER;,8,2,0,0,0,0,14,0,0,25,33,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,74,public final class GJChronology extends AssembledChronology {,0,0,0,0,1,0,0,0,0,1,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,78,        if (year <= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,83,            year++;,0,0,0,0,0,0,10,0,0,10,7,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",10,1,0,2,4,1,4,0,0,17,84,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,129,    },2,0,0,0,1,0,8,0,0,10,1,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",6,0,1,1,2,0,14,2,0,26,116,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,104,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,107,        BuddhistChronology chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,45,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,108,        if (chrono == null) {,10,1,0,1,3,0,0,8,0,20,21,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0,0,0,2,4,0,0,0,0,6,76,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",6,0,0,1,2,0,2,2,0,10,64,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",8,1,0,2,4,0,8,2,0,22,91,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,114,"            cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,116,        return chrono;,4,0,0,0,0,1,0,0,0,5,14,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,204,        if (getParam() == null) {,2,1,0,2,5,0,8,0,0,12,25,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,206,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,207,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,211,            field = fields.yearOfEra;,10,0,0,0,0,0,0,0,0,12,25,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,216,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,6,0,0,10,42,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",8,0,0,1,2,0,0,0,0,10,54,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,221,            fields.centuryOfEra = new DividedDateTimeField(,32,10,0,0,1,0,14,4,0,67,47,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,4,4,0,18,47,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,229,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,51,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,234,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,66,        int min = super.getMinimumValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,68,            iMinValue = min + 1;,8,5,0,0,0,0,6,0,0,22,20,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,74,        iSkip = skip;,8,0,0,0,0,0,0,0,0,10,13,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,75,    },6,0,0,0,1,3,2,2,0,13,1,2,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,88,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);",2,1,0,1,2,1,0,0,0,3,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);",4,1,0,1,2,1,0,0,0,5,34,7,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,228,        return iField.getMaximumValue();,2,0,0,1,2,1,2,2,0,6,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,100,        return iMinValue;,4,0,0,0,0,1,0,0,0,5,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,344,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,0,0,0,6,39,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",26,0,0,2,4,0,4,0,0,31,96,3,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",4,0,0,2,4,0,16,0,0,22,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",8,4,0,2,4,0,4,0,0,18,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",2,0,0,2,4,0,0,0,0,2,102,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,224,            leapYears = (relativeYear + 3) >> 2;,6,2,1,1,2,0,0,2,0,14,36,3,0.07529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,888,"            instant = add(newInstant, 1);",16,1,0,1,2,0,10,4,0,33,29,1,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,1,2,1,0,0,0,4,60,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,127,        int year = get(instant);,2,1,0,1,2,0,0,0,0,3,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,129,        if (instant != yearStartMillis) {,4,1,0,1,3,0,0,0,0,5,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,0,0,0,4,50,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,133,        int thisWeekyear = get( instant );,12,1,0,1,2,0,6,0,0,20,34,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,134,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,1,1,2,0,0,0,0,9,65,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,10,0,0,13,55,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,155,        if ( setToWeek > maxOutWeeks ) {,4,2,0,1,3,0,4,0,0,10,32,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,162,        long workInstant = instant; // Get a copy,6,1,0,0,0,0,0,0,0,7,41,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,168,"        workInstant = iChronology.setYear( workInstant, year );",6,1,0,1,2,1,0,0,0,8,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,173,        int workWoyYear = get( workInstant );,0,0,0,1,2,0,0,0,0,3,37,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,179,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0,0,0,1,2,0,0,0,0,3,64,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),2,0,0,1,2,0,12,2,0,18,56,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,49,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,239,        return instant;,10,0,0,0,0,2,2,6,0,20,15,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0,0,0,1,2,1,8,0,0,8,71,9,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1083,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1084,            iField = dateTimeField;,0,0,0,0,0,0,4,0,0,5,23,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1085,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",0,0,0,2,4,1,0,0,0,7,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,237,            buf.append('-');,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,255,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,82,4,0.16667,0,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,83,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",0,0,0,1,2,0,0,0,0,3,23,4,0.07143,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,0,0,0,0,0,0,0,0,0,0,60,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0,0,0,3,6,0,0,0,0,9,75,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,692,        values[realIndex] = newValue;,0,0,0,1,2,0,0,0,0,3,29,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,693,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,689,        if (realIndex == -1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,            return iText.length();,0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,                int seconds = period.get(DurationFieldType.seconds());,0,0,0,2,4,0,0,0,0,6,54,4,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,12,3,0,2,4,0,2,0,0,18,72,1,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },2,1,0,0,1,0,6,0,0,9,1,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,4,0,0,1,2,1,0,0,0,5,22,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,                    return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.02703,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,6,1,0,0,0,1,0,0,0,7,22,1,0.02632,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,2,1,0,2,4,1,18,0,0,21,55,1,0.025,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,2,0,0,0,0,1,0,2,0,5,9,10,0.02439,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,                return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,14,6,0,0,0,1,8,0,0,32,7,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,                sum += iSuffix.calculatePrintedLength(value);,0,0,0,1,2,0,0,0,0,3,45,4,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1147,"                iSuffix.printTo(buf, value);",0,0,0,1,2,0,0,0,0,3,28,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1633,            PeriodPrinter before = iBeforePrinter;,0,0,0,0,0,0,0,0,0,0,38,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1636,"            int sum = before.calculatePrintedLength(period, locale)",0,0,0,1,2,0,0,0,0,3,55,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,4,0,0,1,3,0,6,0,0,10,17,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,14,1,0,0,0,0,0,2,0,18,38,1,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1659,            PeriodPrinter after = iAfterPrinter;,0,0,0,0,0,0,0,0,0,0,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1661,"            before.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1662,            if (iUseBefore) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1676,"            after.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,35,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1677,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1412,                value = period.get(DurationFieldType.minutes());,0,0,0,2,4,0,0,0,0,6,48,4,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,16,2,0,0,0,0,12,0,0,33,6,1,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1403,                value = period.get(DurationFieldType.weeks());,0,0,0,2,4,0,0,0,0,6,46,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1404,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1400,                value = period.get(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,47,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1401,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1406,                value = period.get(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,45,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1407,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1409,                value = period.get(DurationFieldType.hours());,0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1410,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,2,1,0,2,4,1,14,0,0,17,50,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1434,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0,0,0,3,7,0,0,0,0,10,61,4,0.01667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1487,                return type.isSupported(DurationFieldType.minutes());,0,0,0,2,4,1,0,0,0,7,53,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,10,2,0,12,52,1,0.01613,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1485,                return type.isSupported(DurationFieldType.hours());,0,0,0,2,4,1,8,0,0,8,51,7,0.01563,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1398,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1477,                return type.isSupported(DurationFieldType.years());,0,0,0,2,4,1,0,0,0,7,51,4,0.01493,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",8,5,0,2,5,0,0,0,0,13,56,4,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,0,8,0,0,10,30,1,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1083,                return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.01408,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,293,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,294,        iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,295,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },2,0,0,0,1,0,4,0,0,7,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",4,0,0,1,2,0,4,0,0,9,20,3,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,684,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1430,                switch (iPrintZeroSetting) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1079,            if (stopAt <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1082,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {,0,0,0,2,5,0,0,0,0,7,88,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1788,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,8,3,0,1,2,0,8,2,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1790,            for (int i=printers.length; sum < stopAt && --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1791,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",0,0,0,2,4,0,0,0,0,6,73,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1793,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1135,"                FormatUtils.appendUnpaddedInteger(buf, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1385,                type = period.getPeriodType();,0,0,0,1,2,0,0,0,0,3,30,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,4,0,0,1,3,0,4,0,0,8,16,1,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,236,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,245,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,258,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,638,        return (indexOf(type) >= 0);,4,1,0,2,4,1,4,0,0,9,28,9,0.01205,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1089,            long valueLong = getFieldValue(period);,6,0,0,1,2,0,10,2,0,18,39,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1090,            if (valueLong == Long.MAX_VALUE) {,16,0,1,1,3,0,12,2,0,34,34,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1094,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,82,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1095,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1108,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1110,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1113,            if (iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1117,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,336,        if (value < 0) {,10,1,0,1,3,0,6,2,0,21,16,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,343,        return ,12,1,0,0,0,1,4,0,0,19,6,1,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,251,        PeriodType type = cYDTime;,0,0,0,0,0,0,0,0,0,0,26,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,252,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,253,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,262,            cYDTime = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,264,        return type;,6,0,0,0,0,1,0,4,0,10,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,237,        checkPeriod(period);,2,0,0,1,2,0,0,0,0,2,20,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,239,        PeriodPrinter printer = getPrinter();,2,0,0,1,2,0,2,2,0,6,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",2,0,0,2,4,0,8,4,0,14,85,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,241,"        printer.printTo(buf, period, iLocale);",0,0,0,1,2,0,0,0,0,3,38,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,242,        return buf.toString();,6,0,0,1,2,1,4,0,0,10,22,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1797,            int sum = 0;,6,2,0,0,0,0,0,2,0,12,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1798,            PeriodPrinter[] printers = iPrinters;,0,0,0,1,2,0,0,0,0,3,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1799,            for (int i=printers.length; --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1800,"                sum += printers[i].calculatePrintedLength(period, locale);",0,0,0,2,4,0,0,0,0,6,58,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1802,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1121,            long valueLong = getFieldValue(period);,0,0,0,1,2,0,0,0,0,3,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1122,            if (valueLong == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,34,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1125,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1126,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1130,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1133,            int minDigits = iMinPrintedDigits;,0,0,0,0,0,0,0,0,0,0,34,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1134,            if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1139,            if (iFieldType >= SECONDS_MILLIS) {,6,2,0,1,3,0,0,0,0,8,35,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1146,            if (iSuffix != null) {,6,1,0,1,3,0,0,0,0,8,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1149,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,236,        checkPrinter();,8,0,0,1,2,0,2,0,0,11,15,6,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1806,            PeriodPrinter[] printers = iPrinters;,12,0,1,1,2,0,8,2,0,34,37,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1807,            int len = printers.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1808,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1809,"                printers[i].printTo(buf, period, locale);",10,0,1,2,4,0,8,0,0,23,41,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1811,        },10,2,0,0,1,0,0,0,0,13,1,3,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1382,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1387,"            if (type != null && isSupported(type, iFieldType) == false) {",0,0,0,2,5,0,0,0,0,7,61,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1393,            switch (iFieldType) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1429,            if (value == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1460,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,254,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,251,        if (iPrinter == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01124,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,113,        int index = indexOf(type);,14,2,0,1,2,1,28,0,0,46,26,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,114,        if (index == -1) {,6,2,0,1,3,0,0,0,0,9,18,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,117,        return getValue(index);,0,0,0,1,2,1,0,0,0,4,23,4,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,95,        int[] result = new int[size()];,4,0,0,3,6,0,14,0,0,18,31,3,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,96,        for (int i = 0; i < result.length; i++) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,97,            result[i] = getValue(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,99,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0101,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,262,        if (period == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,265,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0099,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,392,            if (newValue != 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00917,0,0,-1
defect4j,time,org/joda/time/Period,13,353,    },2,0,0,0,1,0,8,0,0,11,1,6,0.0087,0,0,-1
defect4j,time,org/joda/time/Period,13,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0,0,0,1,2,0,0,0,0,3,73,4,0.00862,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,653,        return -1;,4,0,0,0,0,1,0,2,0,8,10,3,0.00855,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,80,            if (value < 1000) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,87,            for (; size > digits; size--) {,10,1,0,1,3,0,0,2,0,14,31,1,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.00746,0,0,-1
defect4j,time,org/joda/time/Period,13,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",16,0,0,2,4,0,4,0,0,20,90,4,0.00633,0,0,-1
defect4j,time,org/joda/time/Period,13,330,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00633,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,50,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,62,        if (value < 10) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,66,            buf.append((char)(value + '0'));,4,1,0,3,6,0,10,0,0,15,32,6,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,92,    },8,1,0,0,1,0,0,4,0,15,1,4,0.00503,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0,0,0,2,4,0,0,0,0,6,62,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",14,2,0,2,4,0,4,2,0,23,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,2,4,0,0,0,0,6,58,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",10,2,0,2,4,0,12,2,0,27,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0,0,0,2,4,0,10,0,0,10,64,5,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,2,4,0,0,0,0,6,64,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",6,0,0,2,4,0,10,0,0,17,62,3,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,462,        return newValues;,4,0,0,0,0,1,0,0,0,5,17,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,91,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,92,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",0,0,0,1,2,0,0,0,0,3,108,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,453,        int[] newValues = new int[size()];,4,0,0,3,6,0,6,2,0,13,34,3,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,2,4,0,10,0,0,10,60,5,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,397,            values[index] = newValue;,2,0,1,1,2,0,0,0,0,7,25,6,0.00418,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,399,    },0,0,0,0,1,0,8,0,0,8,1,5,0.00418,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,390,        int index = indexOf(type);,4,0,0,1,2,0,8,2,0,14,26,3,0.00415,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,391,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00415,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,650,                return i;,2,0,0,0,0,1,0,0,0,2,9,8,0.0038,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,137,        return getPeriodType().indexOf(type);,0,0,0,2,4,1,6,0,0,6,37,5,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,648,"        for (int i = 0, isize = size(); i < isize; i++) {",4,0,0,2,5,0,0,2,0,6,49,4,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,4,0,0,15,24,1,0.00377,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,66,            cStandard = new PeriodFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,40,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,85,        return cStandard;,0,0,0,0,0,1,0,0,0,1,17,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0,0,0,1,2,0,0,0,0,3,37,4,0.00366,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,0,0,0,0,7,42,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,            long instant = 0L;,0,0,0,0,0,0,0,0,0,0,18,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,57,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);",0,0,0,2,4,0,0,0,0,6,64,4,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,515,        if (amount == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,3.55556,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,514,        int index = indexOfSupported(fieldType);,0,0,0,1,2,0,0,0,0,3,40,4,3.04762,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,2.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,339,            DateTimeField loopField = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,46,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0,0,0,3,7,0,0,0,0,10,62,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,1.14286,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,0,0,0,4,44,4,1.14286,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);",0,0,0,2,4,1,0,0,0,7,58,4,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,410,            return chrono.monthOfYear();,0,0,0,1,2,1,0,0,0,4,28,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,412,            return chrono.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,27,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,49,4,0.66667,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,395,        return 2;,0,0,0,0,0,1,0,0,0,1,9,4,0.64646,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,0,0,0,2,5,0,0,0,0,7,80,4,0.62136,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,237,        return (int[]) iValues.clone();,0,0,0,3,6,1,0,0,0,10,31,4,0.47407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,        return ldp;,2,1,0,0,0,1,0,0,0,3,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.4183,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")",4,1,0,1,3,0,0,0,0,5,36,4,0.37895,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,49,        if (value == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,33,4,0.36364,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,52,        return -value;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.34973,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,                break;,2,0,0,0,0,0,8,0,0,10,6,11,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,0,0,0,3,35,4,0.33684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33684,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,780,        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();,2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,781,        fields.add(DateTimeFieldType.monthOfYear());,4,1,0,2,4,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,782,        fields.add(DateTimeFieldType.dayOfMonth());,4,0,0,2,4,0,12,0,0,16,43,1,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);",2,0,0,2,4,4,0,8,0,13,67,2,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,        iDateTimeFieldType = fieldType;,4,1,0,0,0,0,4,0,0,10,31,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,        iDurationFieldType = null;,4,1,0,0,0,0,14,0,0,21,26,1,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,        iStringValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,        iUpperBound = upperBound;,2,1,0,0,0,0,0,0,0,3,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31304,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,                return false;,4,0,0,0,0,1,0,2,0,7,13,1,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,                bld.appendDayOfMonth(2);,0,0,0,1,2,0,0,0,0,3,24,4,0.30769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,                if (tokenLen >= 3) {,0,0,0,1,3,0,0,0,0,4,20,4,0.30189,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,0,0,2,37,5,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,        if (lowerBound == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,        return buf.toString();,2,0,0,1,2,1,10,4,0,17,22,1,0.288,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,            bld.appendLiteral('-');,2,1,0,1,2,0,4,0,0,8,23,3,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,            bld.appendLiteral('-');,0,0,0,1,2,0,0,0,0,3,23,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,            bld.appendMonthOfYear(2);,2,2,0,1,2,0,4,0,0,8,25,10,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,0,0,0,0,10,52,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,18,0,0,18,37,5,0.27586,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,                    i--;,8,1,0,0,0,0,0,0,0,11,4,1,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,                    break;,10,4,0,0,0,0,0,0,0,15,6,3,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,            buf.append('\'');,0,0,0,1,2,0,10,0,0,10,17,8,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,            boolean inLiteral = false;,2,1,0,0,0,0,0,0,0,4,26,5,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,                if (c == '\'') {,2,0,0,1,3,0,10,0,0,12,16,1,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,                    buf.append(c);,2,0,0,1,2,0,6,0,0,8,14,3,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,                    buf.append(c);,2,0,0,1,2,0,6,0,0,9,14,6,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,589,                    i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,            },0,0,0,0,1,0,8,0,0,8,1,5,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,        return withZone(DateTimeZone.UTC);,6,1,0,1,2,1,0,2,0,10,34,1,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2577,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,                iPrintedLengthEstimate = 0;,10,0,0,0,0,0,26,2,0,40,27,1,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,                formatter = builder.toFormatter();,10,0,0,1,2,0,8,2,0,23,34,3,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);",4,1,0,1,2,0,8,0,0,13,40,1,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,687,        },0,0,0,0,1,0,0,0,0,1,1,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,        return createFormatterForPattern(pattern);,14,1,0,1,2,1,6,4,0,25,42,1,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,        DateTimeFormatter formatter = null;,4,0,0,0,0,0,4,0,0,8,35,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,4,2,0,1,2,0,0,0,0,6,66,9,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,682,"                parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,        if (iZone == zone) {,10,1,0,1,3,0,12,2,0,27,20,1,0.24427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",8,1,0,0,1,1,0,2,0,11,56,3,0.24427,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,317,                nextField = instant.getField(fieldIndex - 1);,0,0,0,1,2,0,0,0,0,3,45,4,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,2,1,0,5,11,0,10,0,0,13,82,1,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0,0,0,1,2,0,0,0,0,3,90,4,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,    },14,4,1,0,1,0,12,0,0,37,1,3,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,583,            buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,7,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,            indexRef[0] = i;,2,0,0,1,2,0,14,2,0,20,16,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,            i = indexRef[0];,4,0,1,1,2,0,0,0,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,            char c = token.charAt(0);,2,0,0,1,2,0,12,0,0,14,25,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,            switch (c) {,2,0,0,1,3,0,0,0,0,3,12,6,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,574,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,4,0,0,7,38,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,577,        int length = pattern.length();,14,2,0,1,2,0,10,2,0,30,30,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,579,        char c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,8,27,5,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,3,0,1,3,0,0,2,0,12,51,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,621,        indexRef[0] = i;,2,0,1,1,2,0,0,2,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,622,        return buf.toString();,10,2,0,1,2,1,12,0,0,25,22,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",0,0,0,1,2,0,0,0,0,3,112,4,0.22939,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.22939,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,334,        return MIN;,8,0,0,0,0,1,0,2,0,12,11,1,0.22069,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1133,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,613,        if (dpe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,614,            dpe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,636,        return dpe;,0,0,0,0,0,1,0,0,0,1,11,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,339,        return iMax;,2,0,0,0,0,1,0,0,0,2,12,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1643,        if (dye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1649,        return dye;,4,0,0,0,0,1,0,0,0,5,11,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1633,        if (dwe == null) {,2,0,0,1,3,0,6,0,0,8,18,5,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1634,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1639,        return dwe;,4,1,0,0,0,1,0,0,0,5,11,3,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1623,        if (wwe == null) {,4,0,0,1,3,0,0,4,0,8,18,8,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1624,            wwe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1629,        return wwe;,10,2,0,0,0,1,0,0,0,12,11,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,2,4,1,0,0,0,7,66,4,0.21262,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,8,0,0,0,0,11,60,4,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,215,"            instant = add(instant, valueToAdd);",2,0,0,1,2,0,6,0,0,9,35,6,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,216,"            return iChronology.get(partial, instant);",0,0,0,1,2,1,0,0,0,4,41,4,0.21053,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,520,"        return new MonthDay(this, newValues);",10,0,0,1,2,1,4,2,0,17,37,6,0.21053,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1614,        if (we == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1619,        return we;,6,1,0,0,0,1,0,0,0,7,10,1,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",14,8,0,2,4,1,8,0,0,31,66,3,0.20915,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,79,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1261,            return iValue.length();,0,0,0,1,2,1,4,0,0,4,23,6,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,370,        if (text == null) {,2,0,0,1,3,0,8,2,0,12,19,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,373,        switch (text.length()) {,6,0,0,2,5,0,16,2,0,25,24,1,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,379,                return append0(new StringLiteral(text));,10,0,0,2,4,1,6,2,0,19,40,3,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1232,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1233,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1234,        },0,0,0,0,1,0,0,0,0,1,1,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1237,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",4,0,0,1,2,0,0,2,0,7,67,6,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,139,            dayToUse = maxDay;,4,0,0,0,0,0,0,0,0,5,18,6,0.19048,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,273,        if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,276,        if (parsers == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,279,        int length = parsers.length;,8,0,0,0,0,0,6,0,0,14,28,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,280,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,289,        for (i = 0; i < length - 1; i++) {,8,2,0,1,3,0,0,0,0,12,34,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,0,0,4,9,0,0,0,0,13,46,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,294,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,296,"        return append0(printer, new MatchingParser(copyOfParsers));",4,3,0,2,4,1,4,0,0,11,59,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,307,        checkParser(parser);,0,0,0,1,2,0,0,0,0,3,20,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,309,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,319,        if (parser == null) {,6,1,0,1,3,0,0,0,0,7,21,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,322,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1112,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2752,            super();,6,0,0,1,2,0,0,0,0,6,8,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2753,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2754,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2755,            for (int i=parsers.length; --i>=0 ;) {,8,1,0,1,3,0,0,0,0,10,38,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2756,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2757,                if (parser != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2758,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2759,                    if (len > est) {,6,0,0,1,3,0,4,0,0,12,16,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2760,                        est = len;,4,0,0,0,0,0,0,0,0,5,10,11,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2763,            },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2764,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2765,        },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2768,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2684,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,152,        Object f = getFormatter();,0,0,0,1,2,0,0,0,0,3,26,4,0.18234,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,153,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.18234,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,154,            return (DateTimeParser) f;,0,0,0,1,2,1,0,0,0,4,26,4,0.18234,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,313,            if (nextField == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.18182,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,314,                if (fieldIndex == 0) {,2,1,0,1,3,0,0,0,0,3,22,8,0.18182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1367,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.17978,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.17877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1363,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.17729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1364,        },0,0,0,0,1,0,6,0,0,6,1,5,0.17729,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,549,        if (extended) {,2,0,0,1,3,0,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,550,            bld.appendLiteral('-');,0,0,0,1,2,0,4,0,0,5,23,7,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,552,    },2,1,0,0,1,0,4,0,0,7,1,3,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,293,        boolean reducedPrec = false;,2,0,0,0,0,0,0,0,0,3,28,5,0.14815,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,294,        if (fields.remove(DateTimeFieldType.year())) {,0,0,0,3,7,0,0,0,0,10,46,4,0.14815,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,341,        return reducedPrec;,0,0,0,0,0,1,0,0,0,1,19,4,0.14815,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,184,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.1435,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,185,    },4,0,0,0,1,0,0,0,0,5,1,6,0.1435,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,181,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,183,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.14318,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1541,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.13417,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,127,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,128,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,129,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,131,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,132,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,134,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,135,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13361,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.13333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,362,"        super(partial, values);",4,0,0,1,2,0,0,0,0,4,23,4,0.12903,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,363,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,14,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.12329,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,249,        return iChronology;,6,0,0,0,0,1,10,0,0,17,19,3,0.12075,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,818,        return getMaximumValue(instant);,12,2,0,1,2,1,4,2,0,22,32,6,0.10978,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,804,        return getMaximumValue();,0,0,0,1,2,1,12,0,0,12,25,3,0.10959,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10922,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.10903,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.10884,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,772,        return getMinimumValue(instant);,4,0,0,1,2,1,4,0,0,9,32,3,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,183,        int size = partial.size();,4,0,0,1,2,0,10,0,0,15,26,3,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,185,            int value = values[i];,6,0,1,1,2,0,0,0,0,10,22,1,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,186,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10847,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,475,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10811,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.10256,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,84,        return INSTANCE_UTC;,0,0,0,0,0,1,0,0,0,1,20,4,0.10191,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,14,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.1,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,612,"        return withFieldAdded(DurationFieldType.days(), days);",2,0,0,2,4,1,14,4,0,20,54,1,0.1,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,672,"        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));",0,0,0,3,6,1,12,0,0,12,77,5,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,307,"            int max = getMaximumValue(instant, values);",0,0,0,1,2,0,0,0,0,3,43,4,0.09756,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,308,            long proposed = values[fieldIndex] + valueToAdd;,0,0,0,1,2,0,0,0,0,3,48,4,0.09756,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,309,            if (proposed <= max) {,2,0,0,1,3,0,4,0,0,7,22,4,0.09756,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1610,        return dme;,0,0,0,0,0,1,0,0,0,1,11,4,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1594,        if (mye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0944,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,142,                return val1;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,144,        long total = val1 * val2;,6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,10,2,0,1,3,0,0,0,0,12,27,3,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,148,        return total;,2,1,0,0,0,1,2,0,0,7,13,4,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,136,        switch (val2) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,0,0,0,6,78,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.75385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,0,0,0,7,54,4,0.73134,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,            hms = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.57647,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,            if (prev > Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,28,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.42982,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,            iShort = isShort;,0,0,0,0,0,0,0,0,0,0,17,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },10,1,0,0,1,0,0,0,0,12,1,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,            return iShort ? 6 : 20;,0,0,0,0,0,1,0,0,0,1,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,318,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,454,        switch (iRoundingMode) {,0,0,0,1,3,0,0,0,0,4,24,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,474,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,475,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",10,0,0,0,1,1,0,2,0,13,55,1,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,6,0,0,0,0,1,8,0,0,15,15,3,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,10,0,0,0,0,2,30,6,0,50,7,1,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.25654,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,                        buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },2,1,0,0,1,0,0,0,0,3,1,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,8,0,0,9,42,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,        if (pattern == null || pattern.length() == 0) {,0,0,0,2,5,0,0,0,0,7,47,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,14,5,0,1,3,0,2,2,0,24,32,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,4,0,0,1,2,0,6,0,0,12,41,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,6,0,0,8,33,1,0.196,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,6,1,0,0,0,0,8,0,0,16,6,3,0.18702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,6,0,0,1,2,0,0,8,0,14,30,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,0,0,0,2,4,0,4,0,0,4,28,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,10,0,0,10,30,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,6,1,0,1,3,0,0,0,0,8,12,3,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,0,1,1,1,2,0,8,0,0,14,38,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,621,        indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,2,0,0,1,2,1,4,2,0,8,22,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,503,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.18352,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",10,0,0,1,2,3,2,12,0,28,112,1,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,4,1,0,1,3,0,0,0,0,6,18,7,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,4,0,0,2,5,0,0,0,0,5,36,5,0.17754,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },2,0,0,0,1,0,0,2,0,4,1,3,0.17626,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,0,0,0,5,68,5,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,4,1,0,2,4,0,4,0,0,9,64,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,365,"                millis = savedFields[i].set(millis, resetFields);",0,0,0,2,4,0,0,0,0,6,49,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0,0,0,5,11,0,0,0,0,16,63,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,6,0,0,11,36,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,482,            if (iText == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,14,3,0,1,3,0,0,0,0,18,12,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",6,1,0,0,1,0,0,2,0,9,46,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,14,0,0,1,3,0,0,2,0,18,19,1,0.16388,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,6,1,0,2,5,0,2,0,0,10,24,3,0.16388,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,        int count = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,5,30,5,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,346,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,350,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,351,        if (count > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,362,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,364,            for (int i = 0; i < count; i++) {,4,0,0,1,3,0,4,2,0,10,33,3,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,367,            if (resetFields) {,0,0,0,1,3,0,0,0,0,4,18,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,377,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,379,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,416,        if (high > 10) {,0,0,0,1,3,0,0,0,0,4,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,419,            for (int i=0; i<high; i++) {,6,0,0,1,3,0,0,0,0,7,28,6,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1321,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1322,            },2,0,0,0,1,0,4,0,0,6,1,10,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1329,            if (length >= 9) {,8,2,0,1,3,0,10,0,0,21,18,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1334,                int i = position;,8,1,0,0,0,0,4,2,0,17,17,3,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1335,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1339,                    value = text.charAt(i++) - '0';,0,0,0,1,2,0,0,0,0,3,31,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1342,                },0,0,0,0,1,0,0,0,0,1,1,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1343,                position += length;,0,0,0,0,0,0,0,0,0,0,19,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1344,                while (i < position) {,6,2,0,1,3,0,0,0,0,8,22,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1347,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1352,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1353,            return position;,0,0,0,0,0,1,12,0,0,13,16,6,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,247,    },10,5,0,0,1,0,0,0,0,15,1,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,261,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,262,        int savedFieldsCount = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,41,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,6,0,0,1,3,0,4,2,0,12,67,3,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,273,        iSavedState = null;,10,1,0,0,0,0,0,0,0,13,19,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,274,        savedFields[savedFieldsCount] = field;,0,0,0,1,2,0,0,0,0,3,38,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,275,        iSavedFieldsCount = savedFieldsCount + 1;,4,1,0,0,0,0,0,0,0,6,41,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,467,"        SavedField(DateTimeField field, int value) {",0,0,0,1,3,0,0,0,0,4,44,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,468,            iField = field;,8,2,0,0,0,0,12,0,0,23,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,469,            iValue = value;,6,0,0,0,0,0,0,0,0,7,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,471,            iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.15605,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,954,            dt = new DateTimeFormatterBuilder(),12,3,0,1,2,0,0,4,0,21,35,3,0.15605,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,959,        return dt;,0,0,0,0,0,1,0,0,0,1,10,4,0.15605,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1318,                if (c < '0' || c > '9') {,2,1,0,1,3,0,0,0,0,3,25,4,0.15506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",8,3,0,2,4,0,4,0,0,15,65,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1294,            boolean negative = false;,6,1,0,0,0,0,2,0,0,10,25,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1295,            int length = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1296,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1297,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,2,1,0,2,5,0,10,0,0,13,55,3,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1324,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,917,            tt = new DateTimeFormatterBuilder(),2,0,0,1,2,0,4,2,0,9,35,1,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,879,        if (t == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,880,            t = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,34,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1875,"                printTo(buf, null, instant, chrono);",0,1,1,1,2,0,18,0,0,29,36,1,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1482,        if (hmsf == null) {,4,1,0,1,3,0,4,2,0,11,19,3,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1483,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,2,37,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1490,        return hmsf;,24,7,0,0,0,1,14,4,0,53,12,1,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1691,        if (fse == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1699,        return fse;,0,0,0,0,0,1,0,0,0,1,11,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2112,            if (displayZone == null) {,4,2,0,1,3,0,4,0,0,10,26,7,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,0,0,1,3,0,6,0,0,8,57,5,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,119,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,72,    private SavedField[] iSavedFields = new SavedField[8];,6,0,0,2,4,1,4,8,0,19,54,1,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,120,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,121,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,122,        iZone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,25,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,123,        iChrono = chrono.withUTC();,10,1,0,1,2,0,8,0,0,21,27,3,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,125,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,127,    },10,1,0,0,1,0,0,0,0,12,1,7,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,924,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,925,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,928,        return parser;,2,0,0,0,0,1,0,0,0,2,14,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",4,1,0,2,4,1,0,0,0,5,64,5,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1908,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1909,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1913,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1921,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1923,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1363,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.14,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1364,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,127,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.13573,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.13499,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,155,            return 1;,0,1,0,0,0,1,10,0,0,11,9,5,0.13315,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,146,        long otherMillis = otherField.getUnitMillis();,8,1,0,1,2,0,22,0,0,32,46,1,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,149,        if (thisMillis == otherMillis) {,0,0,0,1,3,0,0,0,0,4,32,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,87,4,0.13032,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,866,        return yearMonthDay();,6,1,0,1,2,2,2,0,0,10,22,3,0.12629,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,294,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.12596,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1358,        if (ymd == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.12468,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.12468,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1365,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.12468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2621,                locale = Locale.getDefault();,4,0,0,1,2,0,4,2,0,11,29,1,0.12343,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.11922,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1180,            buf.append(iValue);,0,0,0,1,2,0,6,0,0,6,19,6,0.11893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11893,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,4,0,0,4,32,7,0.11864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2614,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2615,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2619,            if (locale == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2624,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2625,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,8,0,0,8,78,5,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2628,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1437,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,76,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,582,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,583,"        printTo(buf, instant);",0,0,0,1,2,0,6,0,0,6,22,5,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,584,        return buf.toString();,0,0,0,1,2,1,4,2,0,6,22,1,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,459,        long millis = DateTimeUtils.getInstantMillis(instant);,0,0,0,1,2,0,0,0,0,3,54,4,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,460,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,14,2,0,18,64,3,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,461,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,8,0,0,8,29,5,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,618,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,619,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,622,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,623,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,624,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,0,0,0,9,40,3,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,625,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,23,65,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,631,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,18,0,0,23,79,1,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,632,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,437,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2120,                buf.append('+');,10,2,0,1,2,1,4,0,0,18,16,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1653,        if (lte == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1654,            lte = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,127,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,128,        iPrinter = printer;,4,0,1,0,0,0,4,0,0,13,19,1,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,129,        iParser = parser;,0,0,0,0,0,0,0,0,0,0,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,131,        iOffsetParsed = offsetParsed;,0,0,0,0,0,0,0,0,0,0,29,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,132,        iChrono = chrono;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.1047,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,87,4,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0,0,0,3,6,0,0,0,0,9,59,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,0,0,0,1,2,1,4,0,0,4,27,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,            int offset = getOffsetToAdd(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.00476,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,344,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,266,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,225,    },0,0,0,0,1,0,6,0,0,6,1,6,0.00339,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,3,0,0,1,0,5,0,0,12,46,1,0.00337,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,4,0,0,1,3,0,0,0,0,5,19,4,0.00273,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.00242,0,0,-1
defect4j,time,org/joda/time/DateTime,17,220,"        super(instant, chronology);",0,0,0,1,2,0,0,0,0,3,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTime,17,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,6,1,0,1,3,0,0,2,0,9,21,3,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,2,0,0,1,2,1,12,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,4,2,0,1,3,0,0,0,0,6,22,3,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,2,0,0,1,2,0,6,0,0,8,46,5,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,4,0,0,2,5,0,0,0,0,5,40,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,2,0,0,1,3,1,6,0,0,9,45,1,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00148,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,0,0,0,6,57,4,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00139,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,882,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,48,4,0.00136,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,10,2,0,0,0,1,0,0,0,13,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,2,0,0,1,3,0,0,4,0,6,36,5,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.00131,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,6,0,0,1,2,1,8,0,0,15,50,6,0.00129,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.00125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,124,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,125,        iChronology = checkChronology(chronology);,0,0,0,1,2,0,0,0,0,3,42,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,127,    },2,0,0,0,1,0,0,4,0,6,1,8,0.00123,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00114,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,955,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,12,0,0,17,51,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,4,0,0,0,0,0,6,0,0,11,48,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,4,2,1,1,2,1,0,0,0,9,27,1,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1574,                return transitions[i];,0,0,0,1,2,1,0,0,0,4,22,4,0.00088,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,6,0,0,6,45,7,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,924,        int offset = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,35,5,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,925,        long instantLocal = instantUTC + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,68,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,930,        return instantLocal;,2,0,0,0,0,1,0,0,0,2,20,4,0.00078,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,295,        return iMillis;,14,2,0,0,0,1,16,2,0,37,15,1,0.00072,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,10,0,0,16,52,3,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,6,0,0,6,43,5,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,213,                leapYears--;,4,0,0,0,0,0,0,0,0,6,12,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0,0,0,3,7,0,0,0,0,10,54,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,167,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",10,1,0,2,4,0,6,0,0,18,78,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,10,0,0,10,84,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,0,0,0,6,88,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,0,0,0,6,89,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,0,0,0,4,59,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,160,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1533,            i = ~i;,8,0,0,0,0,0,0,0,0,11,7,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,103,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,0,0,0,7,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,197,                if (iOffset == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0,0,0,1,2,0,0,0,0,3,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,200,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1528,            long[] transitions = iTransitions;,6,1,0,1,2,0,0,0,0,7,34,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1529,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1530,            if (i >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1570,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1571,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1572,            i = (i >= 0) ? (i + 1) : ~i;,2,0,0,2,4,0,0,0,0,2,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1573,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,140,        int period = (int)(millis >> 32);,2,0,0,2,4,0,4,2,0,8,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,141,        Info[] cache = iInfoCache;,2,0,0,1,2,0,0,0,0,2,26,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,142,        int index = period & cInfoCacheMask;,8,1,0,0,0,0,4,0,0,14,36,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,143,        Info info = cache[index];,0,0,0,1,2,0,0,0,0,3,25,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,145,            info = createInfo(millis);,2,0,0,1,2,0,4,2,0,9,26,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,146,            cache[index] = info;,0,0,0,1,2,0,0,0,0,3,20,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,148,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,152,        long periodStart = millis & (0xffffffffL << 32);,10,2,0,1,2,0,0,2,0,14,48,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,153,"        Info info = new Info(iZone, periodStart);",12,1,0,1,2,0,16,2,0,33,41,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,155,        long end = periodStart | 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,156,        Info chain = info;,0,0,0,0,0,0,0,0,0,0,18,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,158,            long next = iZone.nextTransition(periodStart);,14,3,0,1,2,0,6,0,0,23,46,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,159,            if (next == periodStart || next > end) {,4,0,0,1,3,0,0,0,0,4,40,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,166,        return info;,10,1,0,0,0,1,0,0,0,11,12,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,180,"        Info(DateTimeZone zone, long periodStart) {",0,0,0,1,3,0,0,0,0,4,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,177,        private int iOffset = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,40,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,178,        private int iStandardOffset = Integer.MIN_VALUE;,10,0,0,0,0,0,14,2,0,27,48,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,181,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,182,            iZoneRef = zone;,6,0,0,0,0,0,0,0,0,7,16,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00056,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,8,2,0,13,45,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,257,    },2,1,0,0,1,0,0,0,0,4,1,6,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,252,        super();,4,1,1,1,2,0,12,2,0,23,8,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,8,2,0,12,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,75,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,448,        int year = getYear(millis);,4,0,0,1,2,0,0,0,0,5,27,6,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,449,"        int month = getMonthOfYear(millis, year);",0,0,0,1,2,0,0,0,0,3,41,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,0,0,0,4,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,6,0,0,6,36,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,107,        if ((base = iBase) != null) {,8,1,1,2,5,0,0,0,0,12,29,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0,0,0,1,2,0,0,0,0,3,53,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,0,0,0,10,76,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,12,7,0,4,8,0,4,0,0,23,52,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,93,        return,8,0,1,0,0,0,0,2,0,15,6,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",2,0,0,3,6,0,16,0,0,18,115,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,0,0,0,4,60,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,79,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",2,1,0,4,8,0,14,0,0,17,89,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.05556,0,0,-1
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0,0,0,1,2,0,0,0,0,3,61,4,0.03333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,63,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.01282,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,18,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.00833,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0,0,0,1,2,1,0,0,0,4,57,4,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,194,            cutoverInstant = gregorianCutover.toInstant();,0,0,0,1,2,0,10,0,0,10,46,7,0.00129,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,496,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,102,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,498,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,500,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,923,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",2,1,0,1,2,0,4,0,0,9,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,934,        },4,0,0,0,1,0,0,0,0,4,1,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,944,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",12,1,0,1,2,0,10,4,0,29,69,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,946,            if (durationField == null) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,2,0,0,0,0,0,6,0,0,9,31,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,950,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,601,        },2,0,0,0,1,0,2,2,0,7,1,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,610,"                     long cutoverMillis, boolean convertByWeekyear) {",0,0,0,0,2,0,0,0,0,2,48,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,611,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,8,0,0,0,0,0,0,2,0,11,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,614,            iCutover = cutoverMillis;,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,6,0,0,14,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,4,0,0,10,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,621,            if (rangeField == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,622,                rangeField = julianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,49,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,625,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,0,0,0,3,126,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,83,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,4,0,0,1,2,0,6,0,0,12,35,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,191,        if (gregorianCutover == null) {,0,0,0,1,3,0,10,0,0,10,31,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,2,1,1,2,0,10,4,0,22,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,202,"            cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,10,1,0,1,3,0,6,2,0,20,31,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,215,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,228,        chronos.add(chrono);,0,0,0,1,2,0,0,0,0,3,20,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,230,        return chrono;,10,5,0,0,0,1,4,0,0,20,14,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,453,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,12,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,455,        JulianChronology julian = (JulianChronology)params[0];,0,0,0,2,4,0,0,0,0,6,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,456,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,0,0,0,6,63,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,457,        Instant cutoverInstant = (Instant)params[2];,0,0,0,2,4,0,0,0,0,6,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0,0,0,1,2,0,14,0,0,14,44,8,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,460,        iJulianChronology = julian;,0,0,0,0,0,0,0,0,0,0,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,8,1,0,0,0,0,8,0,0,19,33,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,462,        iCutoverInstant = cutoverInstant;,0,0,0,0,0,0,0,0,0,0,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,464,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,468,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,0,0,3,7,0,0,0,0,10,82,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,473,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,10,1,0,1,2,0,0,2,0,13,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,479,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,0,0,0,3,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,485,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,0,0,3,7,0,0,0,0,10,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,505,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,514,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,61,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,515,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,520,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,521,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,529,            fields.year = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,40,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,531,            fields.years = fields.year.getDurationField();,0,0,0,1,2,0,0,0,0,3,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,532,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,45,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,534,            fields.yearOfCentury = new ImpreciseCutoverField(,8,4,0,0,1,0,0,0,0,12,49,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,537,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,539,            fields.centuries = fields.centuryOfEra.getDurationField();,0,0,0,1,2,0,0,0,0,3,58,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,541,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,4,0,0,4,47,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,543,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,545,            fields.weekyear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,547,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,53,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,549,            fields.weekyears = fields.weekyear.getDurationField();,2,1,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,555,            CutoverField cf = new CutoverField,0,0,0,0,0,0,0,0,0,0,34,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,557,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,558,            fields.dayOfMonth = cf;,6,0,0,0,0,0,8,0,0,15,23,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,560,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,563,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1071,"            super(durationField, durationField.getType());",0,0,0,2,4,0,0,0,0,6,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1072,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1073,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,129,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,133,        return instant;,8,2,0,0,0,1,2,0,0,12,15,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,72,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,80,        int value = super.get(millis);,0,0,0,1,2,0,0,0,0,3,30,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,81,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,84,        return value;,4,0,0,0,0,1,0,0,0,5,13,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,219,        int relativeYear = year - 1968;,0,0,0,0,0,0,4,0,0,4,31,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,221,        if (relativeYear <= 0) {,24,11,0,1,3,0,0,0,0,37,24,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,2,0,2,4,0,0,0,0,7,89,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,1,2,1,0,0,0,4,64,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,253,        return MILLIS_PER_YEAR / 2;,4,1,0,0,0,1,0,0,0,5,27,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,133,        int thisWeekyear = get( instant );,4,1,0,1,2,0,2,4,0,11,34,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,134,        if ( thisWeekyear == year ) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,140,        int thisDow = iChronology.getDayOfWeek(instant);,8,0,0,1,2,0,0,2,0,11,48,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,0,1,2,0,0,0,0,3,65,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0,0,0,1,2,0,0,0,0,3,53,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,155,        if ( setToWeek > maxOutWeeks ) {,8,0,0,1,3,0,0,0,0,9,32,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,162,        long workInstant = instant; // Get a copy,16,2,0,0,0,0,14,6,0,40,41,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,173,        int workWoyYear = get( workInstant );,0,0,0,1,2,0,0,0,0,3,37,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,179,        if ( workWoyYear < year ) {,8,1,0,1,3,0,4,0,0,14,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,10,1,0,1,2,0,10,2,0,23,64,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0,0,0,1,2,0,0,0,0,3,56,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",4,1,0,2,4,0,10,0,0,16,66,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.00103,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,96,        return iField.get(instant);,0,0,0,1,2,1,0,0,0,4,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,60,        return iChronology.getWeekyear(instant);,2,0,0,1,2,2,0,0,0,3,40,2,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,493,        int year = getYear(instant);,0,0,0,1,2,0,0,0,0,3,28,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,494,"        int week = getWeekOfWeekyear(instant, year);",2,1,0,1,2,0,6,0,0,9,44,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,495,        if (week == 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,185,        return iMinDaysInFirstWeek;,0,0,0,0,0,1,0,0,0,1,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,344,            return jan1millis + (8 - jan1dayOfWeek),0,0,0,1,2,1,0,0,0,4,39,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0,0,0,2,4,0,0,0,0,6,70,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,539,            if (daysSince19700101 < -3) {,10,0,0,1,3,0,0,2,0,14,29,6,0.00103,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,163,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0,0,0,2,4,0,0,0,0,6,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,49,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,239,        return instant;,2,1,0,0,0,1,0,0,0,3,15,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),10,3,0,1,2,1,0,0,0,13,71,3,0.00103,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,792,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,6,0,0,6,33,8,0.008,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,10,0,0,10,26,5,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00341,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,954,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1483,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1490,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1691,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1909,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1913,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1923,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1358,        if (ymd == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,4,1,0,1,2,0,8,0,0,15,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,4,1,0,3,6,0,12,2,0,20,29,3,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,10,1,0,5,10,0,4,0,0,17,55,1,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,78,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00244,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1180,            buf.append(iValue);,0,0,0,1,2,0,6,0,0,6,19,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,2,0,0,1,2,1,12,2,0,17,32,1,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2614,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,8,0,0,1,3,0,6,0,0,17,23,3,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,6,0,0,0,0,0,14,0,0,20,26,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,10,1,0,1,3,0,4,2,0,18,31,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0,0,0,0,1,0,10,0,0,10,1,7,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,4,0,0,1,2,0,10,2,0,16,50,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,18,0,0,19,78,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,582,"        printTo(buf, instant);",0,0,0,1,2,0,6,0,0,6,22,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,2,0,0,1,2,1,8,0,0,10,22,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,1,0,1,2,0,6,0,0,13,54,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,6,0,0,6,64,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,16,0,0,17,29,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,83,                digits = 4;,2,0,0,0,0,0,6,0,0,9,11,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,6,2,0,10,43,7,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,16,4,0,43,65,1,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,8,0,0,14,79,3,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,8,2,0,1,3,0,4,2,0,18,19,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,12,1,0,1,3,0,12,2,0,30,31,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.00233,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,28,6,0,1,3,0,10,0,0,46,18,1,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,8,2,0,15,36,3,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1658,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,6,0,0,0,0,1,18,2,0,27,30,1,0.00199,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1703,        if (ze == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1708,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,2,0,0,0,0,0,0,0,0,2,22,7,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,2,0,0,3,6,0,4,0,0,7,32,11,0.00187,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,656,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,10,3,0,1,3,0,12,0,0,25,22,1,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,660,        return printer;,0,0,0,0,0,1,0,0,0,1,15,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,10,2,0,1,3,0,0,0,0,12,24,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,535,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,0,0,0,2,38,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",2,0,0,2,4,1,10,0,0,12,62,6,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,77,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,6,1,0,1,2,0,0,0,0,7,8,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,4,0,1,1,3,0,6,0,0,15,21,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0,0,0,0,0,0,0,0,0,1,23,7,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1864,            iMaxDigits = maxDigits;,0,0,0,0,0,0,0,0,0,0,23,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1865,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1868,            return iMaxDigits;,0,0,0,0,0,1,0,0,0,1,18,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,4,1,0,0,0,1,0,0,0,5,18,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,18,0,0,1,3,0,12,0,0,31,22,1,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0,0,0,2,5,0,0,0,0,7,74,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2106,            return est;,4,1,0,0,0,1,0,0,0,5,11,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2236,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.00182,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00178,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00174,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2083,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2085,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,10,0,0,12,43,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2086,            iShowSeparators = showSeparators;,0,0,0,0,0,0,0,0,0,0,33,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2087,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2094,            iMinFields = minFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2095,            iMaxFields = maxFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2096,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00173,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,164,        if (instant == null) {,12,7,0,1,3,0,0,0,0,21,22,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1681,        if (sme == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1682,            sme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1687,        return sme;,6,0,0,0,0,1,0,0,0,7,11,1,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1672,            mhe = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1677,        return mhe;,0,0,0,0,0,1,0,0,0,1,11,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1662,        if (hde == null) {,6,1,0,1,3,0,0,0,0,9,18,3,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1663,            hde = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,0,0,5,36,4,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00168,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,149,        return instant.getMillis();,8,1,0,1,2,1,4,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.00162,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,50,        if (value < 0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,62,        if (value < 10) {,4,1,0,1,3,0,0,2,0,8,17,3,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,92,    },12,1,0,0,1,0,4,2,0,21,1,3,0.00159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1604,        if (dme == null) {,0,0,0,1,3,0,6,0,0,6,18,5,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1605,            dme = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,11,36,3,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,140,        int offset = zone.getOffsetFromLocal(instant);,8,0,0,1,2,0,4,0,0,13,46,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,142,        if (offset != zone.getOffset(instant)) {,2,1,0,2,5,0,6,0,0,9,40,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,188,                if (isLeapYear(year)) {,2,1,0,2,5,0,8,0,0,12,23,4,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1594,        if (mye == null) {,10,6,0,1,3,0,4,0,0,21,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1600,        return mye;,0,0,0,0,0,1,0,0,0,1,11,4,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,170,            periodStart = next;,12,1,0,0,0,0,0,4,0,20,19,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",8,1,0,2,4,0,10,0,0,21,57,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",8,0,0,2,4,1,12,0,0,21,69,3,0.00147,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,8,0,0,8,35,5,0.00146,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.00143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,935,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,6,0,0,11,45,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,936,        if (iChrono != null) {,2,0,0,1,3,0,2,0,0,4,22,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,942,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",6,4,0,2,4,1,4,0,0,14,68,1,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,8,0,0,8,29,5,0.00139,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,910,        return offsetAdjusted;,0,0,0,0,0,1,0,0,0,1,22,4,0.00138,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00137,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,882,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,48,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,885,        final int offsetAdjusted = getOffset(instantAdjusted);,6,0,0,1,2,1,4,0,0,12,54,3,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,887,        if (offsetLocal != offsetAdjusted) {,4,0,0,1,3,0,6,2,0,13,36,3,0.00136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.00136,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00133,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00132,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,12,2,0,23,33,1,0.00132,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,4,0,0,17,43,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0,0,0,3,6,0,0,0,0,9,60,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,18,0,0,18,58,5,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2736,            if (array != null) {,10,1,0,1,3,0,2,0,0,14,20,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2738,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2741,        },2,0,0,0,1,0,4,2,0,9,1,6,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,448,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,454,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,6,0,0,6,38,5,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,551,            } else if (iMode == 's') {,8,1,0,1,4,0,14,2,0,28,26,1,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,554,                offset = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,4,0,0,6,46,10,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,726,                        daysToAdd -= 7;,0,0,0,0,0,0,0,0,0,0,15,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,209,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,212,"        return append0(formatter.getPrinter(), formatter.getParser());",4,3,0,3,6,1,10,0,0,17,62,1,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,153,        return iPrinter;,2,1,0,0,0,1,0,0,0,3,16,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,345,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,346,        iElementPairs.add(printer);,2,1,0,1,2,0,0,0,0,3,27,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,347,        iElementPairs.add(parser);,0,0,0,1,2,0,0,0,0,3,26,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00123,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1543,            return iTailZone.getOffset(instant);,2,0,0,1,2,1,8,0,0,10,36,1,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1141,            return true;,8,0,0,0,0,1,4,0,0,14,12,3,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1131,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1104,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1105,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1107,                if (printer != null) {,2,0,0,1,3,1,4,0,0,7,22,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1108,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1109,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1304,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,4,0,0,7,46,16,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1306,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1311,                start = startRecurrence.next,2,0,0,0,0,0,4,0,0,7,28,7,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1319,            },2,0,0,0,1,0,4,0,0,7,1,9,0.00119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,0,0,0,7,25,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,6,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0,0,0,1,2,0,0,0,0,3,66,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/DateTime,20,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,                builder.appendMinuteOfHour(tokenLen);,0,0,0,1,2,0,0,0,0,3,37,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,        int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,        if (tokenLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,            char c = token.charAt(0);,0,0,0,1,2,0,4,0,0,4,25,7,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,            switch (c) {,0,0,0,1,3,0,6,0,0,6,12,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,                    int maxDigits = 9;,2,0,0,0,0,0,0,0,0,2,18,10,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,                    if (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,                    switch (c) {,4,0,0,1,3,0,10,0,0,14,12,3,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,357,        int sampleLen = errorPos + 32;,0,0,0,0,0,0,0,0,0,0,30,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,359,        if (text.length() <= sampleLen + 3) {,4,2,0,2,5,0,8,0,0,14,37,3,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,360,            sampleText = text;,0,0,0,0,0,0,0,0,0,0,18,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,365,        if (errorPos <= 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,                if (tokenLen == 2) {,6,1,0,1,3,0,0,2,0,9,20,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,        Chronology chrono = selectChronology(null);,2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,847,        if (newPos >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,                builder.appendDayOfMonth(tokenLen);,2,0,0,1,2,0,14,0,0,17,35,1,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.005,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.00444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,                    i--;,2,0,0,0,0,0,4,0,0,7,4,3,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,                String sub = token.substring(1);,2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,            buf.append('\'');,0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,600,            for (; i < length; i++) {,0,0,0,1,3,0,8,0,0,8,25,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,                c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,616,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,12,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,                    i++;,2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,593,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,                char peek = pattern.charAt(i + 1);,8,1,0,1,2,0,8,0,0,17,34,3,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,        int length = pattern.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,        int[] indexRef = new int[1];,0,0,1,2,4,0,0,0,0,3,28,11,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,16,0,0,19,45,3,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,406,            i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,414,            switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,574,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,        int i = indexRef[0];,2,0,0,1,2,0,6,0,0,9,20,8,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,        int length = pattern.length();,6,0,0,1,2,0,4,0,0,11,30,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,        char c = pattern.charAt(i);,6,1,0,1,2,0,6,0,0,14,27,7,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,10,8,0,1,3,0,4,0,0,26,51,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",6,0,0,1,2,3,0,14,0,25,112,1,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00368,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,            return position + 1;,2,0,0,0,0,1,0,0,0,2,20,5,0.00362,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1206,            char a = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1207,            char b = iValue;,0,0,0,0,0,0,0,0,0,0,16,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,            if (a != b) {,12,2,0,1,3,0,0,4,0,19,13,1,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1345,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0,0,0,4,8,0,0,0,0,12,63,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,            if (position >= text.length()) {,2,1,0,2,5,0,8,0,0,11,32,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1321,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1322,            },10,1,0,0,1,0,0,4,0,15,1,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1329,            if (length >= 9) {,6,0,1,1,3,0,6,2,0,19,18,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1334,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1335,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1339,                    value = text.charAt(i++) - '0';,2,0,0,1,2,0,6,0,0,9,31,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1342,                },10,0,0,0,1,0,8,4,0,22,1,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1343,                position += length;,8,0,0,0,0,0,0,2,0,11,19,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1344,                while (i < position) {,10,3,0,1,3,0,0,0,0,14,22,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1347,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1352,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1353,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",2,0,0,3,6,0,8,2,0,12,62,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,261,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,262,        int savedFieldsCount = iSavedFieldsCount;,2,0,1,0,0,0,6,0,0,13,41,8,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,273,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,274,        savedFields[savedFieldsCount] = field;,0,0,0,1,2,0,0,0,0,3,38,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,275,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,468,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,469,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,471,            iLocale = null;,6,0,0,0,0,0,0,0,0,8,15,1,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1318,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.00317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,65,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1294,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1295,            int length = 0;,10,4,0,0,0,0,0,0,0,14,15,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1296,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1297,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0,0,0,2,5,0,0,0,0,7,55,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1324,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2682,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2683,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2687,            int len = elements.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2688,            for (int i=0; i<len && position >= 0; i++) {,0,0,0,1,3,0,0,0,0,4,44,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2689,"                position = elements[i].parseInto(bucket, text, position);",0,0,0,2,4,0,0,0,0,6,57,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2691,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,119,        super();,2,0,1,1,2,0,0,0,0,6,8,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,72,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,120,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,0,0,0,5,45,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,121,        iMillis = instantLocal;,4,1,0,0,0,0,0,0,0,6,23,6,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,122,        iZone = chrono.getZone();,0,0,0,1,2,0,4,0,0,4,25,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,123,        iChrono = chrono.withUTC();,0,0,0,1,2,0,0,0,0,3,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,4,0,0,12,58,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,125,        iPivotYear = pivotYear;,14,2,0,0,0,0,2,0,0,20,23,3,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,920,        DateTimeParser parser = iParser;,4,0,0,0,0,0,0,2,0,6,32,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,921,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,924,        return parser;,0,0,0,0,0,1,0,0,0,1,14,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2615,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.00254,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,0,0,0,3,29,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,1,0,5,10,0,0,0,0,11,55,1,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,78,        } else {,8,2,0,0,2,0,0,0,0,11,8,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1180,            buf.append(iValue);,2,0,0,1,2,0,10,0,0,13,19,4,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1181,        },2,1,0,0,1,0,4,0,0,7,1,1,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2608,            DateTimePrinter[] elements = iPrinters;,10,1,0,1,2,0,0,2,0,14,39,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2609,            if (elements == null) {,8,2,0,1,3,0,10,0,0,21,23,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2613,            if (locale == null) {,2,2,0,1,3,0,8,0,0,12,21,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2618,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2619,            for (int i = 0; i < len; i++) {,10,2,0,1,3,0,0,0,0,13,31,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2620,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2622,        },12,2,0,0,1,0,0,2,0,16,1,2,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1437,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,1,0,2,4,0,8,0,0,12,76,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,14,0,0,3,6,0,24,4,0,44,78,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,582,"        printTo(buf, instant);",14,6,0,1,2,0,10,0,0,30,22,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,583,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,6,0,0,13,54,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,460,"        printTo(buf, millis, chrono);",6,0,0,1,2,0,8,0,0,15,29,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,83,                digits = 4;,0,0,0,0,0,0,0,0,0,0,11,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,617,        DateTimePrinter printer = requirePrinter();,6,1,0,1,2,0,4,2,0,13,43,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,623,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,8,0,0,18,40,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,65,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,0,0,0,6,79,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,80,            if (value < 1000) {,8,1,0,1,3,0,6,0,0,17,19,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.00236,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1541,                return iWallOffsets[i - 1];,2,1,1,1,2,1,0,0,0,5,27,8,0.00217,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2602,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.002,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00194,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,66,            buf.append((char)(value + '0'));,8,1,0,3,6,2,10,6,0,28,32,1,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,67,        } else if (value < 100) {,8,1,0,1,4,0,0,0,0,10,25,1,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,168,        if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,656,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,657,        if (printer == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,660,        return printer;,2,0,0,0,0,1,0,0,0,2,15,5,0.00186,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,164,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0018,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.00179,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00172,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,140,        int offset = zone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,141,        instant -= offset;,0,0,0,0,0,0,6,0,0,6,18,5,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,142,        if (offset != zone.getOffset(instant)) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00164,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0,0,0,1,2,0,0,0,0,3,85,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",0,0,0,1,2,0,0,0,0,3,27,4,0.08333,1,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,357,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0,0,0,2,4,0,0,0,0,6,65,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,10,2,0,0,0,0,0,0,0,12,59,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,4,1,0,1,3,0,8,0,0,14,18,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,648,            return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.0597,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,12,3,0,1,3,0,4,0,0,19,61,1,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,4,1,0,3,6,1,16,0,0,21,84,1,0.04762,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,2,1,0,0,0,1,6,0,0,11,13,4,0.04167,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",4,0,0,1,2,1,12,0,0,18,36,3,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,            long current = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,14,4,0,1,3,0,0,0,0,19,32,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,                if (field.isPrecise()) {,0,0,0,2,5,0,4,0,0,4,24,9,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);",0,0,0,1,2,0,0,0,0,3,51,4,0.0396,0,0,-1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",10,0,0,2,4,1,4,4,0,18,68,1,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",6,0,0,2,4,1,8,0,0,15,69,3,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,1,0,2,4,1,8,0,0,11,68,6,0.03571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,52,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,10,5,0,3,7,0,6,0,0,21,53,1,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,88,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,330,            int offset = getOffsetToAdd(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,47,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,            return iField.getDifference,0,0,0,0,0,1,4,0,0,4,27,6,0.02439,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,278,                    return chronology.weeks();,0,0,0,1,2,1,4,0,0,4,26,7,0.02381,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,84,4,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,14,0,0,16,77,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,10,2,0,0,0,1,0,0,0,13,32,3,0.02105,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,290,                    return chronology.millis();,0,0,0,1,2,1,0,0,0,4,27,4,0.02094,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,288,                    return chronology.seconds();,0,0,0,1,2,1,4,0,0,4,28,7,0.02041,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,2,0,0,0,0,1,6,0,0,8,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,4,0,0,5,26,1,0.01914,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,2,1,0,1,2,0,0,0,0,3,37,7,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,319,"            instant = iField.add(instant + offset, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,16,7,0,2,4,1,12,2,0,42,79,1,0.01762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,8,1,0,1,2,1,0,0,0,10,28,4,0.01606,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,28,4,0,1,3,0,20,0,0,57,26,1,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.01575,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,276,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.01509,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,674,        int realIndex = iIndices[index];,0,0,0,1,2,0,0,0,0,3,32,4,0.01493,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,2,0,0,2,4,1,4,2,0,8,58,5,0.01493,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,2,1,0,0,0,0,8,0,0,11,28,5,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,0,0,3,7,0,20,2,0,27,53,3,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,8,1,0,0,0,1,0,2,0,11,14,1,0.01476,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,280,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.01404,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,6,1,0,1,2,1,4,0,0,11,26,1,0.01389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,4,4,0,1,3,0,8,0,0,16,16,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,4,1,0,1,3,0,6,0,0,11,17,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,324,        return iType.getFieldType(index);,6,4,0,1,2,1,10,0,0,21,33,3,0.01201,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,628,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.01201,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.01087,0,0,-1
defect4j,time,org/joda/time/Period,22,298,"        super(0L, null, null);",6,0,0,1,2,0,4,0,0,11,22,3,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,299,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,0.00955,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,115,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00952,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,264,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,266,            switch (iOrdinal) {,6,1,0,1,3,0,0,0,0,7,19,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,287,            return PeriodType.standard();,6,1,0,1,2,1,4,0,0,12,29,1,0.00868,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,117,"        return FieldUtils.safeAdd(instant, value);",16,2,0,1,2,1,16,2,0,38,42,1,0.00866,0,0,-1
defect4j,time,org/joda/time/Duration,22,176,        super(duration);,0,0,0,1,2,0,0,0,0,3,16,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,177,    },2,0,0,0,1,0,0,0,0,3,1,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,43,    public static final Duration ZERO = new Duration(0L);,0,0,1,1,2,0,4,0,0,9,53,7,0.00847,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,70,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00842,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,239,        super();,4,0,0,1,2,0,0,2,0,6,8,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,240,        type = checkPeriodType(type);,2,1,0,1,2,0,0,0,0,3,29,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,241,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,242,        iType = type;,6,1,0,0,0,0,0,0,0,8,13,1,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,243,"        iValues = chrono.get(this, duration);",8,2,0,1,2,0,0,4,0,14,37,3,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,244,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,61,        super();,0,0,0,1,2,0,6,0,0,6,8,9,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,62,        iMillis = duration;,0,0,0,0,0,0,0,0,0,0,19,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,44,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,64,        int sum = val1 + val2;,4,2,0,0,0,0,0,0,0,6,22,6,0.00839,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,2,0,0,3,7,0,0,0,0,3,45,4,0.00839,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,276,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,277,        int[] values = new int[size];,0,0,0,2,4,0,0,0,0,6,29,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,278,        if (duration != 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,289,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.00826,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,303,        return iType;,4,0,1,0,0,1,6,0,0,15,13,1,0.00815,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,335,        return iValues[index];,0,0,1,1,2,1,0,0,0,9,22,4,0.00805,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00762,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00762,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,102,        PeriodType type = cStandard;,0,0,0,0,0,0,0,0,0,0,28,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,103,        if (type == null) {,4,1,0,1,3,0,0,0,0,5,19,5,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,114,            cStandard = type;,0,0,0,0,0,0,0,0,0,0,17,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,116,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00752,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,286,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,293,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,0,0,0,4,41,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,313,        return iType.size();,0,0,0,1,2,1,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,10,0,0,0,0,1,4,0,0,14,21,3,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,836,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00719,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,835,        if (this == obj) {,4,0,0,1,3,0,0,2,0,6,18,4,0.00676,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,102,            return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00563,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,595,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,596,        iName = name;,8,1,0,0,0,0,0,0,0,10,13,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,597,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,598,        iIndices = indices;,0,0,0,0,0,0,0,0,0,0,19,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,599,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",10,0,0,1,2,3,0,12,0,25,90,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,58,    static int YEAR_INDEX = 0;,0,0,0,0,0,0,0,0,0,0,26,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,59,    static int MONTH_INDEX = 1;,0,0,0,0,0,0,0,0,0,0,27,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,61,    static int DAY_INDEX = 3;,0,0,0,0,0,0,0,0,0,0,25,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,62,    static int HOUR_INDEX = 4;,2,1,1,0,0,0,0,0,0,5,26,7,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,63,    static int MINUTE_INDEX = 5;,2,0,0,0,0,1,0,0,0,3,28,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,64,    static int SECOND_INDEX = 6;,4,0,0,0,0,0,2,0,0,6,28,5,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,65,    static int MILLI_INDEX = 7;,2,0,0,0,0,1,0,0,0,3,27,2,0.00551,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,253,            return ISOChronology.getInstance();,4,1,0,1,2,1,12,0,0,18,35,1,0.00481,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,107,        if ((base = iBase) != null) {,0,0,0,2,5,0,0,0,0,7,29,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,108,            return base.getZone();,0,0,0,1,2,1,0,0,0,4,22,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,86,        return getInstance(DateTimeZone.getDefault());,4,0,0,2,4,1,6,0,0,11,46,3,0.00374,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,255,        return chrono;,14,0,0,0,0,1,10,4,0,31,14,3,0.00312,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,68,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0,0,0,0,0,0,0,0,0,0,41,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,82,        checkPermission();,2,1,0,1,2,0,6,0,0,10,18,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0,0,0,1,2,0,0,0,0,3,55,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,84,    },0,0,0,0,1,0,2,0,0,3,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,133,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,415,            iMillis = fixedMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,416,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,175,        if (sm != null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,178,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,181,        synchronized(DateTimeZone.class) {,2,0,1,1,3,0,0,2,0,6,34,1,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,182,            cDefault = zone;,0,0,0,0,0,0,0,0,0,0,16,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00278,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,108,"                cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,9,0.00278,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",14,1,0,1,2,0,24,4,0,47,36,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",6,1,0,1,2,0,6,0,0,16,38,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",4,0,0,1,2,0,4,0,0,11,56,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,569,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,570,"            map.put(""CST"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,571,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,572,"            map.put(""IET"", ""America/Indianapolis"");",0,0,0,1,2,0,4,0,0,6,39,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,573,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,1,2,0,6,0,0,9,38,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,1,2,0,14,0,0,16,35,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,575,"            map.put(""AGT"", ""America/Buenos_Aires"");",0,0,0,1,2,0,0,0,0,3,39,4,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,576,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,1,2,0,6,0,0,6,36,9,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,577,"            map.put(""WET"", ""Europe/London"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,578,"            map.put(""ECT"", ""Europe/Paris"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");",6,3,0,1,2,0,6,0,0,15,31,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,580,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,581,"            map.put(""EET"", ""Europe/Bucharest"");",0,0,0,1,2,0,0,0,0,3,35,4,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,582,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,584,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,585,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,1,2,0,0,0,0,3,31,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,586,"            map.put(""IST"", ""Asia/Calcutta"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,587,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,588,"            map.put(""VST"", ""Asia/Saigon"");",0,0,0,1,2,0,4,0,0,6,30,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,589,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,590,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,591,"            map.put(""ACT"", ""Australia/Darwin"");",2,1,0,1,2,0,4,0,0,9,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,592,"            map.put(""AET"", ""Australia/Sydney"");",6,0,0,1,2,0,4,0,0,10,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");",4,2,0,1,2,0,4,0,0,13,38,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,594,"            map.put(""NST"", ""Pacific/Auckland"");",2,0,0,1,2,0,10,0,0,14,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,595,            cZoneIdConversion = map;,4,0,0,0,0,0,4,0,0,9,24,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,597,        return map.get(id);,2,0,0,1,2,1,16,0,0,18,19,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,174,        SecurityManager sm = System.getSecurityManager();,0,0,0,1,2,0,0,0,0,3,49,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,178,        if (zone == null) {,2,0,0,1,3,0,0,0,0,3,19,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,182,            cDefault = zone;,0,0,0,0,0,0,0,0,0,0,16,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,147,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,133,        DateTimeZone zone = cDefault;,6,0,0,0,0,0,0,2,0,9,29,3,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,134,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,136,                zone = cDefault;,10,1,0,0,0,0,0,0,0,12,16,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,137,                if (zone == null) {,4,1,1,1,3,0,0,0,0,9,19,3,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,138,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,141,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,143,                                temp = forID(id);,2,0,0,1,2,0,4,0,0,7,17,16,0.00031,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,                break;,0,0,0,0,0,0,0,0,0,0,6,4,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,490,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,508,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",0,0,0,1,2,0,6,0,0,6,22,5,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",0,0,0,1,2,0,0,0,0,3,39,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,    },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,0,0,0,0,7,38,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,570,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,574,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,3.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,            return getWeeksInYear(year - 1);,0,0,0,1,2,1,0,0,0,4,32,4,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,        return parseLocalDateTime(text).toLocalDate();,0,0,0,2,4,1,0,0,0,7,46,4,2.72222,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());",0,0,0,3,6,1,0,0,0,10,56,4,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,2.57895,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,8,0,0,8,78,6,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,399,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,401,    },12,4,0,0,1,0,12,0,0,30,1,1,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,6,0,0,1,2,0,6,0,0,14,46,4,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,0,1,0,1,3,0,8,0,0,9,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,1,2,0,18,0,0,18,44,1,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,                        break;,2,1,1,0,0,0,0,0,0,5,6,8,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0,0,0,2,4,0,0,0,0,6,91,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);",4,0,0,1,2,0,10,0,0,14,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,        if (newPos >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);",0,0,0,1,2,0,12,0,0,12,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true,0,0,0,3,7,0,0,0,0,10,74,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,                    int parsedOffset = bucket.getOffset();,0,0,0,1,2,0,0,0,0,3,38,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0,0,0,1,2,0,0,0,0,3,69,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,                    chrono = chrono.withZone(parsedZone);,2,0,0,1,2,0,6,0,0,9,37,10,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);",4,0,0,1,2,1,0,2,0,6,41,9,1.75,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,                    return chronology.weekOfWeekyear();,0,1,0,1,2,1,14,0,0,16,35,1,1.75,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,1.68966,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,862,            return instant;,8,0,0,0,0,1,10,2,0,22,15,4,1.68966,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,350,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,1.53125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1031,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,1.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,        return iOffset;,2,0,0,0,0,1,0,0,0,2,15,4,1.36111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,1.32432,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {",8,1,0,1,3,1,0,2,0,12,55,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,281,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",4,1,0,2,4,0,8,0,0,14,86,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,284,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,285,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0,0,0,2,4,0,0,0,0,6,63,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,286,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,287,    },0,0,0,0,1,0,0,0,0,1,1,4,1.28947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,                        indexRef[0]++;,2,0,1,1,2,0,0,0,0,5,14,1,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",2,1,0,3,7,0,8,0,0,11,52,3,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,1.25641,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {",18,0,0,1,3,1,6,4,0,31,59,1,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,275,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0,0,0,2,4,0,0,0,0,6,86,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,278,        iLocalMillis = localMillis;,4,0,0,0,0,0,8,0,0,13,27,3,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,279,        iChronology = chronology.withUTC();,0,0,0,1,2,0,4,0,0,4,35,5,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,280,    },2,0,0,0,1,0,4,2,0,8,1,7,1.19512,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,        return false;,0,0,0,0,0,1,4,0,0,5,13,4,1.11364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,632,        int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,633,        if (tokenLen > 0) {,0,0,0,1,3,0,0,0,0,4,19,4,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,635,            switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,1.08889,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,548,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,953,        if (dtx == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,954,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,959,        return dtx;,0,0,0,0,0,1,0,0,0,1,11,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,14,1,0,2,4,1,10,0,0,26,54,3,0.94231,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,557,        return iChronology;,6,1,0,0,0,1,0,0,0,7,19,7,0.92453,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,919,        if (ttx == null) {,6,2,0,1,3,0,0,0,0,8,18,1,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,920,            ttx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,925,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,499,            return iDurationField;,4,1,0,0,0,1,0,0,0,5,22,5,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,503,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,517,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,550,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,567,            return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,883,        if (tx == null) {,8,1,0,1,3,0,0,0,0,10,17,3,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,884,            tx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,889,        return tx;,0,0,0,0,0,1,0,0,0,1,10,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,453,                    int maxDigits = 9;,0,0,0,0,0,0,0,0,0,0,18,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,456,                    if (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,21,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,465,                    switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,477,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1410,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1411,            hms = new DateTimeFormatterBuilder(),4,0,0,1,2,0,6,2,0,13,36,1,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1417,        return hms;,4,0,0,0,0,1,0,2,0,6,11,3,0.875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,348,            return jan1millis - (jan1dayOfWeek - 1),0,0,0,1,2,1,0,0,0,4,39,4,0.80645,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,586,        return iLocalMillis;,2,1,0,0,0,1,0,0,0,3,20,5,0.76563,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,595,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,424,                if (tokenLen == 2) {,2,1,0,1,3,0,0,0,0,3,20,7,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,511,        if (fieldType == null) {,6,3,0,1,3,0,6,0,0,15,24,1,0.7,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));",6,0,0,2,4,1,12,2,0,22,47,1,0.7,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,95,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0,0,0,1,2,0,0,0,0,3,99,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,97,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,98,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,0,0,0,6,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,99,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,52,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,100,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,8,0,0,8,55,5,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,101,        DATE_DURATION_TYPES.add(DurationFieldType.years());,6,3,0,2,4,0,0,0,0,9,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,102,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,4,0,0,2,4,0,10,2,0,16,55,1,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,104,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,0,0,0,6,50,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,474,            return result;,8,1,0,0,0,1,0,2,0,12,14,1,0.68056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.64474,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.64474,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,282,    },0,0,0,0,1,0,0,0,0,1,1,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",2,0,0,1,2,3,0,4,0,9,75,2,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,221,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,464,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,465,            long localInstant = iZone.convertUTCToLocal(instant);,8,0,0,1,2,0,6,0,0,14,53,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);",4,0,0,1,2,2,8,2,0,17,47,1,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,468,            if (get(result) != value) {,10,2,0,2,5,0,0,0,0,13,27,1,0.60494,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1027,        if (newZone == null) {,8,1,0,1,3,0,0,0,0,9,22,1,0.59036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1030,        if (newZone == this) {,0,0,0,1,3,0,0,0,0,4,22,4,0.59036,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,24,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.56977,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,0,0,0,2,38,4,0.56322,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,283,"        return fixedOffsetZone(id, millisOffset);",2,0,0,1,2,1,6,0,0,8,41,1,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,205,                chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0,0,0,1,3,0,0,0,0,4,63,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,209,                    return chrono;,2,0,0,0,0,1,12,0,0,14,14,3,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,384,        return iCutoverInstant;,10,1,0,0,0,1,0,0,0,12,23,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,393,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,307,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,317,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,320,        if (zone == getZone()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,321,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.55682,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1755,            return estimatePrintedLength();,6,0,0,1,2,1,2,0,0,9,31,1,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,293,        if ((base = getBase()) != null) {,2,1,0,3,7,0,0,0,0,3,33,5,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,296,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,194,            cutoverInstant = gregorianCutover.toInstant();,4,1,0,1,2,0,4,0,0,11,46,5,0.54444,0,0,-1
defect4j,time,org/joda/time/Instant,24,131,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.54444,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,24,101,        return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,5,30,3,0.53846,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1687,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1688,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1689,            iShort = isShort;,6,0,0,0,0,0,0,0,0,7,17,1,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1690,        },0,0,0,0,1,0,0,0,0,1,1,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1681,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1693,            return iShort ? 6 : 20;,0,0,0,0,0,1,0,0,0,1,23,4,0.51579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,956,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,0,0,0,4,47,5,0.51042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,973,        int offsetLocal = getOffset(instantLocal);,6,0,0,1,2,0,4,0,0,11,42,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,975,        int offset = getOffset(instantLocal - offsetLocal);,0,0,0,1,2,0,0,0,0,3,51,4,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,977,        if (offsetLocal != offset) {,12,3,1,1,3,0,4,0,0,24,28,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1008,        long instantUTC = instantLocal - offset;,0,0,0,0,0,0,4,0,0,4,40,7,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1010,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1013,        return instantUTC;,6,0,0,0,0,1,0,0,0,6,18,6,0.50515,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,479,                if (tokenLen >= 3) {,12,2,1,1,3,0,4,4,0,27,20,1,0.49495,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,2,0,0,0,0,0,0,0,0,2,49,4,0.47368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.47115,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,613,                    i--;,0,0,0,0,0,0,0,0,0,0,4,4,0.46667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.46667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,632,            buf.append('+');,4,0,0,1,2,0,0,0,0,5,16,9,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,596,            buf.append('\'');,6,3,0,1,2,0,4,0,0,16,17,1,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,630,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,38,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,631,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,638,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,2,1,0,0,0,0,0,0,0,3,55,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,639,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,0,2,0,4,47,7,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,640,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,0,0,0,0,6,58,1,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,642,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,9,59,5,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,643,        buf.append(':');,6,1,0,1,2,0,4,0,0,12,16,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,644,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,645,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,646,        if (offset == 0) {,4,2,0,1,3,0,0,0,0,6,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,647,            return buf.toString();,4,1,0,1,2,1,0,0,0,5,22,7,0.45794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,589,                    i++;,4,0,0,0,0,0,0,0,0,6,4,1,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,593,            },0,0,0,0,1,0,0,0,0,1,1,4,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,586,                char peek = pattern.charAt(i + 1);,4,1,0,1,2,0,4,0,0,9,34,9,0.4188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,587,                if (peek == c) {,10,1,0,1,3,0,0,0,0,11,16,1,0.4188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,2,4,1,0,0,0,7,66,4,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,497,        } else if (week > 51) {,4,1,0,1,4,0,8,0,0,14,23,1,0.3913,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,563,    },4,0,0,0,1,0,6,0,0,12,1,1,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,585,            while (i + 1 < length) {,4,2,0,1,3,0,0,0,0,6,24,6,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,685,"                cPatternedCache.put(pattern, formatter);",4,0,0,1,2,0,8,0,0,12,40,3,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,687,        },0,0,0,0,1,0,0,0,0,1,1,4,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,688,        return formatter;,2,0,0,0,0,1,0,2,0,5,17,6,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,0,0,0,4,42,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,0,0,0,2,28,5,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,405,"            String token = parseToken(pattern, indexRef);",2,1,0,1,2,0,0,0,0,4,45,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,414,            switch (c) {,0,0,0,1,3,0,4,0,0,4,12,9,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,574,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,621,        indexRef[0] = i;,2,0,0,1,2,0,10,0,0,13,16,9,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,622,        return buf.toString();,12,0,0,1,2,1,8,2,0,23,22,1,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,677,        DateTimeFormatter formatter = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,679,            formatter = cPatternedCache.get(pattern);,2,0,0,1,2,0,6,0,0,9,41,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,680,            if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,682,"                parsePatternTo(builder, pattern);",0,0,0,1,2,0,6,0,0,6,33,9,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.34752,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.34752,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,24,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.32237,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,954,            return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.30625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.2963,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,471,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2963,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,495,            if (b == null || !b.isSupported()) {,14,3,0,2,5,0,8,2,0,29,36,1,0.27072,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,498,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.27072,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,83,                digits = 4;,0,0,0,0,0,0,0,0,0,0,11,4,0.26776,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,80,            if (value < 1000) {,2,1,0,1,3,0,0,0,0,3,19,7,0.2663,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.2663,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,87,            for (; size > digits; size--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.2663,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.2663,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,343,        int year = iChronology.getYear(instant);,0,0,0,1,2,0,0,0,0,3,40,4,0.26486,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,344,"        int month = iChronology.getMonthOfYear(instant, year);",4,0,0,1,2,0,12,0,0,17,54,1,0.26486,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,345,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,1,2,1,8,0,0,8,51,5,0.26486,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2504,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.26344,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,24,47,        super();,6,1,0,1,2,0,0,0,0,8,8,1,0.26344,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,24,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.26344,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,371,        long millis = getYearMillis(year);,4,3,0,1,2,0,10,0,0,17,34,1,0.26203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.26203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.26203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,917,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.25521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.25389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,950,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,4,0,0,8,51,3,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,951,        long instantUTC = instantLocal - offsetOriginal;,6,1,0,0,0,0,0,0,0,7,48,5,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,952,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,953,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.25128,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,854,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.24623,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1326,        if (ymd == null) {,2,1,0,1,3,0,4,0,0,7,18,1,0.24623,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1327,            ymd = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.24623,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1333,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.24623,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.23671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,655,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,656,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,659,        return printer;,2,0,0,0,0,1,0,0,0,2,15,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,255,        if (iChrono == chrono) {,4,1,0,1,3,0,0,0,0,5,24,4,0.22072,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,406,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.21778,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,407,            return iField.get(localInstant);,0,0,0,1,2,1,6,0,0,6,32,6,0.21778,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.21681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,363,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.2103,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,24,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",14,0,1,0,1,1,0,2,0,21,61,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,132,"        long instant = year().set(0, year);",4,0,0,2,4,0,12,0,0,17,35,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",6,1,0,2,4,0,14,0,0,22,48,3,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",4,0,0,2,4,0,14,0,0,19,52,3,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,4,0,0,6,53,5,0.20588,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,8,0,0,8,57,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,893,                long nextLocal = nextTransition(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,49,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,894,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0,0,0,1,2,0,0,0,0,3,66,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,895,                if (nextLocal != nextAdjusted) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04167,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,        return iZone.nextTransition(instant);,0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,63,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,                buf.append(':');,0,0,0,1,2,0,8,0,0,11,16,1,0.03409,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03358,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,        return dt;,4,1,0,0,0,1,0,0,0,5,10,3,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,            tt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,        return tt;,0,0,0,0,0,1,0,0,0,1,10,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,        if (t == null) {,0,0,0,1,3,0,4,2,0,6,16,1,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,34,6,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);",2,0,0,1,2,0,16,0,0,20,36,1,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1849,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,        },2,0,0,0,1,0,0,0,0,2,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,            if (displayZone == null) {,2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,8,0,0,15,57,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1450,        if (hmsf == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,        return hmsf;,6,3,0,0,0,1,0,0,0,9,12,1,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1659,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1667,        return fse;,0,0,0,0,0,1,0,0,0,1,11,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1879,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1892,            },0,0,0,0,1,0,8,0,0,8,1,5,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,            return instant % iUnitMillis;,4,1,0,0,0,3,0,4,0,12,29,1,0.0255,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,126,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02528,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,854,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.02446,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1326,        if (ymd == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,        return ymd;,2,0,0,0,0,1,10,0,0,13,11,5,0.02413,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,889,            if ((offsetLocal - offsetAdjusted) < 0) {,4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,                locale = Locale.getDefault();,2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,78,        } else {,2,1,0,0,2,0,4,0,0,7,8,6,0.0232,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1151,            buf.append(iValue);,0,0,0,1,2,0,0,0,0,3,19,4,0.02308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1152,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,            DateTimePrinter[] elements = iPrinters;,10,0,0,1,2,0,0,4,0,14,39,1,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2511,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2515,            if (locale == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,            int len = elements.length;,8,0,0,0,0,0,0,0,0,8,26,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2521,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",6,7,0,2,4,0,4,0,0,18,78,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2524,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1408,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,0,1,2,4,0,0,0,0,6,76,9,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1412,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,        },6,2,0,0,1,0,32,8,0,52,1,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,581,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,        return buf.toString();,24,6,1,1,2,1,28,4,0,69,22,1,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,18,0,0,18,29,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,    },8,1,0,0,1,0,8,0,0,18,1,1,0.02261,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.02233,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,                    return chronology.secondOfDay();,2,1,0,1,2,1,0,0,0,5,32,3,0.02233,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,        chrono = selectChronology(chrono);,8,0,0,1,2,0,10,0,0,19,34,3,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,620,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,        int offset = zone.getOffset(instant);,6,0,1,1,2,0,14,4,0,27,37,1,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,622,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,24,65,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,18,0,0,18,79,5,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,630,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,80,            if (value < 1000) {,6,1,0,1,3,0,0,2,0,9,19,3,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,87,            for (; size > digits; size--) {,8,0,0,1,3,0,2,0,0,11,31,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,90,            buf.append(Integer.toString(value));,2,1,0,2,4,0,0,0,0,3,36,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,        if (lte == null) {,10,1,1,1,3,0,6,0,0,23,18,3,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1622,            lte = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1626,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.02027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2504,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.01863,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1671,        if (ze == null) {,2,0,0,1,3,0,0,2,0,4,17,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1672,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1676,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2072,                est += iMinFields - 1;,0,0,0,0,0,0,0,0,0,0,22,4,0.01804,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,67,        } else if (value < 100) {,4,2,0,1,4,0,0,0,0,6,25,4,0.01772,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,655,        DateTimePrinter printer = iPrinter;,2,2,0,0,0,0,4,0,0,9,35,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,656,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,659,        return printer;,8,1,0,0,0,1,0,2,0,12,15,3,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2070,            int est = 1 + iMinFields << 1;,6,2,0,0,0,0,8,2,0,18,30,1,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2071,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2074,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0,0,0,2,5,0,0,0,0,7,74,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2077,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2207,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.01721,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01718,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.01718,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,532,        if (fieldType == null) {,2,0,0,1,3,3,0,0,0,5,24,1,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,535,        if (maxDigits < minDigits) {,2,0,0,1,3,0,0,0,0,3,28,5,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,538,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0,0,0,2,4,1,0,0,0,7,62,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,77,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1828,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1829,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1831,            if (maxDigits > 18) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1834,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1835,            iMaxDigits = maxDigits;,0,0,0,0,0,0,0,0,0,0,23,4,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1836,        },0,0,0,0,1,0,8,2,0,10,1,7,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1839,            return iMaxDigits;,4,0,0,0,0,1,0,0,0,5,18,10,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1997,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,4,0.01685,0,0,-1
defect4j,time,org/joda/time/DateTime,25,443,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01681,0,0,-1
defect4j,time,org/joda/time/DateTime,25,441,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.01667,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,167,        Chronology chrono = instant.getChronology();,6,0,0,1,2,0,0,0,0,6,44,6,0.01664,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,168,        if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01664,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.01664,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1024,        return append0(new TimeZoneOffset,0,0,0,0,1,1,4,4,0,8,33,4,0.01651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2054,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2055,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2056,            iZeroOffsetParseText = zeroOffsetParseText;,4,1,0,0,0,0,6,0,0,12,43,1,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2057,            iShowSeparators = showSeparators;,0,0,0,0,0,0,0,0,0,0,33,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2058,            if (minFields <= 0 || maxFields < minFields) {,8,2,0,1,3,3,0,12,0,25,46,1,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2061,            if (minFields > 4) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2065,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2066,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2067,        },4,0,0,0,1,1,16,0,0,21,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,164,        if (instant == null) {,6,1,0,1,3,0,0,0,0,7,22,5,0.01587,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1649,        if (sme == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.01579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1650,            sme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.01579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1655,        return sme;,0,0,0,0,0,1,0,0,0,1,11,4,0.01579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1639,        if (mhe == null) {,6,4,0,1,3,0,0,0,0,10,18,4,0.01571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1640,            mhe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.01571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1645,        return mhe;,0,0,0,0,0,1,0,0,0,1,11,4,0.01571,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,188,                if (isLeapYear(year)) {,10,0,0,2,5,0,8,0,0,19,23,3,0.01568,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1630,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01565,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1631,            hde = new DateTimeFormatterBuilder(),8,2,0,1,2,0,0,0,0,11,36,6,0.01565,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1635,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.01565,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.01552,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.01503,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0148,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01459,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,62,        if (value < 10) {,6,1,0,1,3,0,8,2,0,19,17,3,0.01459,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,92,    },8,0,0,0,1,0,4,0,0,13,1,4,0.01459,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1572,        if (dme == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01404,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1573,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.01404,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1578,        return dme;,0,0,0,0,0,1,0,0,0,1,11,4,0.01404,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1562,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01393,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1563,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.01393,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1568,        return mye;,4,0,0,0,0,1,0,0,0,4,11,4,0.01393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.01391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",2,0,0,2,4,1,14,4,0,20,66,3,0.0136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,505,                    return chronology.secondOfMinute();,0,0,0,1,2,1,4,0,0,4,35,6,0.01357,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1553,        if (ye == null) {,2,0,0,1,3,0,0,0,0,2,17,4,0.01353,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1554,            ye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.01353,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1558,        return ye;,0,0,0,0,0,1,10,0,0,10,10,5,0.01353,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,915,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01325,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,916,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01325,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,919,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.01325,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,922,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.01325,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.01322,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.0128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,479,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.01273,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,900,        return offsetAdjusted;,4,1,0,0,0,1,0,0,0,5,22,3,0.01261,1,1,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.01252,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,881,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.01248,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,883,        final long instantAdjusted = instantLocal - offsetLocal;,0,0,0,0,0,0,0,0,0,0,56,4,0.01248,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,884,        final int offsetAdjusted = getOffset(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,54,4,0.01248,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,886,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.01248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,75,5,0.01241,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,501,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.01224,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.01213,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,448,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,454,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,457,        if (minDigits <= 1) {,0,0,0,1,3,0,4,0,0,4,21,5,0.0121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,8,0,0,8,72,5,0.0121,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,477,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2614,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0,0,0,3,6,0,0,0,0,9,60,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);",6,0,0,3,6,0,12,2,0,21,58,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2632,            if (array != null) {,2,0,0,1,3,0,0,2,0,4,20,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2633,                for (int i=0; i<array.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2634,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2637,        },2,0,0,0,1,0,0,0,0,2,1,4,0.01189,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,473,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.01189,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,497,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.01181,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,551,            } else if (iMode == 's') {,2,1,0,1,4,0,0,0,0,4,26,6,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,0,4,0,7,46,4,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,725,                    if (daysToAdd > 0) {,6,1,0,1,3,0,0,2,0,9,20,1,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,726,                        daysToAdd -= 7;,0,0,0,0,0,0,0,0,0,0,15,4,0.0117,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,209,        if (formatter == null) {,4,0,0,1,3,0,6,2,0,13,24,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,0,0,0,10,62,4,0.01163,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0,-1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0,-1
defect4j,time,org/joda/time/DateTime,26,518,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,519,        if (getChronology() == chronology) {,0,0,0,2,5,0,0,0,0,7,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,522,        return super.toDateTime(chronology);,0,0,0,1,2,1,0,0,0,4,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,5,10,1,0,0,0,16,75,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.52083,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,        iChronology = chrono;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,26,843,        return getOffset(instant) == getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.48039,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);",0,0,0,2,4,1,0,0,0,7,45,4,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,51,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,                return iStandardOffset;,0,0,0,0,0,1,0,0,0,1,23,4,0.36364,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,        return ISOChronology.getInstance(zone);,0,0,0,1,2,1,0,0,0,4,39,4,0.35211,0,0,-1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0,0,0,4,8,1,0,0,0,13,84,4,0.34783,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,59,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0,0,0,2,4,0,0,0,0,6,55,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,                long nn = n / 10;,0,0,0,0,0,0,0,0,0,0,17,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,                n = nn;,0,0,0,0,0,0,0,0,0,0,7,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,            value /= 10;,0,0,0,0,0,0,0,0,0,0,12,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,            DateTimeField parseField = new PreciseDateTimeField(,2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2034,"            bucket.saveField(parseField, (int) value);",0,0,0,2,4,0,0,0,0,6,42,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,            return position + length;,4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,        return iChrono;,2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,224,"        saveField(new SavedField(field, value));",0,0,0,2,4,0,0,0,0,6,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,    },2,0,0,0,1,0,4,0,0,7,1,7,0.34722,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,63,        String str = (String) object;,0,0,0,1,2,0,0,0,0,3,29,4,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,6,1,0,1,2,0,14,2,0,23,57,1,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,65,        return p.withChronology(chrono).parseMillis(str);,0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,                    expectSeparators = true;,2,0,0,0,0,0,4,0,0,8,24,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,                    limit--;,4,0,0,0,0,0,4,0,0,9,8,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,                    position++;,6,1,0,0,0,0,0,0,0,9,11,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,            limit--;,2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,            position++;,4,0,0,0,0,0,6,0,0,12,11,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2263,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,            if (hours > 23) {,6,2,0,1,3,0,0,0,0,9,17,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,4,2,0,11,51,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2275,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,            position += 2;,2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2287,                c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,26,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,                if (c == ':') {,4,1,0,1,3,0,6,2,0,14,15,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2300,"                int count = digitCount(text, position, 2);",0,0,0,1,2,0,0,0,0,3,42,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,                if (count == 0 && !expectSeparators) {,4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2303,                } else if (count < 2) {,0,0,0,1,4,0,0,0,0,5,23,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,6,0,0,9,57,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2309,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2312,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,                limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2314,                position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2318,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2377,            bucket.setOffset(negative ? -offset : offset);,0,0,0,1,2,0,0,0,0,3,46,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,            return position;,6,2,0,0,0,1,2,0,0,10,16,8,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);",12,3,0,2,4,0,20,0,0,38,55,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2387,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2388,            for (; limit > 0; limit--) {,0,0,0,1,3,0,0,0,0,4,28,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2389,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,                if (c < '0' || c > '9') {,0,0,0,1,3,0,6,0,0,6,25,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,                amount++;,2,0,0,0,0,0,0,0,0,2,9,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2395,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,352,        int value = text.charAt(position) - '0';,2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,8,7,0,4,8,1,4,0,0,21,71,3,0.30864,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,424,        return ISODateTimeFormat.dateTime().print(this);,14,2,0,2,4,1,12,2,0,31,48,3,0.30622,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2239,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.2907,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.2907,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,        if (dtp == null) {,8,3,0,1,3,0,4,0,0,15,18,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,            DateTimeParser time = new DateTimeFormatterBuilder(),6,1,0,1,2,0,10,0,0,18,52,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,            dtp = new DateTimeFormatterBuilder(),10,1,0,1,2,0,0,4,0,16,36,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,778,        return dtp;,0,0,0,0,0,1,0,0,0,1,11,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2116,            if (displayOffset == 0 && iMinFields <= 2) {,0,0,0,1,3,0,0,0,0,4,44,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,                return;,8,0,0,0,0,1,4,0,0,12,7,1,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2109,                buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.24903,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,1,0,0,0,0,4,0,8,62,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,64,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2103,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,66,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2108,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2112,            if (iMaxFields == 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,                negative = false;,8,1,0,0,0,0,0,0,0,10,17,6,0.22857,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,                            bestInvalidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,            SavedField[] newArray = new SavedField,2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,256,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0,0,0,1,2,0,0,0,0,3,64,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,257,            iSavedFields = savedFields = newArray;,0,0,0,0,0,0,0,0,0,0,38,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,258,            iSavedFieldsShared = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,        if (dotp == null) {,0,0,0,1,3,0,8,0,0,8,19,9,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),8,3,0,1,2,0,0,0,0,11,60,6,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,805,            dotp = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,810,        return dotp;,0,0,0,0,0,1,0,0,0,1,12,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,936,        if (dt == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,942,        return dt;,0,0,0,0,0,1,0,0,0,1,10,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2721,            return ~bestInvalidPos;,0,0,0,0,0,1,0,0,0,1,23,4,0.21368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2242,            } else if (c == '+') {,0,1,1,1,4,0,0,0,0,10,22,6,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,181,        iSavedState = null;,4,0,0,0,0,0,0,0,0,5,19,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,182,        iOffset = offset;,4,1,0,0,0,0,0,0,0,5,17,5,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,183,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,437,                enclosing.iSavedFieldsShared = true;,0,0,0,0,0,0,0,0,0,0,36,4,0.21008,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,901,        if (tt == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,902,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,907,        return tt;,6,0,0,0,0,1,0,0,0,7,10,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2715,                if (bestValidState != null) {,2,1,0,1,3,0,0,0,0,3,29,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2716,                    bucket.restoreState(bestValidState);,0,0,0,1,2,0,6,0,0,6,36,10,0.20661,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2718,                return bestValidPos;,2,0,0,0,0,1,0,0,0,2,20,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,866,        if (t == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.20447,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,867,            t = new DateTimeFormatterBuilder(),4,1,0,1,2,0,4,0,0,10,34,6,0.20447,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,872,        return t;,0,0,0,0,0,1,0,0,0,1,9,4,0.20447,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1846,"                printTo(buf, null, instant, chrono);",6,0,0,1,2,0,0,0,0,7,36,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1849,            },0,0,0,0,1,0,0,0,0,1,1,4,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1850,        },2,1,0,0,1,0,4,0,0,7,1,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2083,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.20126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.20126,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1450,        if (hmsf == null) {,10,3,0,1,3,0,0,0,0,14,19,1,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1451,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1458,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1659,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1660,            fse = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1667,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1236,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",8,0,0,3,7,0,4,0,0,13,69,4,0.19841,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2234,            if (limit <= 1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.19531,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1879,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1880,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1884,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1892,            },8,2,0,0,1,0,0,0,0,10,1,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1894,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2699,                        bestValidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,24,11,0.1938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2700,                        bestValidState = bucket.saveState();,0,0,0,1,2,0,0,0,0,3,36,4,0.1938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1932,                while (minDigits < digits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1933,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0,0,0,2,5,0,0,0,0,7,51,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1936,                    digits--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1937,                    length--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1939,                if (length < str.length()) {,2,1,0,2,5,0,4,0,0,7,28,7,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1940,                    if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1941,                        for (int i=0; i<length; i++) {,4,0,0,1,3,0,0,0,0,4,30,6,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1942,                            buf.append(str.charAt(i));,0,0,0,2,4,0,10,0,0,10,26,14,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1949,                    return;,0,0,0,0,0,1,0,0,0,1,7,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1975,                case 9:  scalar = 1000000000L; break;,0,0,0,0,0,0,0,0,0,0,37,4,0.19231,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,163,            return converter;,0,0,0,0,0,1,0,0,0,1,17,4,0.19084,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,26,127,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.18497,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1908,"            long[] fractionData = getFractionData(fraction, field);",2,0,0,2,4,0,6,0,0,8,55,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1909,            long scaled = fractionData[0];,2,0,1,1,2,0,0,0,0,4,30,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1910,            int maxDigits = (int) fractionData[1];,0,0,0,2,4,0,0,0,0,6,38,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1912,            if ((scaled & 0x7fffffff) == scaled) {,2,0,0,2,5,0,8,0,0,11,38,7,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1913,                str = Integer.toString((int) scaled);,0,0,0,2,4,0,10,0,0,10,37,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1918,            int length = str.length();,10,1,0,1,2,0,4,0,0,15,26,1,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1919,            int digits = maxDigits;,2,0,1,0,0,0,0,4,0,8,23,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1920,            while (length < digits) {,0,0,0,1,3,0,0,0,0,4,25,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1930,            if (minDigits < digits) {,4,1,0,1,3,0,0,0,0,5,25,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1961,            long rangeMillis = field.getDurationField().getUnitMillis();,0,0,0,2,4,0,0,0,0,6,60,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1963,            int maxDigits = iMaxDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1965,                switch (maxDigits) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1986,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,4,0,0,3,7,0,4,2,0,10,55,12,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1987,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1993,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0,0,0,2,4,1,0,0,0,7,63,4,0.18382,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,26,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18338,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,475,                    return chronology.dayOfYear();,0,0,0,1,2,1,8,0,0,9,30,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2215,                if (iZeroOffsetParseText.length() == 0) {,4,1,0,2,5,0,4,0,0,10,41,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2226,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",2,0,0,3,7,0,4,2,0,8,97,7,0.18248,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,854,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.17729,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,162,        if (converter != null) {,10,2,0,1,3,0,0,2,0,16,24,3,0.17606,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1326,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.17486,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.17486,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1333,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.17486,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,160,        InstantConverter converter =,2,0,0,0,0,0,0,2,0,4,28,4,0.17483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2091,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.17308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2517,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.17204,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,75,            buf.append((char) (d + '0'));,2,1,1,3,6,0,8,0,0,16,29,1,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,12,4,0,5,10,0,4,0,0,22,55,4,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,78,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.16798,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,483,                    return chronology.weekyear();,0,0,0,1,2,1,4,0,0,4,29,7,0.16779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1151,            buf.append(iValue);,8,0,0,1,2,0,8,4,0,22,19,1,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1152,        },2,0,0,0,1,0,0,0,0,2,1,4,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,736,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2510,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2511,            if (elements == null) {,16,2,1,1,3,0,2,2,0,27,23,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2515,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2520,            int len = elements.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2521,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,0,0,0,6,78,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2524,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1408,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,76,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1412,            },0,0,0,0,1,0,0,0,0,1,1,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1413,        },2,0,0,0,1,2,0,6,0,10,1,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,10,1,0,3,6,0,4,4,0,20,78,3,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,581,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,582,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,457,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,16,4,0,27,54,3,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,8,0,0,8,29,5,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,460,    },2,0,0,0,1,0,4,2,0,8,1,5,0.16368,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.16203,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,503,                    return chronology.secondOfDay();,0,0,0,1,2,1,4,0,0,4,32,7,0.16162,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,82,            } else if (value < 10000) {,2,1,0,1,4,0,0,0,0,3,27,8,0.16162,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,617,        chrono = selectChronology(chrono);,8,1,0,1,2,0,0,0,0,10,34,5,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,620,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,621,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,622,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,0,0,3,7,0,4,0,0,13,65,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,28,0,0,28,79,3,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,630,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2713,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,10,4,0,2,5,0,0,0,0,14,74,5,0.16026,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,80,            if (value < 1000) {,6,1,0,1,3,0,4,0,0,12,19,1,0.1596,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,87,            for (; size > digits; size--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.1596,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.1596,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2697,                            return parsePos;,0,0,0,0,0,1,0,0,0,1,16,4,0.15823,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2211,            int limit = text.length() - position;,6,1,0,1,2,0,4,0,0,11,37,1,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2214,            if (iZeroOffsetParseText != null) {,2,1,0,1,3,0,0,0,0,3,35,6,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1181,                a = Character.toUpperCase(a);,2,0,0,1,2,0,6,0,0,9,29,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1182,                b = Character.toUpperCase(b);,0,0,0,1,2,0,4,0,0,4,29,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1183,                if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1184,                    a = Character.toLowerCase(a);,0,0,0,1,2,0,0,0,0,3,29,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1185,                    b = Character.toLowerCase(b);,2,0,0,1,2,0,6,0,0,9,29,9,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1186,                    if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1187,                        return ~position;,0,0,0,0,0,1,0,0,0,1,17,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2691,                    if (parsePos > bestValidPos) {,4,1,0,1,3,0,0,0,0,5,30,9,0.14881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2692,                        if (parsePos >= text.length() ||,2,0,0,1,3,0,0,0,0,2,32,4,0.14881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2683,                    if (bestValidPos <= position) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14706,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1621,        if (lte == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.14645,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1622,            lte = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14645,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1626,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.14645,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0,0,0,0,0,0,0,0,0,0,13,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02439,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0,0,0,1,2,1,0,0,0,4,24,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,                return period;,0,0,0,0,0,1,0,0,0,1,14,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,2,5,0,0,0,0,7,62,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,3,7,0,0,0,0,10,72,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,                return position + iText.length();,0,0,0,1,2,1,0,0,0,4,33,4,0.02174,0,0,-1
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.02128,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,6,1,0,1,3,0,0,0,0,8,18,4,0.02128,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,4,0,0,1,2,0,0,4,0,8,48,4,0.02,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,71,        return period.getPeriodType();,0,0,0,1,2,1,4,0,0,4,30,5,0.02,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,173,    },2,0,0,0,1,0,0,2,0,4,1,5,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,418,        iValues = newValues;,0,0,0,0,0,0,0,0,0,0,20,4,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,419,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,404,            setPeriodInternal(period);,0,0,0,1,2,0,0,0,0,3,26,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,412,        int[] newValues = new int[size()];,0,0,0,3,6,0,0,0,0,9,34,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,56,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,414,            DurationFieldType type = period.getFieldType(i);,0,0,0,1,2,0,0,0,0,3,48,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,415,            int value = period.getValue(i);,0,0,0,1,2,0,0,0,0,3,31,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);",0,0,0,1,2,0,0,0,0,3,39,4,0.01818,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,58,        duration.setPeriod((ReadablePeriod) object);,0,0,0,2,4,0,0,0,0,6,44,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,4,1,0,0,0,0,0,0,0,7,17,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,466,    },0,0,0,0,1,0,6,0,0,6,1,5,0.01786,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,399,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,6,0,0,0,0,0,4,0,0,11,22,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);",0,0,0,1,2,0,0,0,0,3,72,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1712,                String[] parsedForms = iParsedForms;,0,0,0,1,2,0,0,0,0,3,36,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,2,0,0,1,3,0,0,0,0,2,32,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1715,                    String parsedForm = parsedForms[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",4,1,0,1,2,0,12,0,0,18,71,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1730,            if (position < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1212,"                suffixPos = iSuffix.scan(text, position);",0,0,0,1,2,0,0,0,0,3,41,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1213,                if (suffixPos >= 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1246,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1248,                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {,0,0,0,2,5,0,0,0,0,7,68,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,6,3,0,1,3,0,4,0,0,16,27,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1270,                    hasDigits = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1285,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1286,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1292,            if (suffixPos >= 0 && position + length != suffixPos) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1300,            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {,0,0,0,1,3,0,0,0,0,4,76,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1333,            position += length;,0,0,0,0,0,0,0,0,0,0,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1335,            if (position >= 0 && iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1339,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1349,            if (length >= 10) {,0,0,0,1,3,0,10,0,0,10,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1498,            switch (field) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1526,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,252,"            iValues = new MutablePeriod(period, type, chrono).getValues();",0,0,0,2,4,0,4,0,0,4,62,6,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,484,            values[index] = value;,4,3,0,1,2,0,0,0,0,7,22,8,0.01754,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,398,"        super(period, type, chrono);",0,0,0,1,2,0,0,0,0,3,28,4,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,406,    },10,0,0,0,1,0,18,2,0,32,1,3,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,441,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",16,3,0,3,7,0,22,6,0,50,69,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,10,1,0,1,3,0,0,0,0,11,20,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1243,            int fractPos = -1;,0,0,0,0,0,0,0,0,0,0,18,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,8,0,0,0,0,0,0,0,0,9,26,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,14,2,0,1,3,0,2,0,0,18,24,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,401,        if (period == null) {,14,1,0,1,3,0,6,4,0,25,21,1,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,478,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,57,                return e.iConverter;,0,0,0,0,0,1,0,0,0,1,20,4,0.01695,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,440,        super.setPeriod(period);,24,4,0,1,2,0,42,0,0,73,24,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,338,    },8,0,0,0,1,3,0,12,0,23,1,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1822,            PeriodParser[] parsers = iParsers;,4,0,0,1,2,0,0,2,0,6,34,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1823,            if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1827,            int len = parsers.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1828,            for (int i=0; i<len && position >= 0; i++) {,0,0,0,1,3,0,0,0,0,4,44,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1829,"                position = parsers[i].parseInto(period, periodStr, position, locale);",4,1,1,2,4,0,18,0,0,28,69,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1831,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1184,            boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);,0,0,0,1,2,0,0,0,0,3,61,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1187,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1191,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1208,            int suffixPos = -1;,16,1,1,0,0,4,6,2,0,33,19,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1209,            if (iSuffix != null && !mustParse) {,10,2,0,1,3,1,0,0,0,14,36,2,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,335,        if (iParser == null) {,4,2,0,1,3,0,4,0,0,11,22,4,0.01667,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,88,        return ReadableDuration.class;,0,0,0,0,0,1,4,2,0,6,30,1,0.01639,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,81,        return ReadablePeriod.class;,0,0,0,0,0,1,0,0,0,1,28,4,0.01639,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,254,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01471,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,242,        super();,0,0,0,1,2,0,8,0,0,8,8,5,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,243,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,2,0,0,2,4,0,12,0,0,14,86,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,244,        type = (type == null ? converter.getPeriodType(period) : type);,6,1,0,2,4,0,6,0,0,14,63,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,245,        type = checkPeriodType(type);,0,0,0,1,2,0,0,0,0,3,29,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,246,        iType = type;,8,0,0,0,0,0,0,4,0,13,13,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,247,        if (this instanceof ReadWritablePeriod) {,6,0,0,1,3,0,0,4,0,11,41,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,248,            iValues = new int[size()];,4,0,0,2,4,0,2,0,0,7,26,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,249,            chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,250,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",6,0,0,2,4,0,0,4,0,12,61,1,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,421,        PeriodConverter converter =,2,0,0,0,0,0,0,2,0,4,27,4,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,423,        if (converter != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,424,            return converter;,12,0,0,0,0,1,4,2,0,19,17,5,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,113,        return ReadableInterval.class;,0,0,0,0,0,1,0,0,0,1,30,4,0.01333,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,266,        if (type == null || length == 0) {,8,3,0,1,3,0,0,0,0,11,34,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,269,        if (length == 1) {,10,2,0,1,3,0,0,0,0,13,18,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,271,            return converters[0];,0,0,1,1,2,1,0,0,0,2,21,7,0.01266,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,72,        int[] result = new int[size()];,0,0,0,3,6,0,0,0,0,9,31,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,73,        for (int i = 0; i < result.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,74,            result[i] = getValue(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,76,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0119,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,251,        PeriodType type = cYDTime;,8,1,0,0,0,0,0,0,0,10,26,5,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,252,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,3,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,253,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,262,            cYDTime = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,264,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.01176,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,216,        Converter[] converters = iConverters;,0,0,0,1,2,0,0,0,0,3,37,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,217,        int length = converters.length;,0,0,0,0,0,0,0,0,0,0,31,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,218,        if (index >= length) {,4,1,0,1,3,0,0,0,0,5,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,222,        if (removed != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,226,        Converter[] copy = new Converter[length - 1];,4,1,0,2,4,0,0,4,0,9,45,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,228,        int j = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,229,        for (int i=0; i<length; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,230,            if (i != index) {,8,0,0,1,3,0,4,0,0,13,17,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,231,                copy[j++] = converters[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,235,        return new ConverterSet(copy);,0,0,0,1,2,1,0,0,0,4,30,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,256,            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {,2,1,0,3,7,0,0,0,0,3,87,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,258,"                set = set.remove(i, null);",0,0,0,1,2,0,10,0,0,10,26,5,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,259,                converters = set.iConverters;,6,0,0,0,0,0,0,0,0,7,29,8,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,260,                length = converters.length;,8,0,0,0,0,0,4,0,0,13,27,3,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,241,        return String.class;,2,0,1,0,0,1,0,2,0,9,20,3,0.01042,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,1,8,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,36,    static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();,4,1,0,1,2,2,0,4,0,11,82,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,105,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,107,        iInstantConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,55,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,116,        iPartialConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,55,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,126,        iDurationConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,56,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,134,        iPeriodConverters = new ConverterSet(new Converter[] {,2,0,0,1,4,0,0,4,0,7,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,142,        iIntervalConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,56,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,147,    },2,0,0,0,1,0,6,0,0,9,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,89,        if (INSTANCE == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,90,            INSTANCE = new ConverterManager();,0,0,0,1,2,0,0,0,0,3,34,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,92,        return INSTANCE;,0,0,0,0,0,1,0,0,0,1,16,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,32,    ConverterSet(Converter[] converters) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,35,        iConverters = converters;,16,3,0,0,0,0,4,2,0,28,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,36,        iSelectEntries = new Entry[1 << 4]; // 16,2,1,0,1,2,0,0,2,0,6,41,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,49,        Entry[] entries = iSelectEntries;,2,0,0,1,2,0,0,0,0,2,33,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,50,        int length = entries.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,51,        int index = type == null ? 0 : type.hashCode() & (length - 1);,0,0,0,2,4,0,0,0,0,6,62,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,55,        while ((e = entries[index]) != null) {,0,0,0,3,7,0,0,0,0,10,38,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,66,"        Converter converter = selectSlow(this, type);",4,0,0,1,2,0,10,2,0,16,45,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,67,"        e = new Entry(type, converter);",6,0,0,1,2,0,0,2,0,9,31,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,79,        entries = (Entry[])entries.clone();,0,0,0,3,6,0,0,0,0,9,35,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,82,        entries[index] = e;,0,0,0,1,2,0,0,0,0,3,19,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,85,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,86,            if (entries[i] == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,88,                iSelectEntries = entries;,10,0,0,0,0,0,0,2,0,14,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,89,                return converter;,2,0,0,0,0,1,8,0,0,10,17,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,243,        Converter[] converters = set.iConverters;,0,0,0,1,2,0,0,0,0,3,41,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,244,        int length = converters.length;,12,3,0,0,0,0,0,2,0,20,31,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,247,        for (int i=length; --i>=0; ) {,2,0,0,1,3,0,4,2,0,8,30,8,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,248,            converter = converters[i];,2,0,1,1,2,0,0,0,0,7,26,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,249,            Class<?> supportedType = converter.getSupportedType();,2,0,0,1,2,0,0,0,0,2,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,251,            if (supportedType == type) {,4,1,0,1,3,0,0,0,0,5,28,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,322,"        Entry(Class<?> type, Converter converter) {",6,0,0,1,3,0,0,4,0,10,43,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,323,            iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,324,            iConverter = converter;,0,0,0,0,0,0,0,0,0,0,23,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,325,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,36,    static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();,0,0,0,1,2,0,0,0,0,3,82,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,45,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,46,    },0,1,0,0,1,0,4,0,0,5,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,39,    static final NullConverter INSTANCE = new NullConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,95,        return null;,2,0,0,0,0,1,8,0,0,11,12,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,43,    static final CalendarConverter INSTANCE = new CalendarConverter();,2,0,0,1,2,2,0,4,0,8,66,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,41,        super();,2,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,42,    },4,0,0,0,1,0,0,0,0,5,1,5,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,35,    static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,41,        super();,8,0,0,1,2,0,4,4,0,17,8,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,35,    static final DateConverter INSTANCE = new DateConverter();,4,1,0,1,2,2,0,4,0,11,58,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,36,    static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,40,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,41,    },12,0,0,0,1,0,4,8,0,24,1,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,34,    static final LongConverter INSTANCE = new LongConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
