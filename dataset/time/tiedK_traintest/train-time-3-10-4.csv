dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,1,2,0,0,4,34,5,0.16667,1,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.16667,1,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.16667,0,0
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,2,0,0,4,25,7,0.11111,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,5,0.1,0,0
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,2,0,1,2,5,79,15,1.0,0,0
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,1,2,0,0,5,46,13,0.2,0,0
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,1,10,0,6,0,3,4,59,4,2.77778,1,1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,2,2.77778,1,1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.92593,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,2,0,0,1,2,2,2,0,0,5,52,6,0.45455,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,3,1,0,0,0,1,0,0,0,3,29,6,0.45455,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.45455,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.45455,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,0,1,0,1,4,1,2,0,1,6,47,4,0.5,0,0
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,82,15,0.2,0,0
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,1,3,0,0,5,47,15,0.2,0,0
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,3.0,0,0
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,1,0,0,1,2,0,3,0,1,5,33,8,1.125,1,0
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,1.0,0,0
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",2,0,0,1,4,1,4,0,1,6,76,5,1.0,0,0
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,2,1,0,0,0,0,0,0,1,3,21,6,1.0,1,0
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,1,1,0,1,3,1,0,0,0,5,17,6,1.0,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",1,0,0,0,2,0,4,0,1,4,46,7,4.0,1,1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,4.0,1,1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,4.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,4.0,1,1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,45,6,1.6,0,0
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,32,6,1.6,0,0
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0,0,0,1,6,1,7,0,0,4,78,6,1.33333,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,1.33333,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.17391,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,2,1,0,1,4,1,4,0,0,6,78,5,0.17391,1,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,1,0,0,1,4,1,4,0,0,5,50,5,0.17391,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,1,0,0,0,1,1,0,2,1,5,55,4,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",1,0,0,0,2,1,5,0,0,4,54,5,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,0,4,0,5,0,1,3,53,5,0.17391,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,1,4,0,4,0,1,4,50,8,0.15385,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,0,2,1,3,0,1,4,40,8,0.15385,1,0
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.10811,0,0
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,1.0,0,0
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,1.0,0,0
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.08333,1,1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.08333,1,0
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.05263,0,0
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.05263,0,0
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,1,0
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",2,0,0,0,2,1,0,0,0,3,36,4,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",3,0,0,0,6,3,0,0,1,4,55,3,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,1,0,0,0,5,4,0,2,3,5,80,2,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),1,0,0,1,2,4,0,2,4,6,78,2,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,1,0,0,1,3,1,0,0,0,4,16,4,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,2,0,0,4,28,6,2.0,0,0
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,0,2,1,0,0,0,3,26,5,2.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,5,2.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,9,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",1,0,0,1,2,4,0,6,4,6,112,2,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,1,0,0,0,4,4,0,2,3,5,81,2,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,2,0,1,5,42,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,1,0,0,0,4,3,0,0,0,3,28,5,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,1,0,1,0,2,0,0,0,1,4,16,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",1,0,0,0,2,0,3,1,1,5,45,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,1,0,0,1,2,1,2,0,0,5,30,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,1,0,0,1,3,1,0,0,0,4,12,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,1,1,0,1,3,1,0,0,0,5,20,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,3,0,0,3,36,10,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,3,0,0,3,35,8,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,1,0,0,1,2,0,2,1,0,5,32,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,4,0,0,3,37,10,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,1,0,0,2,4,1,2,1,1,7,39,10,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,40,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,1,0,1,0,2,1,0,0,0,4,20,5,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,1,0,0,1,2,1,3,0,0,5,27,5,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,4,7,0,1,3,1,0,0,4,6,51,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,2,2,0,1,3,1,0,0,0,5,24,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,2,1,0,1,2,1,2,0,0,6,34,9,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,2,1,0,1,3,1,0,0,0,5,16,8,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,11,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,1,0,0,0,0,0,0,0,1,2,4,10,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,1,0,0,0,0,1,0,0,1,3,26,7,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,3,1,0,1,3,1,0,0,1,6,25,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,1,1,0,1,3,1,0,0,1,6,16,8,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,                } else if (!inLiteral &&,1,1,0,0,2,2,0,0,1,5,24,9,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,1,0,0,0,0,0,0,0,1,2,4,11,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,                    buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,12,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,1,0,1,0,2,0,0,0,1,4,16,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,1,3,0,2,5,1,2,0,0,6,47,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,        DateTimeFormatter formatter = null;,1,0,0,0,0,0,0,1,0,2,35,4,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,            formatter = cPatternedCache.get(pattern);,1,0,0,1,2,0,3,0,1,5,41,6,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,1,0,0,1,2,1,0,2,1,6,66,8,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",0,0,0,0,2,0,3,0,1,3,33,8,2.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,1,0,0,1,2,0,2,0,1,5,34,8,2.0,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,0,2,0,4,0,0,2,40,9,2.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,1,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,45,7,1.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,            ldp = dateElementParser().withZoneUTC();,1,0,0,1,4,0,2,0,2,5,40,6,1.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,        return withZone(DateTimeZone.UTC);,2,0,0,1,2,1,1,0,1,6,34,4,0.66667,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,        if (iZone == zone) {,2,1,0,1,3,1,0,0,0,5,20,4,0.66667,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.66667,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,1.0,1,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,1.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1458,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1480,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,595,        super();,0,0,0,1,2,1,0,0,1,4,8,3,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,596,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,58,    static int YEAR_INDEX = 0;,1,0,0,0,0,2,0,0,1,3,26,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,102,        PeriodType type = cStandard;,2,0,0,0,0,0,0,1,0,2,28,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,104,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,114,            cStandard = type;,2,0,0,0,0,0,0,0,1,2,17,6,1.0,0,0
defect4j,time,org/joda/time/DurationFieldType,11,282,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,1.0,0,0
defect4j,time,org/joda/time/DurationFieldType,11,284,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,1,0,0,1,3,4,0,2,4,6,73,2,1.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,56,        return getPeriodType().size();,0,0,0,1,4,1,2,0,1,5,30,5,1.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,68,        return getPeriodType().getFieldType(index);,0,0,0,1,4,1,3,0,1,5,43,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,108,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,110,"        iValues = chrono.get(this, startInstant, endInstant);",1,0,0,0,2,1,4,0,1,5,53,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);",1,0,0,0,2,1,3,0,1,5,37,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,308,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,3,0,0,4,41,5,1.0,0,0
defect4j,time,org/joda/time/Period,11,298,"        super(0L, null, null);",0,0,0,0,2,1,0,0,1,3,22,3,1.0,0,0
defect4j,time,org/joda/time/Period,11,490,"        super(startInstant, endInstant, type, chrono);",4,0,0,0,2,1,0,0,1,4,46,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",1,0,0,0,2,1,4,0,0,4,75,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,6,4,0,2,6,2,0,0,0,5,98,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,        int minuendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,42,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",1,1,0,0,5,1,4,0,0,5,78,4,1.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,1.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,1.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,1.0,1,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,371,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,1.0,1,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,402,            i2 = i2 - unitMillis + 1;,3,2,0,0,0,0,0,0,1,3,25,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,            year--;,1,0,0,0,0,0,0,0,1,2,7,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),4,3,0,2,4,0,0,0,1,5,70,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,            if (daysSince19700101 < -3) {,1,1,0,1,3,1,0,0,1,6,29,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,1,3,0,2,6,2,0,0,0,5,47,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),2,2,0,1,2,1,0,0,0,5,45,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,2,3,0,2,6,1,2,0,1,7,69,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,1,2,0,1,5,33,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,2,2,0,2,6,2,2,0,1,7,61,7,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,1,2,0,2,5,1,0,0,0,5,44,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,                if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,188,                if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,63,"        return set(instant, newYear);",0,0,0,0,2,1,3,0,1,4,29,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,84,"        return iChronology.setYear(instant, year);",0,0,0,0,2,1,4,0,0,3,42,5,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,3,5,0,3,10,2,1,0,1,7,71,6,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,1,6,1,5,0,2,5,80,5,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,131,        return iRange - 1;,1,1,0,0,0,1,0,0,0,3,18,4,1.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,4,7,0,2,8,0,0,0,1,5,71,6,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,115,        return difference / iUnitMillis;,2,1,0,0,0,1,0,0,0,3,32,4,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,4,5,0,2,7,1,0,0,0,5,45,4,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,63,4,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,188,            return (int) value;,1,0,0,1,2,2,0,0,0,4,19,7,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,114,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.5,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,115,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.5,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,182,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.5,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.5,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,213,                leapYears--;,1,0,0,0,0,0,0,0,1,2,12,8,0.5,0,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();,1,0,0,1,2,2,0,4,2,6,66,2,0.33333,1,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,        cVerbose.set(Boolean.FALSE);,2,0,0,1,2,0,2,0,0,4,28,5,0.33333,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,0,2,1,5,0,0,3,53,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,0,2,1,5,0,0,4,68,4,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,1,0,0,1,2,1,1,0,1,6,56,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,2,2,0,1,4,1,1,0,1,7,64,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,404,        int year = (int) (i2 / unitMillis);,3,1,0,1,4,2,0,0,0,5,35,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,3,2,0,1,4,2,0,0,0,5,61,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,450,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,3,1,0,1,4,2,0,0,0,5,58,8,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,2,2,0,3,8,2,2,0,1,7,52,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,93,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.33333,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,1,4,0,1,5,60,5,0.33333,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,241,        return (1970L * MILLIS_PER_YEAR) / 2;,1,2,0,1,2,1,0,0,0,5,37,4,0.33333,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,217,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.33333,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,3,4,0,1,2,1,0,0,0,5,53,6,4.0,0,0
defect4j,time,org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,1,4,2,3,0,0,4,48,5,1.77778,1,1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,0,0,0,2,6,1,4,0,1,5,52,5,1.33333,1,1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,1.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,6,0.5,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,1,1,0,1,2,1,1,0,2,7,39,8,0.5,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.33333,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,5,4.92308,1,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,6,4.92308,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",1,0,1,1,8,0,7,0,1,6,80,8,4.92308,0,0
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);",1,0,0,1,4,1,6,0,2,6,64,4,4.92308,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,1,0,0,0,0,1,0,0,1,3,13,5,0.08333,1,1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,3,2,0,1,3,1,0,0,0,5,27,4,0.03846,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,7,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,3,0,0,3,30,5,6.125,0,0
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,2,0,0,1,2,1,0,0,0,4,32,5,3.0625,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,4,2,0,1,2,1,1,0,1,7,88,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",3,0,0,0,2,1,2,0,2,5,86,4,0.5,1,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",1,0,0,1,6,1,3,0,3,6,60,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",1,0,0,1,8,1,5,0,2,6,63,5,0.05,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.05556,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,48,4,0.05556,1,1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.05556,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.01961,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.00877,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",1,1,0,2,4,0,4,0,1,6,59,6,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,1,0,0,1,2,0,3,1,0,5,38,5,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,2,0,0,1,3,1,0,1,0,5,27,5,0.125,1,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,1,3,0,0,4,25,8,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,5,0,0,3,39,10,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,1,1,0,1,2,1,2,0,0,6,30,9,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",4,0,0,0,2,1,1,0,1,5,57,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,1,0,0,0,0,0,0,0,0,1,9,3,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,1,0,0,1,2,2,2,2,2,7,66,3,0.11111,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,1.33333,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,0,0,0,2,4,2,1,1,2,6,31,4,0.5,0,0
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,1,0,0,1,2,1,2,1,1,7,31,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",2,0,0,0,0,0,0,3,0,2,44,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",1,0,0,1,2,1,0,3,2,6,36,6,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.14286,1,0
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,2,8,1,5,0,2,5,65,5,7.0,1,0
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,2,6,1,4,0,1,5,52,7,7.0,0,0
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,1,0,2,5,1,2,0,2,6,38,4,6.125,1,0
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,0,1,0,1,3,1,3,0,0,5,44,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,1,0,1,3,21,5,6.125,1,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,1.125,0,0
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",2,0,0,0,2,1,0,0,1,4,21,3,0.125,0,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,1,10,1,6,0,3,5,77,4,1.125,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.66667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,1,6,0,5,0,1,4,55,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",4,0,0,0,4,2,0,1,0,4,51,6,1.0,1,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.14286,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,0,4,0,7,0,2,3,65,8,0.14286,0,0
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,1,0,0,1,2,1,3,0,0,5,53,9,0.00714,1,1,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,1,1,0,1,4,2,0,0,0,5,26,9,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,0,2,0,5,0,0,2,44,7,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,2,5,0,3,7,1,2,0,1,7,76,8,0.00719,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",2,1,0,0,2,0,3,0,1,5,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,2,3,0,1,3,1,0,0,0,5,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,286,                minutesOffset = hoursInMinutes - minutesOffset;,3,1,0,0,0,0,0,0,1,3,47,8,0.0,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",1,0,0,0,8,1,9,0,0,4,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",1,0,0,0,2,0,3,0,1,4,23,7,0.07143,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,3,0,0,3,18,9,0.06667,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,1,1,0,1,4,2,0,0,0,5,30,5,0.00139,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,882,        final int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,2,2,0,2,6,48,4,0.00136,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",1,0,0,0,2,1,0,0,0,3,27,4,0.08333,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",1,0,0,0,2,1,3,0,1,5,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,481,"            return iZone.convertLocalToUTC(localInstant, false);",0,0,0,0,2,1,3,0,1,4,52,6,0.0,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,1,0,0,0,0,1,0,0,0,2,13,9,0.03226,1,1,-1
