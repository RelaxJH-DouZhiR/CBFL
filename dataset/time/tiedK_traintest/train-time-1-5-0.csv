dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,0,0,0,4,32,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0,0,0,1,2,0,12,0,0,12,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,            int saveMillis = 0;,6,0,0,0,0,0,0,2,0,8,19,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,6,2,0,15,61,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,                if (millis > firstMillis) {,4,1,0,1,3,0,0,0,0,5,27,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,                    if (first == null) {,2,1,0,1,3,0,0,0,0,3,20,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,                            if (rule.getSaveMillis() == 0) {,8,1,0,2,5,0,10,2,0,22,32,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",12,0,0,1,2,0,0,4,0,19,59,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,                    if (first == null) {,10,4,0,1,3,0,6,0,0,20,20,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,            iRules = copy;,6,1,0,0,0,0,2,0,0,9,14,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,            return first;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,            Rule nextRule = null;,4,2,0,0,0,0,0,0,0,6,21,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,            while (it.hasNext()) {,8,1,0,2,5,0,0,0,0,10,22,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,                Rule rule = it.next();,8,5,1,1,2,0,14,2,0,34,22,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",2,0,0,1,2,0,10,0,0,12,60,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,                if (next <= nextMillis) {,4,0,0,1,3,2,18,2,0,27,25,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,                    nextRule = rule;,6,0,0,0,0,0,0,0,0,7,16,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,2,1,0,3,7,0,14,0,0,17,50,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,            if (iUpperYear < Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",8,0,0,1,2,1,0,2,0,10,61,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,            if (iUpperYear == Integer.MAX_VALUE) {,2,0,0,1,3,0,0,0,0,2,38,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,                return Long.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,22,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,            if (iRules.size() == 2) {,0,1,0,2,5,0,4,0,0,5,25,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,                Rule endRule = iRules.get(1);,4,1,0,1,2,0,4,2,0,11,29,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,4,0,0,1,3,0,0,0,0,5,49,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,",0,0,0,0,1,1,0,0,0,2,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {",8,0,0,1,3,0,0,2,0,10,56,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,            iMillis = millis;,2,0,0,0,0,0,0,0,0,2,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,            iNameKey = rule.getNameKey();,0,0,0,1,2,0,4,0,0,4,29,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,            iWallOffset = standardOffset + rule.getSaveMillis();,8,2,0,1,2,0,4,0,0,15,52,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,        },2,1,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,            return iMillis;,4,0,0,0,0,1,0,0,0,4,15,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,            return iNameKey;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,            return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,            return iStandardOffset;,4,0,0,0,0,1,0,0,0,5,23,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,            if (other == null) {,4,1,0,1,3,0,10,2,0,17,20,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,            return iMillis > other.iMillis &&,8,3,0,0,0,1,0,0,0,11,33,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,            int size = transitions.size();,2,1,0,1,2,0,0,0,0,3,30,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1390,            if (size == 0) {,0,0,0,1,3,0,8,0,0,8,16,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1395,            int[] wallOffsets = new int[size];,0,0,0,2,4,0,6,0,0,6,34,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,            int[] standardOffsets = new int[size];,0,1,0,2,4,0,2,0,0,4,38,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,            String[] nameKeys = new String[size];,2,1,0,2,4,0,0,0,0,3,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,            Transition last = null;,4,1,0,0,0,0,0,0,0,5,23,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,            for (int i=0; i<size; i++) {,18,0,0,1,3,0,0,0,0,18,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,                Transition tr = transitions.get(i);,2,0,0,1,2,2,0,4,0,9,35,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,                if (!tr.isTransitionFrom(last)) {,6,1,0,2,5,3,8,2,0,20,33,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,2,4,0,4,0,0,9,36,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,                last = tr;,4,0,0,0,0,0,0,0,0,5,10,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,            String[] zoneNameData = new String[5];,2,0,0,2,4,0,0,4,0,6,38,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0,0,0,4,8,0,0,0,0,12,80,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,            for (int j = 0; j < zoneStrings.length; j++) {,8,1,0,1,3,3,0,6,0,18,46,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,                String[] set = zoneStrings[j];,2,0,1,2,4,0,0,2,0,8,30,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,6,4,1,3,7,0,4,0,0,16,58,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,47,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1429,                String curNameKey = nameKeys[i];,2,0,1,1,2,0,0,2,0,8,32,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1430,                String nextNameKey = nameKeys[i + 1];,2,0,0,1,2,0,4,0,0,7,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1434,                long nextStdOffset = standardOffsets[i + 1];,4,1,1,1,2,0,0,0,0,7,44,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",6,1,1,4,8,0,4,4,0,21,81,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1436,                if (curOffset != nextOffset &&,4,8,0,0,1,0,0,0,0,12,30,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1458,                if (tailZone.iStartRecurrence.getNameKey(),4,0,0,1,3,0,2,0,0,6,42,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1480,            return new PrecalculatedZone,8,0,0,0,0,1,4,0,0,13,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1690,            if (iTailZone != null) {,2,1,0,1,3,0,0,0,0,3,24,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1691,                return true;,0,0,0,0,0,1,8,0,0,8,12,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,10,0,0,10,57,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,772,            return iNameKey;,4,0,0,0,0,1,0,0,0,4,16,1,1.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,11,283,            return ISOChronology.getInstance();,0,0,0,1,2,1,4,0,0,4,35,7,1.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,11,316,        if (type == null) {,4,1,0,1,3,2,0,2,0,9,19,1,1.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,11,319,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,597,        iTypes = types;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,599,    },4,0,0,0,1,0,0,2,0,7,1,5,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",8,0,0,1,2,3,6,12,0,30,90,1,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,58,    static int YEAR_INDEX = 0;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,59,    static int MONTH_INDEX = 1;,2,0,0,0,0,1,0,0,0,3,27,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,61,    static int DAY_INDEX = 3;,2,0,0,0,0,1,0,0,0,3,25,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,62,    static int HOUR_INDEX = 4;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,64,    static int SECOND_INDEX = 6;,2,0,0,0,0,1,0,0,0,3,28,2,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,65,    static int MILLI_INDEX = 7;,0,0,0,0,0,0,6,0,0,6,27,5,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,102,        PeriodType type = cStandard;,8,0,0,0,0,0,0,2,0,11,28,3,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,103,        if (type == null) {,4,1,0,1,3,0,0,2,0,8,19,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,116,        return type;,2,3,0,0,0,1,0,0,0,5,12,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,164,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,165,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,1.0,0,0
defect4j,time,org/joda/time/PeriodType,11,617,        return iTypes.length;,4,0,0,0,0,1,0,0,0,4,21,5,1.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,11,515,            return System.currentTimeMillis();,4,0,0,1,2,1,4,0,0,9,34,1,1.0,0,0
defect4j,time,org/joda/time/DurationFieldType,11,282,            chronology = DateTimeUtils.getChronology(chronology);,6,0,0,1,2,0,10,0,0,18,53,4,1.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,56,        return getPeriodType().size();,0,0,0,2,4,1,4,0,0,4,30,5,1.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,68,        return getPeriodType().getFieldType(index);,0,0,0,2,4,1,6,0,0,6,43,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,107,        type = checkPeriodType(type);,2,0,0,1,2,0,0,0,0,2,29,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,108,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,109,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,110,"        iValues = chrono.get(this, startInstant, endInstant);",4,0,0,1,2,0,20,0,0,25,53,3,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,111,    },2,0,0,0,1,0,4,0,0,6,1,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,255,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,256,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,16,0,0,19,45,1,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,257,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);",2,0,0,1,2,0,6,0,0,9,37,4,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,2,0,0,1,3,3,0,4,0,9,73,2,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,308,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,6,0,0,6,41,5,1.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,11,318,        return iType;,0,0,0,0,0,1,10,0,0,10,13,7,1.0,0,0
defect4j,time,org/joda/time/Period,11,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,243,        if (minuendInstant < subtrahendInstant) {,6,2,0,1,3,0,0,2,0,11,41,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,247,        int minuendYear = iChronology.getYear(minuendInstant);,2,0,0,1,2,0,6,0,0,8,54,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",2,0,0,1,2,0,8,0,0,10,75,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",2,0,0,1,2,0,8,0,0,10,84,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,12,4,0,3,6,0,0,0,0,16,98,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,        int minuendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,42,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",4,1,0,2,5,1,16,0,0,22,78,1,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,273,        long subtrahendRem = subtrahendInstant,4,0,0,0,0,0,0,0,0,4,38,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,280,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,84,4,1.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);",2,1,0,2,4,1,12,0,0,16,46,3,1.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,            return ImpreciseDateTimeField.this,2,0,0,0,0,1,0,0,0,2,34,7,1.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,11,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,10,0,0,10,84,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,485,        long yearStart = getYearMillis(year);,4,0,0,1,2,0,4,4,0,12,37,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,4,0,0,4,76,7,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0,0,0,3,6,1,2,0,0,2,47,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,4,3,0,3,6,1,4,0,0,11,69,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,10,1,0,1,2,0,4,0,0,16,62,1,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,156,        if (subtrahendRem >= FEB_29) {,10,1,0,1,3,0,0,2,0,13,30,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,0,4,0,0,4,33,7,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,4,2,0,2,6,0,4,0,0,10,61,7,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,        int difference = minuendYear - subtrahendYear;,6,1,0,0,0,0,0,0,0,7,46,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,167,        if (minuendRem < subtrahendRem) {,6,2,0,1,3,0,0,0,0,8,33,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,168,            difference--;,4,1,0,0,0,0,0,0,0,6,13,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,170,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,14,0,0,16,32,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,48,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,177,        int millisOfDay = getMillisOfDay(instant);,2,0,0,1,2,0,4,0,0,6,42,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,                if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,8,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,184,                    dayOfYear--;,2,0,0,0,0,0,0,0,0,3,12,10,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,190,                    dayOfYear++;,4,2,0,0,0,0,2,0,0,10,12,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,58,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,59,            return instant;,2,0,0,0,0,1,0,0,0,2,15,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,61,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,84,"        return iChronology.setYear(instant, year);",0,0,0,1,2,1,8,0,0,8,42,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,88,        if (minuendInstant < subtrahendInstant) {,4,1,0,1,3,0,0,0,0,5,41,4,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,3,6,0,10,0,0,10,80,5,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,1.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,8,0,0,10,77,5,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0,0,0,3,7,0,0,0,0,10,45,4,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,106,        return diff;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,11,188,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,1.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,776,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,847,"            setMillis(getChronology().seconds().add(getMillis(), seconds));",2,0,0,5,10,0,12,0,0,14,63,3,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1633,            if (months != 0) {,8,1,0,1,3,0,4,2,0,15,18,1,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1634,                result = result.withMonths(months);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,286,                minutesOffset = hoursInMinutes - minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.0,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();,2,0,0,1,2,1,0,8,0,11,66,2,0.33333,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,        cVerbose.set(Boolean.FALSE);,6,0,0,1,2,0,10,0,0,17,28,1,0.33333,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00139,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,8,0,0,8,29,5,0.00139,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,25,900,        return offsetAdjusted;,4,1,0,0,0,1,0,0,0,5,22,3,0.01261,1,1,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,0,6,0,0,9,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,448,"               return iZone.convertLocalToUTC(localInstant, false);",0,0,0,1,2,1,6,0,0,7,52,8,0.0,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,1,0,0,0,2,52,5,0.0,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
