dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/IllegalFieldValueException,15,156,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,157,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,158,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,159,    },2,0,0,0,1,0,2,0,0,4,1,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,172,        iDateTimeFieldType = null;,8,1,0,0,0,0,0,2,0,12,26,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,173,        iDurationFieldType = null;,6,0,0,0,0,0,0,0,0,7,26,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,174,        iFieldName = fieldName;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,175,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,176,        iStringValue = null;,4,1,0,0,0,0,4,0,0,10,20,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,177,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,178,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,179,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,189,"        super(createMessage(fieldType.getName(), value));",4,0,0,3,6,0,0,0,0,4,49,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,190,        iDateTimeFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,191,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,192,        iFieldName = fieldType.getName();,4,1,0,1,2,0,4,0,0,10,33,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,193,        iStringValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,194,        iNumberValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,195,        iLowerBound = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,196,        iUpperBound = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,197,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,198,    },6,4,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,207,"        super(createMessage(fieldType.getName(), value));",2,1,0,3,6,0,8,0,0,11,49,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,208,        iDateTimeFieldType = null;,10,2,0,0,0,0,4,2,0,20,26,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,209,        iDurationFieldType = fieldType;,4,0,0,0,0,0,2,0,0,7,31,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,210,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,211,        iStringValue = value;,4,0,0,0,0,0,18,0,0,22,21,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,212,        iNumberValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,213,        iLowerBound = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,214,        iUpperBound = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,215,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,216,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,225,"        super(createMessage(fieldName, value));",0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,226,        iDateTimeFieldType = null;,2,0,0,0,0,0,0,0,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,227,        iDurationFieldType = null;,2,0,0,0,0,0,0,0,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,228,        iFieldName = fieldName;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,229,        iStringValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,230,        iNumberValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,231,        iLowerBound = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,232,        iUpperBound = null;,4,1,0,0,0,0,0,0,0,6,19,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,233,        iMessage = super.getMessage();,4,0,0,1,2,0,4,0,0,9,30,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,234,    },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,4,0,6,37,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,44,        if (lowerBound == null) {,2,1,1,1,3,0,0,0,0,7,25,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,4,0,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,2,4,0,10,0,0,12,58,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,50,        } else if (upperBound == null) {,2,0,0,1,4,0,8,0,0,10,32,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,53,"            buf.append(""must be in the range ["")",6,0,0,1,3,0,12,0,0,20,36,1,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,60,"            buf.append("": "").append(explain);",0,0,0,2,4,0,8,0,0,9,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,63,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0,0,0,2,4,0,0,0,0,6,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,76,        if (value == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,77,"            buf.append(""null"");",0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,79,"            buf.append('""');",0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,80,            buf.append(value);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,81,"            buf.append('""');",0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,4,8,0,0,0,0,12,77,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,86,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,243,        return iDateTimeFieldType;,0,0,0,0,0,1,0,0,0,1,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,252,        return iDurationFieldType;,0,0,0,0,0,1,0,0,0,1,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,261,        return iFieldName;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,270,        return iNumberValue;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,279,        return iStringValue;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,288,        String value = iStringValue;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,289,        if (value == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,290,            value = String.valueOf(iNumberValue);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,292,        return value;,10,0,0,0,0,1,2,2,0,15,13,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,301,        return iLowerBound;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,310,        return iUpperBound;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,314,        return iMessage;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,323,        if (iMessage == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,324,            iMessage = message;,4,0,0,0,0,0,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,325,        } else if (message != null) {,0,0,0,1,4,0,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,326,"            iMessage = message + "": "" + iMessage;",4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,36,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,49,        if (value == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,52,        return -value;,6,0,0,0,0,1,0,0,0,8,14,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,64,        int sum = val1 + val2;,12,2,0,0,0,0,4,0,0,19,22,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,67,            throw new ArithmeticException,4,0,0,0,0,0,0,2,0,6,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,70,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,10,5,0,3,7,0,14,2,0,31,45,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,85,            throw new ArithmeticException,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,88,        return sum;,2,0,0,0,0,1,8,0,0,11,11,9,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,103,            throw new ArithmeticException,2,1,0,0,0,0,0,0,0,3,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,106,        return diff;,4,0,0,0,0,1,2,2,0,9,12,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0,0,0,1,2,0,0,0,0,3,89,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,123,        return (int) total;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,140,                return 0L;,8,3,0,0,0,1,8,0,0,21,10,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,146,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",2,0,0,1,2,0,4,0,0,6,89,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,160,        if (val2 == 1) {,8,1,0,1,3,0,6,4,0,19,16,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,161,            return val1;,10,2,1,0,0,1,0,0,0,17,12,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,163,        if (val1 == 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,164,            return val2;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,166,        if (val1 == 0 || val2 == 0) {,8,3,0,1,3,0,0,0,0,12,29,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,167,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,169,        long total = val1 * val2;,4,0,0,0,0,0,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,170,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,4,1,0,1,3,0,0,0,0,5,107,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,171,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",6,2,0,1,2,0,0,2,0,12,89,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,173,        return total;,4,0,0,0,0,1,4,0,0,8,13,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,185,            return (int) value;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",18,6,0,1,2,0,0,2,0,28,70,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,199,"        long val = FieldUtils.safeMultiply(val1, val2);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,200,        return FieldUtils.safeToInt(val);,8,1,0,1,2,1,8,0,0,17,33,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,214,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,215,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,219,    },6,0,0,0,1,0,0,2,0,9,1,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,232,        if ((value < lowerBound) || (value > upperBound)) {,8,0,0,3,7,0,0,2,0,10,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,237,    },6,1,0,0,1,0,0,0,0,8,1,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,249,        if ((value < lowerBound) || (value > upperBound)) {,16,3,0,3,7,0,10,2,0,32,51,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,250,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,254,    },0,0,1,0,1,0,4,0,0,9,1,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0,0,0,1,2,1,0,0,0,4,69,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,289,        if (minValue >= maxValue) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,290,"            throw new IllegalArgumentException(""MIN > MAX"");",16,5,0,1,2,0,4,2,0,29,48,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,293,        int wrapRange = maxValue - minValue + 1;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,294,        value -= minValue;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,296,        if (value >= 0) {,6,1,0,1,3,0,4,2,0,14,17,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,297,            return (value % wrapRange) + minValue;,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,300,        int remByRange = (-value) % wrapRange;,8,1,0,1,2,0,4,0,0,15,38,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,302,        if (remByRange == 0) {,8,3,0,1,3,0,0,0,0,11,22,1,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,303,            return 0 + minValue;,2,1,0,0,0,1,0,0,0,3,20,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,305,        return (wrapRange - remByRange) + minValue;,0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,318,        if (object1 == object2) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,319,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,321,        if (object1 == null || object2 == null) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,322,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,15,324,        return object1.equals(object2);,6,4,0,1,2,1,18,2,0,31,31,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,0,0,0,6,78,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,87,4,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0,0,0,3,6,0,0,0,0,9,59,4,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,0,0,0,1,2,1,4,0,0,4,27,5,0.05,0,0
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.05556,0,0
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0,0,0,1,2,0,0,0,0,3,61,4,0.03333,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,6,0,0,6,33,8,0.008,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,10,0,0,10,26,5,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,0,0,0,7,25,4,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,6,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0,0,0,1,2,0,0,0,0,3,66,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,0
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",14,1,0,1,2,0,24,4,0,47,36,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",6,1,0,1,2,0,6,0,0,16,38,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",4,0,0,1,2,0,4,0,0,11,56,1,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,569,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,570,"            map.put(""CST"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,571,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,572,"            map.put(""IET"", ""America/Indianapolis"");",0,0,0,1,2,0,4,0,0,6,39,7,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,573,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,1,2,0,6,0,0,9,38,6,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,1,2,0,14,0,0,16,35,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,575,"            map.put(""AGT"", ""America/Buenos_Aires"");",0,0,0,1,2,0,0,0,0,3,39,4,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,576,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,1,2,0,6,0,0,6,36,9,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,577,"            map.put(""WET"", ""Europe/London"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,578,"            map.put(""ECT"", ""Europe/Paris"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");",6,3,0,1,2,0,6,0,0,15,31,1,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,580,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,581,"            map.put(""EET"", ""Europe/Bucharest"");",0,0,0,1,2,0,0,0,0,3,35,4,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,582,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,584,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,585,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,1,2,0,0,0,0,3,31,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,586,"            map.put(""IST"", ""Asia/Calcutta"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,587,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,588,"            map.put(""VST"", ""Asia/Saigon"");",0,0,0,1,2,0,4,0,0,6,30,7,0.14286,1,0
defect4j,time,org/joda/time/DateTimeZone,23,589,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,590,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,591,"            map.put(""ACT"", ""Australia/Darwin"");",2,1,0,1,2,0,4,0,0,9,35,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,592,"            map.put(""AET"", ""Australia/Sydney"");",6,0,0,1,2,0,4,0,0,10,35,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");",4,2,0,1,2,0,4,0,0,13,38,1,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,594,"            map.put(""NST"", ""Pacific/Auckland"");",2,0,0,1,2,0,10,0,0,14,35,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,595,            cZoneIdConversion = map;,4,0,0,0,0,0,4,0,0,9,24,5,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,597,        return map.get(id);,2,0,0,1,2,1,16,0,0,18,19,3,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,174,        SecurityManager sm = System.getSecurityManager();,0,0,0,1,2,0,0,0,0,3,49,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,178,        if (zone == null) {,2,0,0,1,3,0,0,0,0,3,19,3,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,182,            cDefault = zone;,0,0,0,0,0,0,0,0,0,0,16,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeZone,23,147,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,133,        DateTimeZone zone = cDefault;,6,0,0,0,0,0,0,2,0,9,29,3,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,134,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,136,                zone = cDefault;,10,1,0,0,0,0,0,0,0,12,16,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,137,                if (zone == null) {,4,1,1,1,3,0,0,0,0,9,19,3,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,138,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,141,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,143,                                temp = forID(id);,2,0,0,1,2,0,4,0,0,7,17,16,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,153,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,154,                    if (temp == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,157,                    cDefault = zone = temp;,2,0,0,0,0,0,4,0,0,7,23,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,159,            },4,0,0,0,1,0,8,0,0,13,1,3,0.00031,0,0
defect4j,time,org/joda/time/DateTimeZone,23,161,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.00031,0,0
defect4j,time,org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,12.25,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,                break;,0,0,0,0,0,0,0,0,0,0,6,4,12.25,0,0
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,7.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,7.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0
defect4j,time,org/joda/time/LocalDate,24,490,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,6.125,0,0
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,6.125,0,0
defect4j,time,org/joda/time/LocalDate,24,508,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,6.125,0,0
defect4j,time,org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,6.125,0,0
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",0,0,0,1,2,0,6,0,0,6,22,5,4.9,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,4.9,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",0,0,0,1,2,0,0,0,0,3,39,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,    },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,0,0,0,0,7,38,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0
defect4j,time,org/joda/time/DateTime,25,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.1,0,0
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0
