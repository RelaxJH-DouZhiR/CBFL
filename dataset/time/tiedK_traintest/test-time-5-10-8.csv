dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,2,1,0,1,3,0,6,0,0,9,22,3,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,2,0,0,1,2,0,4,0,0,6,41,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,10,0,0,10,78,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0,0,0,0,1,0,0,0,0,1,55,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,10,0,0,11,53,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,1,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,0,0,0,3,30,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,4,0,0,7,20,1,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,2,0,0,0,0,1,0,0,0,2,14,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,18,40,3,4.45455,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,0,0,0,1,2,0,0,0,0,3,42,4,3.0625,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,0,0,0,1,2,0,0,0,0,3,32,4,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,565,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,2.57895,0,0
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,4,6,12,0,23,9,1,1.88462,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,88,4,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,87,5,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,4,1,0,1,3,0,0,0,0,5,36,4,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,16,0,0,18,40,3,0.5,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",6,0,0,1,2,1,4,0,0,11,86,5,0.5,1,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",2,0,0,3,6,0,6,0,0,9,60,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",4,0,0,3,6,0,10,0,0,16,59,3,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.05882,0,0
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,2,0,0,1,2,1,4,0,0,6,27,1,0.05,0,0
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,0,0,2,4,1,4,0,0,4,33,5,0.01887,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,0,0,1,1,2,1,8,0,0,12,23,1,0.01639,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,10,3,0,3,7,0,4,0,0,19,33,3,0.05556,0,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,0,0,0,0,0,0,0,0,0,0,48,4,0.05556,1,1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.05556,0,0
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",8,0,0,1,2,0,0,0,0,8,61,4,0.03333,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,6,0,0,6,36,8,0.01961,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,31,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,2,0,0,0,0,0,0,0,0,3,26,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,4,1,0,0,0,0,0,0,0,6,20,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,4,0,0,0,0,0,4,0,0,11,25,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,6,0,1,1,2,0,0,2,0,13,30,3,0.01471,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01471,0,0
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0
defect4j,time,org/joda/time/DateTime,19,333,    },4,1,0,0,1,0,8,0,0,13,1,5,0.06667,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,2,1,0,1,2,0,4,0,0,7,33,9,0.008,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,2,1,0,1,3,0,4,0,0,9,18,1,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,6,1,0,1,2,0,12,0,0,22,16,1,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,4,1,0,1,2,0,0,0,0,5,38,4,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.125,1,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,6,0,0,6,25,8,0.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,0,0,0,1,2,1,0,0,0,4,30,4,0.125,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,5,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,4,0,0,0,0,1,2,0,0,7,22,1,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,0,0,0,0,0,0,0,0,0,0,9,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,2,0,0,1,2,2,4,4,0,13,66,1,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",2,0,0,2,4,0,4,2,0,8,33,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,4,0,0,0,0,0,4,0,0,11,13,3,0.1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,4,1,0,2,4,1,2,2,0,9,31,1,0.5,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,time,org/joda/time/Period,22,382,        super(duration);,0,0,0,1,2,0,0,0,0,3,16,4,0.12903,0,0
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,4,0,0,4,1,7,0.12903,0,0
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,0,0,0,4,45,4,0.08696,0,0
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,4,1,0,1,2,0,6,0,0,12,32,4,1.0,0,0
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0,0
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,2,0,0,0,0,0,0,2,0,4,24,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,4,1,0,1,3,0,0,0,0,5,21,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,4,1,0,1,3,3,0,4,0,12,18,1,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",4,0,0,0,0,0,0,6,0,10,44,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,4,0,0,8,18,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",0,0,0,1,2,0,0,0,0,3,36,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",0,0,0,1,2,0,0,0,0,3,22,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",2,1,0,1,2,0,14,0,0,19,31,3,0.14286,1,1
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,1,2,0,0,0,0,3,58,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,1,2,0,4,0,0,6,36,7,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,1,2,0,0,0,0,3,38,4,0.14286,0,0
