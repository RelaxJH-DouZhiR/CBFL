dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,        if (fromYear <= toYear) {,0,0,0,1,3,0,0,0,0,4,25,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,        if (id == null) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0,0,0,1,2,0,0,0,0,3,64,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,        DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,        int ruleSetCount = iRuleSets.size();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,        for (int i=0; i<ruleSetCount; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,            RuleSet rs = iRuleSets.get(i);,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,            Transition next = rs.firstTransition(millis);,0,0,0,1,2,0,0,0,0,3,45,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,            millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,            saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,            rs = new RuleSet(rs);,0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {",0,0,0,2,5,0,0,0,0,7,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,                saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,                    tailZone = rs.buildTailZone(id);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,        if (transitions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,        if (zone.isCachable()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,0,0,0,0,7,33,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,        if (size >= 2) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,            transitions.add(tr);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,            iToYear = toYear;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,            return iToYear;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,0,0,0,4,32,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,            long testInstant = instant;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,            if (instant == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,                year = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,                year = chrono.year().get(instant + wallOffset);,0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,            if (year < iFromYear) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,                testInstant -= 1;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,                year = chrono.year().get(next + wallOffset);,0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,                if (year > iToYear) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,            if (iMode == 'w') {,0,0,0,1,3,0,0,0,0,4,19,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,            if (iDayOfMonth >= 0) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0,0,0,2,4,0,0,0,0,6,56,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,        RuleSet() {,0,0,0,1,3,0,0,0,0,4,11,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,            iRules = new ArrayList<Rule>(10);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,            iUpperYear = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,        RuleSet(RuleSet rs) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,            iInitialNameKey = rs.iInitialNameKey;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,            iUpperOfYear = rs.iUpperOfYear;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,995,                iRules.add(rule);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,997,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1011,            if (iInitialNameKey != null) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0,0,0,1,2,0,12,0,0,12,51,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,            long millis = Long.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,29,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,            int saveMillis = 0;,6,0,0,0,0,0,0,2,0,8,19,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,            Transition first = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,6,2,0,15,61,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1032,                if (millis == firstMillis) {,0,0,0,1,3,0,0,0,0,4,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,                if (millis > firstMillis) {,4,1,0,1,3,0,0,0,0,5,27,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,                    if (first == null) {,2,1,0,1,3,0,0,0,0,3,20,9,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,                        for (Rule rule : copy) {,0,0,0,1,3,0,0,0,0,4,24,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,                            if (rule.getSaveMillis() == 0) {,8,1,0,2,5,0,10,2,0,22,32,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",12,0,0,1,2,0,0,4,0,19,59,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1045,                                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1047,                        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,                    if (first == null) {,10,4,0,1,3,0,6,0,0,20,20,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,            iRules = copy;,6,1,0,0,0,0,2,0,0,9,14,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,            return first;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,            Rule nextRule = null;,4,2,0,0,0,0,0,0,0,6,21,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1086,            long nextMillis = Long.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1088,            Iterator<Rule> it = iRules.iterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,            while (it.hasNext()) {,8,1,0,2,5,0,0,0,0,10,22,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,                Rule rule = it.next();,8,5,1,1,2,0,14,2,0,34,22,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",2,0,0,1,2,0,10,0,0,12,60,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1092,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,                if (next <= nextMillis) {,4,0,0,1,3,2,18,2,0,27,25,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,                    nextRule = rule;,6,0,0,0,0,0,0,0,0,7,16,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1101,                    nextMillis = next;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1103,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1105,            if (nextRule == null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,2,1,0,3,7,0,14,0,0,17,50,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,            if (iUpperYear < Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,37,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",8,0,0,1,2,1,0,2,0,10,61,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,            if (iUpperYear == Integer.MAX_VALUE) {,2,0,0,1,3,0,0,0,0,2,38,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,                return Long.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,22,8,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,            if (iRules.size() == 2) {,0,1,0,2,5,0,4,0,0,5,25,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1142,                Rule startRule = iRules.get(0);,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,                Rule endRule = iRules.get(1);,4,1,0,1,2,0,4,2,0,11,29,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,4,0,0,1,3,0,0,0,0,5,49,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,",0,0,0,0,1,1,0,0,0,2,39,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {",8,0,0,1,3,0,0,2,0,10,56,3,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,            iMillis = millis;,2,0,0,0,0,0,0,0,0,2,17,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,            iNameKey = rule.getNameKey();,0,0,0,1,2,0,4,0,0,4,29,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,            iWallOffset = standardOffset + rule.getSaveMillis();,8,2,0,1,2,0,4,0,0,15,52,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,894,            iStandardOffset = standardOffset;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,        },2,1,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,            return iMillis;,4,0,0,0,0,1,0,0,0,4,15,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,            return iNameKey;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,            return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,            return iStandardOffset;,4,0,0,0,0,1,0,0,0,5,23,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,922,            return iWallOffset - iStandardOffset;,0,0,0,0,0,1,0,0,0,1,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,            if (other == null) {,4,1,0,1,3,0,10,2,0,17,20,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,930,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,            return iMillis > other.iMillis &&,8,3,0,0,0,1,0,0,0,11,33,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,            int size = transitions.size();,2,1,0,1,2,0,0,0,0,3,30,6,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1390,            if (size == 0) {,0,0,0,1,3,0,8,0,0,8,16,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1394,            long[] trans = new long[size];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1395,            int[] wallOffsets = new int[size];,0,0,0,2,4,0,6,0,0,6,34,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,            int[] standardOffsets = new int[size];,0,1,0,2,4,0,2,0,0,4,38,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,            String[] nameKeys = new String[size];,2,1,0,2,4,0,0,0,0,3,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,            Transition last = null;,4,1,0,0,0,0,0,0,0,5,23,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,            for (int i=0; i<size; i++) {,18,0,0,1,3,0,0,0,0,18,28,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,                Transition tr = transitions.get(i);,2,0,0,1,2,2,0,4,0,9,35,2,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,                if (!tr.isTransitionFrom(last)) {,6,1,0,2,5,3,8,2,0,20,33,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1407,                trans[i] = tr.getMillis();,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,2,4,0,4,0,0,9,36,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,2,4,0,4,0,0,9,44,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1410,                nameKeys[i] = tr.getNameKey();,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,                last = tr;,4,0,0,0,0,0,0,0,0,5,10,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,            String[] zoneNameData = new String[5];,2,0,0,2,4,0,0,4,0,6,38,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0,0,0,4,8,0,0,0,0,12,80,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,            for (int j = 0; j < zoneStrings.length; j++) {,8,1,0,1,3,3,0,6,0,18,46,1,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,                String[] set = zoneStrings[j];,2,0,1,2,4,0,0,2,0,8,30,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,6,4,1,3,7,0,4,0,0,16,58,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,47,5,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1429,                String curNameKey = nameKeys[i];,2,0,1,1,2,0,0,2,0,8,32,7,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1430,                String nextNameKey = nameKeys[i + 1];,2,0,0,1,2,0,4,0,0,7,37,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1431,                long curOffset = wallOffsets[i];,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1432,                long nextOffset = wallOffsets[i + 1];,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
