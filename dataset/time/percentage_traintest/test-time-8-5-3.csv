dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/chrono/ZonedChronology,16,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1662,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.08221,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1663,            hde = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08221,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.08221,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,4,0,0,4,35,7,0.08072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,0,1,2,1,0,0,0,3,50,4,0.0798,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07916,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.07903,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.07632,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",2,1,0,2,4,0,0,0,0,3,57,4,0.07632,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07632,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,900,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.07562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.07504,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.07402,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,882,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,884,        final long instantAdjusted = instantLocal - offsetLocal;,0,0,0,0,0,0,0,0,0,0,56,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,887,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.07368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1600,        return mye;,0,0,0,0,0,1,0,0,0,1,11,4,0.07346,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,69,5,0.07174,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1585,        if (ye == null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1586,            ye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,517,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.07091,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,550,            return iField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.07091,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,567,            return iField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.07091,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,0,2,0,10,33,4,0.07061,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.0702,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,31,4,0.06882,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,260,            return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.06872,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,205,                chrono = chronos.get(i);,2,0,0,1,2,0,6,0,0,9,24,8,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,10,0,0,16,63,3,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,209,                    return chrono;,2,0,0,0,0,1,0,0,0,2,14,10,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,397,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,406,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,4,0,0,4,56,5,0.06863,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,939,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,940,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,943,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,946,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.06844,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,516,                    return chronology.hourOfDay();,2,0,0,1,2,1,10,4,0,16,30,1,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.06834,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,499,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,503,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",8,0,0,3,6,0,0,2,0,10,62,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,282,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,6,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,221,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,477,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,307,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,317,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,320,        if (zone == getZone()) {,2,1,0,2,5,0,2,0,0,5,24,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,321,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,293,        if ((base = getBase()) != null) {,4,1,0,3,7,0,18,0,0,26,33,1,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,296,        return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,3,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,474,            return result;,2,0,0,0,0,1,4,4,0,10,14,1,0.06658,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,194,            cutoverInstant = gregorianCutover.toInstant();,0,0,0,1,2,0,0,0,0,3,46,4,0.0664,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,67,5,0.06631,0,0,-1
defect4j,time,org/joda/time/Instant,16,144,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.06631,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.06577,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,468,            if (get(result) != value) {,2,1,0,2,5,0,4,0,0,7,27,5,0.06577,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.06481,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.06473,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,465,            long localInstant = iZone.convertUTCToLocal(instant);,4,0,0,1,2,1,6,0,0,11,53,1,0.06464,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,466,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,2,0,0,2,47,5,0.06464,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.06439,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,957,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,1,2,1,6,0,0,6,47,5,0.06422,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,974,        int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,42,4,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,976,        int offset = getOffset(instantLocal - offsetLocal);,6,1,0,1,2,0,2,0,0,9,51,5,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,978,        if (offsetLocal != offset) {,4,1,0,1,3,0,0,0,0,5,28,4,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1009,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1014,        return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,4,0.06414,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,12,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,12,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2736,            if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2737,                for (int i=0; i<array.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2738,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2741,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,451,        if (maxDigits < minDigits) {,6,2,0,1,3,0,0,0,0,8,28,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,454,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,457,        if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,3,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",8,0,0,2,4,1,0,2,0,11,72,3,0.06282,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,16,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,209,        if (formatter == null) {,2,0,0,1,3,0,0,0,0,2,24,4,0.06164,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,10,0,0,10,62,5,0.06164,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,172,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.0614,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,154,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.06027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,345,        iFormatter = null;,14,1,0,0,0,0,0,0,0,18,18,3,0.05998,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,346,        iElementPairs.add(printer);,0,0,0,1,2,0,0,0,0,3,27,4,0.05998,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,347,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.05998,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.05998,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1141,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.05882,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1131,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05868,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,259,        if (this == readableInstant) {,4,1,1,1,3,0,0,2,0,10,30,1,0.05868,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1104,                Object printer = iElementPairs.get(0);,2,0,0,1,2,0,4,2,0,8,38,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1105,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1107,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1108,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1109,                        f = printer;,8,1,0,0,0,0,4,0,0,14,12,3,0.05854,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,54,    },2,0,0,0,1,0,0,0,0,2,1,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,65,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,66,        int min = super.getMinimumValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,74,        iSkip = skip;,0,0,0,0,0,0,0,0,0,0,13,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,88,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,89,            value--;,4,0,0,0,0,0,0,0,0,4,8,6,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,91,"        return super.set(millis, value);",0,0,0,1,2,1,0,0,0,4,32,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,16,82,            value--;,2,0,0,0,0,0,2,0,0,5,8,3,0.05691,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,153,"        return super.set(instant, value - iOffset);",8,1,0,1,2,1,4,0,0,13,43,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,128,"        super(base, param);",6,0,0,1,2,0,0,0,0,6,19,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",2,0,0,1,2,3,0,4,0,10,85,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",2,0,0,1,2,3,0,12,0,17,116,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,104,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,107,        BuddhistChronology chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,45,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,108,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",2,0,0,2,4,0,6,2,0,12,76,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",4,0,0,1,2,0,0,4,0,8,64,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,114,"            cCache.put(zone, chrono);",2,0,0,1,2,0,8,0,0,11,25,1,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,116,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,204,        if (getParam() == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,206,            DateTimeField field = fields.year;,8,0,1,0,0,0,0,6,0,16,34,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,207,            fields.year = new OffsetDateTimeField(,6,0,0,0,1,0,4,4,0,15,38,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,211,            field = fields.yearOfEra;,6,0,0,0,0,0,0,0,0,7,25,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,216,            field = fields.weekyear;,6,0,0,0,0,0,0,0,0,7,24,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,42,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,221,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,0,2,0,12,47,1,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,229,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,234,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,82,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.05684,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,16,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,6,0,0,6,46,5,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,83,            year++;,0,0,0,0,0,0,0,0,0,0,7,4,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,38,6,0.05678,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,41,4,0.05678,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,8,0,0,13,33,3,0.05665,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,133,"        instant = monthOfYear().set(instant, monthOfYear);",12,0,0,2,4,0,12,2,0,28,50,3,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",12,0,0,2,4,0,12,2,0,28,48,3,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,12,0,0,18,56,1,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,8,0,0,8,53,5,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,16,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,714,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,715,                        instant = gregorianToJulian(instant);,4,0,0,1,2,3,4,16,0,28,37,1,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,915,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,0,0,0,4,40,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,228,        return iChronology.getMaxYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.05632,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,172,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,74,public final class GJChronology extends AssembledChronology {,0,0,0,0,1,0,0,0,0,1,61,4,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,647,                return iJulianField.get(instant);,0,0,0,1,2,1,0,0,0,4,33,4,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,724,"                instant = iJulianField.set(instant, value);",4,0,0,1,2,0,8,0,0,13,43,1,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,725,                if (instant >= iCutover) {,5,2,0,1,3,0,0,0,0,7,26,1,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,912,            if (iConvertByWeekyear) {,4,0,0,1,3,0,0,0,0,4,25,4,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,78,        if (year <= 0) {,6,1,0,1,3,0,0,2,0,10,16,3,0.05613,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.05613,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",8,0,0,2,4,1,4,0,0,12,84,4,0.05613,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,228,        return iField.getMaximumValue();,2,0,0,1,2,1,12,0,0,14,32,3,0.05606,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,710,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,711,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,712,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,737,            return instant;,10,4,0,0,0,1,0,0,0,15,15,1,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,644,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.05594,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,16,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.05543,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,402,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.05543,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,955,            return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.05396,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,788,            return iGregorianField.getLeapDurationField();,0,0,0,1,2,1,0,0,0,4,46,4,0.05396,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.05391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,396,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.05373,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.05373,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,402,        if (minDigits < 0 || maxDigits <= 0) {,0,1,0,1,3,0,2,0,0,4,38,4,0.05373,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,405,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.05373,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,768,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.05344,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,87,4,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0,0,0,3,6,0,0,0,0,9,59,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,0,0,0,1,2,1,4,0,0,4,27,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,            int offset = getOffsetToAdd(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.00476,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,344,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,266,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,225,    },0,0,0,0,1,0,6,0,0,6,1,6,0.00339,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,3,0,0,1,0,5,0,0,12,46,1,0.00337,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,4,0,0,1,3,0,0,0,0,5,19,4,0.00273,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.00242,0,0,-1
defect4j,time,org/joda/time/DateTime,17,220,"        super(instant, chronology);",0,0,0,1,2,0,0,0,0,3,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTime,17,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,6,1,0,1,3,0,0,2,0,9,21,3,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,2,0,0,1,2,1,12,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,4,2,0,1,3,0,0,0,0,6,22,3,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,2,0,0,1,2,0,6,0,0,8,46,5,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,4,0,0,2,5,0,0,0,0,5,40,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,2,0,0,1,3,1,6,0,0,9,45,1,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00148,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,0,0,0,6,57,4,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00139,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,882,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,48,4,0.00136,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,10,2,0,0,0,1,0,0,0,13,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,2,0,0,1,3,0,0,4,0,6,36,5,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.00131,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,6,0,0,1,2,1,8,0,0,15,50,6,0.00129,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.00125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,124,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,125,        iChronology = checkChronology(chronology);,0,0,0,1,2,0,0,0,0,3,42,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,127,    },2,0,0,0,1,0,0,4,0,6,1,8,0.00123,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00114,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,955,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,12,0,0,17,51,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,4,0,0,0,0,0,6,0,0,11,48,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,4,2,1,1,2,1,0,0,0,9,27,1,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1574,                return transitions[i];,0,0,0,1,2,1,0,0,0,4,22,4,0.00088,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,6,0,0,6,45,7,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,924,        int offset = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,35,5,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,925,        long instantLocal = instantUTC + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,68,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,930,        return instantLocal;,2,0,0,0,0,1,0,0,0,2,20,4,0.00078,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,295,        return iMillis;,14,2,0,0,0,1,16,2,0,37,15,1,0.00072,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,10,0,0,16,52,3,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,6,0,0,6,43,5,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,213,                leapYears--;,4,0,0,0,0,0,0,0,0,6,12,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0,0,0,3,7,0,0,0,0,10,54,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,167,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",10,1,0,2,4,0,6,0,0,18,78,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,10,0,0,10,84,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,0,0,0,6,88,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,0,0,0,6,89,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,0,0,0,4,59,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,160,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1533,            i = ~i;,8,0,0,0,0,0,0,0,0,11,7,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,103,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,0,0,0,7,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,197,                if (iOffset == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0,0,0,1,2,0,0,0,0,3,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,200,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1528,            long[] transitions = iTransitions;,6,1,0,1,2,0,0,0,0,7,34,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1529,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1530,            if (i >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1570,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1571,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1572,            i = (i >= 0) ? (i + 1) : ~i;,2,0,0,2,4,0,0,0,0,2,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1573,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,140,        int period = (int)(millis >> 32);,2,0,0,2,4,0,4,2,0,8,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,141,        Info[] cache = iInfoCache;,2,0,0,1,2,0,0,0,0,2,26,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,142,        int index = period & cInfoCacheMask;,8,1,0,0,0,0,4,0,0,14,36,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,143,        Info info = cache[index];,0,0,0,1,2,0,0,0,0,3,25,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,145,            info = createInfo(millis);,2,0,0,1,2,0,4,2,0,9,26,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,146,            cache[index] = info;,0,0,0,1,2,0,0,0,0,3,20,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,148,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,152,        long periodStart = millis & (0xffffffffL << 32);,10,2,0,1,2,0,0,2,0,14,48,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,153,"        Info info = new Info(iZone, periodStart);",12,1,0,1,2,0,16,2,0,33,41,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,155,        long end = periodStart | 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,156,        Info chain = info;,0,0,0,0,0,0,0,0,0,0,18,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,158,            long next = iZone.nextTransition(periodStart);,14,3,0,1,2,0,6,0,0,23,46,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,159,            if (next == periodStart || next > end) {,4,0,0,1,3,0,0,0,0,4,40,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,166,        return info;,10,1,0,0,0,1,0,0,0,11,12,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,180,"        Info(DateTimeZone zone, long periodStart) {",0,0,0,1,3,0,0,0,0,4,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,177,        private int iOffset = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,40,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,178,        private int iStandardOffset = Integer.MIN_VALUE;,10,0,0,0,0,0,14,2,0,27,48,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,181,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,182,            iZoneRef = zone;,6,0,0,0,0,0,0,0,0,7,16,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00056,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,8,2,0,13,45,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,257,    },2,1,0,0,1,0,0,0,0,4,1,6,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,252,        super();,4,1,1,1,2,0,12,2,0,23,8,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,8,2,0,12,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,75,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,448,        int year = getYear(millis);,4,0,0,1,2,0,0,0,0,5,27,6,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,449,"        int month = getMonthOfYear(millis, year);",0,0,0,1,2,0,0,0,0,3,41,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,0,0,0,4,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,6,0,0,6,36,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,107,        if ((base = iBase) != null) {,8,1,1,2,5,0,0,0,0,12,29,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0,0,0,1,2,0,0,0,0,3,53,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,0,0,0,10,76,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,12,7,0,4,8,0,4,0,0,23,52,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,93,        return,8,0,1,0,0,0,0,2,0,15,6,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",2,0,0,3,6,0,16,0,0,18,115,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,0,0,0,4,60,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,79,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",2,1,0,4,8,0,14,0,0,17,89,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",2,0,0,3,6,0,0,0,0,2,97,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,682,        return getMaxMonth();,0,0,0,1,2,1,0,0,0,4,21,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,237,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,232,        if ((value < lowerBound) || (value > upperBound)) {,14,5,0,3,7,0,0,0,0,19,51,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,233,        return MILLIS_PER_YEAR / 2;,8,5,0,0,0,1,0,0,0,13,27,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,241,        return (1970L * MILLIS_PER_YEAR) / 2;,2,2,0,1,2,1,0,0,0,4,37,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,120,        if (isLeapYear(year)) {,4,2,0,2,5,0,4,0,0,11,23,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,0,0,1,2,0,2,0,0,6,56,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,6,2,0,2,4,0,0,0,0,8,64,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,0,0,0,6,35,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,407,        long diff = instant - yearStart;,0,0,0,0,0,0,0,0,0,0,32,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,14,2,0,1,4,0,12,0,0,30,61,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,428,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,139,        if (isLeapYear(year)) {,4,0,0,2,5,0,0,0,0,5,23,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,221,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,202,        int leapYears = year / 100;,2,1,0,0,0,0,0,0,0,3,27,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,203,        if (year < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,90,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,0,0,5,10,1,4,2,0,12,69,1,0.00047,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,284,        return instant;,0,0,0,0,0,1,4,0,0,4,15,6,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,385,        long millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,34,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,386,"        millis += getTotalMillisByYearMonth(year, month);",4,0,0,1,2,0,0,2,0,7,49,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,74,4,0.00044,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,270,        return DateTimeUtils.getChronology(chronology);,0,0,0,1,2,1,6,0,0,6,47,5,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,51,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,52,    },4,0,0,0,1,0,0,0,0,5,1,6,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,360,        return getYearInfo(year).iFirstDayMillis;,14,1,0,1,2,1,18,2,0,37,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0,0,0,1,2,0,8,0,0,8,50,5,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,739,        if (info == null || info.iYear != year) {,2,0,0,1,3,0,4,0,0,7,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0,0,0,2,4,0,0,0,0,6,63,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,743,        return info;,0,0,0,0,0,1,4,0,0,6,12,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,8,0,0,16,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,771,            iYear = year;,0,0,0,0,0,0,0,0,0,0,13,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,772,            iFirstDayMillis = firstDayMillis;,0,0,0,0,0,0,0,0,0,0,33,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00043,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,61,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00042,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00042,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",6,1,0,2,4,0,8,2,0,18,76,1,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,108,"                cCache.put(zone, chrono);",4,1,0,1,2,0,0,0,0,5,25,5,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,96,        if (zone == null) {,8,1,0,1,3,0,4,2,0,15,19,1,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,104,        synchronized (cCache) {,4,0,0,1,3,0,0,2,0,6,23,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,112,        return chrono;,8,1,0,0,0,1,0,0,0,10,14,3,0.00037,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,255,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,17,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,1,0,2,0,6,70,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,17,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00035,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,123,        return iZone.hashCode();,0,0,0,1,2,1,4,0,0,4,24,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1237,        return 57 + getID().hashCode();,0,0,0,2,4,1,0,0,0,7,31,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,284,            super(field.getType());,0,0,0,2,4,0,0,0,0,6,23,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,285,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,288,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,289,            iTimeField = useTimeArithmetic(field);,0,0,0,1,2,0,0,0,0,3,38,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,290,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,291,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,298,            return iField.getUnitMillis();,0,0,0,1,2,1,0,0,0,4,30,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,82,"        super(base, zone);",0,0,0,1,2,0,0,0,0,3,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,56,        if (base == null) {,2,0,0,1,3,0,2,2,0,6,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,59,        base = base.withUTC();,2,0,0,1,2,0,4,0,0,7,22,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,60,        if (base == null) {,12,1,0,1,3,0,12,0,0,26,19,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,66,"        return new ZonedChronology(base, zone);",0,0,0,1,2,1,0,0,0,4,39,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,86,        return (DateTimeZone)getParam();,0,0,0,2,4,1,8,0,0,8,32,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,8,12,0,22,66,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,157,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,158,"        fields.centuries = convertField(fields.centuries, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,159,"        fields.years = convertField(fields.years, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,163,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,166,"        fields.hours = convertField(fields.hours, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,167,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,1,2,0,0,0,0,5,57,12,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,168,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,169,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,173,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,69,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,177,"        fields.era = convertField(fields.era, converted);",8,1,0,1,2,0,16,0,0,26,49,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0,0,0,1,2,0,0,0,0,3,63,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",2,0,0,1,2,0,6,0,0,8,65,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",10,0,0,1,2,0,4,0,0,15,77,3,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",10,0,0,1,2,0,4,0,0,15,69,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,1,0,1,2,0,4,0,0,9,67,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,197,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,200,        if (field == null || !field.isSupported()) {,2,1,0,2,5,0,6,0,0,9,44,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,201,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,203,        if (converted.containsKey(field)) {,0,0,0,2,5,0,0,0,0,7,35,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,204,            return (DurationField)converted.get(field);,4,0,0,2,4,2,14,2,0,22,43,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,207,"        converted.put(field, zonedField);",0,0,0,1,2,0,0,0,0,3,33,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,208,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,212,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,215,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,218,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,223,"        converted.put(field, zonedField);",0,0,0,1,2,0,0,0,0,3,33,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,224,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,389,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,390,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,393,            iField = field;,2,1,0,0,0,0,0,0,0,3,15,6,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,394,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,395,            iDurationField = durationField;,0,0,0,0,0,0,0,0,0,0,31,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,396,            iTimeField = useTimeArithmetic(durationField);,0,0,0,1,2,0,0,0,0,3,46,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,397,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,398,            iLeapDurationField = leapDurationField;,0,0,0,0,0,0,0,0,0,0,39,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,399,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,17,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00034,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,109,        return getWrappedField().getUnitMillis() * iScalar;,0,0,0,2,4,1,0,0,0,7,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,315,        return iParam;,4,1,0,0,0,1,0,0,0,5,14,7,0.00034,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,17,160,            return iUnitMillis;,0,0,0,0,0,1,0,0,0,1,19,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,252,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,111,        return iChronology.days();,2,0,0,1,2,1,8,2,0,12,26,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,328,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,17,220,        return iChronology.weeks();,0,0,0,1,2,1,0,0,0,4,27,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,142,        long millis = iUnitMillis;,4,0,0,0,0,0,0,0,0,4,26,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,17,101,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,4,0,0,4,48,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,148,        int hash = (int) (scalar ^ (scalar >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,149,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,151,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,17,155,        return (int) getUnitMillis();,0,0,0,2,4,1,0,0,0,7,29,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,17,49,        return DurationFieldType.millis();,0,0,0,1,2,1,4,0,0,4,34,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,17,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,17,94,        return iChronology.weeks();,0,0,0,1,2,1,0,0,0,4,27,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,17,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,17,139,        return iRangeField;,0,0,0,0,0,1,0,0,0,1,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.05556,0,0,-1
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0,0,0,1,2,0,0,0,0,3,61,4,0.03333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,63,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.01282,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,18,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.00833,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0,0,0,1,2,1,0,0,0,4,57,4,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,194,            cutoverInstant = gregorianCutover.toInstant();,0,0,0,1,2,0,10,0,0,10,46,7,0.00129,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,496,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,102,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,498,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,500,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,923,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",2,1,0,1,2,0,4,0,0,9,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,934,        },4,0,0,0,1,0,0,0,0,4,1,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,944,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",12,1,0,1,2,0,10,4,0,29,69,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,946,            if (durationField == null) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,2,0,0,0,0,0,6,0,0,9,31,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,950,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,601,        },2,0,0,0,1,0,2,2,0,7,1,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,610,"                     long cutoverMillis, boolean convertByWeekyear) {",0,0,0,0,2,0,0,0,0,2,48,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,611,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,8,0,0,0,0,0,0,2,0,11,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,614,            iCutover = cutoverMillis;,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,6,0,0,14,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,4,0,0,10,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,621,            if (rangeField == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,622,                rangeField = julianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,49,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,625,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,0,0,0,3,126,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,83,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,4,0,0,1,2,0,6,0,0,12,35,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,191,        if (gregorianCutover == null) {,0,0,0,1,3,0,10,0,0,10,31,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,2,1,1,2,0,10,4,0,22,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,202,"            cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,10,1,0,1,3,0,6,2,0,20,31,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,215,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,228,        chronos.add(chrono);,0,0,0,1,2,0,0,0,0,3,20,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,230,        return chrono;,10,5,0,0,0,1,4,0,0,20,14,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,453,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,12,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,455,        JulianChronology julian = (JulianChronology)params[0];,0,0,0,2,4,0,0,0,0,6,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,456,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,0,0,0,6,63,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,457,        Instant cutoverInstant = (Instant)params[2];,0,0,0,2,4,0,0,0,0,6,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0,0,0,1,2,0,14,0,0,14,44,8,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,460,        iJulianChronology = julian;,0,0,0,0,0,0,0,0,0,0,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,8,1,0,0,0,0,8,0,0,19,33,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,462,        iCutoverInstant = cutoverInstant;,0,0,0,0,0,0,0,0,0,0,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,464,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,468,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,0,0,3,7,0,0,0,0,10,82,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,473,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,10,1,0,1,2,0,0,2,0,13,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,479,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,0,0,0,3,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,485,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,0,0,3,7,0,0,0,0,10,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,505,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,514,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,61,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,515,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,520,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,521,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,529,            fields.year = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,40,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,531,            fields.years = fields.year.getDurationField();,0,0,0,1,2,0,0,0,0,3,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,532,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,45,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,534,            fields.yearOfCentury = new ImpreciseCutoverField(,8,4,0,0,1,0,0,0,0,12,49,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,537,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,539,            fields.centuries = fields.centuryOfEra.getDurationField();,0,0,0,1,2,0,0,0,0,3,58,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,541,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,4,0,0,4,47,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,543,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,545,            fields.weekyear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,547,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,53,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,549,            fields.weekyears = fields.weekyear.getDurationField();,2,1,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,555,            CutoverField cf = new CutoverField,0,0,0,0,0,0,0,0,0,0,34,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,557,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,558,            fields.dayOfMonth = cf;,6,0,0,0,0,0,8,0,0,15,23,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,560,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,563,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1071,"            super(durationField, durationField.getType());",0,0,0,2,4,0,0,0,0,6,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1072,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1073,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,129,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,133,        return instant;,8,2,0,0,0,1,2,0,0,12,15,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,72,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,80,        int value = super.get(millis);,0,0,0,1,2,0,0,0,0,3,30,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,81,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,84,        return value;,4,0,0,0,0,1,0,0,0,5,13,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,219,        int relativeYear = year - 1968;,0,0,0,0,0,0,4,0,0,4,31,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,221,        if (relativeYear <= 0) {,24,11,0,1,3,0,0,0,0,37,24,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,2,0,2,4,0,0,0,0,7,89,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,1,2,1,0,0,0,4,64,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,253,        return MILLIS_PER_YEAR / 2;,4,1,0,0,0,1,0,0,0,5,27,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,133,        int thisWeekyear = get( instant );,4,1,0,1,2,0,2,4,0,11,34,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,134,        if ( thisWeekyear == year ) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,140,        int thisDow = iChronology.getDayOfWeek(instant);,8,0,0,1,2,0,0,2,0,11,48,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,0,1,2,0,0,0,0,3,65,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0,0,0,1,2,0,0,0,0,3,53,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,155,        if ( setToWeek > maxOutWeeks ) {,8,0,0,1,3,0,0,0,0,9,32,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,162,        long workInstant = instant; // Get a copy,16,2,0,0,0,0,14,6,0,40,41,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,173,        int workWoyYear = get( workInstant );,0,0,0,1,2,0,0,0,0,3,37,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,179,        if ( workWoyYear < year ) {,8,1,0,1,3,0,4,0,0,14,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,10,1,0,1,2,0,10,2,0,23,64,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0,0,0,1,2,0,0,0,0,3,56,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",4,1,0,2,4,0,10,0,0,16,66,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.00103,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,96,        return iField.get(instant);,0,0,0,1,2,1,0,0,0,4,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,60,        return iChronology.getWeekyear(instant);,2,0,0,1,2,2,0,0,0,3,40,2,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,493,        int year = getYear(instant);,0,0,0,1,2,0,0,0,0,3,28,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,494,"        int week = getWeekOfWeekyear(instant, year);",2,1,0,1,2,0,6,0,0,9,44,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,495,        if (week == 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,185,        return iMinDaysInFirstWeek;,0,0,0,0,0,1,0,0,0,1,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,344,            return jan1millis + (8 - jan1dayOfWeek),0,0,0,1,2,1,0,0,0,4,39,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0,0,0,2,4,0,0,0,0,6,70,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,539,            if (daysSince19700101 < -3) {,10,0,0,1,3,0,0,2,0,14,29,6,0.00103,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,163,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0,0,0,2,4,0,0,0,0,6,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,49,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,239,        return instant;,2,1,0,0,0,1,0,0,0,3,15,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),10,3,0,1,2,1,0,0,0,13,71,3,0.00103,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,792,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,112,        return DateTimeConstants.SUNDAY;,0,0,0,0,0,1,0,0,0,1,32,4,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,272,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,2,4,1,8,0,0,8,52,5,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,269,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,339,        long jan1millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,38,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,4,0,0,1,2,0,0,0,0,5,45,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0,0,0,2,5,0,0,0,0,7,48,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,0,0,0,0,3,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,521,        if (instant >= firstWeekMillis2) {,4,1,0,1,3,0,0,0,0,5,34,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,0,0,0,1,63,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,8,0,0,8,28,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,96,            return instant - instant % iUnitMillis - iUnitMillis;,2,0,0,0,0,1,0,0,0,2,53,4,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,18,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0,0,0,5,10,1,0,0,0,16,71,4,0.00101,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,0.00101,0,0,-1
defect4j,time,org/joda/time/Instant,18,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,119,        iMillis = instant;,0,0,0,0,0,0,0,0,0,0,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,120,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,162,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,45,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,0,0,0,4,28,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,129,        synchronized (cCache) {,4,0,0,1,3,0,4,0,0,9,23,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,130,            JulianChronology[] chronos = cCache.get(zone);,0,0,0,2,4,0,0,0,0,6,46,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,131,            if (chronos == null) {,6,1,0,1,3,0,0,0,0,8,22,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,132,                chronos = new JulianChronology[7];,0,0,0,1,2,0,0,0,0,3,34,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,136,                chrono = chronos[minDaysInFirstWeek - 1];,0,0,0,1,2,0,0,0,0,3,41,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,140,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,141,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,149,                chronos[minDaysInFirstWeek - 1] = chrono;,6,2,1,1,2,0,0,0,0,11,41,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,152,        return chrono;,6,0,0,0,0,1,10,2,0,18,14,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,245,        return MAX_YEAR;,22,11,0,0,0,1,4,0,0,37,16,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,249,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,257,        return MILLIS_PER_MONTH;,4,0,0,0,0,1,6,2,0,13,24,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,265,        if (getBase() == null) {,2,0,0,2,5,0,0,0,0,2,24,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,266,            super.assemble(fields);,4,0,1,1,2,0,0,4,0,10,23,1,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,268,"            fields.year = new SkipDateTimeField(this, fields.year);",10,0,0,1,2,0,6,2,0,19,55,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0,0,0,1,2,0,0,0,0,3,63,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,224,        return iChronology.getMinYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,196,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,65,        super(field);,22,1,0,1,2,0,12,0,0,37,13,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,66,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,67,        int min = super.getMinimumValue();,6,0,0,1,2,0,4,0,0,10,34,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,68,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,69,            iMinValue = min - 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,75,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,76,    },2,0,1,0,1,0,0,2,0,7,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,212,        return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,52,"        this(field, null);",2,0,0,1,2,0,0,0,0,2,18,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,62,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,63,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,66,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,67,        iType = (type == null ? field.getType() : type);,0,0,0,2,4,0,0,0,0,6,48,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,68,    },2,0,0,0,1,0,6,0,0,9,1,9,0.00087,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,92,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,115,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.00084,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,0,0,0,6,78,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,0,0,0,6,84,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,10,0,0,10,88,5,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,10,0,0,10,89,5,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,213,                leapYears--;,0,0,0,0,0,0,0,0,0,0,12,4,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,0,0,0,4,43,4,0.00078,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,6,0,0,6,41,5,0.00075,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00075,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,0,8,0,0,8,60,5,0.00071,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,252,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",10,0,0,0,1,0,6,2,0,20,75,1,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,48,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,177,        int millisOfDay = getMillisOfDay(instant);,2,0,0,1,2,0,4,0,0,6,42,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,551,        if (instant >= 0) {,6,2,0,1,3,0,0,0,0,8,19,1,0.0007,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,219,    },4,0,0,0,1,0,0,0,0,5,1,5,0.00069,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,214,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,3,6,0,0,0,0,9,115,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,8,0,0,8,60,5,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,4,8,0,0,0,0,12,89,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",4,0,0,3,6,0,0,0,0,5,97,12,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,682,        return getMaxMonth();,0,0,0,1,2,1,2,0,0,2,21,5,0.00068,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,237,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00068,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.00066,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,18,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,2,0,0,2,50,7,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,448,        int year = getYear(millis);,0,0,0,1,2,0,0,0,0,3,27,4,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,449,"        int month = getMonthOfYear(millis, year);",8,1,0,1,2,0,6,0,0,15,41,3,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,8,0,0,8,42,5,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,120,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,54,        return iChronology.getYear(instant);,2,0,0,1,2,1,6,0,0,8,36,1,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,468,        long dateMillis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,38,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,0,0,0,10,76,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,221,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,93,        return,10,1,0,0,0,0,2,0,0,14,6,3,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,233,        return MILLIS_PER_YEAR / 2;,4,2,0,0,0,1,0,0,0,6,27,3,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,241,        return (1970L * MILLIS_PER_YEAR) / 2;,2,2,0,1,2,1,0,0,0,4,37,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,139,        if (isLeapYear(year)) {,6,0,0,2,5,0,4,4,0,14,23,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,1,0,1,2,0,2,0,0,7,56,3,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,0,0,0,6,35,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,406,        long yearStart = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,37,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0,0,0,1,4,0,0,0,0,5,61,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,428,        return year;,12,0,0,0,0,1,4,4,0,22,12,1,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,202,        int leapYears = year / 100;,6,1,0,0,0,0,0,0,0,7,27,1,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,7,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,10,4,0,2,4,1,0,0,0,14,90,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,8,0,5,10,1,0,0,0,14,69,4,0.00062,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,8,0,0,8,74,5,0.00061,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,270,        return DateTimeUtils.getChronology(chronology);,0,0,0,1,2,1,6,0,0,6,47,5,0.0006,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,18,51,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.0006,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,18,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,360,        return getYearInfo(year).iFirstDayMillis;,0,0,0,1,2,1,0,0,0,4,41,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,8,1,1,1,2,0,2,4,0,17,50,3,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,739,        if (info == null || info.iYear != year) {,4,4,0,1,3,0,0,0,0,9,41,5,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,743,        return info;,0,0,0,0,0,1,0,0,0,1,12,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,771,            iYear = year;,4,0,0,0,0,0,0,0,0,5,13,5,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,772,            iFirstDayMillis = firstDayMillis;,0,0,0,0,0,0,0,0,0,0,33,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00059,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,18,61,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00058,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,18,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00058,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,255,        return chrono;,4,0,0,0,0,1,0,0,0,4,14,4,0.00053,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,82,        checkPermission();,0,0,0,1,2,0,2,0,0,2,18,5,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,4,0,0,1,2,0,0,2,0,7,55,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,415,            iMillis = fixedMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,416,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,68,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0,0,0,0,0,0,0,0,0,0,41,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,130,        if (sm != null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,6,2,0,10,49,7,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,6,0,0,6,33,8,0.008,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,10,0,0,10,26,5,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00341,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,954,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1483,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1490,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1691,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1909,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1913,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1923,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1358,        if (ymd == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,4,1,0,1,2,0,8,0,0,15,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,4,1,0,3,6,0,12,2,0,20,29,3,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,10,1,0,5,10,0,4,0,0,17,55,1,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,78,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00244,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1180,            buf.append(iValue);,0,0,0,1,2,0,6,0,0,6,19,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,2,0,0,1,2,1,12,2,0,17,32,1,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2614,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,8,0,0,1,3,0,6,0,0,17,23,3,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,6,0,0,0,0,0,14,0,0,20,26,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,10,1,0,1,3,0,4,2,0,18,31,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0,0,0,0,1,0,10,0,0,10,1,7,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,4,0,0,1,2,0,10,2,0,16,50,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,18,0,0,19,78,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,582,"        printTo(buf, instant);",0,0,0,1,2,0,6,0,0,6,22,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,2,0,0,1,2,1,8,0,0,10,22,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,1,0,1,2,0,6,0,0,13,54,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,6,0,0,6,64,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,16,0,0,17,29,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,83,                digits = 4;,2,0,0,0,0,0,6,0,0,9,11,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,6,2,0,10,43,7,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,16,4,0,43,65,1,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,8,0,0,14,79,3,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,8,2,0,1,3,0,4,2,0,18,19,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,12,1,0,1,3,0,12,2,0,30,31,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.00233,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,28,6,0,1,3,0,10,0,0,46,18,1,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,8,2,0,15,36,3,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1658,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,6,0,0,0,0,1,18,2,0,27,30,1,0.00199,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1703,        if (ze == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1708,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,2,0,0,0,0,0,0,0,0,2,22,7,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,2,0,0,3,6,0,4,0,0,7,32,11,0.00187,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,656,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,10,3,0,1,3,0,12,0,0,25,22,1,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,660,        return printer;,0,0,0,0,0,1,0,0,0,1,15,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,10,2,0,1,3,0,0,0,0,12,24,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,535,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,0,0,0,2,38,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",2,0,0,2,4,1,10,0,0,12,62,6,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,77,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,6,1,0,1,2,0,0,0,0,7,8,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,4,0,1,1,3,0,6,0,0,15,21,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0,0,0,0,0,0,0,0,0,1,23,7,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1864,            iMaxDigits = maxDigits;,0,0,0,0,0,0,0,0,0,0,23,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1865,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1868,            return iMaxDigits;,0,0,0,0,0,1,0,0,0,1,18,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,4,1,0,0,0,1,0,0,0,5,18,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,18,0,0,1,3,0,12,0,0,31,22,1,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0,0,0,2,5,0,0,0,0,7,74,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2106,            return est;,4,1,0,0,0,1,0,0,0,5,11,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2236,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.00182,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00178,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00174,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2083,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2085,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,10,0,0,12,43,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2086,            iShowSeparators = showSeparators;,0,0,0,0,0,0,0,0,0,0,33,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2087,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2094,            iMinFields = minFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2095,            iMaxFields = maxFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2096,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00173,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,164,        if (instant == null) {,12,7,0,1,3,0,0,0,0,21,22,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1681,        if (sme == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1682,            sme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1687,        return sme;,6,0,0,0,0,1,0,0,0,7,11,1,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1672,            mhe = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1677,        return mhe;,0,0,0,0,0,1,0,0,0,1,11,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1662,        if (hde == null) {,6,1,0,1,3,0,0,0,0,9,18,3,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1663,            hde = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,0,0,5,36,4,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00168,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,149,        return instant.getMillis();,8,1,0,1,2,1,4,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.00162,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,50,        if (value < 0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,62,        if (value < 10) {,4,1,0,1,3,0,0,2,0,8,17,3,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,92,    },12,1,0,0,1,0,4,2,0,21,1,3,0.00159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1604,        if (dme == null) {,0,0,0,1,3,0,6,0,0,6,18,5,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1605,            dme = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,11,36,3,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,140,        int offset = zone.getOffsetFromLocal(instant);,8,0,0,1,2,0,4,0,0,13,46,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,142,        if (offset != zone.getOffset(instant)) {,2,1,0,2,5,0,6,0,0,9,40,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,188,                if (isLeapYear(year)) {,2,1,0,2,5,0,8,0,0,12,23,4,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1594,        if (mye == null) {,10,6,0,1,3,0,4,0,0,21,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1600,        return mye;,0,0,0,0,0,1,0,0,0,1,11,4,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,170,            periodStart = next;,12,1,0,0,0,0,0,4,0,20,19,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",8,1,0,2,4,0,10,0,0,21,57,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",8,0,0,2,4,1,12,0,0,21,69,3,0.00147,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,8,0,0,8,35,5,0.00146,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.00143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,935,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,6,0,0,11,45,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,936,        if (iChrono != null) {,2,0,0,1,3,0,2,0,0,4,22,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,942,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",6,4,0,2,4,1,4,0,0,14,68,1,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,8,0,0,8,29,5,0.00139,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,910,        return offsetAdjusted;,0,0,0,0,0,1,0,0,0,1,22,4,0.00138,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00137,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,882,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,48,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,885,        final int offsetAdjusted = getOffset(instantAdjusted);,6,0,0,1,2,1,4,0,0,12,54,3,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,887,        if (offsetLocal != offsetAdjusted) {,4,0,0,1,3,0,6,2,0,13,36,3,0.00136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.00136,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00133,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00132,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,12,2,0,23,33,1,0.00132,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,4,0,0,17,43,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0,0,0,3,6,0,0,0,0,9,60,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,18,0,0,18,58,5,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2736,            if (array != null) {,10,1,0,1,3,0,2,0,0,14,20,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2738,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2741,        },2,0,0,0,1,0,4,2,0,9,1,6,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,448,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,454,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,6,0,0,6,38,5,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,551,            } else if (iMode == 's') {,8,1,0,1,4,0,14,2,0,28,26,1,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,554,                offset = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,4,0,0,6,46,10,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,726,                        daysToAdd -= 7;,0,0,0,0,0,0,0,0,0,0,15,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,209,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,212,"        return append0(formatter.getPrinter(), formatter.getParser());",4,3,0,3,6,1,10,0,0,17,62,1,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,153,        return iPrinter;,2,1,0,0,0,1,0,0,0,3,16,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,345,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,346,        iElementPairs.add(printer);,2,1,0,1,2,0,0,0,0,3,27,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,347,        iElementPairs.add(parser);,0,0,0,1,2,0,0,0,0,3,26,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00123,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1543,            return iTailZone.getOffset(instant);,2,0,0,1,2,1,8,0,0,10,36,1,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1141,            return true;,8,0,0,0,0,1,4,0,0,14,12,3,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1131,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1104,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1105,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1107,                if (printer != null) {,2,0,0,1,3,1,4,0,0,7,22,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1108,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1109,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1304,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,4,0,0,7,46,16,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1306,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1311,                start = startRecurrence.next,2,0,0,0,0,0,4,0,0,7,28,7,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1319,            },2,0,0,0,1,0,4,0,0,7,1,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1322,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1330,            },4,0,0,0,1,0,0,0,0,5,1,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1332,            return (start > end) ? startRecurrence : endRecurrence;,16,1,0,1,2,1,4,0,0,22,55,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,114,            yearToUse = thisYear + (monthToUse / iMax);,8,2,0,1,2,0,0,0,0,11,43,6,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,115,            monthToUse = (monthToUse % iMax) + 1;,0,0,0,1,2,0,0,0,0,3,37,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,8,0,0,11,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",4,1,1,2,4,0,0,0,0,7,52,8,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,578,"                    next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,6,0,0,9,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,103,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,62,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,112,        int monthToUse = thisMonth - 1 + months;,0,0,0,0,0,0,0,0,0,0,40,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,113,        if (monthToUse >= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0,0,0,1,2,0,0,0,0,3,67,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,138,        if (dayToUse > maxDay) {,4,1,0,1,3,0,0,0,0,5,24,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,144,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,146,        return datePart + timePart;,4,1,0,0,0,1,0,0,0,5,27,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,92,        if (months == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00118,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1579,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1580,            if (instant < end) {,4,2,0,1,3,0,8,0,0,14,20,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1583,            return iTailZone.nextTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1199,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1200,            Recurrence startRecurrence = iStartRecurrence;,2,1,0,0,0,0,8,0,0,11,46,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1201,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1206,                start = startRecurrence.next,0,0,0,0,0,0,0,0,0,0,28,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1208,                if (instant > 0 && start < 0) {,2,0,0,1,3,0,12,0,0,15,31,8,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1218,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1221,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1223,                if (instant > 0 && end < 0) {,4,3,0,1,3,0,0,0,0,7,29,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1233,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1235,            return (start > end) ? end : start;,12,2,1,1,2,1,0,0,0,17,35,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,573,"                next = setDayOfWeek(chrono, next);",4,0,0,1,2,1,6,0,0,12,34,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,4,0,0,2,4,0,8,0,0,12,48,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,719,            if (daysToAdd != 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,549,            if (iMode == 'w') {,10,3,0,1,3,0,0,0,0,15,19,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,558,            instant += offset;,6,1,0,0,0,0,4,0,0,12,18,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,563,"            next = chrono.millisOfDay().set(next, 0);",2,0,0,2,4,0,8,2,0,12,41,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,1,0,2,4,0,4,0,0,7,52,3,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,567,            if (iDayOfWeek == 0) {,2,1,0,1,3,0,0,0,0,3,22,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,583,            return next - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,682,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,683,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,706,            if (iDayOfMonth >= 0) {,4,1,0,1,3,0,4,0,0,9,23,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,57,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,776,            return iSaveMillis;,2,1,0,0,0,1,8,0,0,11,19,3,0.00116,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,61,        int thisYear = get(instant);,2,0,0,1,2,0,0,0,0,2,28,4,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,63,"        return set(instant, newYear);",0,0,0,1,2,1,6,0,0,6,29,5,0.00112,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,19,253,"        return getDurationField().add(instant, value);",0,0,0,2,4,1,0,0,0,7,46,4,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,58,        if (years == 0) {,8,2,0,1,3,0,0,4,0,14,17,1,0.00112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,396,        if (fieldType == null) {,6,2,0,1,3,0,0,0,0,8,24,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,402,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,405,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0011,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,1,0,0,1,1,0,0,0,5,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,8,1,0,0,0,0,0,0,0,10,63,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0,0,0,3,6,1,0,0,0,10,47,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1174,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1198,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,359,        return append0(new CharacterLiteral(c));,4,0,0,2,4,1,0,0,0,4,40,6,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1169,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1170,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1171,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2580,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2581,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2582,                int printEst = 0;,2,0,0,0,0,0,6,0,0,8,17,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2583,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,0,2,4,0,0,0,0,2,63,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2585,                    printEst += printer.estimatePrintedLength();,6,0,0,1,2,0,4,0,0,12,44,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2586,                    iPrinters[i] = printer;,10,0,1,1,2,0,4,0,0,20,23,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2588,                iPrintedLengthEstimate = printEst;,6,0,0,0,0,0,4,0,0,11,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2595,                int size = parserList.size();,2,0,0,1,2,0,4,0,0,6,29,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2596,                iParsers = new DateTimeParser[size];,4,0,0,1,2,0,0,0,0,5,36,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2597,                int parseEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2598,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,4,0,0,14,28,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2599,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2600,                    parseEst += parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,42,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2601,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2603,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2715,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2716,                if (element instanceof DateTimePrinter) {,4,1,0,1,3,0,0,2,0,7,41,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2717,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2720,                        printerList.add(element);,8,0,0,1,2,0,0,0,0,10,25,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2724,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2725,                if (element instanceof DateTimeParser) {,2,0,0,1,3,0,0,0,0,2,40,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2726,                    if (element instanceof Composite) {,4,0,0,1,3,0,0,2,0,6,35,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2729,                        parserList.add(element);,0,0,0,1,2,0,0,0,0,3,24,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1430,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1426,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,4,0,0,7,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1427,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1281,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1282,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1283,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1285,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1129,                return ((Composite)f).isPrinter();,2,0,0,3,6,1,2,2,0,6,34,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1139,                return ((Composite)f).isParser();,0,0,0,3,6,1,0,0,0,10,33,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2701,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2705,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1117,                f = new Composite(iElementPairs);,4,0,0,1,2,0,0,2,0,7,33,8,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2569,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2571,            List<Object> printerList = new ArrayList<Object>();,4,0,0,1,2,0,0,8,0,12,51,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2572,            List<Object> parserList = new ArrayList<Object>();,6,1,0,1,2,0,0,8,0,15,50,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2574,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,8,0,0,8,49,6,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2576,            if (printerList.size() <= 0) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2591,            if (parserList.size() <= 0) {,4,2,0,2,5,0,4,0,0,10,29,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2605,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2713,            int size = elementPairs.size();,6,1,1,1,2,0,0,2,0,12,31,5,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2714,            for (int i=0; i<size; i+=2) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2733,        },0,0,0,0,1,0,8,0,0,8,1,5,0.00105,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,19,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,1,2,1,0,0,0,4,42,4,0.00104,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,105,        DateTimePrinter printer = null;,2,0,0,0,0,0,0,2,0,4,31,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,106,        if (isPrinter(f)) {,0,0,0,2,5,0,4,0,0,4,19,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,0,2,0,7,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,109,        DateTimeParser parser = null;,4,0,0,0,0,2,0,6,0,12,29,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,110,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,111,            parser = (DateTimeParser) f;,12,1,0,1,2,1,4,4,0,23,28,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,113,        if (printer != null || parser != null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,114,"            return new DateTimeFormatter(printer, parser);",4,0,0,1,2,1,0,2,0,6,46,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,107,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,108,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,109,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,110,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,111,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,112,        iChrono = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,113,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,114,        iPivotYear = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,115,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,338,        iElementPairs.add(element);,0,0,0,1,2,0,8,0,0,8,27,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,339,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,340,        return this;,2,0,0,0,0,1,0,0,0,2,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1137,        if (f instanceof DateTimeParser) {,10,1,0,1,3,0,2,2,0,15,34,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,4,0,0,7,29,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1100,        Object f = iFormatter;,0,0,0,0,0,0,0,0,0,0,22,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1102,        if (f == null) {,12,2,0,1,3,0,0,0,0,16,16,3,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1120,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1123,        return f;,4,0,0,0,0,1,0,0,0,4,9,5,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,83,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,85,    },2,2,0,0,1,0,4,0,0,9,1,4,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,70,        return sum;,2,1,0,0,0,1,0,0,0,3,11,6,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,64,        int sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,104,        long addition = value * iUnitMillis;  // safe,6,1,0,0,0,0,0,0,0,7,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,105,"        return FieldUtils.safeAdd(instant, addition);",2,0,0,1,2,1,16,0,0,18,45,3,0.00096,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,82,        long sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,23,5,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,10,5,0,3,7,0,6,0,0,21,45,3,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,88,        return sum;,6,1,0,0,0,1,0,0,0,7,11,3,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,480,            chronology = DateTimeUtils.getChronology(chronology);,6,1,0,1,2,0,6,0,0,14,53,1,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00084,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1540,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.0008,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1576,            if (iTailZone == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00078,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,295,        return iMillis;,0,0,0,0,0,1,0,0,0,1,15,4,0.00072,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,19,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,2,0,0,8,52,8,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,6,0,0,6,43,5,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,19,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,19,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,6,0,0,6,41,5,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,2,1,0,2,4,1,4,0,0,7,54,6,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,1,2,1,8,0,0,8,59,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,1,2,0,10,2,0,13,53,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,294,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",4,0,0,1,2,0,14,2,0,20,59,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",10,0,0,1,2,0,12,6,0,28,61,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,298,        if (thisDom > maxDom) {,4,1,0,1,3,0,0,0,0,5,23,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,458,"        int month = getMonthOfYear(millis, year);",12,0,0,1,2,0,12,2,0,27,41,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,459,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,8,0,0,8,42,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,84,"        return iChronology.setYear(instant, year);",0,0,0,1,2,1,8,0,0,8,42,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,10,0,0,10,78,5,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,0,0,0,6,84,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",2,0,0,2,4,0,10,0,0,12,88,3,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,10,0,0,10,89,5,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.00056,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,0,0,2,0,2,60,6,0.00056,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,168,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00056,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,19,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,3,6,0,10,0,0,10,80,5,0.00056,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,19,112,        return instant + (value - get(instant)) * iUnitMillis;,0,0,0,2,4,1,0,0,0,7,54,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,48,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,177,        int millisOfDay = getMillisOfDay(instant);,6,0,0,1,2,0,4,2,0,13,42,3,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,196,        instant += millisOfDay;,0,0,0,0,0,0,0,0,0,0,23,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1533,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,205,                if (iOffset == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,2,0,0,1,2,0,6,0,0,9,43,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,111,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,0,0,0,7,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1528,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1529,"            int i = Arrays.binarySearch(transitions, instant);",4,0,0,1,2,0,0,0,0,4,50,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1530,            if (i >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1570,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1571,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1572,            i = (i >= 0) ? (i + 1) : ~i;,8,2,0,2,4,0,0,0,0,12,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,0,0,0,7,25,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,6,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0,0,0,1,2,0,0,0,0,3,66,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/DateTime,20,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,                builder.appendMinuteOfHour(tokenLen);,0,0,0,1,2,0,0,0,0,3,37,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,        int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,        if (tokenLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,            char c = token.charAt(0);,0,0,0,1,2,0,4,0,0,4,25,7,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,            switch (c) {,0,0,0,1,3,0,6,0,0,6,12,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,                    int maxDigits = 9;,2,0,0,0,0,0,0,0,0,2,18,10,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,                    if (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,                    switch (c) {,4,0,0,1,3,0,10,0,0,14,12,3,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,357,        int sampleLen = errorPos + 32;,0,0,0,0,0,0,0,0,0,0,30,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,359,        if (text.length() <= sampleLen + 3) {,4,2,0,2,5,0,8,0,0,14,37,3,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,360,            sampleText = text;,0,0,0,0,0,0,0,0,0,0,18,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,365,        if (errorPos <= 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,                if (tokenLen == 2) {,6,1,0,1,3,0,0,2,0,9,20,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,        Chronology chrono = selectChronology(null);,2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,847,        if (newPos >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,                builder.appendDayOfMonth(tokenLen);,2,0,0,1,2,0,14,0,0,17,35,1,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.005,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.00444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,                    i--;,2,0,0,0,0,0,4,0,0,7,4,3,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,                String sub = token.substring(1);,2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,            buf.append('\'');,0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,600,            for (; i < length; i++) {,0,0,0,1,3,0,8,0,0,8,25,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,                c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,616,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,12,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,                    i++;,2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,593,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,                char peek = pattern.charAt(i + 1);,8,1,0,1,2,0,8,0,0,17,34,3,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,        int length = pattern.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,        int[] indexRef = new int[1];,0,0,1,2,4,0,0,0,0,3,28,11,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,16,0,0,19,45,3,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,406,            i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,414,            switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,574,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,        int i = indexRef[0];,2,0,0,1,2,0,6,0,0,9,20,8,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,        int length = pattern.length();,6,0,0,1,2,0,4,0,0,11,30,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,        char c = pattern.charAt(i);,6,1,0,1,2,0,6,0,0,14,27,7,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,10,8,0,1,3,0,4,0,0,26,51,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",6,0,0,1,2,3,0,14,0,25,112,1,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00368,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,            return position + 1;,2,0,0,0,0,1,0,0,0,2,20,5,0.00362,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1206,            char a = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1207,            char b = iValue;,0,0,0,0,0,0,0,0,0,0,16,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,            if (a != b) {,12,2,0,1,3,0,0,4,0,19,13,1,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1345,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0,0,0,4,8,0,0,0,0,12,63,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,            if (position >= text.length()) {,2,1,0,2,5,0,8,0,0,11,32,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1321,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1322,            },10,1,0,0,1,0,0,4,0,15,1,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1329,            if (length >= 9) {,6,0,1,1,3,0,6,2,0,19,18,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1334,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1335,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1339,                    value = text.charAt(i++) - '0';,2,0,0,1,2,0,6,0,0,9,31,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1342,                },10,0,0,0,1,0,8,4,0,22,1,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1343,                position += length;,8,0,0,0,0,0,0,2,0,11,19,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1344,                while (i < position) {,10,3,0,1,3,0,0,0,0,14,22,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1347,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1352,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1353,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",2,0,0,3,6,0,8,2,0,12,62,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,261,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,262,        int savedFieldsCount = iSavedFieldsCount;,2,0,1,0,0,0,6,0,0,13,41,8,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,273,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,274,        savedFields[savedFieldsCount] = field;,0,0,0,1,2,0,0,0,0,3,38,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,275,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,468,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,469,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,471,            iLocale = null;,6,0,0,0,0,0,0,0,0,8,15,1,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1318,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.00317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,65,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1294,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1295,            int length = 0;,10,4,0,0,0,0,0,0,0,14,15,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1296,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1297,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0,0,0,2,5,0,0,0,0,7,55,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1324,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2682,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2683,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2687,            int len = elements.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2688,            for (int i=0; i<len && position >= 0; i++) {,0,0,0,1,3,0,0,0,0,4,44,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2689,"                position = elements[i].parseInto(bucket, text, position);",0,0,0,2,4,0,0,0,0,6,57,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2691,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,119,        super();,2,0,1,1,2,0,0,0,0,6,8,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,72,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,120,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,0,0,0,5,45,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,121,        iMillis = instantLocal;,4,1,0,0,0,0,0,0,0,6,23,6,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,122,        iZone = chrono.getZone();,0,0,0,1,2,0,4,0,0,4,25,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,123,        iChrono = chrono.withUTC();,0,0,0,1,2,0,0,0,0,3,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,4,0,0,12,58,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,125,        iPivotYear = pivotYear;,14,2,0,0,0,0,2,0,0,20,23,3,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,920,        DateTimeParser parser = iParser;,4,0,0,0,0,0,0,2,0,6,32,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,921,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,924,        return parser;,0,0,0,0,0,1,0,0,0,1,14,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2615,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.00254,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,0,0,0,3,29,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,1,0,5,10,0,0,0,0,11,55,1,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,78,        } else {,8,2,0,0,2,0,0,0,0,11,8,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1180,            buf.append(iValue);,2,0,0,1,2,0,10,0,0,13,19,4,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1181,        },2,1,0,0,1,0,4,0,0,7,1,1,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2608,            DateTimePrinter[] elements = iPrinters;,10,1,0,1,2,0,0,2,0,14,39,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2609,            if (elements == null) {,8,2,0,1,3,0,10,0,0,21,23,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2613,            if (locale == null) {,2,2,0,1,3,0,8,0,0,12,21,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2618,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2619,            for (int i = 0; i < len; i++) {,10,2,0,1,3,0,0,0,0,13,31,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2620,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2622,        },12,2,0,0,1,0,0,2,0,16,1,2,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1437,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,1,0,2,4,0,8,0,0,12,76,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,14,0,0,3,6,0,24,4,0,44,78,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,582,"        printTo(buf, instant);",14,6,0,1,2,0,10,0,0,30,22,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,583,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,6,0,0,13,54,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,460,"        printTo(buf, millis, chrono);",6,0,0,1,2,0,8,0,0,15,29,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,83,                digits = 4;,0,0,0,0,0,0,0,0,0,0,11,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,617,        DateTimePrinter printer = requirePrinter();,6,1,0,1,2,0,4,2,0,13,43,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,623,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,8,0,0,18,40,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,65,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,0,0,0,6,79,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,80,            if (value < 1000) {,8,1,0,1,3,0,6,0,0,17,19,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.00236,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1541,                return iWallOffsets[i - 1];,2,1,1,1,2,1,0,0,0,5,27,8,0.00217,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2602,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.002,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00194,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,66,            buf.append((char)(value + '0'));,8,1,0,3,6,2,10,6,0,28,32,1,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,67,        } else if (value < 100) {,8,1,0,1,4,0,0,0,0,10,25,1,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,168,        if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,656,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,657,        if (printer == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,660,        return printer;,2,0,0,0,0,1,0,0,0,2,15,5,0.00186,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,164,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0018,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.00179,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00172,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,140,        int offset = zone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,141,        instant -= offset;,0,0,0,0,0,0,6,0,0,6,18,5,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,142,        if (offset != zone.getOffset(instant)) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00164,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00164,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00164,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,0,0,0,5,29,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,910,        return offsetAdjusted;,6,1,0,0,0,1,0,0,0,7,22,3,0.00154,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,882,        final int offsetLocal = getOffset(instantLocal);,4,1,0,1,2,1,4,0,0,10,48,3,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,0,0,0,0,0,0,0,0,7,56,5,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,0,0,0,0,2,54,7,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,887,        if (offsetLocal != offsetAdjusted) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,520,                    return chronology.minuteOfHour();,2,0,0,1,2,1,4,0,0,6,33,4,0.00145,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",4,0,0,2,4,1,0,0,0,5,66,4,0.00144,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00141,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,935,        chrono = DateTimeUtils.getChronology(chrono);,14,0,0,1,2,0,6,2,0,25,45,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,936,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,942,        return chrono;,4,0,1,0,0,1,4,4,0,14,14,3,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,68,5,0.0014,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,31,    private static final double LOG_10 = Math.log(10);,10,0,0,1,2,3,8,0,0,22,50,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",8,0,0,2,4,1,4,0,0,13,67,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,496,                    return chronology.monthOfYear();,2,0,1,1,2,1,0,0,0,6,32,8,0.00133,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00133,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00132,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,10,0,0,10,60,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,454,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,10,0,0,12,38,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,345,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,346,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,347,        iElementPairs.add(parser);,0,0,0,1,2,0,8,0,0,8,26,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",6,0,0,2,4,1,2,2,0,11,73,7,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,396,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,402,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,405,        if (minDigits <= 1) {,2,1,0,1,3,0,10,0,0,13,21,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1174,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1198,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,359,        return append0(new CharacterLiteral(c));,2,0,0,2,4,1,2,2,0,6,40,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1169,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1170,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1171,        },4,0,0,0,1,0,0,0,0,5,1,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2574,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2575,                iPrinters = new DateTimePrinter[size];,0,0,0,1,2,0,0,0,0,3,38,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2576,                int printEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2577,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,16,0,0,26,28,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2578,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0,0,0,2,4,0,0,0,0,6,63,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2579,                    printEst += printer.estimatePrintedLength();,4,0,0,1,2,0,8,0,0,13,44,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2580,                    iPrinters[i] = printer;,2,0,1,1,2,0,0,0,0,7,23,9,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2582,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2589,                int size = parserList.size();,2,0,0,1,2,0,0,0,0,2,29,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2590,                iParsers = new DateTimeParser[size];,0,0,0,1,2,0,0,0,0,3,36,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2591,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2592,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2593,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2594,                    parseEst += parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,42,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2595,                    iParsers[i] = parser;,0,0,0,1,2,0,0,0,0,3,21,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2597,                iParsedLengthEstimate = parseEst;,0,0,0,0,0,0,0,0,0,0,33,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2709,                Object element = elementPairs.get(i);,2,0,0,1,2,0,8,2,0,12,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2710,                if (element instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,41,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2711,                    if (element instanceof Composite) {,6,0,0,1,3,0,0,2,0,9,35,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2714,                        printerList.add(element);,2,0,0,1,2,0,10,2,0,14,25,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2718,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2719,                if (element instanceof DateTimeParser) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2720,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2723,                        parserList.add(element);,0,0,0,1,2,0,0,0,0,3,24,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1430,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1426,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1427,        },4,1,0,0,1,0,8,0,0,13,1,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1281,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1282,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1283,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1285,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1129,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1139,                return ((Composite)f).isParser();,8,0,0,3,6,1,4,0,0,13,33,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2695,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2699,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1117,                f = new Composite(iElementPairs);,6,1,0,1,2,0,4,2,0,15,33,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2563,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2565,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2566,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2568,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,0,0,0,3,49,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2570,            if (printerList.size() <= 0) {,2,1,0,2,5,0,4,0,0,7,30,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2585,            if (parserList.size() <= 0) {,8,0,0,2,5,0,4,0,0,13,29,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2599,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2707,            int size = elementPairs.size();,0,0,0,1,2,0,0,0,0,3,31,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2708,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2727,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,105,        DateTimePrinter printer = null;,4,0,0,0,0,0,0,2,0,6,31,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,106,        if (isPrinter(f)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,6,2,0,13,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,109,        DateTimeParser parser = null;,2,0,0,0,0,0,0,2,0,4,29,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,110,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,111,            parser = (DateTimeParser) f;,0,0,0,1,2,0,0,0,0,3,28,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,113,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,114,"            return new DateTimeFormatter(printer, parser);",0,0,0,1,2,1,0,0,0,4,46,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,107,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,108,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,109,        iParser = parser;,6,0,0,0,0,0,0,0,0,7,17,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,110,        iLocale = null;,2,0,0,0,0,0,8,0,0,11,15,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,111,        iOffsetParsed = false;,0,0,0,0,0,0,0,0,0,0,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,112,        iChrono = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,113,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,114,        iPivotYear = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,115,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,338,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,339,        iElementPairs.add(element);,0,0,0,1,2,0,6,0,0,6,27,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,340,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1137,        if (f instanceof DateTimeParser) {,2,0,0,1,3,0,0,2,0,4,34,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1100,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1102,        if (f == null) {,4,1,0,1,3,0,0,2,0,7,16,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1120,            iFormatter = f;,8,0,0,0,0,0,0,0,0,10,15,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1123,        return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,83,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,253,            return ISOChronology.getInstance();,0,0,0,1,2,1,4,0,0,4,35,7,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00095,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00095,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,304,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00095,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1540,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00089,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1576,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00087,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,80,            return (int) ((instant / getUnitMillis()) % iRange);,0,0,0,4,8,1,0,0,0,13,52,4,0.00084,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,295,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00079,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,8,0,0,8,47,5,0.00072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,0,0,0,4,43,4,0.00072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,10,0,0,10,78,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,10,0,0,10,84,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,10,0,0,10,88,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,10,0,0,10,89,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,86,        return getInstance(DateTimeZone.getDefault());,2,3,0,2,4,1,6,0,0,11,46,3,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1533,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1534,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,205,                if (iOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,2,0,0,1,2,0,0,0,0,2,43,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,111,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,8,0,0,8,43,5,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1528,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1529,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1530,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1570,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1571,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1572,            i = (i >= 0) ? (i + 1) : ~i;,12,2,0,2,4,0,6,0,0,23,28,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,185,        private int iOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,40,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,186,        private int iStandardOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,48,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,189,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,190,            iZoneRef = zone;,4,0,0,0,0,0,0,0,0,5,16,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,191,        },2,0,0,0,1,0,2,0,0,5,1,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,148,        int period = (int)(millis >> 32);,0,0,0,2,4,0,0,0,0,6,33,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,149,        Info[] cache = iInfoCache;,6,0,0,1,2,0,0,2,0,8,26,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,150,        int index = period & cInfoCacheMask;,8,1,0,0,0,3,4,4,0,20,36,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,151,        Info info = cache[index];,2,0,1,1,2,0,4,2,0,12,25,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,153,            info = createInfo(millis);,2,0,0,1,2,0,4,0,0,7,26,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,154,            cache[index] = info;,2,0,1,1,2,0,0,0,0,7,20,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,156,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,160,        long periodStart = millis & (0xffffffffL << 32);,4,2,0,1,2,0,0,0,0,6,48,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,161,"        Info info = new Info(iZone, periodStart);",6,0,0,1,2,0,0,4,0,10,41,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,163,        long end = periodStart | 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,37,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,164,        Info chain = info;,8,3,0,0,0,0,0,2,0,13,18,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,166,            long next = iZone.nextTransition(periodStart);,0,0,0,1,2,0,6,0,0,6,46,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,167,            if (next == periodStart || next > end) {,8,3,0,1,3,0,0,0,0,11,40,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,174,        return info;,0,0,0,0,0,1,0,0,0,1,12,4,0.00063,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,257,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,252,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,253,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,4,4,0,13,42,1,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,75,5,0.00062,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,3,6,0,16,0,0,16,115,5,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,0,0,0,4,60,4,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,4,8,0,14,0,0,14,89,5,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,3,6,0,0,0,0,9,97,4,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,682,        return getMaxMonth();,0,0,0,1,2,1,0,0,0,4,21,4,0.0006,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,20,237,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0006,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,20,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,4,0,0,1,2,1,0,0,0,5,43,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,120,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,8,0,0,8,42,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.00058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,54,        return iChronology.getYear(instant);,2,1,0,1,2,1,14,0,0,17,36,1,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,221,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,468,        long dateMillis = getYearMillis(year);,8,1,0,1,2,0,4,0,0,14,38,1,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0,0,0,1,2,0,0,0,0,3,53,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,14,2,0,4,8,0,8,2,0,27,52,3,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,93,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,241,        return (1970L * MILLIS_PER_YEAR) / 2;,6,3,0,1,2,1,6,0,0,16,37,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,2,0,0,1,2,0,2,0,0,4,56,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0,0,0,2,4,0,0,0,0,6,64,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,16,0,0,16,35,3,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0,0,0,1,4,0,10,0,0,10,61,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,428,        return year;,4,0,0,0,0,1,0,0,0,4,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,139,        if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,202,        int leapYears = year / 100;,4,1,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,2,0,6,23,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,14,5,0,2,4,1,0,0,0,19,90,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,10,8,0,5,10,1,0,0,0,20,69,1,0.00055,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.00054,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0,0,0,1,2,0,0,0,0,3,85,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",0,0,0,1,2,0,0,0,0,3,27,4,0.08333,1,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,357,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0,0,0,2,4,0,0,0,0,6,65,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,10,2,0,0,0,0,0,0,0,12,59,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,4,1,0,1,3,0,8,0,0,14,18,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,648,            return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.0597,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,12,3,0,1,3,0,4,0,0,19,61,1,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,4,1,0,3,6,1,16,0,0,21,84,1,0.04762,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,2,1,0,0,0,1,6,0,0,11,13,4,0.04167,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",4,0,0,1,2,1,12,0,0,18,36,3,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,            long current = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,14,4,0,1,3,0,0,0,0,19,32,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,                if (field.isPrecise()) {,0,0,0,2,5,0,4,0,0,4,24,9,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);",0,0,0,1,2,0,0,0,0,3,51,4,0.0396,0,0,-1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",10,0,0,2,4,1,4,4,0,18,68,1,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",6,0,0,2,4,1,8,0,0,15,69,3,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,1,0,2,4,1,8,0,0,11,68,6,0.03571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,52,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,10,5,0,3,7,0,6,0,0,21,53,1,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,88,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,330,            int offset = getOffsetToAdd(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,47,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,            return iField.getDifference,0,0,0,0,0,1,4,0,0,4,27,6,0.02439,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,278,                    return chronology.weeks();,0,0,0,1,2,1,4,0,0,4,26,7,0.02381,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,84,4,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,14,0,0,16,77,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,10,2,0,0,0,1,0,0,0,13,32,3,0.02105,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,290,                    return chronology.millis();,0,0,0,1,2,1,0,0,0,4,27,4,0.02094,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,288,                    return chronology.seconds();,0,0,0,1,2,1,4,0,0,4,28,7,0.02041,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,2,0,0,0,0,1,6,0,0,8,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,4,0,0,5,26,1,0.01914,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,2,1,0,1,2,0,0,0,0,3,37,7,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,319,"            instant = iField.add(instant + offset, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,16,7,0,2,4,1,12,2,0,42,79,1,0.01762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,8,1,0,1,2,1,0,0,0,10,28,4,0.01606,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,28,4,0,1,3,0,20,0,0,57,26,1,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.01575,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,276,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.01509,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,674,        int realIndex = iIndices[index];,0,0,0,1,2,0,0,0,0,3,32,4,0.01493,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,2,0,0,2,4,1,4,2,0,8,58,5,0.01493,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,2,1,0,0,0,0,8,0,0,11,28,5,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,0,0,3,7,0,20,2,0,27,53,3,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,8,1,0,0,0,1,0,2,0,11,14,1,0.01476,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,280,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.01404,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,6,1,0,1,2,1,4,0,0,11,26,1,0.01389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,4,4,0,1,3,0,8,0,0,16,16,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,4,1,0,1,3,0,6,0,0,11,17,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,324,        return iType.getFieldType(index);,6,4,0,1,2,1,10,0,0,21,33,3,0.01201,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,628,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.01201,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.01087,0,0,-1
defect4j,time,org/joda/time/Period,22,298,"        super(0L, null, null);",6,0,0,1,2,0,4,0,0,11,22,3,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,299,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,0.00955,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,115,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00952,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,264,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,266,            switch (iOrdinal) {,6,1,0,1,3,0,0,0,0,7,19,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,287,            return PeriodType.standard();,6,1,0,1,2,1,4,0,0,12,29,1,0.00868,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,117,"        return FieldUtils.safeAdd(instant, value);",16,2,0,1,2,1,16,2,0,38,42,1,0.00866,0,0,-1
defect4j,time,org/joda/time/Duration,22,176,        super(duration);,0,0,0,1,2,0,0,0,0,3,16,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,177,    },2,0,0,0,1,0,0,0,0,3,1,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,43,    public static final Duration ZERO = new Duration(0L);,0,0,1,1,2,0,4,0,0,9,53,7,0.00847,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,70,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00842,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,239,        super();,4,0,0,1,2,0,0,2,0,6,8,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,240,        type = checkPeriodType(type);,2,1,0,1,2,0,0,0,0,3,29,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,241,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,242,        iType = type;,6,1,0,0,0,0,0,0,0,8,13,1,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,243,"        iValues = chrono.get(this, duration);",8,2,0,1,2,0,0,4,0,14,37,3,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,244,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,61,        super();,0,0,0,1,2,0,6,0,0,6,8,9,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,62,        iMillis = duration;,0,0,0,0,0,0,0,0,0,0,19,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,44,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,64,        int sum = val1 + val2;,4,2,0,0,0,0,0,0,0,6,22,6,0.00839,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,2,0,0,3,7,0,0,0,0,3,45,4,0.00839,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,276,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,277,        int[] values = new int[size];,0,0,0,2,4,0,0,0,0,6,29,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,278,        if (duration != 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,289,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.00826,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,303,        return iType;,4,0,1,0,0,1,6,0,0,15,13,1,0.00815,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,335,        return iValues[index];,0,0,1,1,2,1,0,0,0,9,22,4,0.00805,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00762,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00762,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,102,        PeriodType type = cStandard;,0,0,0,0,0,0,0,0,0,0,28,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,103,        if (type == null) {,4,1,0,1,3,0,0,0,0,5,19,5,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,114,            cStandard = type;,0,0,0,0,0,0,0,0,0,0,17,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,116,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00752,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,286,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,293,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,0,0,0,4,41,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,313,        return iType.size();,0,0,0,1,2,1,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,10,0,0,0,0,1,4,0,0,14,21,3,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,836,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00719,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,835,        if (this == obj) {,4,0,0,1,3,0,0,2,0,6,18,4,0.00676,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,102,            return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00563,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,595,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,596,        iName = name;,8,1,0,0,0,0,0,0,0,10,13,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,597,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,598,        iIndices = indices;,0,0,0,0,0,0,0,0,0,0,19,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,599,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",10,0,0,1,2,3,0,12,0,25,90,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,58,    static int YEAR_INDEX = 0;,0,0,0,0,0,0,0,0,0,0,26,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,59,    static int MONTH_INDEX = 1;,0,0,0,0,0,0,0,0,0,0,27,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,61,    static int DAY_INDEX = 3;,0,0,0,0,0,0,0,0,0,0,25,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,62,    static int HOUR_INDEX = 4;,2,1,1,0,0,0,0,0,0,5,26,7,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,63,    static int MINUTE_INDEX = 5;,2,0,0,0,0,1,0,0,0,3,28,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,64,    static int SECOND_INDEX = 6;,4,0,0,0,0,0,2,0,0,6,28,5,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,65,    static int MILLI_INDEX = 7;,2,0,0,0,0,1,0,0,0,3,27,2,0.00551,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,253,            return ISOChronology.getInstance();,4,1,0,1,2,1,12,0,0,18,35,1,0.00481,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,107,        if ((base = iBase) != null) {,0,0,0,2,5,0,0,0,0,7,29,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,108,            return base.getZone();,0,0,0,1,2,1,0,0,0,4,22,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,86,        return getInstance(DateTimeZone.getDefault());,4,0,0,2,4,1,6,0,0,11,46,3,0.00374,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,255,        return chrono;,14,0,0,0,0,1,10,4,0,31,14,3,0.00312,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,68,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0,0,0,0,0,0,0,0,0,0,41,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,82,        checkPermission();,2,1,0,1,2,0,6,0,0,10,18,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0,0,0,1,2,0,0,0,0,3,55,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,84,    },0,0,0,0,1,0,2,0,0,3,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,133,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,415,            iMillis = fixedMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,416,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,175,        if (sm != null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,178,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,181,        synchronized(DateTimeZone.class) {,2,0,1,1,3,0,0,2,0,6,34,1,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,182,            cDefault = zone;,0,0,0,0,0,0,0,0,0,0,16,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00278,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,108,"                cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,9,0.00278,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,96,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0,0,0,2,4,0,0,0,0,6,66,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,104,        synchronized (cCache) {,6,0,0,1,3,0,6,0,0,12,23,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,106,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,111,        cFastCache[index] = chrono;,4,0,1,1,2,0,0,0,0,10,27,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,112,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00265,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,252,        if (chrono == null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.00261,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,147,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.00261,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,133,        DateTimeZone zone = cDefault;,0,0,0,0,0,0,0,0,0,0,29,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,134,        if (zone == null) {,4,2,0,1,3,0,4,0,0,10,19,3,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,0,6,0,0,6,34,5,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,136,                zone = cDefault;,0,0,0,0,0,0,0,0,0,0,16,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,137,                if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,8,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,138,                    DateTimeZone temp = null;,6,0,1,0,0,0,0,4,0,14,25,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,141,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,142,                            if (id != null) {  // null check avoids stack overflow,0,0,0,1,3,0,0,0,0,4,54,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,143,                                temp = forID(id);,0,0,0,1,2,0,0,0,0,3,17,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,153,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,154,                    if (temp == null) {,4,1,0,1,3,0,8,0,0,14,19,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,157,                    cDefault = zone = temp;,0,0,0,0,0,0,0,0,0,0,23,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,159,            },6,1,1,0,1,0,0,2,0,13,1,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,161,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.0026,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,82,"        super(base, zone);",4,0,0,1,2,0,0,0,0,4,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,83,    },2,1,0,0,1,0,4,0,0,7,1,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,56,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,59,        base = base.withUTC();,4,0,0,1,2,0,4,0,0,9,22,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,60,        if (base == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,66,"        return new ZonedChronology(base, zone);",0,0,0,1,2,1,0,0,0,4,39,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,22,11,0,1,2,1,4,0,0,37,87,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,86,        return (DateTimeZone)getParam();,6,1,0,2,4,1,2,2,0,12,32,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0,0,0,1,2,0,0,0,0,3,66,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,157,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,158,"        fields.centuries = convertField(fields.centuries, converted);",2,1,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,159,"        fields.years = convertField(fields.years, converted);",14,0,0,1,2,0,6,2,0,24,53,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,161,"        fields.weekyears = convertField(fields.weekyears, converted);",12,0,0,1,2,0,4,2,0,20,61,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,163,"        fields.days = convertField(fields.days, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0,1,0,1,2,0,4,0,0,5,59,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,166,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,167,"        fields.minutes = convertField(fields.minutes, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,168,"        fields.seconds = convertField(fields.seconds, converted);",16,0,0,1,2,0,8,0,0,26,57,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,169,"        fields.millis = convertField(fields.millis, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,173,"        fields.year = convertField(fields.year, converted);",14,0,0,1,2,0,4,0,0,20,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,177,"        fields.era = convertField(fields.era, converted);",8,0,0,1,2,0,4,0,0,13,49,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",8,0,0,1,2,0,4,0,0,13,63,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,183,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,1,1,2,0,18,0,0,31,59,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,18,0,0,27,77,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",10,0,0,1,2,0,12,0,0,24,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",14,2,0,1,2,0,4,0,0,21,65,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,3,0,1,2,0,4,0,0,20,69,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,14,71,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0,0,0,1,2,0,0,0,0,3,79,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,200,        if (field == null || !field.isSupported()) {,4,2,0,2,5,0,12,0,0,20,44,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,201,            return field;,4,0,0,0,0,1,6,0,0,10,13,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,203,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,204,            return (DurationField)converted.get(field);,2,1,0,2,4,1,12,2,0,17,43,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,207,"        converted.put(field, zonedField);",0,0,0,1,2,0,4,0,0,4,33,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,208,        return zonedField;,2,0,0,0,0,1,2,0,0,4,18,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,212,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,215,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,218,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,223,"        converted.put(field, zonedField);",0,0,0,1,2,0,8,0,0,8,33,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,224,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,389,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,390,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,393,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,394,            iZone = zone;,8,0,1,0,0,1,0,2,0,15,13,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,395,            iDurationField = durationField;,0,0,0,0,0,0,0,0,0,0,31,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,396,            iTimeField = useTimeArithmetic(durationField);,2,0,0,1,2,0,4,0,0,7,46,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,397,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,398,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,399,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,284,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,285,            if (!field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,27,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,288,            iField = field;,6,0,1,0,0,0,0,4,0,13,15,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,289,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,290,            iZone = zone;,6,0,0,0,0,0,4,2,0,13,13,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,291,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,298,            return iField.getUnitMillis();,2,1,0,1,2,1,0,0,0,3,30,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,109,        return getWrappedField().getUnitMillis() * iScalar;,6,2,0,2,4,1,12,0,0,21,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,328,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,22,726,        return null;,4,1,0,0,0,1,4,0,0,10,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,220,        return iChronology.weeks();,0,0,0,1,2,1,4,0,0,4,27,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,142,        long millis = iUnitMillis;,10,0,0,0,0,1,4,0,0,16,26,3,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,144,        hash += getType().hashCode();,4,0,0,2,4,0,4,0,0,9,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,101,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,111,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,148,        int hash = (int) (scalar ^ (scalar >>> 32));,2,0,0,3,6,0,0,2,0,5,44,6,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,149,        hash += getType().hashCode();,2,1,0,2,4,0,6,2,0,12,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,151,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,22,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,49,        return DurationFieldType.millis();,0,0,0,1,2,1,4,0,0,4,34,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,94,        return iChronology.weeks();,4,1,0,1,2,1,4,0,0,9,27,3,0.00257,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00257,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00257,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,55,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,139,        return iRangeField;,4,0,0,0,0,1,4,2,0,10,19,1,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,56,        return iChronology.years();,0,0,0,1,2,1,0,0,0,4,27,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,58,        return iChronology.weekyears();,0,0,0,1,2,1,4,0,0,4,31,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,122,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,0,0,1,2,3,0,12,0,17,106,2,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,2,0,1,1,2,0,0,2,0,7,48,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,68,    },4,0,0,0,1,0,0,0,0,4,1,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,171,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,173,            fields.yearOfCentury = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,50,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,54,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,178,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,22,146,        return DateTimeZone.UTC;,10,2,0,0,0,1,4,0,0,18,24,1,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,81,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,4,8,0,0,0,0,12,82,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0,0,0,1,2,0,0,0,0,3,70,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,87,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,91,        return getWrappedField().getMaximumValue();,0,0,0,2,4,1,0,0,0,7,43,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,22,143,        if ((base = getBase()) != null) {,4,1,0,3,7,0,2,0,0,9,33,3,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,309,        return iChronology.years();,0,0,0,1,2,1,4,0,0,4,27,5,0.00255,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,122,        return iRangeField;,4,0,0,0,0,1,4,0,0,8,19,1,0.00255,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,95,        return null;,12,0,0,0,0,3,0,2,0,17,12,1,0.00255,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,51,        return iChronology.months();,0,0,0,1,2,1,4,0,0,4,28,5,0.00255,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00255,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,321,            fields.copyFieldsFrom(iBase);,4,0,0,1,2,0,6,0,0,11,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,372,            flags = ,2,0,0,0,0,0,0,0,0,3,7,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,22,691,        return 12;,0,0,0,0,0,1,0,0,0,1,10,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,148,"        super(base, param, minDaysInFirstWeek);",12,2,0,1,2,0,0,0,0,14,39,3,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,149,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",2,0,0,3,6,3,0,12,0,17,122,2,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,72,    },2,0,0,0,1,0,0,8,0,10,1,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,100,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,111,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,115,        synchronized (cCache) {,0,0,1,1,3,0,4,0,0,9,23,7,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,116,            GregorianChronology[] chronos = cCache.get(zone);,0,0,0,2,4,0,0,0,0,6,49,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,117,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,118,                chronos = new GregorianChronology[7];,2,0,0,1,2,0,0,2,0,5,37,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,119,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,122,                chrono = chronos[minDaysInFirstWeek - 1];,0,0,0,1,2,0,0,0,0,3,41,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,126,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,127,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,128,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,65,10,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,135,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,137,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,138,        return chrono;,12,1,0,0,0,1,0,0,0,14,14,1,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,191,        if (getBase() == null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,192,            super.assemble(fields);,4,0,0,1,2,0,10,0,0,14,23,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,225,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,229,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,237,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.00253,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
