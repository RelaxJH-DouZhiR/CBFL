dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,10,0,0,0,0,1,4,0,0,14,21,3,0.00725,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",14,1,0,1,2,0,24,4,0,47,36,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",6,1,0,1,2,0,6,0,0,16,38,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",4,0,0,1,2,0,4,0,0,11,56,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,569,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,570,"            map.put(""CST"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,571,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,572,"            map.put(""IET"", ""America/Indianapolis"");",0,0,0,1,2,0,4,0,0,6,39,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,573,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,1,2,0,6,0,0,9,38,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,1,2,0,14,0,0,16,35,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,575,"            map.put(""AGT"", ""America/Buenos_Aires"");",0,0,0,1,2,0,0,0,0,3,39,4,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,576,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,1,2,0,6,0,0,6,36,9,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,577,"            map.put(""WET"", ""Europe/London"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,578,"            map.put(""ECT"", ""Europe/Paris"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");",6,3,0,1,2,0,6,0,0,15,31,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,580,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,581,"            map.put(""EET"", ""Europe/Bucharest"");",0,0,0,1,2,0,0,0,0,3,35,4,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,582,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,584,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,585,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,1,2,0,0,0,0,3,31,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,586,"            map.put(""IST"", ""Asia/Calcutta"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,587,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,588,"            map.put(""VST"", ""Asia/Saigon"");",0,0,0,1,2,0,4,0,0,6,30,7,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,589,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,590,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,1,2,0,4,0,0,6,29,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,591,"            map.put(""ACT"", ""Australia/Darwin"");",2,1,0,1,2,0,4,0,0,9,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,592,"            map.put(""AET"", ""Australia/Sydney"");",6,0,0,1,2,0,4,0,0,10,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");",4,2,0,1,2,0,4,0,0,13,38,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,594,"            map.put(""NST"", ""Pacific/Auckland"");",2,0,0,1,2,0,10,0,0,14,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,595,            cZoneIdConversion = map;,4,0,0,0,0,0,4,0,0,9,24,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,597,        return map.get(id);,2,0,0,1,2,1,16,0,0,18,19,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,174,        SecurityManager sm = System.getSecurityManager();,0,0,0,1,2,0,0,0,0,3,49,4,0.00035,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,                break;,0,0,0,0,0,0,0,0,0,0,6,4,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,490,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,508,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",0,0,0,1,2,0,6,0,0,6,22,5,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",0,0,0,1,2,0,0,0,0,3,39,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,    },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,0,0,0,0,7,38,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,570,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,574,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,3.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,            return getWeeksInYear(year - 1);,0,0,0,1,2,1,0,0,0,4,32,4,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,        return parseLocalDateTime(text).toLocalDate();,0,0,0,2,4,1,0,0,0,7,46,4,2.72222,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());",0,0,0,3,6,1,0,0,0,10,56,4,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,2.57895,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,8,0,0,8,78,6,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,399,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,401,    },12,4,0,0,1,0,12,0,0,30,1,1,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,6,0,0,1,2,0,6,0,0,14,46,4,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,0,1,0,1,3,0,8,0,0,9,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,1,2,0,18,0,0,18,44,1,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,                        break;,2,1,1,0,0,0,0,0,0,5,6,8,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0,0,0,2,4,0,0,0,0,6,91,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);",4,0,0,1,2,0,10,0,0,14,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,        if (newPos >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);",0,0,0,1,2,0,12,0,0,12,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true,0,0,0,3,7,0,0,0,0,10,74,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,                    int parsedOffset = bucket.getOffset();,0,0,0,1,2,0,0,0,0,3,38,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0,0,0,1,2,0,0,0,0,3,69,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,                    chrono = chrono.withZone(parsedZone);,2,0,0,1,2,0,6,0,0,9,37,10,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);",4,0,0,1,2,1,0,2,0,6,41,9,1.75,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,                    return chronology.weekOfWeekyear();,0,1,0,1,2,1,14,0,0,16,35,1,1.75,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,1.68966,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,862,            return instant;,8,0,0,0,0,1,10,2,0,22,15,4,1.68966,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,350,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,1.53125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1031,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,1.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,        return iOffset;,2,0,0,0,0,1,0,0,0,2,15,4,1.36111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,1.32432,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {",8,1,0,1,3,1,0,2,0,12,55,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,281,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",4,1,0,2,4,0,8,0,0,14,86,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,284,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,285,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0,0,0,2,4,0,0,0,0,6,63,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,286,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,287,    },0,0,0,0,1,0,0,0,0,1,1,4,1.28947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,                        indexRef[0]++;,2,0,1,1,2,0,0,0,0,5,14,1,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",2,1,0,3,7,0,8,0,0,11,52,3,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,1.25641,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {",18,0,0,1,3,1,6,4,0,31,59,1,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,275,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0,0,0,2,4,0,0,0,0,6,86,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,278,        iLocalMillis = localMillis;,4,0,0,0,0,0,8,0,0,13,27,3,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,279,        iChronology = chronology.withUTC();,0,0,0,1,2,0,4,0,0,4,35,5,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,280,    },2,0,0,0,1,0,4,2,0,8,1,7,1.19512,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,        return false;,0,0,0,0,0,1,4,0,0,5,13,4,1.11364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,632,        int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,633,        if (tokenLen > 0) {,0,0,0,1,3,0,0,0,0,4,19,4,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,1.08889,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,635,            switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,1.08889,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,548,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,953,        if (dtx == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,954,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,959,        return dtx;,0,0,0,0,0,1,0,0,0,1,11,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,14,1,0,2,4,1,10,0,0,26,54,3,0.94231,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,557,        return iChronology;,6,1,0,0,0,1,0,0,0,7,19,7,0.92453,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,919,        if (ttx == null) {,6,2,0,1,3,0,0,0,0,8,18,1,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,920,            ttx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,925,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,499,            return iDurationField;,4,1,0,0,0,1,0,0,0,5,22,5,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,503,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,517,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,550,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,567,            return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,883,        if (tx == null) {,8,1,0,1,3,0,0,0,0,10,17,3,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,884,            tx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,889,        return tx;,0,0,0,0,0,1,0,0,0,1,10,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,453,                    int maxDigits = 9;,0,0,0,0,0,0,0,0,0,0,18,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,456,                    if (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,21,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,465,                    switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,477,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1410,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1411,            hms = new DateTimeFormatterBuilder(),4,0,0,1,2,0,6,2,0,13,36,1,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1417,        return hms;,4,0,0,0,0,1,0,2,0,6,11,3,0.875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,348,            return jan1millis - (jan1dayOfWeek - 1),0,0,0,1,2,1,0,0,0,4,39,4,0.80645,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,586,        return iLocalMillis;,2,1,0,0,0,1,0,0,0,3,20,5,0.76563,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,595,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,424,                if (tokenLen == 2) {,2,1,0,1,3,0,0,0,0,3,20,7,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,511,        if (fieldType == null) {,6,3,0,1,3,0,6,0,0,15,24,1,0.7,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));",6,0,0,2,4,1,12,2,0,22,47,1,0.7,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,95,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0,0,0,1,2,0,0,0,0,3,99,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,97,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,98,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,0,0,0,6,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,99,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,52,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,100,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,8,0,0,8,55,5,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,101,        DATE_DURATION_TYPES.add(DurationFieldType.years());,6,3,0,2,4,0,0,0,0,9,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,102,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,4,0,0,2,4,0,10,2,0,16,55,1,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,104,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,0,0,0,6,50,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,474,            return result;,8,1,0,0,0,1,0,2,0,12,14,1,0.68056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.64474,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.64474,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,282,    },0,0,0,0,1,0,0,0,0,1,1,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",2,0,0,1,2,3,0,4,0,9,75,2,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,221,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,464,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,465,            long localInstant = iZone.convertUTCToLocal(instant);,8,0,0,1,2,0,6,0,0,14,53,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);",4,0,0,1,2,2,8,2,0,17,47,1,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,468,            if (get(result) != value) {,10,2,0,2,5,0,0,0,0,13,27,1,0.60494,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1027,        if (newZone == null) {,8,1,0,1,3,0,0,0,0,9,22,1,0.59036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1030,        if (newZone == this) {,0,0,0,1,3,0,0,0,0,4,22,4,0.59036,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,24,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.56977,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,0,0,0,2,38,4,0.56322,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,283,"        return fixedOffsetZone(id, millisOffset);",2,0,0,1,2,1,6,0,0,8,41,1,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,205,                chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0,0,0,1,3,0,0,0,0,4,63,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,209,                    return chrono;,2,0,0,0,0,1,12,0,0,14,14,3,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,384,        return iCutoverInstant;,10,1,0,0,0,1,0,0,0,12,23,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,393,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,307,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,317,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,320,        if (zone == getZone()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.55682,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,321,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.55682,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1755,            return estimatePrintedLength();,6,0,0,1,2,1,2,0,0,9,31,1,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,293,        if ((base = getBase()) != null) {,2,1,0,3,7,0,0,0,0,3,33,5,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,296,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,194,            cutoverInstant = gregorianCutover.toInstant();,4,1,0,1,2,0,4,0,0,11,46,5,0.54444,0,0,-1
defect4j,time,org/joda/time/Instant,24,131,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.54444,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,24,101,        return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,5,30,3,0.53846,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1687,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1688,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1689,            iShort = isShort;,6,0,0,0,0,0,0,0,0,7,17,1,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1690,        },0,0,0,0,1,0,0,0,0,1,1,4,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1681,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1693,            return iShort ? 6 : 20;,0,0,0,0,0,1,0,0,0,1,23,4,0.51579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,956,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,0,0,0,4,47,5,0.51042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,973,        int offsetLocal = getOffset(instantLocal);,6,0,0,1,2,0,4,0,0,11,42,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,975,        int offset = getOffset(instantLocal - offsetLocal);,0,0,0,1,2,0,0,0,0,3,51,4,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,977,        if (offsetLocal != offset) {,12,3,1,1,3,0,4,0,0,24,28,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1008,        long instantUTC = instantLocal - offset;,0,0,0,0,0,0,4,0,0,4,40,7,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1010,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1013,        return instantUTC;,6,0,0,0,0,1,0,0,0,6,18,6,0.50515,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,479,                if (tokenLen >= 3) {,12,2,1,1,3,0,4,4,0,27,20,1,0.49495,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,2,0,0,0,0,0,0,0,0,2,49,4,0.47368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.47115,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,613,                    i--;,0,0,0,0,0,0,0,0,0,0,4,4,0.46667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.46667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,632,            buf.append('+');,4,0,0,1,2,0,0,0,0,5,16,9,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,596,            buf.append('\'');,6,3,0,1,2,0,4,0,0,16,17,1,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,630,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,38,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,631,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,638,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,2,1,0,0,0,0,0,0,0,3,55,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,639,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,0,2,0,4,47,7,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,640,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,0,0,0,0,6,58,1,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,642,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,9,59,5,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,643,        buf.append(':');,6,1,0,1,2,0,4,0,0,12,16,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,644,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,645,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,646,        if (offset == 0) {,4,2,0,1,3,0,0,0,0,6,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,647,            return buf.toString();,4,1,0,1,2,1,0,0,0,5,22,7,0.45794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,589,                    i++;,4,0,0,0,0,0,0,0,0,6,4,1,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,593,            },0,0,0,0,1,0,0,0,0,1,1,4,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,586,                char peek = pattern.charAt(i + 1);,4,1,0,1,2,0,4,0,0,9,34,9,0.4188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,587,                if (peek == c) {,10,1,0,1,3,0,0,0,0,11,16,1,0.4188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,2,4,1,0,0,0,7,66,4,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,497,        } else if (week > 51) {,4,1,0,1,4,0,8,0,0,14,23,1,0.3913,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,563,    },4,0,0,0,1,0,6,0,0,12,1,1,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,585,            while (i + 1 < length) {,4,2,0,1,3,0,0,0,0,6,24,6,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,685,"                cPatternedCache.put(pattern, formatter);",4,0,0,1,2,0,8,0,0,12,40,3,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,687,        },0,0,0,0,1,0,0,0,0,1,1,4,0.35766,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,8,0,0,8,57,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,893,                long nextLocal = nextTransition(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,49,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,894,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0,0,0,1,2,0,0,0,0,3,66,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,895,                if (nextLocal != nextAdjusted) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04167,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,        return iZone.nextTransition(instant);,0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,63,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,                buf.append(':');,0,0,0,1,2,0,8,0,0,11,16,1,0.03409,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03358,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,        return dt;,4,1,0,0,0,1,0,0,0,5,10,3,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,            tt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,        return tt;,0,0,0,0,0,1,0,0,0,1,10,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,        if (t == null) {,0,0,0,1,3,0,4,2,0,6,16,1,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,34,6,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);",2,0,0,1,2,0,16,0,0,20,36,1,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1849,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,        },2,0,0,0,1,0,0,0,0,2,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,            if (displayZone == null) {,2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,8,0,0,15,57,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1450,        if (hmsf == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,        return hmsf;,6,3,0,0,0,1,0,0,0,9,12,1,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1659,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1667,        return fse;,0,0,0,0,0,1,0,0,0,1,11,4,0.02761,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1879,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1892,            },0,0,0,0,1,0,8,0,0,8,1,5,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,            return instant % iUnitMillis;,4,1,0,0,0,3,0,4,0,12,29,1,0.0255,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,126,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02528,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,854,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.02446,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1326,        if (ymd == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,        return ymd;,2,0,0,0,0,1,10,0,0,13,11,5,0.02413,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,889,            if ((offsetLocal - offsetAdjusted) < 0) {,4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,                locale = Locale.getDefault();,2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,78,        } else {,2,1,0,0,2,0,4,0,0,7,8,6,0.0232,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1151,            buf.append(iValue);,0,0,0,1,2,0,0,0,0,3,19,4,0.02308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1152,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,            DateTimePrinter[] elements = iPrinters;,10,0,0,1,2,0,0,4,0,14,39,1,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2511,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2515,            if (locale == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,            int len = elements.length;,8,0,0,0,0,0,0,0,0,8,26,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2521,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",6,7,0,2,4,0,4,0,0,18,78,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2524,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1408,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,0,1,2,4,0,0,0,0,6,76,9,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1412,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,        },6,2,0,0,1,0,32,8,0,52,1,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,581,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,        return buf.toString();,24,6,1,1,2,1,28,4,0,69,22,1,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,18,0,0,18,29,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,    },8,1,0,0,1,0,8,0,0,18,1,1,0.02261,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.02233,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,                    return chronology.secondOfDay();,2,1,0,1,2,1,0,0,0,5,32,3,0.02233,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,        chrono = selectChronology(chrono);,8,0,0,1,2,0,10,0,0,19,34,3,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,620,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,        int offset = zone.getOffset(instant);,6,0,1,1,2,0,14,4,0,27,37,1,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,622,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,24,65,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,18,0,0,18,79,5,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,630,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,80,            if (value < 1000) {,6,1,0,1,3,0,0,2,0,9,19,3,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,87,            for (; size > digits; size--) {,8,0,0,1,3,0,2,0,0,11,31,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,90,            buf.append(Integer.toString(value));,2,1,0,2,4,0,0,0,0,3,36,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,        if (lte == null) {,10,1,1,1,3,0,6,0,0,23,18,3,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1622,            lte = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1626,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.02027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2504,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.01863,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1671,        if (ze == null) {,2,0,0,1,3,0,0,2,0,4,17,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1672,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1676,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2072,                est += iMinFields - 1;,0,0,0,0,0,0,0,0,0,0,22,4,0.01804,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,67,        } else if (value < 100) {,4,2,0,1,4,0,0,0,0,6,25,4,0.01772,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,655,        DateTimePrinter printer = iPrinter;,2,2,0,0,0,0,4,0,0,9,35,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,656,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,659,        return printer;,8,1,0,0,0,1,0,2,0,12,15,3,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2070,            int est = 1 + iMinFields << 1;,6,2,0,0,0,0,8,2,0,18,30,1,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2071,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2074,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0,0,0,2,5,0,0,0,0,7,74,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2077,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2207,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.01727,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.01721,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01718,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.01718,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,532,        if (fieldType == null) {,2,0,0,1,3,3,0,0,0,5,24,1,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,535,        if (maxDigits < minDigits) {,2,0,0,1,3,0,0,0,0,3,28,5,0.01685,0,0,-1
