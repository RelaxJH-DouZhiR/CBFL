dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,        if (fromYear <= toYear) {,0,0,0,1,3,0,0,0,0,4,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,        if (id == null) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0,0,0,1,2,0,0,0,0,3,64,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,        DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,        int ruleSetCount = iRuleSets.size();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,        for (int i=0; i<ruleSetCount; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,            RuleSet rs = iRuleSets.get(i);,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,            Transition next = rs.firstTransition(millis);,0,0,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,            millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,            saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,            rs = new RuleSet(rs);,0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {",0,0,0,2,5,0,0,0,0,7,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,                saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,                    tailZone = rs.buildTailZone(id);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,        if (transitions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,        if (zone.isCachable()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,0,0,0,0,7,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,        if (size >= 2) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,            transitions.add(tr);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,            iToYear = toYear;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,            return iToYear;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,            long testInstant = instant;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,            if (instant == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,                year = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,                year = chrono.year().get(instant + wallOffset);,0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,            if (year < iFromYear) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,                testInstant -= 1;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,                year = chrono.year().get(next + wallOffset);,0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,                if (year > iToYear) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,            if (iMode == 'w') {,0,0,0,1,3,0,0,0,0,4,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,            if (iDayOfMonth >= 0) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0,0,0,2,4,0,0,0,0,6,56,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,        RuleSet() {,0,0,0,1,3,0,0,0,0,4,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,            iRules = new ArrayList<Rule>(10);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,            iUpperYear = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,        RuleSet(RuleSet rs) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,            iInitialNameKey = rs.iInitialNameKey;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,            iUpperOfYear = rs.iUpperOfYear;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,1.77778,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,612,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,1805,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,597,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,600,        return type.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,60,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,567,        switch (index) {,0,0,0,1,3,0,0,0,0,4,16,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,573,                return getChronology().dayOfMonth().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,58,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,545,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,560,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,564,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,200,        return new LocalDateTime(,0,0,0,0,1,1,0,0,0,2,25,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,210,        int yearOfEra = calendar.get(Calendar.YEAR);,0,0,0,1,2,0,0,0,0,3,44,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0,0,0,1,2,1,8,0,0,10,28,3,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,548,                return chrono.dayOfMonth();,0,0,0,1,2,1,8,0,0,9,27,1,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,550,                return chrono.millisOfDay();,0,0,0,1,2,1,0,0,0,4,28,4,0.37209,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,529,        return 4;,0,0,0,0,0,1,0,0,0,1,9,4,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,663,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,0.30189,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,233,        if (date == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.28571,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,        if (date == null) {,2,0,0,1,3,0,14,0,0,16,19,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,        return super.equals(obj);,0,0,0,1,2,1,0,0,0,4,25,4,0.2735,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,        if (this == partial) {,2,0,0,1,3,0,0,0,0,2,22,4,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,14,0,0,1,2,0,4,4,0,24,38,3,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,6,0,0,2,5,0,4,0,0,11,44,1,0.25806,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",16,2,0,2,5,0,8,0,0,27,57,1,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0,0,0,4,8,0,0,0,0,12,83,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0,0,0,0,0,0,6,0,0,6,32,11,0.20847,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0,0,0,2,4,0,0,0,0,6,68,4,0.20253,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.20253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.19104,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.17778,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,2,0,0,1,2,1,4,0,0,6,31,4,0.17021,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0,0,0,3,7,0,0,0,0,10,54,4,0.128,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();",0,0,0,3,6,1,0,0,0,10,50,4,0.12308,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,499,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,503,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,6,0,0,0,0,0,0,0,0,7,23,3,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,505,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11679,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,2,0,0,0,0,1,8,2,0,12,20,6,0.10774,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,445,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2,0,0,1,2,0,4,4,0,10,78,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,448,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,450,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,        return iLocalMillis;,4,0,0,0,0,1,6,0,0,10,20,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,2,0,0,1,3,0,4,0,0,6,19,5,0.09756,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,        return iChronology;,16,4,0,0,0,1,16,4,0,42,19,1,0.09249,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08649,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,650,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.08122,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",4,1,0,2,4,0,6,0,0,11,35,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0,0,0,2,4,0,0,0,0,6,48,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0,0,0,2,4,0,0,0,0,6,52,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,2,2,0,6,56,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,0,0,0,2,53,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,82,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",10,1,1,1,2,1,0,0,0,13,43,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,12,0,1,1,2,1,4,2,0,23,32,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,8,1,0,1,3,0,0,0,0,10,26,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,4,0,0,1,2,1,6,0,0,11,33,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,2,0,0,1,3,0,4,0,0,6,26,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,711,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,712,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,714,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,715,                        instant = gregorianToJulian(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,724,"                instant = iJulianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,43,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0,0,0,1,3,0,0,2,0,3,26,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,737,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,38,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,41,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,912,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,915,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,0,0,0,4,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,192,            cutoverInstant = DEFAULT_CUTOVER;,8,2,0,0,0,0,14,0,0,25,33,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,74,public final class GJChronology extends AssembledChronology {,0,0,0,0,1,0,0,0,0,1,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,78,        if (year <= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,83,            year++;,0,0,0,0,0,0,10,0,0,10,7,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",10,1,0,2,4,1,4,0,0,17,84,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,129,    },2,0,0,0,1,0,8,0,0,10,1,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",6,0,1,1,2,0,14,2,0,26,116,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,104,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,107,        BuddhistChronology chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,45,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,108,        if (chrono == null) {,10,1,0,1,3,0,0,8,0,20,21,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0,0,0,2,4,0,0,0,0,6,76,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",6,0,0,1,2,0,2,2,0,10,64,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",8,1,0,2,4,0,8,2,0,22,91,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,114,"            cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,116,        return chrono;,4,0,0,0,0,1,0,0,0,5,14,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,204,        if (getParam() == null) {,2,1,0,2,5,0,8,0,0,12,25,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,206,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,207,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,211,            field = fields.yearOfEra;,10,0,0,0,0,0,0,0,0,12,25,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,216,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,6,0,0,10,42,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",8,0,0,1,2,0,0,0,0,10,54,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,221,            fields.centuryOfEra = new DividedDateTimeField(,32,10,0,0,1,0,14,4,0,67,47,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,4,4,0,18,47,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,229,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,51,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,234,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,66,        int min = super.getMinimumValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,68,            iMinValue = min + 1;,8,5,0,0,0,0,6,0,0,22,20,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,74,        iSkip = skip;,8,0,0,0,0,0,0,0,0,10,13,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,75,    },6,0,0,0,1,3,2,2,0,13,1,2,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,88,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);",2,1,0,1,2,1,0,0,0,3,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);",4,1,0,1,2,1,0,0,0,5,34,7,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,228,        return iField.getMaximumValue();,2,0,0,1,2,1,2,2,0,6,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,100,        return iMinValue;,4,0,0,0,0,1,0,0,0,5,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",0,0,0,2,4,1,0,0,0,7,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,237,            buf.append('-');,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,255,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,82,4,0.16667,0,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,83,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",0,0,0,1,2,0,0,0,0,3,23,4,0.07143,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,0,0,0,0,0,0,0,0,0,0,60,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0,0,0,3,6,0,0,0,0,9,75,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,692,        values[realIndex] = newValue;,0,0,0,1,2,0,0,0,0,3,29,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,693,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,689,        if (realIndex == -1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,            return iText.length();,0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,                int seconds = period.get(DurationFieldType.seconds());,0,0,0,2,4,0,0,0,0,6,54,4,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,12,3,0,2,4,0,2,0,0,18,72,1,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },2,1,0,0,1,0,6,0,0,9,1,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,4,0,0,1,2,1,0,0,0,5,22,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,                    return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.02703,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,6,1,0,0,0,1,0,0,0,7,22,1,0.02632,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,2,1,0,2,4,1,18,0,0,21,55,1,0.025,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,2,0,0,0,0,1,0,2,0,5,9,10,0.02439,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,                return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,14,6,0,0,0,1,8,0,0,32,7,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,                sum += iSuffix.calculatePrintedLength(value);,0,0,0,1,2,0,0,0,0,3,45,4,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1147,"                iSuffix.printTo(buf, value);",0,0,0,1,2,0,0,0,0,3,28,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1633,            PeriodPrinter before = iBeforePrinter;,0,0,0,0,0,0,0,0,0,0,38,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1636,"            int sum = before.calculatePrintedLength(period, locale)",0,0,0,1,2,0,0,0,0,3,55,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,4,0,0,1,3,0,6,0,0,10,17,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,14,1,0,0,0,0,0,2,0,18,38,1,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1659,            PeriodPrinter after = iAfterPrinter;,0,0,0,0,0,0,0,0,0,0,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1661,"            before.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1662,            if (iUseBefore) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1676,"            after.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,35,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1677,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1412,                value = period.get(DurationFieldType.minutes());,0,0,0,2,4,0,0,0,0,6,48,4,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,16,2,0,0,0,0,12,0,0,33,6,1,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1403,                value = period.get(DurationFieldType.weeks());,0,0,0,2,4,0,0,0,0,6,46,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1404,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1400,                value = period.get(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,47,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1401,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1406,                value = period.get(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,45,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1407,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1409,                value = period.get(DurationFieldType.hours());,0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1410,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,2,1,0,2,4,1,14,0,0,17,50,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1434,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0,0,0,3,7,0,0,0,0,10,61,4,0.01667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1487,                return type.isSupported(DurationFieldType.minutes());,0,0,0,2,4,1,0,0,0,7,53,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,10,2,0,12,52,1,0.01613,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1485,                return type.isSupported(DurationFieldType.hours());,0,0,0,2,4,1,8,0,0,8,51,7,0.01563,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1398,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1477,                return type.isSupported(DurationFieldType.years());,0,0,0,2,4,1,0,0,0,7,51,4,0.01493,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",8,5,0,2,5,0,0,0,0,13,56,4,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,0,8,0,0,10,30,1,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1083,                return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.01408,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,293,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,294,        iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,295,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },2,0,0,0,1,0,4,0,0,7,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",4,0,0,1,2,0,4,0,0,9,20,3,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,684,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1430,                switch (iPrintZeroSetting) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1079,            if (stopAt <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1082,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {,0,0,0,2,5,0,0,0,0,7,88,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1788,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,8,3,0,1,2,0,8,2,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1790,            for (int i=printers.length; sum < stopAt && --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1791,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",0,0,0,2,4,0,0,0,0,6,73,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1793,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1135,"                FormatUtils.appendUnpaddedInteger(buf, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1385,                type = period.getPeriodType();,0,0,0,1,2,0,0,0,0,3,30,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,4,0,0,1,3,0,4,0,0,8,16,1,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,236,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,245,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,258,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,638,        return (indexOf(type) >= 0);,4,1,0,2,4,1,4,0,0,9,28,9,0.01205,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1089,            long valueLong = getFieldValue(period);,6,0,0,1,2,0,10,2,0,18,39,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1090,            if (valueLong == Long.MAX_VALUE) {,16,0,1,1,3,0,12,2,0,34,34,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1094,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,82,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1095,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1108,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1110,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1113,            if (iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1117,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,336,        if (value < 0) {,10,1,0,1,3,0,6,2,0,21,16,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,343,        return ,12,1,0,0,0,1,4,0,0,19,6,1,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,251,        PeriodType type = cYDTime;,0,0,0,0,0,0,0,0,0,0,26,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,252,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,253,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,262,            cYDTime = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,264,        return type;,6,0,0,0,0,1,0,4,0,10,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,237,        checkPeriod(period);,2,0,0,1,2,0,0,0,0,2,20,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,239,        PeriodPrinter printer = getPrinter();,2,0,0,1,2,0,2,2,0,6,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",2,0,0,2,4,0,8,4,0,14,85,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,241,"        printer.printTo(buf, period, iLocale);",0,0,0,1,2,0,0,0,0,3,38,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,242,        return buf.toString();,6,0,0,1,2,1,4,0,0,10,22,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1797,            int sum = 0;,6,2,0,0,0,0,0,2,0,12,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1798,            PeriodPrinter[] printers = iPrinters;,0,0,0,1,2,0,0,0,0,3,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1799,            for (int i=printers.length; --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1800,"                sum += printers[i].calculatePrintedLength(period, locale);",0,0,0,2,4,0,0,0,0,6,58,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1802,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1121,            long valueLong = getFieldValue(period);,0,0,0,1,2,0,0,0,0,3,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1122,            if (valueLong == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,34,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1125,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1126,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1130,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1133,            int minDigits = iMinPrintedDigits;,0,0,0,0,0,0,0,0,0,0,34,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1134,            if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1139,            if (iFieldType >= SECONDS_MILLIS) {,6,2,0,1,3,0,0,0,0,8,35,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1146,            if (iSuffix != null) {,6,1,0,1,3,0,0,0,0,8,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1149,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,236,        checkPrinter();,8,0,0,1,2,0,2,0,0,11,15,6,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1806,            PeriodPrinter[] printers = iPrinters;,12,0,1,1,2,0,8,2,0,34,37,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1807,            int len = printers.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1808,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1809,"                printers[i].printTo(buf, period, locale);",10,0,1,2,4,0,8,0,0,23,41,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1811,        },10,2,0,0,1,0,0,0,0,13,1,3,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1382,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1387,"            if (type != null && isSupported(type, iFieldType) == false) {",0,0,0,2,5,0,0,0,0,7,61,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1393,            switch (iFieldType) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1429,            if (value == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1460,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,254,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,251,        if (iPrinter == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01124,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,0,0,0,0,7,42,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,            long instant = 0L;,0,0,0,0,0,0,0,0,0,0,18,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,57,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);",0,0,0,2,4,0,0,0,0,6,64,4,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,515,        if (amount == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,3.55556,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,514,        int index = indexOfSupported(fieldType);,0,0,0,1,2,0,0,0,0,3,40,4,3.04762,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,2.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,339,            DateTimeField loopField = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,46,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0,0,0,3,7,0,0,0,0,10,62,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,1.14286,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,0,0,0,4,44,4,1.14286,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);",0,0,0,2,4,1,0,0,0,7,58,4,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,410,            return chrono.monthOfYear();,0,0,0,1,2,1,0,0,0,4,28,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,412,            return chrono.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,27,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,49,4,0.66667,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,395,        return 2;,0,0,0,0,0,1,0,0,0,1,9,4,0.64646,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,0,0,0,2,5,0,0,0,0,7,80,4,0.62136,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,237,        return (int[]) iValues.clone();,0,0,0,3,6,1,0,0,0,10,31,4,0.47407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,        return ldp;,2,1,0,0,0,1,0,0,0,3,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.4183,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")",4,1,0,1,3,0,0,0,0,5,36,4,0.37895,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,49,        if (value == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,33,4,0.36364,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,52,        return -value;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.34973,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,                break;,2,0,0,0,0,0,8,0,0,10,6,11,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,0,0,0,3,35,4,0.33684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33684,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,780,        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();,2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,781,        fields.add(DateTimeFieldType.monthOfYear());,4,1,0,2,4,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,782,        fields.add(DateTimeFieldType.dayOfMonth());,4,0,0,2,4,0,12,0,0,16,43,1,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);",2,0,0,2,4,4,0,8,0,13,67,2,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,        iDateTimeFieldType = fieldType;,4,1,0,0,0,0,4,0,0,10,31,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,        iDurationFieldType = null;,4,1,0,0,0,0,14,0,0,21,26,1,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,        iStringValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,        iUpperBound = upperBound;,2,1,0,0,0,0,0,0,0,3,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31304,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,                return false;,4,0,0,0,0,1,0,2,0,7,13,1,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,                bld.appendDayOfMonth(2);,0,0,0,1,2,0,0,0,0,3,24,4,0.30769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,                if (tokenLen >= 3) {,0,0,0,1,3,0,0,0,0,4,20,4,0.30189,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,0,0,2,37,5,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,        if (lowerBound == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,        return buf.toString();,2,0,0,1,2,1,10,4,0,17,22,1,0.288,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,            bld.appendLiteral('-');,2,1,0,1,2,0,4,0,0,8,23,3,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,            bld.appendLiteral('-');,0,0,0,1,2,0,0,0,0,3,23,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,            bld.appendMonthOfYear(2);,2,2,0,1,2,0,4,0,0,8,25,10,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,0,0,0,0,10,52,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,18,0,0,18,37,5,0.27586,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,                    i--;,8,1,0,0,0,0,0,0,0,11,4,1,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,                    break;,10,4,0,0,0,0,0,0,0,15,6,3,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,            buf.append('\'');,0,0,0,1,2,0,10,0,0,10,17,8,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,            boolean inLiteral = false;,2,1,0,0,0,0,0,0,0,4,26,5,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,                if (c == '\'') {,2,0,0,1,3,0,10,0,0,12,16,1,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,                    buf.append(c);,2,0,0,1,2,0,6,0,0,8,14,3,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,                    buf.append(c);,2,0,0,1,2,0,6,0,0,9,14,6,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,589,                    i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,            },0,0,0,0,1,0,8,0,0,8,1,5,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,        return withZone(DateTimeZone.UTC);,6,1,0,1,2,1,0,2,0,10,34,1,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2577,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,                iPrintedLengthEstimate = 0;,10,0,0,0,0,0,26,2,0,40,27,1,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,                formatter = builder.toFormatter();,10,0,0,1,2,0,8,2,0,23,34,3,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);",4,1,0,1,2,0,8,0,0,13,40,1,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,687,        },0,0,0,0,1,0,0,0,0,1,1,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,        return createFormatterForPattern(pattern);,14,1,0,1,2,1,6,4,0,25,42,1,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,        DateTimeFormatter formatter = null;,4,0,0,0,0,0,4,0,0,8,35,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,4,2,0,1,2,0,0,0,0,6,66,9,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,682,"                parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,        if (iZone == zone) {,10,1,0,1,3,0,12,2,0,27,20,1,0.24427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",8,1,0,0,1,1,0,2,0,11,56,3,0.24427,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,317,                nextField = instant.getField(fieldIndex - 1);,0,0,0,1,2,0,0,0,0,3,45,4,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,2,1,0,5,11,0,10,0,0,13,82,1,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0,0,0,1,2,0,0,0,0,3,90,4,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,    },14,4,1,0,1,0,12,0,0,37,1,3,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,583,            buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,7,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,            indexRef[0] = i;,2,0,0,1,2,0,14,2,0,20,16,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,            i = indexRef[0];,4,0,1,1,2,0,0,0,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,            char c = token.charAt(0);,2,0,0,1,2,0,12,0,0,14,25,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,            switch (c) {,2,0,0,1,3,0,0,0,0,3,12,6,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,574,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,4,0,0,7,38,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,577,        int length = pattern.length();,14,2,0,1,2,0,10,2,0,30,30,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,579,        char c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,8,27,5,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,3,0,1,3,0,0,2,0,12,51,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,621,        indexRef[0] = i;,2,0,1,1,2,0,0,2,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,622,        return buf.toString();,10,2,0,1,2,1,12,0,0,25,22,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",0,0,0,1,2,0,0,0,0,3,112,4,0.22939,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.22939,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,334,        return MIN;,8,0,0,0,0,1,0,2,0,12,11,1,0.22069,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1133,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,613,        if (dpe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,614,            dpe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,636,        return dpe;,0,0,0,0,0,1,0,0,0,1,11,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,339,        return iMax;,2,0,0,0,0,1,0,0,0,2,12,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1643,        if (dye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1649,        return dye;,4,0,0,0,0,1,0,0,0,5,11,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1633,        if (dwe == null) {,2,0,0,1,3,0,6,0,0,8,18,5,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1634,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1639,        return dwe;,4,1,0,0,0,1,0,0,0,5,11,3,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1623,        if (wwe == null) {,4,0,0,1,3,0,0,4,0,8,18,8,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1624,            wwe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1629,        return wwe;,10,2,0,0,0,1,0,0,0,12,11,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,2,4,1,0,0,0,7,66,4,0.21262,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,8,0,0,0,0,11,60,4,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,215,"            instant = add(instant, valueToAdd);",2,0,0,1,2,0,6,0,0,9,35,6,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,216,"            return iChronology.get(partial, instant);",0,0,0,1,2,1,0,0,0,4,41,4,0.21053,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,520,"        return new MonthDay(this, newValues);",10,0,0,1,2,1,4,2,0,17,37,6,0.21053,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1614,        if (we == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1619,        return we;,6,1,0,0,0,1,0,0,0,7,10,1,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",14,8,0,2,4,1,8,0,0,31,66,3,0.20915,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,79,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1261,            return iValue.length();,0,0,0,1,2,1,4,0,0,4,23,6,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,370,        if (text == null) {,2,0,0,1,3,0,8,2,0,12,19,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,373,        switch (text.length()) {,6,0,0,2,5,0,16,2,0,25,24,1,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,379,                return append0(new StringLiteral(text));,10,0,0,2,4,1,6,2,0,19,40,3,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1232,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1233,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1234,        },0,0,0,0,1,0,0,0,0,1,1,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1237,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",4,0,0,1,2,0,0,2,0,7,67,6,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,139,            dayToUse = maxDay;,4,0,0,0,0,0,0,0,0,5,18,6,0.19048,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,273,        if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,276,        if (parsers == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,279,        int length = parsers.length;,8,0,0,0,0,0,6,0,0,14,28,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,280,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,289,        for (i = 0; i < length - 1; i++) {,8,2,0,1,3,0,0,0,0,12,34,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,0,0,4,9,0,0,0,0,13,46,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,294,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,296,"        return append0(printer, new MatchingParser(copyOfParsers));",4,3,0,2,4,1,4,0,0,11,59,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,307,        checkParser(parser);,0,0,0,1,2,0,0,0,0,3,20,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,309,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,319,        if (parser == null) {,6,1,0,1,3,0,0,0,0,7,21,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,322,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1112,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2752,            super();,6,0,0,1,2,0,0,0,0,6,8,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2753,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2754,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2755,            for (int i=parsers.length; --i>=0 ;) {,8,1,0,1,3,0,0,0,0,10,38,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2756,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2757,                if (parser != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2758,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2759,                    if (len > est) {,6,0,0,1,3,0,4,0,0,12,16,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2760,                        est = len;,4,0,0,0,0,0,0,0,0,5,10,11,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2763,            },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,142,                return val1;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,144,        long total = val1 * val2;,6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,10,2,0,1,3,0,0,0,0,12,27,3,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,148,        return total;,2,1,0,0,0,1,2,0,0,7,13,4,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,136,        switch (val2) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,0,0,0,6,78,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.75385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,0,0,0,7,54,4,0.73134,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,            hms = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.57647,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,            if (prev > Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,28,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.42982,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,            iShort = isShort;,0,0,0,0,0,0,0,0,0,0,17,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },10,1,0,0,1,0,0,0,0,12,1,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,            return iShort ? 6 : 20;,0,0,0,0,0,1,0,0,0,1,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,318,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,454,        switch (iRoundingMode) {,0,0,0,1,3,0,0,0,0,4,24,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,474,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,475,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",10,0,0,0,1,1,0,2,0,13,55,1,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,6,0,0,0,0,1,8,0,0,15,15,3,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,10,0,0,0,0,2,30,6,0,50,7,1,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.25654,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,                        buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },2,1,0,0,1,0,0,0,0,3,1,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,8,0,0,9,42,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,        if (pattern == null || pattern.length() == 0) {,0,0,0,2,5,0,0,0,0,7,47,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,14,5,0,1,3,0,2,2,0,24,32,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,4,0,0,1,2,0,6,0,0,12,41,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,6,0,0,8,33,1,0.196,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,6,1,0,0,0,0,8,0,0,16,6,3,0.18702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,6,0,0,1,2,0,0,8,0,14,30,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,0,0,0,2,4,0,4,0,0,4,28,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,10,0,0,10,30,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,6,1,0,1,3,0,0,0,0,8,12,3,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,0,1,1,1,2,0,8,0,0,14,38,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,621,        indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,2,0,0,1,2,1,4,2,0,8,22,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,503,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.18352,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",10,0,0,1,2,3,2,12,0,28,112,1,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,4,1,0,1,3,0,0,0,0,6,18,7,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,4,0,0,2,5,0,0,0,0,5,36,5,0.17754,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },2,0,0,0,1,0,0,2,0,4,1,3,0.17626,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,0,0,0,5,68,5,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,4,1,0,2,4,0,4,0,0,9,64,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,365,"                millis = savedFields[i].set(millis, resetFields);",0,0,0,2,4,0,0,0,0,6,49,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0,0,0,5,11,0,0,0,0,16,63,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,6,0,0,11,36,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,482,            if (iText == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,14,3,0,1,3,0,0,0,0,18,12,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",6,1,0,0,1,0,0,2,0,9,46,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,14,0,0,1,3,0,0,2,0,18,19,1,0.16388,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,6,1,0,2,5,0,2,0,0,10,24,3,0.16388,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0,-1
