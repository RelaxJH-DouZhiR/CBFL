dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,18,0,0,18,58,5,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2736,            if (array != null) {,10,1,0,1,3,0,2,0,0,14,20,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2738,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2741,        },2,0,0,0,1,0,4,2,0,9,1,6,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,448,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,454,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,6,0,0,6,38,5,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,551,            } else if (iMode == 's') {,8,1,0,1,4,0,14,2,0,28,26,1,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,554,                offset = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,4,0,0,6,46,10,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,726,                        daysToAdd -= 7;,0,0,0,0,0,0,0,0,0,0,15,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,209,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,212,"        return append0(formatter.getPrinter(), formatter.getParser());",4,3,0,3,6,1,10,0,0,17,62,1,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,153,        return iPrinter;,2,1,0,0,0,1,0,0,0,3,16,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,345,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,346,        iElementPairs.add(printer);,2,1,0,1,2,0,0,0,0,3,27,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,347,        iElementPairs.add(parser);,0,0,0,1,2,0,0,0,0,3,26,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00123,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1543,            return iTailZone.getOffset(instant);,2,0,0,1,2,1,8,0,0,10,36,1,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1141,            return true;,8,0,0,0,0,1,4,0,0,14,12,3,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1131,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1104,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1105,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1107,                if (printer != null) {,2,0,0,1,3,1,4,0,0,7,22,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1108,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1109,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1304,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,4,0,0,7,46,16,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1306,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1311,                start = startRecurrence.next,2,0,0,0,0,0,4,0,0,7,28,7,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1319,            },2,0,0,0,1,0,4,0,0,7,1,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1322,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1330,            },4,0,0,0,1,0,0,0,0,5,1,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1332,            return (start > end) ? startRecurrence : endRecurrence;,16,1,0,1,2,1,4,0,0,22,55,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,114,            yearToUse = thisYear + (monthToUse / iMax);,8,2,0,1,2,0,0,0,0,11,43,6,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,115,            monthToUse = (monthToUse % iMax) + 1;,0,0,0,1,2,0,0,0,0,3,37,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,8,0,0,11,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",4,1,1,2,4,0,0,0,0,7,52,8,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,578,"                    next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,6,0,0,9,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,103,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,62,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,112,        int monthToUse = thisMonth - 1 + months;,0,0,0,0,0,0,0,0,0,0,40,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,113,        if (monthToUse >= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0,0,0,1,2,0,0,0,0,3,67,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,138,        if (dayToUse > maxDay) {,4,1,0,1,3,0,0,0,0,5,24,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,144,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,146,        return datePart + timePart;,4,1,0,0,0,1,0,0,0,5,27,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,92,        if (months == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00118,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1579,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1580,            if (instant < end) {,4,2,0,1,3,0,8,0,0,14,20,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1583,            return iTailZone.nextTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1199,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1200,            Recurrence startRecurrence = iStartRecurrence;,2,1,0,0,0,0,8,0,0,11,46,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1201,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1206,                start = startRecurrence.next,0,0,0,0,0,0,0,0,0,0,28,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1208,                if (instant > 0 && start < 0) {,2,0,0,1,3,0,12,0,0,15,31,8,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1218,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1221,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1223,                if (instant > 0 && end < 0) {,4,3,0,1,3,0,0,0,0,7,29,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1233,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1235,            return (start > end) ? end : start;,12,2,1,1,2,1,0,0,0,17,35,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,573,"                next = setDayOfWeek(chrono, next);",4,0,0,1,2,1,6,0,0,12,34,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,4,0,0,2,4,0,8,0,0,12,48,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,719,            if (daysToAdd != 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,549,            if (iMode == 'w') {,10,3,0,1,3,0,0,0,0,15,19,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,558,            instant += offset;,6,1,0,0,0,0,4,0,0,12,18,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,563,"            next = chrono.millisOfDay().set(next, 0);",2,0,0,2,4,0,8,2,0,12,41,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,1,0,2,4,0,4,0,0,7,52,3,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,567,            if (iDayOfWeek == 0) {,2,1,0,1,3,0,0,0,0,3,22,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,583,            return next - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,682,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,683,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,706,            if (iDayOfMonth >= 0) {,4,1,0,1,3,0,4,0,0,9,23,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,57,4,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,776,            return iSaveMillis;,2,1,0,0,0,1,8,0,0,11,19,3,0.00116,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,61,        int thisYear = get(instant);,2,0,0,1,2,0,0,0,0,2,28,4,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,63,"        return set(instant, newYear);",0,0,0,1,2,1,6,0,0,6,29,5,0.00112,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,19,253,"        return getDurationField().add(instant, value);",0,0,0,2,4,1,0,0,0,7,46,4,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,58,        if (years == 0) {,8,2,0,1,3,0,0,4,0,14,17,1,0.00112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,396,        if (fieldType == null) {,6,2,0,1,3,0,0,0,0,8,24,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,402,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,405,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0011,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,1,0,0,1,1,0,0,0,5,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,8,1,0,0,0,0,0,0,0,10,63,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0,0,0,3,6,1,0,0,0,10,47,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1174,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1198,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,359,        return append0(new CharacterLiteral(c));,4,0,0,2,4,1,0,0,0,4,40,6,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1169,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1170,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1171,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2580,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2581,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2582,                int printEst = 0;,2,0,0,0,0,0,6,0,0,8,17,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2583,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,0,2,4,0,0,0,0,2,63,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2585,                    printEst += printer.estimatePrintedLength();,6,0,0,1,2,0,4,0,0,12,44,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2586,                    iPrinters[i] = printer;,10,0,1,1,2,0,4,0,0,20,23,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2588,                iPrintedLengthEstimate = printEst;,6,0,0,0,0,0,4,0,0,11,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2595,                int size = parserList.size();,2,0,0,1,2,0,4,0,0,6,29,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2596,                iParsers = new DateTimeParser[size];,4,0,0,1,2,0,0,0,0,5,36,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2597,                int parseEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2598,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,4,0,0,14,28,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2599,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2600,                    parseEst += parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,42,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2601,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2603,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2715,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2716,                if (element instanceof DateTimePrinter) {,4,1,0,1,3,0,0,2,0,7,41,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2717,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2720,                        printerList.add(element);,8,0,0,1,2,0,0,0,0,10,25,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2724,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2725,                if (element instanceof DateTimeParser) {,2,0,0,1,3,0,0,0,0,2,40,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2726,                    if (element instanceof Composite) {,4,0,0,1,3,0,0,2,0,6,35,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2729,                        parserList.add(element);,0,0,0,1,2,0,0,0,0,3,24,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1430,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1426,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,4,0,0,7,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1427,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1281,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1282,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1283,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1285,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1129,                return ((Composite)f).isPrinter();,2,0,0,3,6,1,2,2,0,6,34,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1139,                return ((Composite)f).isParser();,0,0,0,3,6,1,0,0,0,10,33,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2701,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2705,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1117,                f = new Composite(iElementPairs);,4,0,0,1,2,0,0,2,0,7,33,8,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2569,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2571,            List<Object> printerList = new ArrayList<Object>();,4,0,0,1,2,0,0,8,0,12,51,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2572,            List<Object> parserList = new ArrayList<Object>();,6,1,0,1,2,0,0,8,0,15,50,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2574,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,8,0,0,8,49,6,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2576,            if (printerList.size() <= 0) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2591,            if (parserList.size() <= 0) {,4,2,0,2,5,0,4,0,0,10,29,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2605,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2713,            int size = elementPairs.size();,6,1,1,1,2,0,0,2,0,12,31,5,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2714,            for (int i=0; i<size; i+=2) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2733,        },0,0,0,0,1,0,8,0,0,8,1,5,0.00105,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,19,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,1,2,1,0,0,0,4,42,4,0.00104,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,105,        DateTimePrinter printer = null;,2,0,0,0,0,0,0,2,0,4,31,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,106,        if (isPrinter(f)) {,0,0,0,2,5,0,4,0,0,4,19,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,0,2,0,7,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,109,        DateTimeParser parser = null;,4,0,0,0,0,2,0,6,0,12,29,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,110,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,111,            parser = (DateTimeParser) f;,12,1,0,1,2,1,4,4,0,23,28,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,113,        if (printer != null || parser != null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,114,"            return new DateTimeFormatter(printer, parser);",4,0,0,1,2,1,0,2,0,6,46,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,107,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,108,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,109,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,110,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,111,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,112,        iChrono = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,113,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,114,        iPivotYear = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,115,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,338,        iElementPairs.add(element);,0,0,0,1,2,0,8,0,0,8,27,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,339,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,340,        return this;,2,0,0,0,0,1,0,0,0,2,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1137,        if (f instanceof DateTimeParser) {,10,1,0,1,3,0,2,2,0,15,34,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,4,0,0,7,29,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1100,        Object f = iFormatter;,0,0,0,0,0,0,0,0,0,0,22,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1102,        if (f == null) {,12,2,0,1,3,0,0,0,0,16,16,3,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1120,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1123,        return f;,4,0,0,0,0,1,0,0,0,4,9,5,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,83,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,85,    },2,2,0,0,1,0,4,0,0,9,1,4,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,70,        return sum;,2,1,0,0,0,1,0,0,0,3,11,6,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,64,        int sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,104,        long addition = value * iUnitMillis;  // safe,6,1,0,0,0,0,0,0,0,7,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,105,"        return FieldUtils.safeAdd(instant, addition);",2,0,0,1,2,1,16,0,0,18,45,3,0.00096,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,82,        long sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,23,5,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,10,5,0,3,7,0,6,0,0,21,45,3,0.00085,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0,0,0,2,4,0,0,0,0,6,59,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,            return MAX_LENGTH;,0,0,0,0,0,1,0,0,0,1,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,            String str = text.substring(position);,0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,                if (str.startsWith(id)) {,0,0,0,2,5,0,0,0,0,7,25,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,            },0,0,0,0,1,0,0,0,0,1,1,4,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0,0,0,1,2,1,4,0,0,4,57,6,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0,0,0,1,2,0,0,0,0,3,66,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,            int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());",0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,374,        return cAvailableIDs;,0,0,0,0,0,1,0,0,0,1,21,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/DateTime,20,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,                builder.appendMinuteOfHour(tokenLen);,0,0,0,1,2,0,0,0,0,3,37,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,                        indexRef[0]--;,0,0,0,1,2,0,0,0,0,3,14,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,        int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,        if (tokenLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,            char c = token.charAt(0);,0,0,0,1,2,0,4,0,0,4,25,7,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,            switch (c) {,0,0,0,1,3,0,6,0,0,6,12,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,                    int maxDigits = 9;,2,0,0,0,0,0,0,0,0,2,18,10,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,                    if (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,                    switch (c) {,4,0,0,1,3,0,10,0,0,14,12,3,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0102,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,357,        int sampleLen = errorPos + 32;,0,0,0,0,0,0,0,0,0,0,30,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,359,        if (text.length() <= sampleLen + 3) {,4,2,0,2,5,0,8,0,0,14,37,3,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,360,            sampleText = text;,0,0,0,0,0,0,0,0,0,0,18,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,365,        if (errorPos <= 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,                if (tokenLen == 2) {,6,1,0,1,3,0,0,2,0,9,20,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,        Chronology chrono = selectChronology(null);,2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,847,        if (newPos >= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,                builder.appendDayOfMonth(tokenLen);,2,0,0,1,2,0,14,0,0,17,35,1,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.005,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.00444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,                    i--;,2,0,0,0,0,0,4,0,0,7,4,3,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,                String sub = token.substring(1);,2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,            buf.append('\'');,0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,600,            for (; i < length; i++) {,0,0,0,1,3,0,8,0,0,8,25,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,                c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,616,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,12,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,                    i++;,2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,593,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,                char peek = pattern.charAt(i + 1);,8,1,0,1,2,0,8,0,0,17,34,3,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0038,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,        int length = pattern.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,        int[] indexRef = new int[1];,0,0,1,2,4,0,0,0,0,3,28,11,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,16,0,0,19,45,3,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,406,            i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,414,            switch (c) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,574,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,        int i = indexRef[0];,2,0,0,1,2,0,6,0,0,9,20,8,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,        int length = pattern.length();,6,0,0,1,2,0,4,0,0,11,30,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,        char c = pattern.charAt(i);,6,1,0,1,2,0,6,0,0,14,27,7,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,10,8,0,1,3,0,4,0,0,26,51,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",6,0,0,1,2,3,0,14,0,25,112,1,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00368,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,            return position + 1;,2,0,0,0,0,1,0,0,0,2,20,5,0.00362,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1206,            char a = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1207,            char b = iValue;,0,0,0,0,0,0,0,0,0,0,16,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,            if (a != b) {,12,2,0,1,3,0,0,4,0,19,13,1,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1345,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0,0,0,4,8,0,0,0,0,12,63,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,            if (position >= text.length()) {,2,1,0,2,5,0,8,0,0,11,32,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1321,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1322,            },10,1,0,0,1,0,0,4,0,15,1,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1329,            if (length >= 9) {,6,0,1,1,3,0,6,2,0,19,18,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1334,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1335,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1339,                    value = text.charAt(i++) - '0';,2,0,0,1,2,0,6,0,0,9,31,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1342,                },10,0,0,0,1,0,8,4,0,22,1,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1343,                position += length;,8,0,0,0,0,0,0,2,0,11,19,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1344,                while (i < position) {,10,3,0,1,3,0,0,0,0,14,22,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1347,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1352,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1353,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",2,0,0,3,6,0,8,2,0,12,62,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,261,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,262,        int savedFieldsCount = iSavedFieldsCount;,2,0,1,0,0,0,6,0,0,13,41,8,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,273,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,274,        savedFields[savedFieldsCount] = field;,0,0,0,1,2,0,0,0,0,3,38,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,275,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,468,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,469,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,471,            iLocale = null;,6,0,0,0,0,0,0,0,0,8,15,1,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1318,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.00317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,65,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1294,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1295,            int length = 0;,10,4,0,0,0,0,0,0,0,14,15,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1296,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1297,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0,0,0,2,5,0,0,0,0,7,55,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1324,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2682,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2683,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2687,            int len = elements.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2688,            for (int i=0; i<len && position >= 0; i++) {,0,0,0,1,3,0,0,0,0,4,44,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2689,"                position = elements[i].parseInto(bucket, text, position);",0,0,0,2,4,0,0,0,0,6,57,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2691,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,119,        super();,2,0,1,1,2,0,0,0,0,6,8,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,72,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,120,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,0,0,0,5,45,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,121,        iMillis = instantLocal;,4,1,0,0,0,0,0,0,0,6,23,6,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,122,        iZone = chrono.getZone();,0,0,0,1,2,0,4,0,0,4,25,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,123,        iChrono = chrono.withUTC();,0,0,0,1,2,0,0,0,0,3,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,4,0,0,12,58,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,125,        iPivotYear = pivotYear;,14,2,0,0,0,0,2,0,0,20,23,3,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,920,        DateTimeParser parser = iParser;,4,0,0,0,0,0,0,2,0,6,32,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,921,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,924,        return parser;,0,0,0,0,0,1,0,0,0,1,14,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2615,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.00254,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,0,0,0,3,29,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,1,0,5,10,0,0,0,0,11,55,1,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,78,        } else {,8,2,0,0,2,0,0,0,0,11,8,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1180,            buf.append(iValue);,2,0,0,1,2,0,10,0,0,13,19,4,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1181,        },2,1,0,0,1,0,4,0,0,7,1,1,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2608,            DateTimePrinter[] elements = iPrinters;,10,1,0,1,2,0,0,2,0,14,39,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2609,            if (elements == null) {,8,2,0,1,3,0,10,0,0,21,23,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2613,            if (locale == null) {,2,2,0,1,3,0,8,0,0,12,21,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2618,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2619,            for (int i = 0; i < len; i++) {,10,2,0,1,3,0,0,0,0,13,31,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2620,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2622,        },12,2,0,0,1,0,0,2,0,16,1,2,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1437,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,1,0,2,4,0,8,0,0,12,76,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,14,0,0,3,6,0,24,4,0,44,78,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,582,"        printTo(buf, instant);",14,6,0,1,2,0,10,0,0,30,22,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,583,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,6,0,0,13,54,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,460,"        printTo(buf, millis, chrono);",6,0,0,1,2,0,8,0,0,15,29,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,83,                digits = 4;,0,0,0,0,0,0,0,0,0,0,11,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,617,        DateTimePrinter printer = requirePrinter();,6,1,0,1,2,0,4,2,0,13,43,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,623,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,8,0,0,18,40,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,65,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,0,0,0,6,79,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,80,            if (value < 1000) {,8,1,0,1,3,0,6,0,0,17,19,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.00236,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1541,                return iWallOffsets[i - 1];,2,1,1,1,2,1,0,0,0,5,27,8,0.00217,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2602,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.002,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00194,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,66,            buf.append((char)(value + '0'));,8,1,0,3,6,2,10,6,0,28,32,1,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,67,        } else if (value < 100) {,8,1,0,1,4,0,0,0,0,10,25,1,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,168,        if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00188,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,656,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,657,        if (printer == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,660,        return printer;,2,0,0,0,0,1,0,0,0,2,15,5,0.00186,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,164,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0018,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.00179,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00172,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,140,        int offset = zone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,141,        instant -= offset;,0,0,0,0,0,0,6,0,0,6,18,5,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,142,        if (offset != zone.getOffset(instant)) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0017,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00164,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00164,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00164,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,0,0,0,5,29,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,910,        return offsetAdjusted;,6,1,0,0,0,1,0,0,0,7,22,3,0.00154,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,882,        final int offsetLocal = getOffset(instantLocal);,4,1,0,1,2,1,4,0,0,10,48,3,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,0,0,0,0,0,0,0,0,7,56,5,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,0,0,0,0,2,54,7,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,887,        if (offsetLocal != offsetAdjusted) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,520,                    return chronology.minuteOfHour();,2,0,0,1,2,1,4,0,0,6,33,4,0.00145,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",4,0,0,2,4,1,0,0,0,5,66,4,0.00144,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00141,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,935,        chrono = DateTimeUtils.getChronology(chrono);,14,0,0,1,2,0,6,2,0,25,45,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,936,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,942,        return chrono;,4,0,1,0,0,1,4,4,0,14,14,3,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,68,5,0.0014,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,31,    private static final double LOG_10 = Math.log(10);,10,0,0,1,2,3,8,0,0,22,50,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",8,0,0,2,4,1,4,0,0,13,67,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,496,                    return chronology.monthOfYear();,2,0,1,1,2,1,0,0,0,6,32,8,0.00133,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00133,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00132,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,10,0,0,10,60,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,454,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,10,0,0,12,38,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,345,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,346,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,347,        iElementPairs.add(parser);,0,0,0,1,2,0,8,0,0,8,26,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",6,0,0,2,4,1,2,2,0,11,73,7,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,396,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,402,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,405,        if (minDigits <= 1) {,2,1,0,1,3,0,10,0,0,13,21,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1174,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1198,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,359,        return append0(new CharacterLiteral(c));,2,0,0,2,4,1,2,2,0,6,40,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1169,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1170,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1171,        },4,0,0,0,1,0,0,0,0,5,1,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2574,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2575,                iPrinters = new DateTimePrinter[size];,0,0,0,1,2,0,0,0,0,3,38,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2576,                int printEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2577,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,16,0,0,26,28,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2578,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0,0,0,2,4,0,0,0,0,6,63,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2579,                    printEst += printer.estimatePrintedLength();,4,0,0,1,2,0,8,0,0,13,44,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2580,                    iPrinters[i] = printer;,2,0,1,1,2,0,0,0,0,7,23,9,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2582,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2589,                int size = parserList.size();,2,0,0,1,2,0,0,0,0,2,29,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2590,                iParsers = new DateTimeParser[size];,0,0,0,1,2,0,0,0,0,3,36,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2591,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2592,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2593,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2594,                    parseEst += parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,42,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2595,                    iParsers[i] = parser;,0,0,0,1,2,0,0,0,0,3,21,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2597,                iParsedLengthEstimate = parseEst;,0,0,0,0,0,0,0,0,0,0,33,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2709,                Object element = elementPairs.get(i);,2,0,0,1,2,0,8,2,0,12,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2710,                if (element instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,41,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2711,                    if (element instanceof Composite) {,6,0,0,1,3,0,0,2,0,9,35,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2714,                        printerList.add(element);,2,0,0,1,2,0,10,2,0,14,25,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2718,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2719,                if (element instanceof DateTimeParser) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2720,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2723,                        parserList.add(element);,0,0,0,1,2,0,0,0,0,3,24,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1430,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1426,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1427,        },4,1,0,0,1,0,8,0,0,13,1,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1281,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1282,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1283,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1285,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1129,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1139,                return ((Composite)f).isParser();,8,0,0,3,6,1,4,0,0,13,33,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2695,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2699,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1117,                f = new Composite(iElementPairs);,6,1,0,1,2,0,4,2,0,15,33,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2563,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2565,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2566,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2568,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,0,0,0,3,49,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2570,            if (printerList.size() <= 0) {,2,1,0,2,5,0,4,0,0,7,30,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2585,            if (parserList.size() <= 0) {,8,0,0,2,5,0,4,0,0,13,29,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2599,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2707,            int size = elementPairs.size();,0,0,0,1,2,0,0,0,0,3,31,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2708,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2727,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,105,        DateTimePrinter printer = null;,4,0,0,0,0,0,0,2,0,6,31,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,106,        if (isPrinter(f)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,6,2,0,13,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,109,        DateTimeParser parser = null;,2,0,0,0,0,0,0,2,0,4,29,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,110,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,111,            parser = (DateTimeParser) f;,0,0,0,1,2,0,0,0,0,3,28,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,113,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,114,"            return new DateTimeFormatter(printer, parser);",0,0,0,1,2,1,0,0,0,4,46,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,107,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,108,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,109,        iParser = parser;,6,0,0,0,0,0,0,0,0,7,17,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,110,        iLocale = null;,2,0,0,0,0,0,8,0,0,11,15,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,111,        iOffsetParsed = false;,0,0,0,0,0,0,0,0,0,0,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,112,        iChrono = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,113,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,114,        iPivotYear = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,115,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,338,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,339,        iElementPairs.add(element);,0,0,0,1,2,0,6,0,0,6,27,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,340,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1137,        if (f instanceof DateTimeParser) {,2,0,0,1,3,0,0,2,0,4,34,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1100,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1102,        if (f == null) {,4,1,0,1,3,0,0,2,0,7,16,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1120,            iFormatter = f;,8,0,0,0,0,0,0,0,0,10,15,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1123,        return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,83,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,253,            return ISOChronology.getInstance();,0,0,0,1,2,1,4,0,0,4,35,7,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00095,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00095,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,304,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00095,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1540,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00089,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1576,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00087,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,80,            return (int) ((instant / getUnitMillis()) % iRange);,0,0,0,4,8,1,0,0,0,13,52,4,0.00084,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,295,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00079,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,8,0,0,8,47,5,0.00072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,0,0,0,4,43,4,0.00072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,10,0,0,10,78,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,10,0,0,10,84,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,10,0,0,10,88,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,10,0,0,10,89,5,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,86,        return getInstance(DateTimeZone.getDefault());,2,3,0,2,4,1,6,0,0,11,46,3,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1533,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1534,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,205,                if (iOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,2,0,0,1,2,0,0,0,0,2,43,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,111,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,8,0,0,8,43,5,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1528,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1529,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1530,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1570,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1571,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1572,            i = (i >= 0) ? (i + 1) : ~i;,12,2,0,2,4,0,6,0,0,23,28,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,185,        private int iOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,40,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,186,        private int iStandardOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,48,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,189,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,190,            iZoneRef = zone;,4,0,0,0,0,0,0,0,0,5,16,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,191,        },2,0,0,0,1,0,2,0,0,5,1,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,148,        int period = (int)(millis >> 32);,0,0,0,2,4,0,0,0,0,6,33,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,149,        Info[] cache = iInfoCache;,6,0,0,1,2,0,0,2,0,8,26,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,150,        int index = period & cInfoCacheMask;,8,1,0,0,0,3,4,4,0,20,36,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,151,        Info info = cache[index];,2,0,1,1,2,0,4,2,0,12,25,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.33333,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0,0,0,1,2,0,0,0,0,3,85,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",0,0,0,1,2,0,0,0,0,3,27,4,0.08333,1,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,357,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0,0,0,2,4,0,0,0,0,6,65,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,10,2,0,0,0,0,0,0,0,12,59,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,4,1,0,1,3,0,8,0,0,14,18,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,648,            return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.0597,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,12,3,0,1,3,0,4,0,0,19,61,1,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,4,1,0,3,6,1,16,0,0,21,84,1,0.04762,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,2,1,0,0,0,1,6,0,0,11,13,4,0.04167,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",4,0,0,1,2,1,12,0,0,18,36,3,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,            long current = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,14,4,0,1,3,0,0,0,0,19,32,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,                if (field.isPrecise()) {,0,0,0,2,5,0,4,0,0,4,24,9,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);",0,0,0,1,2,0,0,0,0,3,51,4,0.0396,0,0,-1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",10,0,0,2,4,1,4,4,0,18,68,1,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",6,0,0,2,4,1,8,0,0,15,69,3,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,1,0,2,4,1,8,0,0,11,68,6,0.03571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,52,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,10,5,0,3,7,0,6,0,0,21,53,1,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,88,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,330,            int offset = getOffsetToAdd(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,47,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,            return iField.getDifference,0,0,0,0,0,1,4,0,0,4,27,6,0.02439,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,278,                    return chronology.weeks();,0,0,0,1,2,1,4,0,0,4,26,7,0.02381,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,84,4,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,14,0,0,16,77,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,10,2,0,0,0,1,0,0,0,13,32,3,0.02105,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,290,                    return chronology.millis();,0,0,0,1,2,1,0,0,0,4,27,4,0.02094,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,288,                    return chronology.seconds();,0,0,0,1,2,1,4,0,0,4,28,7,0.02041,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,2,0,0,0,0,1,6,0,0,8,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,4,0,0,5,26,1,0.01914,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,2,1,0,1,2,0,0,0,0,3,37,7,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,319,"            instant = iField.add(instant + offset, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,16,7,0,2,4,1,12,2,0,42,79,1,0.01762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,8,1,0,1,2,1,0,0,0,10,28,4,0.01606,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,28,4,0,1,3,0,20,0,0,57,26,1,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.01575,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.01575,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,276,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.01509,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,674,        int realIndex = iIndices[index];,0,0,0,1,2,0,0,0,0,3,32,4,0.01493,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,2,0,0,2,4,1,4,2,0,8,58,5,0.01493,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,2,1,0,0,0,0,8,0,0,11,28,5,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,0,0,3,7,0,20,2,0,27,53,3,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,8,1,0,0,0,1,0,2,0,11,14,1,0.01476,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,280,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.01404,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,6,1,0,1,2,1,4,0,0,11,26,1,0.01389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,4,4,0,1,3,0,8,0,0,16,16,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,4,1,0,1,3,0,6,0,0,11,17,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,324,        return iType.getFieldType(index);,6,4,0,1,2,1,10,0,0,21,33,3,0.01201,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,628,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.01201,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.01087,0,0,-1
defect4j,time,org/joda/time/Period,22,298,"        super(0L, null, null);",6,0,0,1,2,0,4,0,0,11,22,3,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,299,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,0.00955,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,115,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00952,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,264,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,266,            switch (iOrdinal) {,6,1,0,1,3,0,0,0,0,7,19,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,287,            return PeriodType.standard();,6,1,0,1,2,1,4,0,0,12,29,1,0.00868,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,117,"        return FieldUtils.safeAdd(instant, value);",16,2,0,1,2,1,16,2,0,38,42,1,0.00866,0,0,-1
defect4j,time,org/joda/time/Duration,22,176,        super(duration);,0,0,0,1,2,0,0,0,0,3,16,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,177,    },2,0,0,0,1,0,0,0,0,3,1,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,43,    public static final Duration ZERO = new Duration(0L);,0,0,1,1,2,0,4,0,0,9,53,7,0.00847,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,70,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00842,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,239,        super();,4,0,0,1,2,0,0,2,0,6,8,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,240,        type = checkPeriodType(type);,2,1,0,1,2,0,0,0,0,3,29,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,241,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,242,        iType = type;,6,1,0,0,0,0,0,0,0,8,13,1,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,243,"        iValues = chrono.get(this, duration);",8,2,0,1,2,0,0,4,0,14,37,3,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,244,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,61,        super();,0,0,0,1,2,0,6,0,0,6,8,9,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,62,        iMillis = duration;,0,0,0,0,0,0,0,0,0,0,19,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,44,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0084,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,64,        int sum = val1 + val2;,4,2,0,0,0,0,0,0,0,6,22,6,0.00839,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,2,0,0,3,7,0,0,0,0,3,45,4,0.00839,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,276,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,277,        int[] values = new int[size];,0,0,0,2,4,0,0,0,0,6,29,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,278,        if (duration != 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,289,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.00826,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,303,        return iType;,4,0,1,0,0,1,6,0,0,15,13,1,0.00815,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,335,        return iValues[index];,0,0,1,1,2,1,0,0,0,9,22,4,0.00805,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00762,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00762,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,102,        PeriodType type = cStandard;,0,0,0,0,0,0,0,0,0,0,28,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,103,        if (type == null) {,4,1,0,1,3,0,0,0,0,5,19,5,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,114,            cStandard = type;,0,0,0,0,0,0,0,0,0,0,17,4,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,116,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00752,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,286,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,293,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,0,0,0,4,41,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,313,        return iType.size();,0,0,0,1,2,1,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,22,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,10,0,0,0,0,1,4,0,0,14,21,3,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,836,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00719,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,835,        if (this == obj) {,4,0,0,1,3,0,0,2,0,6,18,4,0.00676,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.00627,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,102,            return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00563,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,595,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,596,        iName = name;,8,1,0,0,0,0,0,0,0,10,13,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,597,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,598,        iIndices = indices;,0,0,0,0,0,0,0,0,0,0,19,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,599,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",10,0,0,1,2,3,0,12,0,25,90,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,58,    static int YEAR_INDEX = 0;,0,0,0,0,0,0,0,0,0,0,26,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,59,    static int MONTH_INDEX = 1;,0,0,0,0,0,0,0,0,0,0,27,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,61,    static int DAY_INDEX = 3;,0,0,0,0,0,0,0,0,0,0,25,4,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,62,    static int HOUR_INDEX = 4;,2,1,1,0,0,0,0,0,0,5,26,7,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,63,    static int MINUTE_INDEX = 5;,2,0,0,0,0,1,0,0,0,3,28,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,64,    static int SECOND_INDEX = 6;,4,0,0,0,0,0,2,0,0,6,28,5,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,65,    static int MILLI_INDEX = 7;,2,0,0,0,0,1,0,0,0,3,27,2,0.00551,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,253,            return ISOChronology.getInstance();,4,1,0,1,2,1,12,0,0,18,35,1,0.00481,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,107,        if ((base = iBase) != null) {,0,0,0,2,5,0,0,0,0,7,29,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,108,            return base.getZone();,0,0,0,1,2,1,0,0,0,4,22,4,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,86,        return getInstance(DateTimeZone.getDefault());,4,0,0,2,4,1,6,0,0,11,46,3,0.00374,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,255,        return chrono;,14,0,0,0,0,1,10,4,0,31,14,3,0.00312,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,68,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0,0,0,0,0,0,0,0,0,0,41,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,82,        checkPermission();,2,1,0,1,2,0,6,0,0,10,18,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0,0,0,1,2,0,0,0,0,3,55,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,84,    },0,0,0,0,1,0,2,0,0,3,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,133,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,415,            iMillis = fixedMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,416,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,175,        if (sm != null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,178,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,181,        synchronized(DateTimeZone.class) {,2,0,1,1,3,0,0,2,0,6,34,1,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,182,            cDefault = zone;,0,0,0,0,0,0,0,0,0,0,16,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00278,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,108,"                cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,9,0.00278,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,96,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0,0,0,2,4,0,0,0,0,6,66,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,104,        synchronized (cCache) {,6,0,0,1,3,0,6,0,0,12,23,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,106,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,111,        cFastCache[index] = chrono;,4,0,1,1,2,0,0,0,0,10,27,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,112,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00265,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,252,        if (chrono == null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.00261,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,147,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.00261,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,133,        DateTimeZone zone = cDefault;,0,0,0,0,0,0,0,0,0,0,29,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,134,        if (zone == null) {,4,2,0,1,3,0,4,0,0,10,19,3,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,0,6,0,0,6,34,5,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,136,                zone = cDefault;,0,0,0,0,0,0,0,0,0,0,16,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,137,                if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,8,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,138,                    DateTimeZone temp = null;,6,0,1,0,0,0,0,4,0,14,25,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,141,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,142,                            if (id != null) {  // null check avoids stack overflow,0,0,0,1,3,0,0,0,0,4,54,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,143,                                temp = forID(id);,0,0,0,1,2,0,0,0,0,3,17,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,153,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,154,                    if (temp == null) {,4,1,0,1,3,0,8,0,0,14,19,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,157,                    cDefault = zone = temp;,0,0,0,0,0,0,0,0,0,0,23,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,159,            },6,1,1,0,1,0,0,2,0,13,1,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,161,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.0026,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,82,"        super(base, zone);",4,0,0,1,2,0,0,0,0,4,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,83,    },2,1,0,0,1,0,4,0,0,7,1,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,56,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,59,        base = base.withUTC();,4,0,0,1,2,0,4,0,0,9,22,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,60,        if (base == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,66,"        return new ZonedChronology(base, zone);",0,0,0,1,2,1,0,0,0,4,39,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,22,11,0,1,2,1,4,0,0,37,87,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,86,        return (DateTimeZone)getParam();,6,1,0,2,4,1,2,2,0,12,32,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0,0,0,1,2,0,0,0,0,3,66,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,157,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,158,"        fields.centuries = convertField(fields.centuries, converted);",2,1,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,159,"        fields.years = convertField(fields.years, converted);",14,0,0,1,2,0,6,2,0,24,53,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,161,"        fields.weekyears = convertField(fields.weekyears, converted);",12,0,0,1,2,0,4,2,0,20,61,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,163,"        fields.days = convertField(fields.days, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0,1,0,1,2,0,4,0,0,5,59,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,166,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,167,"        fields.minutes = convertField(fields.minutes, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,168,"        fields.seconds = convertField(fields.seconds, converted);",16,0,0,1,2,0,8,0,0,26,57,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,169,"        fields.millis = convertField(fields.millis, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,173,"        fields.year = convertField(fields.year, converted);",14,0,0,1,2,0,4,0,0,20,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,177,"        fields.era = convertField(fields.era, converted);",8,0,0,1,2,0,4,0,0,13,49,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",8,0,0,1,2,0,4,0,0,13,63,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,183,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,1,1,2,0,18,0,0,31,59,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,18,0,0,27,77,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",10,0,0,1,2,0,12,0,0,24,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",14,2,0,1,2,0,4,0,0,21,65,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,3,0,1,2,0,4,0,0,20,69,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,14,71,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0,0,0,1,2,0,0,0,0,3,79,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,200,        if (field == null || !field.isSupported()) {,4,2,0,2,5,0,12,0,0,20,44,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,201,            return field;,4,0,0,0,0,1,6,0,0,10,13,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,203,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,204,            return (DurationField)converted.get(field);,2,1,0,2,4,1,12,2,0,17,43,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,207,"        converted.put(field, zonedField);",0,0,0,1,2,0,4,0,0,4,33,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,208,        return zonedField;,2,0,0,0,0,1,2,0,0,4,18,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,212,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,215,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,218,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,223,"        converted.put(field, zonedField);",0,0,0,1,2,0,8,0,0,8,33,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,224,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,389,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,390,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,393,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,394,            iZone = zone;,8,0,1,0,0,1,0,2,0,15,13,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,395,            iDurationField = durationField;,0,0,0,0,0,0,0,0,0,0,31,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,396,            iTimeField = useTimeArithmetic(durationField);,2,0,0,1,2,0,4,0,0,7,46,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,397,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,398,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,399,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,284,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,285,            if (!field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,27,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,288,            iField = field;,6,0,1,0,0,0,0,4,0,13,15,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,289,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,290,            iZone = zone;,6,0,0,0,0,0,4,2,0,13,13,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,291,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,298,            return iField.getUnitMillis();,2,1,0,1,2,1,0,0,0,3,30,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,109,        return getWrappedField().getUnitMillis() * iScalar;,6,2,0,2,4,1,12,0,0,21,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,328,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,22,726,        return null;,4,1,0,0,0,1,4,0,0,10,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,220,        return iChronology.weeks();,0,0,0,1,2,1,4,0,0,4,27,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,142,        long millis = iUnitMillis;,10,0,0,0,0,1,4,0,0,16,26,3,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,144,        hash += getType().hashCode();,4,0,0,2,4,0,4,0,0,9,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,101,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,111,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,148,        int hash = (int) (scalar ^ (scalar >>> 32));,2,0,0,3,6,0,0,2,0,5,44,6,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,149,        hash += getType().hashCode();,2,1,0,2,4,0,6,2,0,12,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,151,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,22,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,49,        return DurationFieldType.millis();,0,0,0,1,2,1,4,0,0,4,34,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,94,        return iChronology.weeks();,4,1,0,1,2,1,4,0,0,9,27,3,0.00257,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00257,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00257,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,55,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,139,        return iRangeField;,4,0,0,0,0,1,4,2,0,10,19,1,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,56,        return iChronology.years();,0,0,0,1,2,1,0,0,0,4,27,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,58,        return iChronology.weekyears();,0,0,0,1,2,1,4,0,0,4,31,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,122,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,0,0,1,2,3,0,12,0,17,106,2,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,2,0,1,1,2,0,0,2,0,7,48,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,68,    },4,0,0,0,1,0,0,0,0,4,1,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.00256,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
