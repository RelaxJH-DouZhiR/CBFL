dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/FormatUtils,3,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.08197,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,0,0,0,13,50,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,199,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,200,        if (chrono == null) {,2,0,0,1,3,0,6,2,0,10,21,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,203,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07669,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,0.07645,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,196,        if (instant == null) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0753,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07508,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,63,            for (; size > 1; size--) {,0,1,0,1,3,0,8,0,0,9,26,5,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,66,            buf.append((char)(value + '0'));,16,2,0,3,6,0,12,0,0,33,32,1,0.07418,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,181,        return instant.getMillis();,0,0,0,1,2,1,0,0,0,4,27,4,0.07184,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,551,            } else if (iMode == 's') {,14,2,0,1,4,0,2,2,0,23,26,3,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,554,                offset = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,726,                        daysToAdd -= 7;,2,0,0,0,0,0,0,0,0,3,15,11,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,725,                    if (daysToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,20,9,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,144,        return localInstant;,2,0,0,0,0,1,0,0,0,2,20,4,0.07102,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1307,            int standardOffset = iStandardOffset;,0,0,0,0,0,0,0,0,0,0,37,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1308,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1309,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1314,                start = startRecurrence.next,2,0,0,0,0,0,0,0,0,2,28,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1322,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1325,                end = endRecurrence.next,12,3,0,0,0,0,0,0,0,15,24,1,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1333,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1335,            return (start > end) ? startRecurrence : endRecurrence;,2,0,0,1,2,1,4,0,0,6,55,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1546,            return iTailZone.getOffset(instant);,2,1,0,1,2,1,0,0,0,3,36,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,138,        DateTimeZone zone = getZone();,8,1,0,1,2,0,4,0,0,14,30,1,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,139,        int offset = zone.getOffsetFromLocal(localInstant);,2,0,0,1,2,0,0,2,0,5,51,6,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,141,        if (offset != zone.getOffset(localInstant)) {,0,0,0,2,5,0,0,0,0,7,45,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.07003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,178,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06983,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.06983,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,524,                    return chronology.secondOfMinute();,12,2,0,1,2,1,0,0,0,14,35,1,0.06944,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,162,            periodStart = next;,0,0,0,0,0,0,0,0,0,0,19,4,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",16,0,0,2,4,0,12,8,0,38,57,3,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2654,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.06887,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,            yearToUse = thisYear + (monthToUse / iMax);,10,2,0,1,2,0,0,2,0,15,43,3,0.0672,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,            monthToUse = (monthToUse % iMax) + 1;,8,3,0,1,2,0,0,0,0,12,37,1,0.0672,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,667,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,668,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,671,        return printer;,4,1,0,0,0,1,8,0,0,14,15,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,        if (months == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,        if (monthToUse >= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",8,0,0,1,2,0,0,0,0,10,67,1,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,        if (dayToUse > maxDay) {,8,1,0,1,3,0,10,2,0,23,24,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,        return datePart + timePart;,0,0,0,0,0,1,0,0,0,1,27,4,0.06702,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,925,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.06614,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1202,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1203,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1204,            Recurrence endRecurrence = iEndRecurrence;,10,0,0,0,0,0,0,2,0,13,42,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1209,                start = startRecurrence.next,0,1,0,0,0,0,4,0,0,5,28,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1211,                if (instant > 0 && start < 0) {,4,3,0,1,3,0,0,0,0,7,31,7,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1221,            },6,1,0,0,1,0,4,0,0,12,1,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1224,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1226,                if (instant > 0 && end < 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1236,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1238,            return (start > end) ? end : start;,0,0,0,1,2,1,0,0,0,4,35,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1582,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1583,            if (instant < end) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1586,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,6,0,0,6,41,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,4,0,0,6,34,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);",4,0,0,1,2,0,10,0,0,15,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0,0,0,2,4,0,0,0,0,6,48,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,4,1,0,0,0,3,0,16,0,24,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,4,0,0,7,21,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,720,                if (iAdvance) {,4,0,0,1,3,0,6,2,0,12,15,1,0.06579,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,0,0,0,4,35,4,0.25,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,445,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,441,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,438,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,458,            newTypes[i] = fieldType;,0,0,0,1,2,0,0,0,0,3,24,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0,0,0,1,2,0,0,0,0,3,67,4,0.04167,1,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,296,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,297,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,298,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,299,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.00787,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,249,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,243,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,333,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,304,                    return chronology.minutes();,0,0,0,1,2,1,4,0,0,4,28,7,0.00629,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.0061,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00565,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,302,                    return chronology.hours();,0,0,0,1,2,1,4,0,0,4,26,7,0.00549,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,282,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00392,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00324,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,818,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00284,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,804,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,200,            int value = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,202,"            if (value < field.getMinimumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,184,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.00265,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.00228,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00228,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,59,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,101,        return ((month - 1) * MILLIS_PER_MONTH);,0,0,0,2,4,1,0,0,0,7,40,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,148,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,158,        return MILLIS_PER_MONTH;,0,0,0,0,0,1,0,0,0,1,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,524,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,108,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,123,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,125,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,135,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,136,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,141,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,146,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0,0,0,1,2,0,0,0,0,3,41,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,152,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,209,        int relativeYear = year - 1687;,0,0,0,0,0,0,0,0,0,0,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,233,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,248,        if (getBase() == null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,252,"            fields.year = new SkipDateTimeField(this, fields.year);",0,0,0,1,2,0,0,0,0,3,55,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,255,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,257,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,259,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,51,public final class CopticChronology extends BasicFixedMonthChronology {,0,0,0,0,1,0,0,0,0,1,71,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,982,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,8,0,0,13,47,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,999,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1001,        int offset = getOffset(instantLocal - offsetLocal);,10,1,0,1,2,0,2,0,0,14,51,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1032,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,10,6,0,3,7,0,0,0,0,16,69,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,4,0,0,7,35,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",8,0,0,2,4,0,8,0,0,17,48,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",20,5,0,2,4,0,18,4,0,52,52,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,18,0,0,25,56,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,4,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,378,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,480,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",10,0,0,1,2,0,8,2,0,21,68,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,483,            if (get(result) != value) {,4,1,0,2,5,0,4,2,0,12,27,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,489,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,532,            return iLeapDurationField;,18,1,0,0,0,1,6,2,0,28,26,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,565,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,582,            return iField.getMaximumValue();,10,0,0,1,2,1,4,2,0,17,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,4,83,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,174,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,6,0,0,8,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,193,            cutoverInstant = DEFAULT_CUTOVER;,0,0,0,0,0,0,0,0,0,0,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",2,0,0,1,2,1,4,0,0,7,71,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,672,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,675,                return iJulianField.get(instant);,0,0,0,1,2,1,0,0,0,4,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,742,                    if (instant + iGapDuration < iCutover) {,6,1,0,1,3,0,2,0,0,9,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,743,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,14,0,0,17,37,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,746,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,752,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,4,2,0,9,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,940,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,154,"        return super.set(instant, value - iOffset);",0,0,0,1,2,1,0,0,0,4,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,82,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,186,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,211,            return iRangeDurationField;,4,0,0,0,0,1,0,0,0,4,27,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,133,"        super(base, param);",6,1,0,1,2,0,0,0,0,7,19,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,134,    },2,0,0,0,1,0,8,0,0,11,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",8,0,0,1,2,3,4,4,0,21,85,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0,0,0,1,2,0,0,0,0,3,116,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,106,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,111,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,112,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",10,0,0,2,4,0,2,0,0,14,76,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,118,"                cCache.put(zone, chrono);",8,1,0,1,2,0,0,0,0,10,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,120,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,121,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,217,        if (getParam() == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,222,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,223,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,227,            field = fields.yearOfEra;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,232,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,4,0,0,4,42,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",12,2,0,1,2,0,2,2,0,19,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,237,            fields.centuryOfEra = new DividedDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,246,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,8,0,0,8,51,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,251,            fields.era = ERA_FIELD;,20,0,0,0,0,0,12,6,0,40,23,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,253,    },28,2,1,0,1,0,6,0,0,40,1,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,54,    },0,0,0,0,1,0,0,2,0,4,1,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,66,        int min = super.getMinimumValue();,12,0,0,1,2,0,4,0,0,17,34,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",2,0,1,2,4,0,10,0,0,15,72,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,88,        if (value <= iSkip) {,16,1,0,1,3,0,4,0,0,23,21,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,410,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,6,0,0,15,25,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,421,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,422,            return iField.get(localInstant);,0,0,0,1,2,1,6,0,0,6,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,514,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,4,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0,0,0,4,8,0,0,0,0,12,71,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,738,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,739,"                instant = iGregorianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,740,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,765,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,823,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,38,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,78,        if (year <= 0) {,2,1,0,1,3,0,0,2,0,5,16,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0,0,0,2,4,1,0,0,0,7,84,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,100,        return iMinValue;,2,2,0,0,0,1,8,0,0,12,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,4,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,527,        return this;,4,1,0,0,0,1,0,0,0,5,12,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,209,                for (int i = chronos.size(); --i >= 0;) {,4,1,0,2,5,0,4,0,0,10,41,8,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,210,                    chrono = chronos.get(i);,8,0,0,1,2,0,4,0,0,13,24,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,12,0,0,18,63,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,214,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,400,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,51,        super(DateTimeFieldType.era());,2,0,0,2,4,3,4,16,0,25,31,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,52,        iEraText = text;,8,0,0,0,0,0,0,2,0,12,16,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,53,    },4,0,0,0,1,0,0,0,0,4,1,7,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,111,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,454,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,455,"            super(field, field.getType());",6,0,0,2,4,0,4,0,0,11,30,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,456,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,457,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,458,            iLeapDurationField = leapDurationField;,0,0,0,0,0,0,0,0,0,0,39,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,459,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,391,        LimitDurationField(DurationField field) {,0,0,0,1,3,0,0,0,0,4,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,393,        },0,0,0,0,1,0,0,2,0,4,1,6,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,99,"        super(base, null);",4,0,0,1,2,0,0,0,0,5,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,102,        iUpperLimit = upperLimit;,0,0,0,0,0,0,0,0,0,0,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,67,        if (base == null) {,4,2,0,1,3,0,8,0,0,15,19,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,8,1,0,1,2,0,4,0,0,15,65,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",8,0,0,3,6,4,0,10,0,21,77,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",6,0,0,1,2,0,0,12,0,19,66,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,213,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,216,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,217,"        fields.weekyears = convertField(fields.weekyears, converted);",14,0,0,1,2,0,4,0,0,20,61,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,218,"        fields.weeks = convertField(fields.weeks, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,0,0,0,1,2,0,0,0,0,3,33,4,1.125,1,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0,0,0,6,12,0,0,0,0,18,75,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0,0,0,3,7,0,0,0,0,10,53,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,0,0,3,7,0,0,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,0,0,3,7,0,0,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,564,        if (list.size() > 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);",0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,445,    },0,0,0,0,1,0,0,0,0,1,1,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/Period,5,444,"        super(duration, type, chronology);",0,0,0,1,2,0,0,0,0,3,34,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,372,        PeriodType type = cMonths;,0,0,0,0,0,0,0,0,0,0,26,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,            type = new PeriodType(,0,0,0,0,1,0,4,0,0,4,22,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,224,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,234,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,280,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,505,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,3,6,0,8,0,0,8,50,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,3,6,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,3,6,0,0,0,0,9,48,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,3,6,0,0,0,0,9,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,520,"            cache.put(time(), time());",0,0,0,3,6,0,0,0,0,9,26,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,521,"            cache.put(years(), years());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,522,"            cache.put(months(), months());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,523,"            cache.put(weeks(), weeks());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",2,1,0,3,6,0,8,0,0,12,26,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",2,0,0,3,6,0,4,0,0,6,28,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,526,"            cache.put(minutes(), minutes());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,527,"            cache.put(seconds(), seconds());",0,0,0,3,6,0,0,0,0,9,32,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,528,"            cache.put(millis(), millis());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",6,0,0,1,2,0,6,4,0,18,58,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,2,0,0,1,2,0,6,2,0,10,38,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,532,        if (cached instanceof PeriodType) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",2,0,0,1,2,1,0,2,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,1,2,1,6,0,0,7,38,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,770,"        return withFieldRemoved(5, ""NoMinutes"");",0,0,0,1,2,1,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,851,        int hash = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,852,        for (int i = 0; i < iTypes.length; i++) {,24,3,1,1,3,0,32,4,0,69,41,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,853,            hash += iTypes[i].hashCode();,2,0,1,2,4,0,2,0,0,9,29,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,855,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,779,"        return withFieldRemoved(6, ""NoSeconds"");",0,0,0,1,2,1,0,0,0,4,40,4,0.125,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,809,                types[i - 1] = iTypes[i];,8,1,1,2,4,0,4,2,0,26,25,1,0.11111,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,163,        PeriodType type = cYMD;,0,0,0,0,0,0,0,0,0,0,23,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,164,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,165,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,175,        return type;,2,1,1,0,0,1,8,0,0,15,12,3,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,193,        PeriodType type = cYWDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,194,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,195,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,205,            cYWDTime = type;,4,0,0,0,0,0,0,0,0,5,16,5,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,207,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.08333,0,0,-1
defect4j,time,org/joda/time/Period,5,737,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",6,1,0,2,4,1,4,0,0,11,68,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,746,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",8,0,1,2,4,1,4,0,0,17,69,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,755,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",8,0,0,2,4,1,4,0,0,13,68,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,764,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0,0,0,2,4,1,0,0,0,7,67,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,774,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",6,0,0,2,4,1,4,0,0,10,68,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,783,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",4,1,0,2,4,1,0,0,0,5,70,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,801,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0,0,0,2,4,1,0,0,0,7,69,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,792,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0,0,0,2,4,1,0,0,0,7,70,4,0.075,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,95,        int[] result = new int[size()];,4,0,0,3,6,0,2,0,0,7,31,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,96,        for (int i = 0; i < result.length; i++) {,4,1,0,1,3,0,8,0,0,13,41,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,97,            result[i] = getValue(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,99,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.072,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,2,0,0,4,8,0,6,0,0,9,56,3,0.07143,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,480,        PeriodType type = cMillis;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,481,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,482,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,487,            cMillis = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,489,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,1,2,1,2,0,0,3,39,5,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,266,            if (this == obj) {,4,2,0,1,3,0,0,0,0,6,18,1,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,267,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04762,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,134,        PeriodType type = cYMDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,135,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,136,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,146,            cYMDTime = type;,0,0,0,0,0,0,0,0,0,0,16,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,148,        return type;,4,0,0,0,0,1,4,2,0,10,12,3,0.04348,0,0,-1
defect4j,time,org/joda/time/Period,5,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0,0,0,2,4,0,0,0,0,6,90,4,0.04306,0,0,-1
defect4j,time,org/joda/time/Period,5,330,    },2,0,0,0,1,3,0,4,0,10,1,2,0.04306,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,807,                types[i] = iTypes[i];,0,0,0,2,4,0,0,0,0,6,21,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,816,                indices[i] = iIndices[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,305,        PeriodType type = cDTime;,4,0,0,0,0,0,0,2,0,6,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,306,        if (type == null) {,12,1,0,1,3,0,0,4,0,19,19,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,307,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,316,            cDTime = type;,12,0,0,0,0,0,0,2,0,17,14,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,318,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,354,        PeriodType type = cYears;,0,0,0,0,0,0,0,0,0,0,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,355,        if (type == null) {,4,1,0,1,3,0,4,0,0,10,19,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,356,            type = new PeriodType(,4,0,0,0,1,0,0,2,0,7,22,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,361,            cYears = type;,12,3,0,0,0,0,6,2,0,23,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,363,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,608,        return iName;,4,0,0,0,0,1,2,2,0,10,13,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,799,        int fieldIndex = iIndices[indicesIndex];,4,1,1,1,2,0,4,0,0,14,40,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,800,        if (fieldIndex == -1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,0,0,0,3,6,0,0,0,0,9,62,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,805,        for (int i = 0; i < iTypes.length; i++) {,0,0,0,1,3,0,0,2,0,2,41,8,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,806,            if (i < fieldIndex) {,20,10,0,1,3,0,0,0,0,34,21,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,808,            } else if (i > fieldIndex) {,4,1,0,1,4,0,0,0,0,5,28,7,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,813,        int[] indices = new int[8];,2,0,0,2,4,0,0,0,0,2,27,5,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,814,        for (int i = 0; i < indices.length; i++) {,26,3,0,1,3,3,0,12,0,46,42,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,815,            if (i < indicesIndex) {,6,1,0,1,3,0,6,0,0,13,23,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,817,            } else if (i > indicesIndex) {,0,0,0,1,4,0,0,0,0,5,30,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,820,                indices[i] = -1;,0,0,0,1,2,0,0,0,0,3,16,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,823,"        return new PeriodType(getName() + name, types, indices);",4,0,0,2,4,1,0,0,0,4,56,6,0.03571,0,0,-1
