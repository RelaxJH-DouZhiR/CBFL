dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,202,        if (types.length == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
