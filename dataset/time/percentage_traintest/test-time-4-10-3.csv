dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0,0,0,1,2,0,0,0,0,3,71,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0,0,0,1,2,0,8,0,0,8,56,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,59,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,669,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,742,        Chronology chrono = selectChronology(iChrono);,0,0,0,1,2,0,0,0,0,3,46,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",14,0,0,1,2,0,0,4,0,19,101,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,26,10,0,1,3,0,22,4,0,66,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,6,1,0,1,3,3,0,12,0,22,24,1,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,10,1,0,1,3,1,0,4,0,17,33,1,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,2,0,1,0,0,1,0,0,0,7,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,2,0,0,1,2,0,8,0,0,11,40,7,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",6,3,1,1,2,0,0,0,0,12,25,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,6,0,0,0,0,0,0,0,0,6,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,365,            for (int i = 0; i < count; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,4,2,0,1,3,0,0,0,0,7,18,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,378,        },8,0,0,0,1,0,0,0,0,10,1,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,380,        if (iOffset != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,8,1,0,1,3,0,0,0,0,9,16,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,6,0,0,16,28,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,427,    },4,0,0,0,1,0,0,0,0,4,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,929,        return parser;,0,0,0,0,0,1,0,2,0,2,14,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,120,        super();,0,0,0,1,2,0,10,0,0,10,8,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,18,0,0,18,54,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,122,        iMillis = instantLocal;,0,0,0,0,0,0,8,0,0,8,23,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,2,1,0,1,2,0,0,0,0,3,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,12,1,0,0,0,0,0,0,0,15,27,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,128,    },8,0,0,0,1,0,0,0,0,10,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,925,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,926,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,0,0,0,0,0,0,0,0,0,0,8,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,7,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,6,2,0,1,3,0,0,0,0,8,17,5,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,6,0,0,7,40,9,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2278,            int limit = text.length() - position;,0,0,0,1,2,0,0,0,0,3,37,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2281,            if (iZeroOffsetParseText != null) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,12,2,0,2,5,0,4,0,0,19,30,1,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,4,2,0,12,56,1,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,742,        Chronology chrono = selectChronology(iChrono);,6,2,0,1,2,0,4,2,0,14,46,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,745,        if (newPos >= 0) {,18,4,1,1,3,0,4,0,0,29,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,257,        if (iChrono == chrono) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,369,                for (int i = 0; i < count; i++) {,12,3,1,1,3,0,0,2,0,34,33,3,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,345,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,363,        long millis = iMillis;,6,1,0,0,0,0,4,0,0,12,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,365,            for (int i = 0; i < count; i++) {,8,2,0,1,3,2,8,2,0,24,33,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,368,            if (resetFields) {,4,0,0,1,3,0,0,0,0,4,18,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,378,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,380,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,416,        if (high > 10) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,929,        return parser;,6,1,0,0,0,1,0,4,0,11,14,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,120,        super();,2,0,0,1,2,0,0,2,0,5,8,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,73,    private SavedField[] iSavedFields = new SavedField[8];,12,5,0,2,4,0,8,0,0,26,54,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,10,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,122,        iMillis = instantLocal;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,123,        iZone = chrono.getZone();,6,0,0,1,2,0,4,0,0,11,25,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,124,        iChrono = chrono.withUTC();,2,0,0,1,2,0,4,0,0,7,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,127,        iDefaultYear = defaultYear;,0,0,0,0,0,0,0,0,0,0,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,128,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,925,        DateTimeParser parser = iParser;,12,0,0,0,0,0,0,2,0,15,32,1,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,926,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,74,            int d = ((value + 1) * 13421772) >> 27;,4,0,0,2,4,0,0,0,0,5,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,75,            buf.append((char) (d + '0'));,0,0,0,3,6,0,0,0,0,9,29,4,0.00242,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,335,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",0,0,0,3,6,0,0,0,0,9,55,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,4,0,0,4,42,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,0,0,0,2,4,0,0,0,0,6,39,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,40,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,        if (ldp == null) {,0,0,0,1,3,0,0,0,0,4,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,        return ldp;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,        if (iZone == zone) {,0,0,0,1,3,0,0,0,0,4,20,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.66667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,                int month = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,0,0,3,7,0,0,0,0,10,58,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,        switch (text.length()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,                return append0(new StringLiteral(text));,0,0,0,2,4,1,0,0,0,7,40,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,2,4,1,0,0,0,7,66,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,79,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1614,        if (we == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1619,        return we;,0,0,0,0,0,1,0,0,0,1,10,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1629,        return wwe;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1633,        if (dwe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1649,        return dye;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,308,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,312,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,321,        for (i = 0; i < length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,326,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,8,0,0,8,30,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0,0,0,3,6,0,0,0,0,9,63,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,347,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,357,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1150,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2794,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2795,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2797,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2798,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,                if (parser != null) {,14,2,0,1,3,0,8,4,0,30,21,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2800,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2801,                    if (len > est) {,0,0,0,1,3,0,0,0,0,4,16,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2802,                        est = len;,0,0,0,0,0,0,0,0,0,0,10,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2805,            },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2806,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2807,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2623,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2624,                iPrintedLengthEstimate = 0;,0,0,0,0,0,0,0,0,0,0,27,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,364,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,367,        DurationFieldType lastType = null;,2,1,0,0,0,0,0,0,0,3,34,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,368,        for (int i = 0; i < partial.size(); i++) {,16,1,0,2,5,0,8,0,0,27,42,3,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,369,            DateTimeField loopField = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,46,5,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,370,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,371,                if (loopField.getRangeDurationField().getType() != lastType) {,10,0,0,3,7,0,18,0,0,30,62,1,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,375,            lastType = loopField.getDurationField().getType();,0,0,0,2,4,0,0,0,0,6,50,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,377,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,        if (start.size() != end.size()) {,4,1,0,3,7,0,8,0,0,14,33,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,95,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,55,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,96,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,0,0,3,7,0,0,0,0,10,51,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,100,        if (DateTimeUtils.isContiguous(start) == false) {,0,0,0,2,5,0,0,0,0,7,49,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,2,0,0,3,6,0,10,2,0,14,81,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,        return values[0];,20,2,0,1,2,1,4,4,0,32,17,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,        return MIN;,10,0,0,0,0,1,0,4,0,15,11,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,344,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,486,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,        if (maxDigits < minDigits) {,2,0,0,1,3,0,2,0,0,5,28,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1585,        if (ye == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1590,        return ye;,0,0,0,0,0,1,0,0,0,1,10,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,        if (mye == null) {,8,2,0,1,3,0,0,2,0,13,18,3,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,        return mye;,2,0,0,0,0,1,0,0,0,3,11,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,        if (dme == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,6,0,0,8,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,        return dme;,2,0,0,0,0,1,0,2,0,5,11,6,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",2,0,0,2,5,0,0,0,0,2,57,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,242,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,173,        return iParser;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,155,        if (start instanceof LocalDate && end instanceof LocalDate)   {,12,2,0,1,3,0,0,6,0,21,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,162,        return Months.months(amount);,0,0,0,1,2,1,6,0,0,6,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,135,        if (start instanceof LocalDate && end instanceof LocalDate)   {,10,1,0,1,3,0,0,4,0,16,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",4,1,0,1,2,0,14,2,0,21,61,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,142,        return Days.days(amount);,0,0,0,1,2,1,0,0,0,4,25,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);",16,2,0,1,2,0,0,0,0,18,42,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1464,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1465,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1468,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,            super();,10,1,0,1,2,0,8,0,0,20,8,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1321,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,        },6,0,0,0,1,0,8,4,0,18,1,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1326,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,217,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());",6,2,0,3,6,1,0,0,0,8,62,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,384,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,385,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,386,        return this;,10,1,0,0,0,4,4,0,0,18,12,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,397,        return append0(new CharacterLiteral(c));,8,1,1,2,4,1,0,2,0,14,40,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,434,        if (fieldType == null) {,10,1,0,1,3,0,0,0,0,11,24,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,437,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,440,        if (minDigits < 0 || maxDigits <= 0) {,4,1,0,1,3,0,0,0,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,443,        if (minDigits <= 1) {,8,1,0,1,3,0,10,0,0,20,21,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1155,                f = new Composite(iElementPairs);,0,0,0,1,2,0,0,0,0,3,33,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1167,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1177,                return ((Composite)f).isParser();,12,0,0,3,6,4,6,6,0,28,33,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2615,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2617,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,6,8,0,17,51,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2618,            List<Object> parserList = new ArrayList<Object>();,2,0,1,1,2,0,4,8,0,19,50,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2620,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,0,0,0,3,49,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,6,0,1,3,7,0,4,0,0,16,58,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2626,                int size = printerList.size();,8,0,0,1,2,0,4,14,0,27,30,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2627,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2628,                int printEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2629,                for (int i=0; i<size; i++) {,10,1,0,1,3,0,0,0,0,12,28,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2631,                    printEst += printer.estimatePrintedLength();,0,0,0,1,2,0,0,0,0,3,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2632,                    iPrinters[i] = printer;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2634,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,10,0,0,3,7,0,4,2,0,17,56,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2641,                int size = parserList.size();,0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2642,                iParsers = new DateTimeParser[size];,2,0,0,1,2,0,6,0,0,8,36,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2643,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2646,                    parseEst += parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,7,42,9,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2647,                    iParsers[i] = parser;,0,0,0,1,2,0,0,0,0,3,21,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2649,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2651,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2747,            return iPrinters != null;,2,1,0,0,0,1,4,0,0,7,25,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2751,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2759,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2760,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2761,                Object element = elementPairs.get(i);,4,0,0,1,2,0,12,2,0,19,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2762,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2765,                    printerList.add(element);,2,0,0,1,2,0,10,0,0,12,25,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2768,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2769,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2772,                    parserList.add(element);,0,0,0,1,2,0,6,0,0,6,24,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2775,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2780,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1207,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1208,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1209,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1212,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1236,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,181,        chronology = DateTimeUtils.getChronology(chronology);,4,0,0,1,2,1,6,0,0,12,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,183,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,184,        iValues = values;,4,0,0,0,0,0,0,0,0,5,17,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,183,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,185,            int value = values[i];,4,1,0,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,199,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,201,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,202,"            if (value < field.getMinimumValue(partial, values)) {",6,1,0,2,5,0,12,0,0,20,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0,-1
