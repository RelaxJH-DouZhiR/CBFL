dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/DateTimeFormatter,25,581,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,        return buf.toString();,24,6,1,1,2,1,28,4,0,69,22,1,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,18,0,0,18,29,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,    },8,1,0,0,1,0,8,0,0,18,1,1,0.02261,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.02233,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,                    return chronology.secondOfDay();,2,1,0,1,2,1,0,0,0,5,32,3,0.02233,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,        chrono = selectChronology(chrono);,8,0,0,1,2,0,10,0,0,19,34,3,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,620,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,        int offset = zone.getOffset(instant);,6,0,1,1,2,0,14,4,0,27,37,1,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,622,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,24,65,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,18,0,0,18,79,5,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,630,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,80,            if (value < 1000) {,6,1,0,1,3,0,0,2,0,9,19,3,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,87,            for (; size > digits; size--) {,8,0,0,1,3,0,2,0,0,11,31,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,90,            buf.append(Integer.toString(value));,2,1,0,2,4,0,0,0,0,3,36,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,        if (lte == null) {,10,1,1,1,3,0,6,0,0,23,18,3,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1622,            lte = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1626,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.02027,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0,-1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0,-1
defect4j,time,org/joda/time/DateTime,26,518,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,519,        if (getChronology() == chronology) {,0,0,0,2,5,0,0,0,0,7,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,522,        return super.toDateTime(chronology);,0,0,0,1,2,1,0,0,0,4,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,5,10,1,0,0,0,16,75,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.52083,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,        iChronology = chrono;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,26,843,        return getOffset(instant) == getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.48039,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);",0,0,0,2,4,1,0,0,0,7,45,4,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,51,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,                return iStandardOffset;,0,0,0,0,0,1,0,0,0,1,23,4,0.36364,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,        return ISOChronology.getInstance(zone);,0,0,0,1,2,1,0,0,0,4,39,4,0.35211,0,0,-1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0,0,0,4,8,1,0,0,0,13,84,4,0.34783,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,59,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0,0,0,2,4,0,0,0,0,6,55,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,                long nn = n / 10;,0,0,0,0,0,0,0,0,0,0,17,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,                n = nn;,0,0,0,0,0,0,0,0,0,0,7,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,            value /= 10;,0,0,0,0,0,0,0,0,0,0,12,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,            DateTimeField parseField = new PreciseDateTimeField(,2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2034,"            bucket.saveField(parseField, (int) value);",0,0,0,2,4,0,0,0,0,6,42,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,            return position + length;,4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,        return iChrono;,2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,224,"        saveField(new SavedField(field, value));",0,0,0,2,4,0,0,0,0,6,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,    },2,0,0,0,1,0,4,0,0,7,1,7,0.34722,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,63,        String str = (String) object;,0,0,0,1,2,0,0,0,0,3,29,4,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,6,1,0,1,2,0,14,2,0,23,57,1,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,65,        return p.withChronology(chrono).parseMillis(str);,0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,                    expectSeparators = true;,2,0,0,0,0,0,4,0,0,8,24,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,                    limit--;,4,0,0,0,0,0,4,0,0,9,8,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,                    position++;,6,1,0,0,0,0,0,0,0,9,11,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,            limit--;,2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,            position++;,4,0,0,0,0,0,6,0,0,12,11,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2263,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,            if (hours > 23) {,6,2,0,1,3,0,0,0,0,9,17,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,4,2,0,11,51,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2275,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,            position += 2;,2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2287,                c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,26,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,                if (c == ':') {,4,1,0,1,3,0,6,2,0,14,15,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2300,"                int count = digitCount(text, position, 2);",0,0,0,1,2,0,0,0,0,3,42,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,                if (count == 0 && !expectSeparators) {,4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2303,                } else if (count < 2) {,0,0,0,1,4,0,0,0,0,5,23,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,6,0,0,9,57,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2309,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2312,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,                limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2314,                position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2318,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2377,            bucket.setOffset(negative ? -offset : offset);,0,0,0,1,2,0,0,0,0,3,46,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,            return position;,6,2,0,0,0,1,2,0,0,10,16,8,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);",12,3,0,2,4,0,20,0,0,38,55,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2387,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2388,            for (; limit > 0; limit--) {,0,0,0,1,3,0,0,0,0,4,28,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2389,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,                if (c < '0' || c > '9') {,0,0,0,1,3,0,6,0,0,6,25,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,                amount++;,2,0,0,0,0,0,0,0,0,2,9,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2395,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,352,        int value = text.charAt(position) - '0';,2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,8,7,0,4,8,1,4,0,0,21,71,3,0.30864,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,424,        return ISODateTimeFormat.dateTime().print(this);,14,2,0,2,4,1,12,2,0,31,48,3,0.30622,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2239,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.2907,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.2907,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,        if (dtp == null) {,8,3,0,1,3,0,4,0,0,15,18,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,            DateTimeParser time = new DateTimeFormatterBuilder(),6,1,0,1,2,0,10,0,0,18,52,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,            dtp = new DateTimeFormatterBuilder(),10,1,0,1,2,0,0,4,0,16,36,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,778,        return dtp;,0,0,0,0,0,1,0,0,0,1,11,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2116,            if (displayOffset == 0 && iMinFields <= 2) {,0,0,0,1,3,0,0,0,0,4,44,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,                return;,8,0,0,0,0,1,4,0,0,12,7,1,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2109,                buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.24903,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,1,0,0,0,0,4,0,8,62,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,64,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2103,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,66,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2108,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2112,            if (iMaxFields == 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,                negative = false;,8,1,0,0,0,0,0,0,0,10,17,6,0.22857,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,                            bestInvalidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,            SavedField[] newArray = new SavedField,2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,256,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0,0,0,1,2,0,0,0,0,3,64,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,257,            iSavedFields = savedFields = newArray;,0,0,0,0,0,0,0,0,0,0,38,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,258,            iSavedFieldsShared = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,        if (dotp == null) {,0,0,0,1,3,0,8,0,0,8,19,9,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),8,3,0,1,2,0,0,0,0,11,60,6,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,805,            dotp = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,810,        return dotp;,0,0,0,0,0,1,0,0,0,1,12,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,936,        if (dt == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,942,        return dt;,0,0,0,0,0,1,0,0,0,1,10,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0,0,0,0,0,0,0,0,0,0,13,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02439,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0,0,0,1,2,1,0,0,0,4,24,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,                return period;,0,0,0,0,0,1,0,0,0,1,14,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,2,5,0,0,0,0,7,62,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,3,7,0,0,0,0,10,72,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,                return position + iText.length();,0,0,0,1,2,1,0,0,0,4,33,4,0.02174,0,0,-1
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.02128,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,6,1,0,1,3,0,0,0,0,8,18,4,0.02128,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,4,0,0,1,2,0,0,4,0,8,48,4,0.02,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,71,        return period.getPeriodType();,0,0,0,1,2,1,4,0,0,4,30,5,0.02,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,173,    },2,0,0,0,1,0,0,2,0,4,1,5,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,418,        iValues = newValues;,0,0,0,0,0,0,0,0,0,0,20,4,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,419,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,404,            setPeriodInternal(period);,0,0,0,1,2,0,0,0,0,3,26,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,412,        int[] newValues = new int[size()];,0,0,0,3,6,0,0,0,0,9,34,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,56,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,414,            DurationFieldType type = period.getFieldType(i);,0,0,0,1,2,0,0,0,0,3,48,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,415,            int value = period.getValue(i);,0,0,0,1,2,0,0,0,0,3,31,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);",0,0,0,1,2,0,0,0,0,3,39,4,0.01818,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,58,        duration.setPeriod((ReadablePeriod) object);,0,0,0,2,4,0,0,0,0,6,44,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,4,1,0,0,0,0,0,0,0,7,17,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,466,    },0,0,0,0,1,0,6,0,0,6,1,5,0.01786,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,399,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,6,0,0,0,0,0,4,0,0,11,22,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);",0,0,0,1,2,0,0,0,0,3,72,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1712,                String[] parsedForms = iParsedForms;,0,0,0,1,2,0,0,0,0,3,36,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,2,0,0,1,3,0,0,0,0,2,32,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1715,                    String parsedForm = parsedForms[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",4,1,0,1,2,0,12,0,0,18,71,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1730,            if (position < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1212,"                suffixPos = iSuffix.scan(text, position);",0,0,0,1,2,0,0,0,0,3,41,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1213,                if (suffixPos >= 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1246,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1248,                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {,0,0,0,2,5,0,0,0,0,7,68,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,6,3,0,1,3,0,4,0,0,16,27,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1270,                    hasDigits = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1285,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1286,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1292,            if (suffixPos >= 0 && position + length != suffixPos) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1300,            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {,0,0,0,1,3,0,0,0,0,4,76,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1333,            position += length;,0,0,0,0,0,0,0,0,0,0,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1335,            if (position >= 0 && iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1339,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1349,            if (length >= 10) {,0,0,0,1,3,0,10,0,0,10,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1498,            switch (field) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1526,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,252,"            iValues = new MutablePeriod(period, type, chrono).getValues();",0,0,0,2,4,0,4,0,0,4,62,6,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,484,            values[index] = value;,4,3,0,1,2,0,0,0,0,7,22,8,0.01754,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,398,"        super(period, type, chrono);",0,0,0,1,2,0,0,0,0,3,28,4,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,406,    },10,0,0,0,1,0,18,2,0,32,1,3,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,441,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",16,3,0,3,7,0,22,6,0,50,69,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,10,1,0,1,3,0,0,0,0,11,20,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1243,            int fractPos = -1;,0,0,0,0,0,0,0,0,0,0,18,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,8,0,0,0,0,0,0,0,0,9,26,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,14,2,0,1,3,0,2,0,0,18,24,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,401,        if (period == null) {,14,1,0,1,3,0,6,4,0,25,21,1,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,478,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,57,                return e.iConverter;,0,0,0,0,0,1,0,0,0,1,20,4,0.01695,0,0,-1
