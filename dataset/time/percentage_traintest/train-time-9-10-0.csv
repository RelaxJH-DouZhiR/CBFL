dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1145,"            hde = hourElement(), // hourOfDay element (HH)",2,0,0,2,4,0,2,0,0,4,46,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1146,"            mhe = minuteElement(), // minuteOfHour element (:mm)",2,0,0,2,4,0,2,0,0,4,52,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1147,"            sme = secondElement(), // secondOfMinute element (:ss)",2,0,0,2,4,0,2,0,0,4,54,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1148,"            fse = fractionElement(), // fractionOfSecond element (.SSSSSSSSS)",2,0,0,2,4,0,2,0,0,4,65,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1149,"            ze = offsetElement(),  // zone offset element",4,0,0,1,2,0,2,0,0,6,45,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1150,"            lte = literalTElement(), // literal 'T' element",4,1,0,1,2,0,8,0,0,13,47,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1153,"            ym = yearMonth(),  // year month",2,0,0,1,2,0,2,0,0,4,32,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1154,"            ymd = yearMonthDay(), // year month day",2,0,0,1,2,0,0,0,0,3,39,6,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1157,"            ww = weekyearWeek(),  // weekyear week",2,0,0,1,2,0,2,0,0,4,38,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1158,"            wwd = weekyearWeekDay(), // weekyear week day",2,0,0,1,2,0,16,0,0,18,45,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1161,"            hm = hourMinute(),   // hour minute",2,0,0,1,2,0,2,0,0,4,35,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1162,"            hms = hourMinuteSecond(),  // hour minute second",2,0,0,1,2,0,2,0,0,4,48,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1164,"            hmsf = hourMinuteSecondFraction(), // hour minute second fraction",2,0,0,1,2,0,10,0,0,12,65,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1166,"            dh = dateHour(),    // date hour",2,0,0,1,2,0,2,0,0,4,32,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1167,"            dhm = dateHourMinute(),   // date hour minute",2,0,0,1,2,0,2,0,0,4,45,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1168,"            dhms = dateHourMinuteSecond(),  // date hour minute second",2,0,0,1,2,0,2,0,0,4,58,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1170,"            dhmsf = dateHourMinuteSecondFraction(), // date hour minute second fraction",2,0,0,1,2,0,2,0,0,4,75,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1173,"            t = time(),  // time",2,0,0,1,2,0,2,0,0,4,20,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1174,"            tx = timeNoMillis(),  // time no millis",4,0,0,1,2,0,2,4,0,11,39,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1175,"            tt = tTime(),  // Ttime",2,0,0,1,2,0,2,0,0,4,23,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1176,"            ttx = tTimeNoMillis(),  // Ttime no millis",2,0,0,1,2,0,2,0,0,4,42,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1177,"            dt = dateTime(), // date time",2,0,0,1,2,0,2,0,0,4,29,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1178,"            dtx = dateTimeNoMillis(), // date time no millis",2,0,0,1,2,0,2,0,0,4,48,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1181,"            wdt = weekDateTime(), // week date time",2,0,0,1,2,0,2,0,0,4,39,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1182,"            wdtx = weekDateTimeNoMillis(), // week date time no millis",2,0,0,1,2,3,0,12,0,17,58,2,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1185,"            odt = ordinalDateTime(), // ordinal date time",2,0,0,1,2,0,2,0,0,4,45,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1186,"            odtx = ordinalDateTimeNoMillis(), // ordinal date time no millis",2,0,0,1,2,0,2,0,0,4,64,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1188,"            bd = basicDate(),  // basic date",6,0,0,1,2,0,2,4,0,12,32,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1189,"            bt = basicTime(),  // basic time",10,0,0,1,2,0,6,0,0,17,32,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1190,"            btx = basicTimeNoMillis(),  // basic time no millis",2,0,0,1,2,0,2,0,0,4,51,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1191,"            btt = basicTTime(), // basic Ttime",4,0,0,1,2,2,2,2,0,10,34,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1192,"            bttx = basicTTimeNoMillis(), // basic Ttime no millis",4,1,0,1,2,0,2,0,0,7,53,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1193,"            bdt = basicDateTime(), // basic date time",4,0,0,1,2,0,2,0,0,6,41,2,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1196,"            bod = basicOrdinalDate(),  // basic ordinal date",2,0,0,1,2,0,2,0,0,4,48,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1197,"            bodt = basicOrdinalDateTime(), // basic ordinal date time",2,0,0,1,2,0,2,0,0,4,57,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1198,"            bodtx = basicOrdinalDateTimeNoMillis(), // basic ordinal date time no millis",2,0,0,1,2,0,2,0,0,4,76,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1200,"            bwd = basicWeekDate(),  // basic week date",2,0,0,1,2,0,2,0,0,4,42,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1202,"            bwdtx = basicWeekDateTimeNoMillis(), // basic week date time no millis",2,0,0,1,2,0,2,0,0,4,70,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1204,"            dpe = dateElementParser(), // date parser element",2,0,0,1,2,0,2,0,0,4,49,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1206,"            dp = dateParser(),  // date parser",2,0,0,1,2,0,2,0,0,4,34,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1208,"            tp = timeParser(),  // time parser",0,0,0,1,2,0,4,0,0,4,34,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1209,"            ltp = localTimeParser(), // local time parser",2,0,0,1,2,0,2,0,0,4,45,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1210,"            dtp = dateTimeParser(), // date time parser",2,0,0,1,2,0,2,0,0,4,43,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1211,"            dotp = dateOptionalTimeParser(), // date optional time parser",2,0,0,1,2,0,2,0,0,4,61,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1217,                DateTimeParser tOffset = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,4,0,6,55,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1229,            if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1236,            if (dpe == null) {,2,0,0,1,3,0,0,0,0,3,18,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1237,                return new DateTimeFormatterBuilder(),0,0,0,1,2,1,0,2,0,2,37,11,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1259,            return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1263,            if (tp == null) {,6,1,0,1,3,0,0,0,0,8,17,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1274,            if (ltp == null) {,2,1,0,1,3,0,8,0,0,11,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1275,                return new DateTimeFormatterBuilder(),4,0,0,1,2,1,0,2,0,6,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1284,            if (tpe == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1286,                DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,4,0,11,60,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1297,                return new DateTimeFormatterBuilder(),0,0,0,1,2,1,0,2,0,2,37,12,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1333,            return tpe;,4,0,0,0,0,1,4,2,0,10,11,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1340,                DateTimeParser time = new DateTimeFormatterBuilder(),4,0,0,1,2,0,6,4,0,14,52,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1353,            if (dotp == null) {,12,4,0,1,3,0,0,0,0,16,19,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1373,                return new DateTimeFormatterBuilder(),0,0,0,1,2,1,0,2,0,2,37,13,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1383,            if (t == null) {,2,1,0,1,3,0,10,0,0,13,16,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1389,            return t;,2,0,0,0,0,1,0,0,0,2,9,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1393,            if (tx == null) {,2,0,0,1,3,0,0,0,0,2,17,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1403,            if (tt == null) {,4,1,0,1,3,0,0,0,0,5,17,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1404,                return new DateTimeFormatterBuilder(),2,1,0,1,2,1,0,2,0,5,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1409,            return tt;,2,0,0,0,0,1,0,0,0,2,10,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1413,            if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1443,            if (od == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1449,            return od;,10,0,0,0,0,1,4,0,0,15,10,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1453,            if (odt == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1463,            if (odtx == null) {,2,1,0,1,3,0,0,0,0,3,19,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1473,            if (wdt == null) {,0,0,0,1,3,0,8,0,0,8,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1474,                return new DateTimeFormatterBuilder(),8,0,0,1,2,1,4,0,0,13,37,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1483,            if (wdtx == null) {,4,1,0,1,3,0,0,0,0,5,19,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1484,                return new DateTimeFormatterBuilder(),0,0,0,1,2,1,10,2,0,12,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1501,            return bd;,6,0,0,0,0,1,0,0,0,7,10,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1505,            if (bt == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1515,            return bt;,2,0,0,0,0,1,0,0,0,2,10,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1519,            if (btx == null) {,4,1,0,1,3,0,0,0,0,5,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1520,                return new DateTimeFormatterBuilder(),0,0,0,1,2,1,0,2,0,2,37,14,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1527,            return btx;,6,0,0,0,0,1,4,0,0,10,11,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1531,            if (btt == null) {,10,4,0,1,3,0,0,0,0,14,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1537,            return btt;,2,0,0,0,0,1,0,0,0,2,11,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1552,                return new DateTimeFormatterBuilder(),4,0,0,1,2,1,4,4,0,13,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1561,            if (bdtx == null) {,2,1,0,1,3,0,0,0,0,3,19,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1571,            if (bod == null) {,12,1,0,1,3,0,4,2,0,20,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1582,                return new DateTimeFormatterBuilder(),6,0,0,1,2,1,0,0,0,6,37,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1591,            if (bodtx == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1601,            if (bwd == null) {,8,1,0,1,3,0,4,0,0,13,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1602,                return new DateTimeFormatterBuilder(),4,0,0,1,2,1,0,2,0,7,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1609,            return bwd;,2,0,0,0,0,1,0,0,0,2,11,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1613,            if (bwdt == null) {,4,1,0,1,3,0,0,0,0,5,19,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1614,                return new DateTimeFormatterBuilder(),2,1,0,1,2,1,0,2,0,5,37,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1623,            if (bwdtx == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1634,            if (ym == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1644,            if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1655,            if (ww == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1665,            if (wwd == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1676,            if (hm == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1682,            return hm;,2,0,0,0,0,1,0,0,0,2,10,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1686,            if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1697,            if (hmsl == null) {,2,1,0,1,3,0,0,0,0,3,19,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1706,            return hmsl;,2,0,0,0,0,1,0,0,0,2,12,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1710,            if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1722,            if (dh == null) {,4,2,0,1,3,0,0,0,0,6,17,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1733,            if (dhm == null) {,8,1,0,1,3,0,2,0,0,12,18,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1745,                return new DateTimeFormatterBuilder(),4,0,0,1,2,1,0,4,0,9,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1755,            if (dhmsl == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1778,            if (ye == null) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1783,            return ye;,2,0,0,0,0,1,0,0,0,2,10,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1787,            if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1793,            return mye;,2,0,0,0,0,1,0,0,0,2,11,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1803,            return dme;,2,0,0,0,0,1,6,0,0,8,11,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1807,            if (we == null) {,2,1,0,1,3,0,0,0,0,3,17,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1808,                return new DateTimeFormatterBuilder(),4,0,0,1,2,1,4,4,0,13,37,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1812,            return we;,2,0,0,0,0,1,0,0,0,2,10,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1816,            if (wwe == null) {,2,1,0,1,3,0,0,0,0,3,18,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1822,            return wwe;,2,0,0,0,0,1,0,0,0,2,11,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1826,            if (dwe == null) {,2,0,0,1,3,0,0,0,0,2,18,6,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1832,            return dwe;,2,0,0,0,0,1,0,0,0,2,11,5,0.0576,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,982,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,8,0,0,13,47,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,999,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1001,        int offset = getOffset(instantLocal - offsetLocal);,10,1,0,1,2,0,2,0,0,14,51,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1032,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,10,6,0,3,7,0,0,0,0,16,69,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,4,0,0,7,35,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",8,0,0,2,4,0,8,0,0,17,48,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",20,5,0,2,4,0,18,4,0,52,52,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,18,0,0,25,56,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,4,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,480,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",10,0,0,1,2,0,8,2,0,21,68,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,483,            if (get(result) != value) {,4,1,0,2,5,0,4,2,0,12,27,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,532,            return iLeapDurationField;,18,1,0,0,0,1,6,2,0,28,26,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,582,            return iField.getMaximumValue();,10,0,0,1,2,1,4,2,0,17,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,174,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,6,0,0,8,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",2,0,0,1,2,1,4,0,0,7,71,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,742,                    if (instant + iGapDuration < iCutover) {,6,1,0,1,3,0,2,0,0,9,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,743,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,14,0,0,17,37,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,746,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,752,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,4,2,0,9,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,211,            return iRangeDurationField;,4,0,0,0,0,1,0,0,0,4,27,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,133,"        super(base, param);",6,1,0,1,2,0,0,0,0,7,19,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,134,    },2,0,0,0,1,0,8,0,0,11,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",8,0,0,1,2,3,4,4,0,21,85,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,106,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,112,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",10,0,0,2,4,0,2,0,0,14,76,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,118,"                cCache.put(zone, chrono);",8,1,0,1,2,0,0,0,0,10,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,121,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,222,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,223,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",12,2,0,1,2,0,2,2,0,19,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,8,0,0,8,51,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,251,            fields.era = ERA_FIELD;,20,0,0,0,0,0,12,6,0,40,23,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,253,    },28,2,1,0,1,0,6,0,0,40,1,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,54,    },0,0,0,0,1,0,0,2,0,4,1,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,66,        int min = super.getMinimumValue();,12,0,0,1,2,0,4,0,0,17,34,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",2,0,1,2,4,0,10,0,0,15,72,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,88,        if (value <= iSkip) {,16,1,0,1,3,0,4,0,0,23,21,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,410,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,6,0,0,15,25,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,514,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,4,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0,0,0,4,8,0,0,0,0,12,71,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,739,"                instant = iGregorianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,740,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,78,        if (year <= 0) {,2,1,0,1,3,0,0,2,0,5,16,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,100,        return iMinValue;,2,2,0,0,0,1,8,0,0,12,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTime,4,527,        return this;,4,1,0,0,0,1,0,0,0,5,12,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,209,                for (int i = chronos.size(); --i >= 0;) {,4,1,0,2,5,0,4,0,0,10,41,8,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,210,                    chrono = chronos.get(i);,8,0,0,1,2,0,4,0,0,13,24,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,12,0,0,18,63,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,214,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,400,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,51,        super(DateTimeFieldType.era());,2,0,0,2,4,3,4,16,0,25,31,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,52,        iEraText = text;,8,0,0,0,0,0,0,2,0,12,16,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,53,    },4,0,0,0,1,0,0,0,0,4,1,7,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,454,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,455,"            super(field, field.getType());",6,0,0,2,4,0,4,0,0,11,30,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,456,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,99,"        super(base, null);",4,0,0,1,2,0,0,0,0,5,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,67,        if (base == null) {,4,2,0,1,3,0,8,0,0,15,19,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,8,1,0,1,2,0,4,0,0,15,65,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",8,0,0,3,6,4,0,10,0,21,77,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",6,0,0,1,2,0,0,12,0,19,66,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,217,"        fields.weekyears = convertField(fields.weekyears, converted);",14,0,0,1,2,0,4,0,0,20,61,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,222,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,223,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,224,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,225,"        fields.millis = convertField(fields.millis, converted);",10,1,0,1,2,0,4,0,0,16,55,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",14,2,0,1,2,0,4,0,0,21,69,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",10,0,0,1,2,0,4,0,0,15,67,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",16,0,0,1,2,0,8,0,0,26,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",12,0,0,1,2,0,4,0,0,18,71,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",16,0,0,1,2,0,8,0,0,26,67,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,256,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,257,            return field;,4,0,0,0,0,1,6,4,0,14,13,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,259,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,260,            return (DurationField)converted.get(field);,4,1,0,2,4,1,6,2,0,13,43,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,262,        LimitDurationField limitField = new LimitDurationField(field);,4,0,0,1,2,0,6,4,0,14,62,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,263,"        converted.put(field, limitField);",2,0,0,1,2,0,12,0,0,14,33,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,264,        return limitField;,2,0,0,0,0,1,4,0,0,6,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,274,        LimitDateTimeField limitField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,280,        return limitField;,2,0,0,0,0,1,0,0,0,3,18,4,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,94,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,102,        return iField.isSupported();,2,0,0,1,2,1,8,0,0,10,28,3,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,516,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,6,2,0,16,36,3,0.00202,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,4,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00201,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,6,1,0,0,0,0,0,0,0,8,50,9,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,432,                year++;,2,0,0,0,0,0,0,0,0,3,7,9,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,422,            if (isLeapYear(year)) {,8,0,0,2,5,0,8,0,0,17,23,3,0.00198,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,430,            if (yearStart <= instant) {,4,1,0,1,3,0,0,0,0,5,27,7,0.00198,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,4,301,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,4,304,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1055,            return oldInstant;,2,2,0,0,0,1,4,0,0,9,18,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,119,        iMillis = instant;,4,0,0,0,0,0,0,0,0,5,18,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,335,"    public LocalDate(long instant, Chronology chronology) {",10,0,0,1,3,1,6,2,0,20,55,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,336,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",6,0,0,2,4,0,8,0,0,14,86,5,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,341,        iChronology = chronology;,8,0,0,0,0,3,4,6,0,24,25,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,342,    },12,1,0,0,1,0,0,0,0,15,1,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,1462,        return getChronology().year().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,52,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,890,        return instant;,4,0,0,0,0,1,0,0,0,6,15,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,185,        return iMinDaysInFirstWeek;,4,1,0,0,0,1,0,0,0,5,27,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,504,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,545,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,547,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,1148,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,1149,            iField = dateTimeField;,8,0,0,0,0,0,4,0,0,13,23,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,274,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",6,0,0,3,6,0,0,2,0,9,62,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,275,    },2,0,0,0,1,0,0,0,0,3,1,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,190,        zone = DateTimeUtils.getZone(zone);,2,0,0,1,2,0,6,0,0,9,35,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,192,        if (gregorianCutover == null) {,2,1,0,1,3,0,0,0,0,3,31,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,197,            if (cutoverDate.getYear() <= 0) {,0,1,0,2,5,0,4,0,0,5,33,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,203,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,205,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,218,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,219,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,299,        return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,320,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,324,            return this;,2,1,0,0,0,1,0,0,0,3,12,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,478,        Object[] params = (Object[])getParam();,4,0,0,4,8,0,6,4,0,14,39,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,480,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,481,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,4,0,0,4,63,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,482,        Instant cutoverInstant = (Instant)params[2];,4,0,1,2,4,0,0,4,0,10,44,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,483,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,26,0,0,29,44,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,485,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,486,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,489,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,493,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,510,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,1,0,3,7,0,8,0,0,9,55,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,514,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,515,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,517,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,518,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,519,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,521,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",14,2,0,2,4,0,4,2,0,23,102,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,525,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,530,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",2,0,0,2,4,0,0,0,0,4,72,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,537,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,539,            fields.years = fields.year.getDurationField();,4,1,0,1,2,0,0,0,0,5,46,7,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,540,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,1,0,1,0,0,0,0,4,45,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,543,            fields.centuryOfEra = new ImpreciseCutoverField(,2,1,0,0,1,0,0,0,0,3,48,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,547,            fields.yearOfCentury = new ImpreciseCutoverField(,6,0,0,0,1,0,6,2,0,16,49,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,552,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,556,            fields.weekyears = fields.weekyear.getDurationField();,10,0,0,1,2,0,6,0,0,17,54,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,557,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,567,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,568,            fields.dayOfYear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,36,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,573,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,6,3,0,2,4,0,0,0,0,9,65,10,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,581,            CutoverField cf = new CutoverField,6,0,0,0,0,0,6,4,0,16,34,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,583,            cf.iRangeDurationField = fields.months;,8,0,0,0,0,0,0,0,0,9,39,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,584,            fields.dayOfMonth = cf;,10,0,0,0,0,0,4,2,0,17,23,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,627,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,638,"            this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);",12,0,0,1,2,0,0,0,0,13,74,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,649,"                     DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {",14,2,0,0,2,0,2,2,0,20,74,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,650,            super(gregorianField.getType());,6,0,0,2,4,0,4,0,0,10,32,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,651,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,658,            if (rangeField == null) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,659,                rangeField = gregorianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,52,7,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,660,                if (rangeField == null) {,4,1,1,1,3,0,0,2,0,11,25,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,661,                    rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,9,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,664,            iRangeDurationField = rangeField;,6,0,0,0,0,0,6,4,0,17,33,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,816,            return iGregorianField.getLeapDurationField();,2,0,0,1,2,1,4,2,0,9,46,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,963,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,985,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,71,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,986,            iRangeDurationField = rangeDurationField;,6,1,0,0,0,0,0,0,0,8,41,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,987,        },2,0,0,0,1,0,0,0,0,2,1,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,999,            if (durationField == null) {,2,1,0,1,3,0,0,0,0,3,28,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,1000,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,1002,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",6,1,0,3,6,3,0,12,0,22,116,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,46,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,131,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,132,                chronos = new JulianChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",6,0,0,1,2,0,0,2,0,10,62,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,211,        return (year & 3) == 0;,12,2,0,1,2,1,4,2,0,21,23,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,221,        if (relativeYear <= 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,224,            leapYears = (relativeYear + 3) >> 2;,2,0,0,1,2,0,4,2,0,9,36,14,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,10,3,0,2,4,0,0,0,0,13,89,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,245,        return MAX_YEAR;,6,0,0,0,0,1,0,2,0,9,16,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,4,0,0,7,23,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,4,0,0,7,27,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,6,4,0,1,2,1,0,0,0,10,79,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,265,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,266,            super.assemble(fields);,4,0,0,1,2,0,6,0,0,10,23,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",10,0,0,1,2,0,0,2,0,13,63,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,50,public final class JulianChronology extends BasicGJChronology {,4,0,0,0,1,2,8,2,0,16,63,1,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,4,128,        int year = get(instant);,2,0,1,1,2,0,0,0,0,7,24,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,4,130,        if (instant != yearStartMillis) {,4,1,0,1,3,0,0,0,0,5,33,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,4,132,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,4,134,        return instant;,10,4,0,0,0,1,0,0,0,14,15,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,73,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,76,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,134,        int thisWeekyear = get( instant );,4,0,0,1,2,0,4,0,0,8,34,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,4,0,0,1,2,0,6,0,0,10,65,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,6,0,0,1,2,0,6,0,0,13,55,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,55,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,163,        long workInstant = instant; // Get a copy,4,0,0,0,0,0,0,0,0,4,41,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,169,"        workInstant = iChronology.setYear( workInstant, year );",6,0,0,1,2,0,8,0,0,16,55,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,180,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,182,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,2,0,0,1,2,0,6,0,0,8,64,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),8,2,0,1,2,0,0,0,0,11,56,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,236,        int wow = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,49,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,237,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,4,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),10,2,0,1,2,1,0,2,0,15,71,1,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,84,        return value;,4,0,0,0,0,4,4,0,0,11,13,1,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1051,        if (newZone == null) {,6,1,0,1,3,0,0,0,0,8,22,3,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1054,        if (newZone == this) {,14,2,0,1,3,0,0,0,0,18,22,3,0.00195,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,4,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,949,        int offset = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,35,5,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,950,        long instantLocal = instantUTC + offset;,6,1,0,0,0,0,6,0,0,13,40,3,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,68,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,955,        return instantLocal;,2,0,0,0,0,1,0,0,0,2,20,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,979,        if (offsetLocalFromOriginal == offsetOriginal) {,18,3,0,1,3,0,0,0,0,23,48,3,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,980,            return instantUTC;,6,0,0,0,0,1,0,2,0,9,18,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,335,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,336,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,337,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,3,6,1,0,0,0,10,89,6,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,4,101,        return iField.getUnitMillis();,2,0,0,1,2,1,10,0,0,13,30,1,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,65,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,66,        iChronology = chronology;,2,0,0,0,0,0,4,0,0,7,25,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,67,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,68,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,69,            iMinValue = min - 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00195,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,75,        iSkip = skip;,4,0,0,0,0,0,4,0,0,9,13,3,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,64,"        this(field, null, type);",4,0,0,1,2,0,0,0,0,4,24,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,76,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,79,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,80,        iRangeDurationField = rangeField;,6,1,0,0,0,0,0,0,0,8,33,3,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,81,        iType = (type == null ? field.getType() : type);,8,1,0,2,4,0,4,0,0,14,48,3,0.00195,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,229,        return iField.getMinimumValue();,4,0,0,1,2,1,0,0,0,5,32,8,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,562,            return (DateTimeConstants.MILLIS_PER_DAY - 1),12,1,0,1,2,1,4,0,0,18,45,3,0.00194,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,4,96,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00194,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,4,97,            return instant - instant % iUnitMillis - iUnitMillis;,10,3,0,0,0,1,0,0,0,14,53,3,0.00194,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1543,            if (iTailZone == null) {,2,1,0,1,3,0,4,0,0,7,24,1,0.00193,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,4,113,        return DateTimeConstants.SUNDAY;,8,1,0,0,0,1,0,0,0,10,32,1,0.00193,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,4,104,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,502,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,524,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,525,        if (instant < firstWeekMillis1) {,4,1,0,1,3,0,0,0,0,5,33,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,532,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.00192,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1538,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00192,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1539,                    return iWallOffsets[i - 1];,2,1,1,1,2,1,0,0,0,5,27,10,0.00192,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1577,                return transitions[i];,0,0,1,1,2,1,0,0,0,4,22,8,0.00192,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,4,0,0,1,2,3,0,8,0,15,99,1,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,8,0,0,8,50,5,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,2,0,2,52,10,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0,0,0,2,4,0,8,2,0,11,51,1,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,12,50,1,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,610,        return iLocalMillis;,2,0,0,0,0,1,4,0,0,6,20,4,0.00191,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,619,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,153,        if ((base = getBase()) != null) {,4,1,0,3,7,0,8,0,0,16,33,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,157,        FieldUtils.verifyValueBounds,2,0,0,0,0,0,0,0,0,2,28,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",4,2,0,1,2,1,16,0,0,22,74,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,347,        long jan1millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,350,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,4,2,0,2,5,0,0,0,0,6,48,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,352,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,0,0,0,6,39,6,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,4,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00188,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,4,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,4,0.00187,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,4,116,        return iChronology.getMinYear();,6,0,0,1,2,1,4,0,0,11,32,3,0.00181,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00175,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,10,0,0,10,78,5,0.00175,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",2,0,0,2,4,0,0,0,0,2,88,4,0.00175,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00175,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,4,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00175,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,252,        super();,2,0,0,1,2,0,0,0,0,2,8,4,0.00175,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.00175,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,1,0,1,0,10,0,0,19,75,3,0.00175,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00175,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,257,    },4,1,0,0,1,0,0,0,0,5,1,3,0.00175,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,4,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,3,6,0,10,0,0,10,80,5,0.00174,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,4,113,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00174,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,4,284,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00174,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,466,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00173,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,4,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,1,2,0,10,0,0,10,53,5,0.00173,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,4,301,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00173,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,4,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,59,5,0.00173,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",2,1,0,3,6,0,8,0,0,12,26,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",2,0,0,3,6,0,4,0,0,6,28,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",6,0,0,1,2,0,6,4,0,18,58,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,2,0,0,1,2,0,6,2,0,10,38,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",2,0,0,1,2,1,0,2,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,1,2,1,6,0,0,7,38,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,852,        for (int i = 0; i < iTypes.length; i++) {,24,3,1,1,3,0,32,4,0,69,41,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,853,            hash += iTypes[i].hashCode();,2,0,1,2,4,0,2,0,0,9,29,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,809,                types[i - 1] = iTypes[i];,8,1,1,2,4,0,4,2,0,26,25,1,0.11111,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,175,        return type;,2,1,1,0,0,1,8,0,0,15,12,3,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,194,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,205,            cYWDTime = type;,4,0,0,0,0,0,0,0,0,5,16,5,0.08333,0,0,-1
defect4j,time,org/joda/time/Period,5,737,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",6,1,0,2,4,1,4,0,0,11,68,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,746,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",8,0,1,2,4,1,4,0,0,17,69,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,755,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",8,0,0,2,4,1,4,0,0,13,68,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,774,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",6,0,0,2,4,1,4,0,0,10,68,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,783,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",4,1,0,2,4,1,0,0,0,5,70,3,0.07627,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,95,        int[] result = new int[size()];,4,0,0,3,6,0,2,0,0,7,31,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,96,        for (int i = 0; i < result.length; i++) {,4,1,0,1,3,0,8,0,0,13,41,1,0.072,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,2,0,0,4,8,0,6,0,0,9,56,3,0.07143,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,482,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,487,            cMillis = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,489,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,1,2,1,2,0,0,3,39,5,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,266,            if (this == obj) {,4,2,0,1,3,0,0,0,0,6,18,1,0.04762,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,135,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,148,        return type;,4,0,0,0,0,1,4,2,0,10,12,3,0.04348,0,0,-1
defect4j,time,org/joda/time/Period,5,330,    },2,0,0,0,1,3,0,4,0,10,1,2,0.04306,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,305,        PeriodType type = cDTime;,4,0,0,0,0,0,0,2,0,6,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,306,        if (type == null) {,12,1,0,1,3,0,0,4,0,19,19,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,316,            cDTime = type;,12,0,0,0,0,0,0,2,0,17,14,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,355,        if (type == null) {,4,1,0,1,3,0,4,0,0,10,19,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,356,            type = new PeriodType(,4,0,0,0,1,0,0,2,0,7,22,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,361,            cYears = type;,12,3,0,0,0,0,6,2,0,23,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,608,        return iName;,4,0,0,0,0,1,2,2,0,10,13,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,799,        int fieldIndex = iIndices[indicesIndex];,4,1,1,1,2,0,4,0,0,14,40,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,806,            if (i < fieldIndex) {,20,10,0,1,3,0,0,0,0,34,21,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,808,            } else if (i > fieldIndex) {,4,1,0,1,4,0,0,0,0,5,28,7,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,813,        int[] indices = new int[8];,2,0,0,2,4,0,0,0,0,2,27,5,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,814,        for (int i = 0; i < indices.length; i++) {,26,3,0,1,3,3,0,12,0,46,42,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,815,            if (i < indicesIndex) {,6,1,0,1,3,0,6,0,0,13,23,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,823,"        return new PeriodType(getName() + name, types, indices);",4,0,0,2,4,1,0,0,0,4,56,6,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,674,        int realIndex = iIndices[index];,6,1,0,1,2,0,0,0,0,7,32,5,0.03321,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,94,    },2,0,0,0,1,0,6,0,0,9,1,4,0.03,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",2,0,0,1,2,0,18,0,0,21,108,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",2,2,0,2,4,0,4,0,0,8,64,8,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,462,        return newValues;,4,0,0,0,0,2,0,0,0,5,17,1,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",10,1,0,2,4,0,0,8,0,19,62,4,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",2,0,0,2,4,0,14,0,0,16,60,3,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,453,        int[] newValues = new int[size()];,8,0,0,3,6,1,2,0,0,11,34,1,0.02941,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,397,            values[index] = newValue;,4,0,1,1,2,0,0,4,0,14,25,3,0.02624,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,399,    },2,0,0,0,1,0,0,4,0,7,1,4,0.02624,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,390,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.02601,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,391,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.02601,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,444,        PeriodType type = cMinutes;,4,0,0,0,0,0,0,2,0,6,27,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,445,        if (type == null) {,4,2,0,1,3,0,0,0,0,6,19,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,451,            cMinutes = type;,4,0,0,0,0,0,0,0,0,5,16,6,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,463,        if (type == null) {,4,0,0,1,3,0,0,0,0,4,19,5,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,464,            type = new PeriodType(,6,0,0,0,1,0,4,4,0,15,22,3,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,469,            cSeconds = type;,10,0,0,0,0,0,2,2,0,16,16,5,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,471,        return type;,2,0,0,0,0,1,18,0,0,20,12,3,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,427,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,428,            type = new PeriodType(,6,0,0,0,1,0,0,4,0,11,22,1,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,433,            cHours = type;,4,0,0,0,0,0,0,0,0,5,14,6,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,435,        return type;,4,0,0,0,0,1,0,0,0,5,12,5,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,648,"        for (int i = 0, isize = size(); i < isize; i++) {",2,0,0,2,5,0,8,2,0,13,49,8,0.0235,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,0,0,0,7,24,6,0.0235,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,408,        PeriodType type = cDays;,4,0,0,0,0,0,0,2,0,6,24,4,0.02273,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,409,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02273,0,0,-1
defect4j,time,org/joda/time/Period,5,298,"        super(0L, null, null);",2,0,0,1,2,0,0,0,0,3,22,3,0.01982,0,0,-1
defect4j,time,org/joda/time/Period,5,299,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01982,0,0,-1
defect4j,time,org/joda/time/Period,5,65,    public static final Period ZERO = new Period();,4,0,0,1,2,6,0,16,0,26,47,2,0.01982,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,70,        return sum;,12,3,0,0,0,1,0,0,0,16,11,3,0.01903,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,64,        int sum = val1 + val2;,8,2,1,0,0,0,0,0,0,12,22,3,0.01895,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.01895,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,319,            return PeriodType.standard();,4,1,0,1,2,1,4,0,0,9,29,3,0.01844,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,255,        type = checkPeriodType(type);,6,3,0,1,2,0,0,2,0,11,29,1,0.01804,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,256,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.01804,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,276,        int size = period.size();,2,0,0,1,2,0,10,0,0,12,25,3,0.01741,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,277,        int[] values = new int[size];,4,1,1,2,4,0,0,0,0,7,29,3,0.01741,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,278,        if (duration != 0) {,8,2,0,1,3,0,4,0,0,15,20,3,0.01741,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,289,        return values;,2,0,0,0,0,1,4,0,0,6,14,3,0.01741,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,333,        PeriodType type = cTime;,14,2,0,0,0,0,16,4,0,38,24,3,0.01695,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,335,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,343,            cTime = type;,4,0,0,0,0,0,0,0,0,5,13,6,0.01695,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,5,157,            return false;,2,0,0,0,0,1,0,2,0,5,13,1,0.01613,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,102,        PeriodType type = cStandard;,2,0,0,0,0,0,0,0,0,2,28,4,0.0159,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.0159,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,116,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.0159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,318,        if (type == null) {,0,0,1,1,3,0,14,0,0,18,19,8,0.0156,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,2,0,0,1,3,2,0,4,0,8,73,1,0.01538,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,56,        return getPeriodType().size();,0,0,0,2,4,1,8,0,0,9,30,3,0.01538,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,4,0,0,1,3,0,0,0,0,5,73,5,0.01538,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,596,        iName = name;,4,0,0,0,0,0,0,0,0,5,13,4,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,597,        iTypes = types;,4,0,0,0,0,0,0,0,0,5,15,4,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,598,        iIndices = indices;,12,9,0,0,0,0,6,0,0,28,19,1,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",10,0,0,1,2,3,4,12,0,30,90,1,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,58,    static int YEAR_INDEX = 0;,2,0,0,0,0,1,0,0,0,3,26,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,59,    static int MONTH_INDEX = 1;,2,0,0,0,0,1,0,0,0,3,27,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,61,    static int DAY_INDEX = 3;,2,0,0,0,0,1,0,0,0,3,25,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,62,    static int HOUR_INDEX = 4;,2,0,0,0,0,1,0,0,0,3,26,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,64,    static int SECOND_INDEX = 6;,2,0,0,0,0,1,0,0,0,3,28,2,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,65,    static int MILLI_INDEX = 7;,12,0,0,0,0,1,4,2,0,20,27,1,0.01183,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,251,        PeriodType type = cYDTime;,4,0,0,0,0,0,0,2,0,6,26,4,0.01124,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,253,            type = new PeriodType(,2,0,0,0,1,0,8,0,0,10,22,5,0.01124,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,264,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.01124,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0098,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,281,                DurationField field = period.getFieldType(i).getField(this);,10,3,0,2,4,0,8,2,0,23,60,5,0.00962,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,282,                if (field.isPrecise()) {,8,1,0,2,5,0,10,2,0,22,24,3,0.00962,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,5,283,"                    int value = field.getDifference(duration, current);",2,0,0,1,2,0,8,0,0,10,51,11,0.00962,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,287,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00666,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,296,                    return chronology.weeks();,2,0,0,1,2,2,4,0,0,7,26,1,0.00654,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",2,0,0,2,4,0,8,2,0,13,76,8,0.00641,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,108,"                cCache.put(zone, chrono);",2,0,0,1,2,0,8,2,0,13,25,8,0.00641,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,96,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,1,0.00638,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00638,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,101,        if (chrono != null && chrono.getZone() == zone) {,4,3,0,2,5,0,4,0,0,11,49,4,0.00638,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,12,0,0,15,26,3,0.00638,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00638,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,112,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00638,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,4,0,0,6,41,8,0.00625,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,102,    },4,1,0,0,1,0,0,0,0,5,1,3,0.00625,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,114,        checkPermission();,4,0,0,1,2,0,2,0,0,7,18,4,0.00625,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,161,        SecurityManager sm = System.getSecurityManager();,2,1,0,1,2,0,0,0,0,3,49,8,0.00625,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,162,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00625,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,176,        if (sm != null) {,2,1,0,1,3,0,8,0,0,11,17,6,0.00602,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,182,        synchronized(DateTimeZone.class) {,4,0,0,1,3,0,0,4,0,9,34,3,0.00602,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,183,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.00602,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,184,        },2,0,0,0,1,0,0,2,0,4,1,4,0.00602,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,5,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00594,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,1273,        return 57 + getID().hashCode();,0,1,0,2,4,1,4,0,0,5,31,4,0.00566,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,5,109,        return getWrappedField().getUnitMillis() * iScalar;,2,1,0,2,4,1,4,0,0,7,51,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,55,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,59,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,62,        if (zone == null) {,0,0,0,1,3,0,4,0,0,4,19,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,65,"        return new ZonedChronology(base, zone);",4,0,0,1,2,1,0,2,0,6,39,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,85,        return (DateTimeZone)getParam();,0,0,0,2,4,1,2,2,0,4,32,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",4,0,0,1,2,0,0,12,0,17,66,3,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,155,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,156,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,160,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,163,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,164,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,165,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,170,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",10,1,0,1,2,0,6,0,0,20,61,3,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",18,1,1,1,2,0,0,4,0,28,69,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",10,0,0,1,2,0,16,2,0,29,67,3,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,174,"        fields.era = convertField(fields.era, converted);",2,0,0,1,2,0,4,0,0,6,49,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",2,0,0,1,2,0,6,4,0,12,63,9,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,198,            return field;,4,1,0,0,0,1,0,0,0,5,13,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,200,        if (converted.containsKey(field)) {,8,0,0,2,5,0,6,0,0,16,35,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,201,            return (DurationField)converted.get(field);,0,1,0,2,4,1,4,0,0,5,43,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,205,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,212,        if (converted.containsKey(field)) {,4,0,0,2,5,0,8,4,0,16,35,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,215,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,388,            if (!field.isSupported()) {,2,0,1,2,5,0,12,0,0,20,27,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,391,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,393,            iDurationField = durationField;,2,0,0,0,0,0,0,2,0,4,31,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,394,            iTimeField = useTimeArithmetic(durationField);,2,0,0,1,2,0,4,0,0,7,46,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,395,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,281,            super(field.getType());,8,1,0,2,4,0,4,0,0,14,23,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,282,            if (!field.isSupported()) {,14,6,0,2,5,0,4,0,0,25,27,1,0.00565,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,5,286,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.00565,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,5,49,        return DurationFieldType.millis();,4,0,0,1,2,1,4,0,0,9,34,1,0.00563,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,5,155,        return (int) getUnitMillis();,2,0,0,2,4,1,8,0,0,11,29,1,0.00563,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,5,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00563,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,5,148,        int hash = (int) (scalar ^ (scalar >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00563,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,5,149,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00563,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,5,150,        hash += getWrappedField().hashCode();,8,0,0,2,4,0,4,0,0,14,37,3,0.00563,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,2,1,0,0,0,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,2,1,1,1,2,0,0,0,0,5,33,8,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,0,0,0,6,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05556,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,48,    },2,1,0,0,1,0,0,0,0,3,1,5,0.05519,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,632,        if (this == partial) {,6,2,0,1,3,0,8,0,0,16,22,1,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,0.05479,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,4,1,0,0,0,0,0,0,0,6,30,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,6,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,4,1,0,1,3,0,0,0,0,5,22,3,0.04327,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04327,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.03863,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,6,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.03226,0,0,-1
defect4j,time,org/joda/time/Instant,6,144,        return this;,2,0,1,0,0,1,0,4,0,8,12,4,0.03045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,8,0,0,11,46,1,0.03045,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,54,        super();,6,1,0,1,2,0,4,0,0,12,8,4,0.027,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.02629,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,8,4,0,1,2,0,4,0,0,19,36,1,0.0252,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",20,3,0,2,4,0,4,4,0,32,105,1,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,21,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.02518,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,888,"            instant = add(newInstant, 1);",6,1,0,1,2,0,18,0,0,26,29,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,954,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,0,0,1,2,0,4,2,0,17,71,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,955,        },8,2,0,0,1,0,0,0,0,10,1,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,965,        {,2,1,0,0,1,0,0,0,0,3,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,967,            if (durationField == null) {,0,0,0,1,3,0,6,0,0,7,28,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,968,"                durationField = new LinkedDurationField(iDurationField, this);",6,0,1,1,2,0,0,2,0,17,62,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,970,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,621,"            this(julianField, gregorianField, cutoverMillis, false);",2,0,0,1,2,0,8,0,0,10,56,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,631,"                     long cutoverMillis, boolean convertByWeekyear) {",6,0,0,0,2,0,6,0,0,12,48,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,633,            iJulianField = julianField;,14,2,0,0,0,0,4,2,0,24,27,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,635,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,4,25,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,639,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,16,0,0,22,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,642,            if (rangeField == null) {,2,0,0,1,3,0,0,4,0,7,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,643,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,645,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,773,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,6,1,0,1,2,2,0,4,0,14,69,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,190,        zone = DateTimeUtils.getZone(zone);,8,0,0,1,2,0,6,0,0,15,35,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,199,        synchronized (cCache) {,2,0,0,1,3,0,8,0,0,10,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,202,                chronos = new ArrayList<GJChronology>(2);,4,0,0,1,2,1,4,4,0,14,41,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,214,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,215,                chrono = new GJChronology,2,1,0,0,0,0,0,0,0,3,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,474,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,1,39,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,476,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,477,        GregorianChronology gregorian = (GregorianChronology)params[1];,6,0,1,2,4,0,4,6,0,18,63,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,478,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,479,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,481,        iJulianChronology = julian;,10,3,0,0,0,0,0,0,0,14,27,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,483,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,485,        if (getBase() != null) {,2,1,0,2,5,0,0,0,0,4,24,9,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,494,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,500,        fields.copyFieldsFrom(gregorian);,4,2,0,1,2,0,0,0,0,6,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,506,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,10,6,0,3,7,0,2,2,0,20,55,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,526,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",14,0,0,2,4,0,12,2,0,30,72,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,535,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,542,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,550,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,552,            fields.years = fields.year.getDurationField();,14,0,0,1,2,0,2,0,0,19,46,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,555,            fields.yearOfCentury = new ImpreciseCutoverField(,6,0,0,0,1,0,4,2,0,14,49,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,560,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,562,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,568,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,570,            fields.weekyears = fields.weekyear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,576,            CutoverField cf = new CutoverField,4,0,0,0,0,0,8,4,0,17,34,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,579,            fields.dayOfMonth = cf;,10,0,0,0,0,0,0,2,0,14,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1094,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1096,        },12,1,0,0,1,0,10,0,0,24,1,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,133,        return instant;,4,0,0,0,0,1,0,0,0,4,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,1,2,1,2,0,0,12,60,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,81,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,84,        return value;,4,0,0,0,0,1,16,0,0,20,13,1,0.0251,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,133,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,140,        int thisDow = iChronology.getDayOfWeek(instant);,6,0,1,1,2,0,6,0,0,17,48,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,4,0,0,1,2,0,10,0,0,15,65,3,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,14,2,1,1,2,2,4,2,0,28,53,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,0,0,0,2,55,8,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,155,        if ( setToWeek > maxOutWeeks ) {,4,1,0,1,3,0,0,0,0,5,32,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,173,        int workWoyYear = get( workInstant );,4,0,0,1,2,0,8,0,0,12,37,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,179,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,6,1,0,1,2,0,10,0,0,18,64,3,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),10,2,0,1,2,0,0,0,0,14,56,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,221,        if (relativeYear <= 0) {,4,2,0,1,3,0,0,0,0,6,24,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,3,6,1,0,0,0,10,89,6,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,502,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,503,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,504,        if (week == 1) {,10,1,0,1,3,0,0,0,0,12,16,3,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.02495,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,353,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,8,0,0,14,39,3,0.02493,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.0249,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,163,        return getMaximumValue(instant);,10,0,0,1,2,1,14,6,0,31,32,1,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,235,        int wow = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,49,5,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,236,        if (wow > 1) {,6,1,0,1,3,0,0,0,0,8,14,1,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),8,2,0,1,2,1,0,0,0,10,71,6,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,6,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.02485,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,6,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.02485,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,299,        if (zone == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.0248,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,348,        long jan1millis = getYearMillis(year);,0,0,0,1,2,0,2,0,0,2,38,6,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,351,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,4,2,0,2,5,0,0,0,0,6,48,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,525,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,526,        if (instant < firstWeekMillis1) {,8,4,0,1,3,0,0,0,0,12,33,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,529,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,530,        if (instant >= firstWeekMillis2) {,4,1,0,1,3,0,0,0,0,5,34,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,533,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.02478,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,95,            instant += 1;,4,0,0,0,0,0,6,2,0,13,13,3,0.02468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.02468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,6,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.02456,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,153,        if ((base = getBase()) != null) {,4,1,0,3,7,0,6,0,0,14,33,4,0.02451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.02451,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,96,"        return super.set(millis, value);",8,0,0,1,2,1,6,0,0,15,32,3,0.02439,0,0,-1
defect4j,time,org/joda/time/Instant,6,119,        iMillis = instant;,4,0,0,0,0,0,0,0,0,5,18,4,0.02404,0,0,-1
defect4j,time,org/joda/time/Instant,6,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.02376,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",10,0,0,3,6,3,0,16,0,32,116,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,46,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,132,                chronos = new JulianChronology[7];,4,1,0,1,2,0,12,2,0,21,34,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,245,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,257,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,4,0,0,6,24,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,265,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,266,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.02336,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.02111,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,65,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,66,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,67,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,75,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,52,"        this(field, null);",2,0,0,1,2,0,0,0,0,2,18,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,63,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,66,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,67,        iType = (type == null ? field.getType() : type);,6,1,0,2,4,0,4,0,0,12,48,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,92,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02063,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,292,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.01963,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,295,        return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,5,0.01963,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.01941,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,444,"        return getMonthOfYear(millis, getYear(millis));",2,0,0,2,4,1,6,0,0,9,47,4,0.01862,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.01822,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.01717,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,921,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.01713,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",2,0,0,1,3,0,2,0,0,5,60,6,0.01712,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",4,1,0,1,2,0,6,0,0,11,48,3,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,0,0,0,3,52,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,198,        return instant;,2,0,0,0,0,1,6,0,0,9,15,7,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,494,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.01705,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,495,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,12,4,0,3,6,1,0,0,0,16,76,3,0.01705,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,78,        if (year <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01693,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.01693,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",8,1,0,2,4,1,4,0,0,13,84,3,0.01693,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,217,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.01655,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,614,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,3,6,0,16,0,0,16,115,5,0.01633,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,4,8,0,14,0,0,14,89,5,0.01631,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,3,6,0,14,0,0,14,97,5,0.01631,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,235,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.0163,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,6,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01595,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.01592,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.01555,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,457,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.01553,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,221,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.0154,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,477,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.01533,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,478,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.01533,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.01519,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.01515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,408,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,0,0,1,2,0,2,0,0,6,56,3,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,409,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,410,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,416,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,418,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,420,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,12,5,0,1,4,0,4,0,0,21,61,3,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,437,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,202,        int leapYears = year / 100;,4,1,0,0,0,0,0,0,0,5,27,5,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,14,5,0,2,4,1,0,0,0,19,90,1,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,8,0,5,10,1,0,2,0,16,69,1,0.01484,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,394,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.01471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,395,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.01471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,369,        return getYearInfo(year).iFirstDayMillis;,2,0,0,1,2,1,4,0,0,6,41,5,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,747,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,14,1,1,1,2,0,4,2,0,24,50,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,748,        if (info == null || info.iYear != year) {,8,3,0,1,3,0,0,0,0,11,41,4,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,749,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,750,            iYearInfoCache[year & CACHE_MASK] = info;,10,3,1,1,2,0,2,0,0,18,41,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,752,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,779,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,780,            iYear = year;,4,0,0,0,0,0,0,0,0,5,13,5,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,782,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01417,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.01267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,2,0,0,1,2,0,6,0,0,8,31,6,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,4,0,0,0,0,0,0,0,0,5,16,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.0127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },4,1,0,0,1,0,0,0,0,5,1,6,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,6,1,0,0,0,1,0,0,0,8,16,1,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,6,0,0,1,2,0,6,2,0,15,40,3,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,6,3,0,0,0,0,0,0,0,9,41,10,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,6,0,0,0,0,0,0,0,0,8,15,1,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,8,1,0,1,3,0,10,2,0,21,23,1,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,2,0,0,0,0,0,0,0,0,3,26,6,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,4,3,0,1,3,0,4,0,0,11,44,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",2,0,0,2,4,0,0,0,0,2,57,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,6,1,0,1,2,0,4,0,0,11,40,8,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,18,11,0,2,5,0,6,0,0,37,55,1,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,932,        return parser;,4,1,0,0,0,1,0,0,0,5,14,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,4,0,0,1,2,0,8,0,0,14,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,6,0,0,0,0,0,0,0,0,9,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,128,    },4,0,0,0,1,0,0,0,0,5,1,5,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,8,0,0,0,0,0,0,4,0,13,32,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,4,1,0,0,0,1,0,0,0,5,24,1,0.01064,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1401,"            super(fieldType, maxParsedDigits, signed);",4,0,0,1,2,0,0,2,0,6,42,7,0.0105,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,155,            return 1;,2,0,0,0,0,1,2,2,0,6,9,4,0.01039,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.01018,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1358,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00976,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,294,                    return chronology.months();,2,1,0,1,2,1,4,0,0,7,27,3,0.00966,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,298,                    return chronology.days();,4,0,0,1,2,1,4,0,0,9,25,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1653,        if (lte == null) {,6,2,0,1,3,0,0,0,0,9,18,6,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,36,3,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.00832,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,129,        super();,8,0,0,1,2,0,4,0,0,13,8,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,130,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,131,        iParser = parser;,2,0,0,0,0,0,0,0,0,2,17,6,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,133,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,135,        iZone = zone;,10,1,0,0,0,0,10,0,0,23,13,3,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,137,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1703,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1708,        return ze;,2,0,0,0,0,1,4,0,0,7,10,7,0.00745,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2139,                est += iMinFields - 1;,12,1,0,0,0,0,4,0,0,19,22,1,0.00733,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2138,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,6,4,0,2,5,0,4,0,0,14,74,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2274,            return estimatePrintedLength();,8,0,0,1,2,1,6,0,0,15,31,1,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,4,0,0,11,33,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2125,            if (minFields <= 0 || maxFields < minFields) {,8,3,0,1,3,0,0,0,0,11,46,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2133,            iMaxFields = maxFields;,2,1,0,0,0,0,0,0,0,3,23,8,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2134,        },4,1,0,0,1,0,0,0,0,5,1,4,0.00671,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,282,            chronology = DateTimeUtils.getChronology(chronology);,8,3,0,1,2,2,6,4,0,25,53,1,0.00661,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1681,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1682,            sme = new DateTimeFormatterBuilder(),8,4,0,1,2,0,0,2,0,15,36,3,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.00654,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,144,        return localInstant;,6,0,0,0,0,1,0,0,0,7,20,1,0.00653,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1662,        if (hde == null) {,4,0,0,1,3,0,0,4,0,8,18,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1663,            hde = new DateTimeFormatterBuilder(),8,5,0,1,2,0,0,0,0,13,36,4,0.00651,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,138,        DateTimeZone zone = getZone();,6,0,0,1,2,0,8,2,0,16,30,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,139,        int offset = zone.getOffsetFromLocal(localInstant);,10,0,0,1,2,0,6,4,0,20,51,1,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,141,        if (offset != zone.getOffset(localInstant)) {,4,1,1,2,5,0,6,0,0,16,45,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00625,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.0062,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,938,        return offsetAdjusted;,10,0,1,0,0,1,0,0,0,14,22,1,0.00589,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,910,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,912,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,915,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.00579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1600,        return mye;,2,0,0,0,0,1,0,0,0,2,11,4,0.00571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,514,            return iLeapDurationField;,4,0,0,0,0,1,0,0,0,5,26,5,0.00557,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1586,            ye = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,2,0,10,35,5,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1590,        return ye;,6,2,0,0,0,1,0,0,0,9,10,1,0.00556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,943,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,944,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00543,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,204,                for (int i = chronos.size(); --i >= 0;) {,6,2,0,2,5,0,4,0,0,13,41,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,206,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,2,2,0,1,3,0,16,0,0,20,63,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,209,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,12,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,395,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,496,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00533,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,500,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.00533,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,279,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",12,5,0,3,6,0,0,2,0,19,62,3,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,219,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,220,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,305,        return withZone(DateTimeZone.UTC);,4,0,0,1,2,1,2,0,0,6,34,5,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,318,        if (zone == getZone()) {,0,0,0,2,5,0,6,2,0,8,24,7,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,194,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,4,0,0,7,46,6,0.00522,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,465,            if (get(result) != value) {,4,1,0,2,5,0,4,0,0,10,27,1,0.00515,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,463,"            localInstant = iField.set(localInstant, value);",2,0,0,1,2,0,8,0,0,11,47,5,0.00506,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1002,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1006,        if (offsetLocal != offset) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1035,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1037,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,12,6,0,3,7,2,0,4,0,24,69,1,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1040,        return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,4,0.00504,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,8,2,0,14,60,1,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2780,                    list.add(array[i]);,0,0,1,2,4,0,4,0,0,8,19,10,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,486,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,489,        if (maxDigits < minDigits) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,217,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,10,0,0,10,62,5,0.00483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,174,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00481,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,7,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1179,            return true;,0,0,0,0,0,1,6,0,0,7,12,3,0.0046,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1142,                Object printer = iElementPairs.get(0);,2,0,0,1,2,0,4,2,0,8,38,8,0.00458,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1146,                    if (printer == parser || parser == null) {,6,3,0,1,3,0,0,0,0,9,42,10,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,132,    },4,0,0,0,1,0,0,0,0,5,1,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",4,0,0,1,2,0,0,0,0,5,116,5,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,104,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,109,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,112,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",2,0,0,2,4,0,6,2,0,12,76,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,114,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",4,0,0,1,2,0,0,4,0,8,64,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,115,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,116,"                cCache.put(zone, chrono);",2,0,0,1,2,0,8,0,0,10,25,3,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,215,        if (getParam() == null) {,0,1,0,2,5,0,2,0,0,4,25,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,217,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,218,            fields.year = new OffsetDateTimeField(,6,0,0,0,1,0,8,2,0,17,38,3,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,223,            fields.yearOfEra = new DelegatedDateTimeField(,6,0,0,0,1,0,2,2,0,11,46,1,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,227,            field = fields.weekyear;,6,0,0,0,0,0,0,0,0,7,24,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,228,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,42,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,231,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,232,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,235,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,242,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,245,            fields.era = ERA_FIELD;,2,1,0,0,0,0,0,0,0,3,23,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,247,    },0,0,0,0,1,0,2,0,0,2,1,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,53,"        this(chronology, field, 0);",4,0,0,1,2,0,4,0,0,8,27,3,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,54,    },2,0,0,0,1,3,0,4,0,9,1,2,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,65,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,89,            value--;,4,1,1,0,0,0,0,0,0,8,8,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,7,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",2,0,1,1,2,0,0,0,0,7,54,6,0.00458,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,7,153,"        return super.set(instant, value - iOffset);",12,1,0,1,2,1,0,0,0,14,43,1,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,82,            value--;,4,2,0,0,0,0,0,0,0,6,8,6,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,803,            return iJulianField.getMinimumValue();,2,0,0,1,2,1,10,0,0,12,38,1,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,79,            if (year == 0) {,4,1,0,1,3,0,4,0,0,10,16,1,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,83,            year++;,6,1,0,0,0,0,0,0,0,8,7,4,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.00456,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",2,0,0,2,4,0,8,0,0,11,48,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,722,                    if (instant + iGapDuration < iCutover) {,6,2,0,1,3,0,0,0,0,8,40,9,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,723,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,74,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00452,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,732,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,43,7,0.00452,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,7,228,        return iField.getMaximumValue();,2,0,0,1,2,1,10,0,0,12,32,1,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,718,            if (instant >= iCutover) {,6,1,1,1,3,0,0,0,0,9,26,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,719,"                instant = iGregorianField.set(instant, value);",6,0,0,1,2,0,8,0,0,16,46,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,720,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,745,            return instant;,4,1,0,0,0,1,0,0,0,5,15,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,411,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.00445,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,7,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.00445,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,776,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.0043,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.00429,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,510,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,512,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,513,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",14,0,0,2,4,0,4,2,0,22,99,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,515,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",16,1,1,2,4,0,4,4,0,29,90,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,516,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,102,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,517,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,518,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",6,0,0,1,3,3,4,6,0,20,73,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,520,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,131,            instant = iChronology.getYearMillis(year + 1);,12,1,0,1,2,1,4,0,0,19,46,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,2,0,0,1,2,2,0,4,0,9,69,2,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,83,        return to.getDateTimeMillis,0,0,0,0,0,1,4,2,0,6,27,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,191,        if (gregorianCutover == null) {,2,1,0,1,3,0,0,0,0,3,31,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,198,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,202,"                cCache.put(zone, chronos);",6,0,0,1,2,0,10,0,0,17,26,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,214,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,226,            chronos.add(chrono);,2,1,0,1,2,0,6,0,0,9,20,3,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,228,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,473,        Object[] params = (Object[])getParam();,8,0,0,4,8,1,2,4,0,15,39,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,475,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,476,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,478,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,481,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,482,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,488,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,505,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,2,0,0,3,7,0,0,0,0,2,55,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,534,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,541,            fields.weekOfWeekyear = new CutoverField(,2,0,0,0,1,0,0,0,0,2,41,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,549,            fields.year = new ImpreciseCutoverField(,2,0,0,0,1,0,0,0,0,2,40,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,551,            fields.years = fields.year.getDurationField();,8,0,0,1,2,0,2,0,0,11,46,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,552,            fields.yearOfEra = new ImpreciseCutoverField(,10,0,0,0,1,0,4,2,0,17,45,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,554,            fields.yearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,49,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,557,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,563,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,565,            fields.weekyear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,44,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,567,            fields.weekyearOfCentury = new ImpreciseCutoverField(,16,1,0,0,1,0,0,2,0,22,53,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,575,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,577,            cf.iRangeDurationField = fields.months;,8,0,0,0,0,0,0,0,0,9,39,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,578,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,942,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,953,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,1,0,1,2,0,0,0,0,12,71,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,965,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",8,0,0,1,2,0,0,0,0,8,69,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,966,            if (durationField == null) {,4,2,0,1,3,0,0,0,0,6,28,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,967,"                durationField = new LinkedDurationField(iDurationField, this);",2,1,0,1,2,0,0,0,0,3,62,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,969,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,630,"                     long cutoverMillis, boolean convertByWeekyear) {",4,0,0,0,2,0,0,0,0,4,48,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,631,            super(gregorianField.getType());,2,0,0,2,4,0,0,0,0,2,32,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,632,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,633,            iGregorianField = gregorianField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,634,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,5,25,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,635,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,0,0,0,7,39,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,638,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,640,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,641,            if (rangeField == null) {,10,1,0,1,3,0,4,0,0,16,25,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,644,            iRangeDurationField = rangeField;,16,1,0,0,0,0,0,0,0,20,33,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,772,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,1091,"            super(durationField, durationField.getType());",2,1,0,2,4,0,0,0,0,3,46,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,128,        long yearStartMillis = iChronology.getYearMillis(year);,14,1,0,1,2,0,6,0,0,23,55,3,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,129,        if (instant != yearStartMillis) {,8,1,0,1,3,0,0,0,0,10,33,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00427,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,75,"        return set(instant, get(instant) + years);",14,2,0,2,4,1,8,0,0,26,42,3,0.00427,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,983,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00427,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,221,        if (relativeYear <= 0) {,6,1,0,1,3,0,0,0,0,8,24,1,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,10,3,0,2,4,0,0,0,0,13,89,5,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,14,3,0,1,2,1,4,0,0,22,64,3,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,4,0,0,8,27,1,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,886,        long newInstant = roundFloor(instant);,10,0,0,1,2,0,8,0,0,19,38,3,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,890,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,181,        } else if ( workWoyYear > year ) {,6,1,0,1,4,0,0,0,0,7,34,3,0.00426,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00424,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.00423,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,548,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.00423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,434,        if (fieldType == null) {,6,1,0,1,3,0,0,0,0,8,24,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,437,        if (maxDigits < minDigits) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,153,        if ((base = getBase()) != null) {,6,1,0,3,7,0,2,2,0,14,33,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,26,0,0,28,63,3,0.00421,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,7,302,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00421,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,7,299,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",2,0,0,1,3,0,10,0,0,12,50,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,133,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,134,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,2,0,0,1,2,0,6,0,0,8,65,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,14,0,0,16,55,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,10,1,0,1,2,0,0,0,0,12,53,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,4,0,0,1,2,0,6,0,0,10,55,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,155,        if ( setToWeek > maxOutWeeks ) {,6,2,0,1,3,0,0,2,0,11,32,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,162,        long workInstant = instant; // Get a copy,4,0,0,0,0,0,0,0,0,4,41,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,173,        int workWoyYear = get( workInstant );,6,0,0,1,2,0,4,0,0,10,37,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,2,0,0,1,2,0,6,0,0,8,64,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),8,2,0,1,2,0,0,0,0,11,56,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,204,        return workInstant;,2,0,0,0,0,1,0,0,0,2,19,4,0.00421,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,7,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00419,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,7,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.00419,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,235,        int wow = iChronology.getWeekOfWeekyear(instant);,4,0,0,1,2,0,6,0,0,10,49,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,239,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,14,3,0,3,6,1,0,0,0,17,89,3,0.00418,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,7,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.00415,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1212,            return 1;,2,0,0,0,0,1,0,0,0,2,9,4,0.00413,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,7,103,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,4,0,0,6,32,5,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,7,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,502,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.00411,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,504,        if (week == 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00411,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2642,                iParsers = new DateTimeParser[size];,2,0,1,1,2,0,0,2,0,7,36,7,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,2,0,0,2,4,0,6,4,0,12,59,9,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2647,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.0041,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",14,0,0,1,2,0,0,4,0,19,101,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,26,10,0,1,3,0,22,4,0,66,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,6,1,0,1,3,3,0,12,0,22,24,1,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,10,1,0,1,3,1,0,4,0,17,33,1,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,2,0,1,0,0,1,0,0,0,7,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,2,0,0,1,2,0,8,0,0,11,40,7,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",6,3,1,1,2,0,0,0,0,12,25,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,6,0,0,0,0,0,0,0,0,6,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,4,2,0,1,3,0,0,0,0,7,18,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,378,        },8,0,0,0,1,0,0,0,0,10,1,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,8,1,0,1,3,0,0,0,0,9,16,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,6,0,0,16,28,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,427,    },4,0,0,0,1,0,0,0,0,4,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,18,0,0,18,54,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,2,1,0,1,2,0,0,0,0,3,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,12,1,0,0,0,0,0,0,0,15,27,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,128,    },8,0,0,0,1,0,0,0,0,10,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,78,        } else {,2,0,0,0,2,0,6,2,0,12,8,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,128,        super();,2,0,0,1,2,0,0,2,0,4,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,130,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,131,        iLocale = locale;,2,0,0,0,0,0,4,0,0,7,17,7,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,132,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,136,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,2,0,5,27,6,0.00203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,66,            buf.append((char)(value + '0'));,10,0,0,3,6,0,4,2,0,17,32,6,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1091,        return append0(new TimeZoneOffset,4,0,0,0,1,1,6,4,0,15,33,3,0.00172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2128,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,92,    },6,1,0,0,1,1,0,0,0,8,1,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,940,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,941,        if (iChrono != null) {,4,1,0,1,3,0,0,0,0,5,22,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,944,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,947,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1142,                Object printer = iElementPairs.get(0);,4,0,0,1,2,0,0,0,0,5,38,6,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1143,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,0,0,0,2,37,7,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,111,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,114,        iChrono = null;,4,0,0,0,0,0,6,2,0,15,15,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,117,        iDefaultYear = 2000;,14,2,0,0,0,3,10,0,0,31,20,1,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,105,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,106,        DateTimePrinter printer = null;,4,1,0,0,0,0,0,0,0,5,31,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,111,        if (isParser(f)) {,4,0,0,2,5,0,0,0,0,4,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,114,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1165,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1166,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1175,        if (f instanceof DateTimeParser) {,2,1,0,1,3,0,0,0,0,3,34,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,378,        return this;,6,0,0,0,0,1,0,0,0,7,12,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1138,        Object f = iFormatter;,0,0,0,0,0,0,6,0,0,6,22,5,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1141,            if (iElementPairs.size() == 2) {,6,1,0,2,5,0,0,0,0,7,32,6,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1154,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1158,            iFormatter = f;,2,0,0,0,0,0,6,0,0,9,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1161,        return f;,2,0,0,0,0,1,0,0,0,2,9,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,85,        iElementPairs = new ArrayList<Object>();,10,0,0,1,2,0,4,4,0,20,40,4,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,285,        return chrono;,6,1,0,0,0,1,6,0,0,13,14,1,0.00036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,175,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,176,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,179,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,182,        synchronized(DateTimeZone.class) {,2,0,0,1,3,0,0,2,0,4,34,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,183,            cDefault = zone;,2,0,0,0,0,0,8,0,0,11,16,5,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,184,        },2,0,0,0,1,0,0,0,0,2,1,5,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,185,    },4,0,0,0,1,0,6,0,0,10,1,3,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,282,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00032,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,134,        DateTimeZone zone = cDefault;,12,0,0,0,0,0,4,2,0,19,29,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,135,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,136,            synchronized(DateTimeZone.class) {,8,5,0,1,3,0,0,0,0,13,34,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,137,                zone = cDefault;,4,0,0,0,0,0,0,0,0,5,16,8,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,138,                if (zone == null) {,4,1,0,1,3,0,8,0,0,13,19,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,139,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,142,"                            String id = System.getProperty(""user.timezone"");",2,0,0,1,2,0,4,2,0,9,48,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,143,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,144,                                temp = forID(id);,2,0,0,1,2,0,6,2,0,11,17,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,158,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,160,            },2,0,0,0,1,0,0,0,0,2,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,162,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0003,0,0,-1
defect4j,time,org/joda/time/Chronology,8,63,public abstract class Chronology {,4,0,0,0,1,2,6,0,0,13,34,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,8,54,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,4,0,0,0,0,3,0,2,0,9,80,2,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,48,"        map.put(""UT"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,32,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,49,"        map.put(""UTC"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,33,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,50,"        map.put(""GMT"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,33,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,52,"        put(map, ""EDT"", ""America/New_York"");",4,0,0,1,2,0,4,2,0,13,36,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,57,"        put(map, ""PST"", ""America/Los_Angeles"");",2,0,0,1,2,0,4,2,0,10,39,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,59,        cZoneNames = Collections.unmodifiableMap(map);,2,0,0,1,2,0,6,0,0,9,46,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,60,    },0,0,0,0,1,0,14,0,0,14,1,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,63,"            map.put(name, DateTimeZone.forID(id));",4,0,0,2,4,0,12,0,0,17,38,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,205,        if (id == null) {,6,1,1,1,3,0,0,2,0,12,17,1,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,211,        DateTimeZone zone = cProvider.getZone(id);,2,0,0,1,2,0,6,2,0,10,42,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,212,        if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,8,5,0,1,3,0,0,0,0,16,48,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,509,            iMode = mode;,4,0,0,0,0,0,0,0,0,5,13,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,510,            iMonthOfYear = monthOfYear;,8,0,0,0,0,0,0,0,0,9,27,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,6,0,0,9,27,8,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,2,5,1,4,2,0,6,46,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,226,            in = openResource(id);,2,0,0,1,2,0,8,0,0,11,22,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",2,0,0,1,2,0,8,2,0,12,55,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",2,0,0,2,4,0,6,4,0,12,58,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,236,                if (in != null) {,10,1,0,1,3,0,0,0,0,12,17,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,237,                    in.close();,0,0,0,1,2,0,4,0,0,4,11,11,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1176,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1177,            iStandardOffset = standardOffset;,4,0,0,0,0,0,0,0,0,5,33,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1178,            iStartRecurrence = startRecurrence;,6,0,0,0,0,0,0,2,0,9,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1179,            iEndRecurrence = endRecurrence;,4,0,0,0,0,0,0,0,0,5,31,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1166,"            return new DSTZone(id, (int)readMillis(in), ",0,0,0,2,5,1,0,0,0,8,43,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,98,"            return readFrom((DataInput)new DataInputStream(in), id);",2,0,0,3,6,1,4,4,0,10,56,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",8,0,0,2,4,1,4,0,0,13,70,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,183,        int v = in.readUnsignedByte();,6,1,0,1,2,0,4,0,0,11,30,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,184,        switch (v >> 6) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,187,            v = (v << (32 - 6)) >> (32 - 6);,4,4,0,3,6,0,0,0,0,9,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,188,            return v * (30 * 60000L);,2,2,0,1,2,1,0,0,0,4,25,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,195,            v |= (in.readUnsignedByte());,10,4,0,2,4,0,4,0,0,19,29,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,6,4,0,5,10,0,14,0,0,25,46,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,201,            w |= (in.readUnsignedByte()) << 24;,8,1,0,2,4,0,0,0,0,10,35,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,204,            w |= (in.readUnsignedByte());,10,1,0,2,4,0,4,0,0,17,29,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,205,            return w * 1000L;,2,1,0,0,0,1,0,0,0,3,17,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1500,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1501,            iTransitions = transitions;,8,0,0,0,0,0,0,2,0,11,27,1,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,6,2,0,1,3,0,0,0,0,8,17,5,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,6,0,0,7,40,9,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,12,2,0,2,5,0,4,0,0,19,30,1,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,4,2,0,12,56,1,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,742,        Chronology chrono = selectChronology(iChrono);,6,2,0,1,2,0,4,2,0,14,46,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,745,        if (newPos >= 0) {,18,4,1,1,3,0,4,0,0,29,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,369,                for (int i = 0; i < count; i++) {,12,3,1,1,3,0,0,2,0,34,33,3,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,363,        long millis = iMillis;,6,1,0,0,0,0,4,0,0,12,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,365,            for (int i = 0; i < count; i++) {,8,2,0,1,3,2,8,2,0,24,33,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,368,            if (resetFields) {,4,0,0,1,3,0,0,0,0,4,18,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,380,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,929,        return parser;,6,1,0,0,0,1,0,4,0,11,14,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,120,        super();,2,0,0,1,2,0,0,2,0,5,8,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,73,    private SavedField[] iSavedFields = new SavedField[8];,12,5,0,2,4,0,8,0,0,26,54,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,10,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,123,        iZone = chrono.getZone();,6,0,0,1,2,0,4,0,0,11,25,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,124,        iChrono = chrono.withUTC();,2,0,0,1,2,0,4,0,0,7,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,128,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,925,        DateTimeParser parser = iParser;,12,0,0,0,0,0,0,2,0,15,32,1,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,926,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,74,            int d = ((value + 1) * 13421772) >> 27;,4,0,0,2,4,0,0,0,0,5,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,78,        } else {,10,1,0,0,2,0,0,0,0,12,8,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,128,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,129,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,130,        iParser = parser;,2,0,0,0,0,0,6,0,0,8,17,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,132,        iOffsetParsed = offsetParsed;,16,3,0,0,0,0,0,0,0,22,29,1,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,133,        iChrono = chrono;,6,0,0,0,0,0,0,0,0,6,17,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,134,        iZone = zone;,4,1,0,0,0,0,0,0,0,5,13,9,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,135,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,137,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,64,                buf.append('0');,14,2,0,1,2,0,4,0,0,21,16,3,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,63,            for (; size > 1; size--) {,6,0,0,1,3,0,0,0,0,6,26,5,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2128,            if (minFields > 4) {,2,0,0,1,3,0,0,2,0,5,20,6,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2132,            iMinFields = minFields;,10,1,0,0,0,0,2,0,0,15,23,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2133,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,50,        if (value < 0) {,10,1,0,1,3,0,8,2,0,23,16,3,0.00158,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,947,        return chrono;,2,1,0,0,0,1,0,0,0,3,14,5,0.00137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,3,4,0,0,9,50,2,0.00122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1145,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1146,                    if (printer == parser || parser == null) {,12,1,1,1,3,0,0,2,0,18,42,1,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1147,                        f = printer;,4,0,0,0,0,0,0,0,0,5,12,12,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,110,        iPrinter = printer;,6,1,0,0,0,0,0,0,0,7,19,5,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,111,        iParser = parser;,16,3,0,0,0,0,8,0,0,29,17,1,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,112,        iLocale = null;,6,0,0,0,0,0,12,0,0,19,15,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,114,        iChrono = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,116,        iPivotYear = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,105,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,107,        if (isPrinter(f)) {,2,0,0,2,5,0,4,0,0,6,19,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,111,        if (isParser(f)) {,2,0,0,2,5,1,4,0,0,7,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,115,"            return new DateTimeFormatter(printer, parser);",4,0,0,1,2,1,0,2,0,6,46,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1165,        if (f instanceof DateTimePrinter) {,6,1,0,1,3,0,6,0,0,15,35,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1166,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,376,        iElementPairs.add(element);,2,1,0,1,2,0,18,0,0,22,27,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1138,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1140,        if (f == null) {,2,1,0,1,3,0,4,0,0,7,16,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1154,            if (f == null) {,6,1,0,1,3,0,0,0,0,7,16,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1161,        return f;,4,0,0,0,0,1,4,0,0,9,9,1,0.00098,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,70,        return sum;,2,0,0,0,0,1,6,0,0,8,11,3,0.00097,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,64,        int sum = val1 + val2;,8,1,0,0,0,0,6,0,0,15,22,5,0.00097,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,175,        if (sm != null) {,4,1,0,1,3,2,0,4,0,11,17,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,0,4,2,0,7,70,7,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",4,0,1,1,2,0,0,0,0,6,73,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,182,            cDefault = zone;,6,0,0,0,0,0,4,2,0,13,16,3,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,184,    },2,0,0,0,1,0,10,0,0,13,1,9,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,282,        if (chrono == null) {,2,1,0,1,3,0,4,4,0,11,21,3,0.00032,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,134,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,154,                    if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,155,                        temp = UTC;,12,1,0,0,0,0,0,0,0,14,11,1,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,158,                },6,2,0,0,1,0,0,0,0,9,1,6,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,160,        },4,0,0,0,1,0,0,0,0,5,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,9,54,        super();,2,0,1,1,2,0,0,4,0,8,8,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,2,0,0,1,2,3,0,4,0,9,94,2,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,6,0,1,0,0,3,0,2,0,16,80,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",2,0,0,1,2,0,10,12,0,24,74,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,48,"        map.put(""UT"", DateTimeZone.UTC);",8,0,0,1,2,0,4,2,0,15,32,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,49,"        map.put(""UTC"", DateTimeZone.UTC);",8,1,0,1,2,0,4,0,0,14,33,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,51,"        put(map, ""EST"", ""America/New_York"");",12,0,0,1,2,0,14,4,0,34,36,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,59,        cZoneNames = Collections.unmodifiableMap(map);,2,0,0,1,2,0,6,2,0,10,46,6,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,63,"            map.put(name, DateTimeZone.forID(id));",2,0,0,2,4,0,12,0,0,15,38,3,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,66,        },6,0,0,0,1,0,6,2,0,15,1,3,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,524,    static class SystemMillisProvider implements MillisProvider {,6,0,0,0,1,4,6,6,0,22,61,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,211,        if (zone != null) {,2,1,0,1,3,0,8,0,0,11,19,3,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,212,            return zone;,2,0,0,0,0,1,0,0,0,2,12,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,504,        {,4,0,0,0,1,0,0,0,0,5,1,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,6,5,0,1,3,0,0,0,0,14,48,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,510,            iMonthOfYear = monthOfYear;,4,0,0,0,0,0,0,0,0,5,27,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,511,            iDayOfMonth = dayOfMonth;,10,1,0,0,0,0,0,0,0,12,25,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,512,            iDayOfWeek = dayOfWeek;,10,1,0,0,0,0,0,0,0,12,23,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,513,            iAdvance = advanceDayOfWeek;,4,0,0,0,0,0,0,0,0,5,28,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,514,            iMillisOfDay = millisOfDay;,4,0,0,0,0,0,6,0,0,11,27,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,515,        },2,0,0,0,1,0,14,0,0,17,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,226,            in = openResource(id);,2,0,0,1,2,0,8,0,0,12,22,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,236,                if (in != null) {,2,0,0,1,3,0,0,0,0,2,17,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,240,            },2,0,0,0,1,0,10,0,0,12,1,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1176,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1177,            iStandardOffset = standardOffset;,0,0,1,0,0,0,4,0,0,8,33,10,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1178,            iStartRecurrence = startRecurrence;,4,0,0,0,0,0,0,0,0,5,35,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1179,            iEndRecurrence = endRecurrence;,4,1,0,0,0,0,8,0,0,14,31,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,98,"            return readFrom((DataInput)new DataInputStream(in), id);",12,3,0,3,6,1,4,4,0,23,56,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",2,0,0,2,4,1,12,0,0,14,70,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,184,        switch (v >> 6) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,194,            v |= (in.readUnsignedByte()) << 8;,2,1,0,2,4,0,4,0,0,8,34,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,195,            v |= (in.readUnsignedByte());,2,0,0,2,4,0,4,0,0,7,29,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,4,4,0,5,10,0,0,0,0,8,46,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,202,            w |= (in.readUnsignedByte()) << 16;,10,1,0,2,4,0,8,0,0,21,35,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,204,            w |= (in.readUnsignedByte());,2,0,0,2,4,0,4,0,0,7,29,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,205,            return w * 1000L;,10,1,0,0,0,1,0,0,0,11,17,1,0.00027,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,                if (parser != null) {,14,2,0,1,3,0,8,4,0,30,21,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,364,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,367,        DurationFieldType lastType = null;,2,1,0,0,0,0,0,0,0,3,34,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,368,        for (int i = 0; i < partial.size(); i++) {,16,1,0,2,5,0,8,0,0,27,42,3,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,369,            DateTimeField loopField = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,46,5,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,370,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,371,                if (loopField.getRangeDurationField().getType() != lastType) {,10,0,0,3,7,0,18,0,0,30,62,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,        if (start.size() != end.size()) {,4,1,0,3,7,0,8,0,0,14,33,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,2,0,0,3,6,0,10,2,0,14,81,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,        return values[0];,20,2,0,1,2,1,4,4,0,32,17,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,        return MIN;,10,0,0,0,0,1,0,4,0,15,11,1,0.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,        if (maxDigits < minDigits) {,2,0,0,1,3,0,2,0,0,5,28,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,        if (mye == null) {,8,2,0,1,3,0,0,2,0,13,18,3,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,        return mye;,2,0,0,0,0,1,0,0,0,3,11,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,        if (dme == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,6,0,0,8,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,        return dme;,2,0,0,0,0,1,0,2,0,5,11,6,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",2,0,0,2,5,0,0,0,0,2,57,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,155,        if (start instanceof LocalDate && end instanceof LocalDate)   {,12,2,0,1,3,0,0,6,0,21,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,135,        if (start instanceof LocalDate && end instanceof LocalDate)   {,10,1,0,1,3,0,0,4,0,16,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",4,1,0,1,2,0,14,2,0,21,61,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);",16,2,0,1,2,0,0,0,0,18,42,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,            super();,10,1,0,1,2,0,8,0,0,20,8,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,        },6,0,0,0,1,0,8,4,0,18,1,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());",6,2,0,3,6,1,0,0,0,8,62,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,386,        return this;,10,1,0,0,0,4,4,0,0,18,12,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,397,        return append0(new CharacterLiteral(c));,8,1,1,2,4,1,0,2,0,14,40,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,434,        if (fieldType == null) {,10,1,0,1,3,0,0,0,0,11,24,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,440,        if (minDigits < 0 || maxDigits <= 0) {,4,1,0,1,3,0,0,0,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,443,        if (minDigits <= 1) {,8,1,0,1,3,0,10,0,0,20,21,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1177,                return ((Composite)f).isParser();,12,0,0,3,6,4,6,6,0,28,33,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2617,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,6,8,0,17,51,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2618,            List<Object> parserList = new ArrayList<Object>();,2,0,1,1,2,0,4,8,0,19,50,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,6,0,1,3,7,0,4,0,0,16,58,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2626,                int size = printerList.size();,8,0,0,1,2,0,4,14,0,27,30,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2627,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2629,                for (int i=0; i<size; i++) {,10,1,0,1,3,0,0,0,0,12,28,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2634,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,10,0,0,3,7,0,4,2,0,17,56,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2642,                iParsers = new DateTimeParser[size];,2,0,0,1,2,0,6,0,0,8,36,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2646,                    parseEst += parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,7,42,9,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2649,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2747,            return iPrinters != null;,2,1,0,0,0,1,4,0,0,7,25,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2751,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2759,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2760,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2761,                Object element = elementPairs.get(i);,4,0,0,1,2,0,12,2,0,19,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2762,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2765,                    printerList.add(element);,2,0,0,1,2,0,10,0,0,12,25,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2769,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2772,                    parserList.add(element);,0,0,0,1,2,0,6,0,0,6,24,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.33333,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,181,        chronology = DateTimeUtils.getChronology(chronology);,4,0,0,1,2,1,6,0,0,12,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,184,        iValues = values;,4,0,0,0,0,0,0,0,0,5,17,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,183,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,185,            int value = values[i];,4,1,0,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,201,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,202,"            if (value < field.getMinimumValue(partial, values)) {",6,1,0,2,5,0,12,0,0,20,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,255,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,256,        int[] values = new int[size];,2,0,1,2,4,0,0,0,0,4,29,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,258,            for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,259,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,260,"                int value = field.getDifference(endInstant, startInstant);",2,0,0,1,2,0,8,0,0,10,58,9,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,8,0,0,11,46,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,262,                values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,265,        return values;,2,1,1,0,0,1,0,0,0,12,14,3,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,758,        return getMinimumValue();,2,1,0,1,2,1,0,0,0,3,25,4,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,804,        return getMaximumValue();,2,0,0,1,2,1,8,0,0,10,25,3,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,249,        return iChronology;,10,0,0,0,0,1,4,0,0,15,19,3,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,129,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,130,        iParser = parser;,4,0,0,0,0,0,0,2,0,7,17,6,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,131,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,132,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,133,        iChrono = chrono;,4,0,0,0,0,0,0,0,0,5,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,134,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,135,        iPivotYear = pivotYear;,4,0,0,0,0,0,10,0,0,15,23,3,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,136,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.2,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,216,        if (index != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,219,        return getFieldType();,2,1,0,1,2,1,0,0,0,3,22,7,0.2,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,496,                    return chronology.monthOfYear();,2,0,0,1,2,1,8,0,0,11,32,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,110,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,111,        iParser = parser;,12,0,0,0,0,0,4,0,0,18,17,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,112,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,113,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,116,        iPivotYear = null;,12,1,0,0,0,0,8,0,0,23,18,1,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,118,    },2,0,0,0,1,0,0,2,0,4,1,8,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,85,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,0,0,2,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,86,    },0,0,0,0,1,0,0,2,0,2,1,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,112,            parser = (DateTimeParser) f;,4,0,0,1,2,0,0,2,0,7,28,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,115,"            return new DateTimeFormatter(printer, parser);",2,0,0,1,2,4,0,8,0,13,46,2,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1138,        Object f = iFormatter;,6,0,0,0,0,0,0,2,0,8,22,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1141,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1143,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1146,                    if (printer == parser || parser == null) {,16,3,0,1,3,0,0,2,0,23,42,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1147,                        f = printer;,6,0,0,0,0,0,4,2,0,13,12,7,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1154,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1158,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1161,        return f;,2,0,0,0,0,1,8,0,0,10,9,3,0.17391,0,0,-1
defect4j,time,org/joda/time/Months,10,92,                return ZERO;,2,0,0,0,0,1,0,0,0,2,12,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.14815,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.14815,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,54,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.13793,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,55,    },2,0,0,0,1,0,6,0,0,9,1,9,0.13793,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,247,        int minuendYear = iChronology.getYear(minuendInstant);,4,0,0,1,2,0,12,0,0,16,54,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",2,0,0,1,2,0,8,0,0,10,84,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,12,4,0,3,6,0,4,0,0,20,98,1,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,256,        int minuendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,42,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",2,1,0,2,5,0,8,0,0,11,78,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,271,        long minuendRem = minuendInstant,4,0,0,0,0,0,0,0,0,4,32,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,273,        long subtrahendRem = subtrahendInstant,4,0,0,0,0,0,0,0,0,4,38,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,276,        if (minuendRem < subtrahendRem) {,4,1,0,1,3,0,0,0,0,5,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,280,        return difference;,4,0,0,0,0,1,0,0,0,4,18,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,6,3,0,3,6,1,6,0,0,15,69,1,0.09091,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,80,        return instant + (value - get(instant)) * iUnitMillis;,8,3,0,2,4,4,4,4,0,22,54,1,0.08696,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,458,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,459,"        return getDayOfMonth(millis, year, month);",4,0,0,1,2,1,8,0,0,13,42,3,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,300,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,16,0,0,18,44,3,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",2,0,0,1,2,0,8,0,0,10,61,5,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,304,        if (thisDom > maxDom) {,4,1,0,1,3,0,0,0,0,5,23,4,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.08511,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,190,            return ImpreciseDateTimeField.this,3,0,0,0,0,1,0,0,0,4,34,1,0.08333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07843,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,10,3,0,3,6,1,0,0,0,13,76,4,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.07547,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,217,        if ((value < lowerBound) || (value > upperBound)) {,10,3,0,3,7,0,6,0,0,19,51,3,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,2,0,0,1,2,0,2,0,0,4,56,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,404,        int year = (int) (i2 / unitMillis);,6,1,0,2,4,0,0,0,0,7,35,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,6,2,0,1,4,0,0,0,0,8,61,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,428,        return year;,4,0,0,0,0,1,4,0,0,8,12,3,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,8,3,0,2,4,1,0,0,0,11,74,4,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,8,9,0,5,10,1,4,0,0,21,69,1,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,202,        int leapYears = year / 100;,6,1,0,0,0,0,8,0,0,16,27,1,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,10,4,0,2,4,1,0,0,0,14,90,4,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,360,        return getYearInfo(year).iFirstDayMillis;,10,3,0,1,2,1,4,0,0,17,41,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,739,        if (info == null || info.iYear != year) {,8,3,0,1,3,0,0,0,0,11,41,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,743,        return info;,0,0,0,0,0,1,2,0,0,2,12,5,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,771,            iYear = year;,16,1,0,0,0,0,0,0,0,20,13,1,0.06667,0,0,-1
defect4j,time,org/joda/time/Months,10,249,        return getValue();,4,1,0,1,2,1,2,0,0,7,18,1,0.0625,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,102,            return chrono;,2,0,0,0,0,1,0,0,0,2,14,6,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,371,        long millis = getYearMillis(year);,4,0,0,1,2,2,4,4,0,14,34,1,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,372,"        millis += getTotalMillisByYearMonth(year, month);",6,0,0,1,2,0,6,2,0,16,49,3,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,373,        return millis;,4,0,0,0,0,1,0,0,0,4,14,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,10,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.05128,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,188,            return (int) value;,2,0,0,1,2,1,8,0,0,10,19,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.04762,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.04651,0,0,-1
defect4j,time,org/joda/time/Months,10,90,        switch (months) {,2,0,0,1,3,0,0,0,0,2,17,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,372,        PeriodType type = cMonths;,8,3,0,0,0,0,0,0,0,11,26,4,0.04167,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,381,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,47,    public static final Months ONE = new Months(1);,2,0,0,1,2,3,0,4,0,9,47,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,51,    public static final Months THREE = new Months(3);,8,0,0,1,2,3,0,4,0,15,49,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,55,    public static final Months FIVE = new Months(5);,2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,57,    public static final Months SIX = new Months(6);,4,2,0,1,2,3,4,4,0,17,47,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,59,    public static final Months SEVEN = new Months(7);,4,0,0,1,2,3,8,6,0,21,49,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,61,    public static final Months EIGHT = new Months(8);,2,0,0,1,2,3,0,4,0,9,49,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,63,    public static final Months NINE = new Months(9);,2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,65,    public static final Months TEN = new Months(10);,4,0,0,1,2,3,0,4,0,11,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,67,    public static final Months ELEVEN = new Months(11);,2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,69,    public static final Months TWELVE = new Months(12);,2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,73,    public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);,6,0,0,1,2,3,0,4,0,13,69,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,76,    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());,14,1,0,3,6,3,10,2,0,32,108,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Days,10,102,                return new Days(days);,2,0,0,1,2,1,0,2,0,4,22,6,0.04,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/Days,10,80,        switch (days) {,2,0,0,1,3,0,0,0,0,2,15,4,0.02632,0,0,-1
defect4j,time,org/joda/time/Days,10,216,        super(days);,2,0,0,1,2,0,0,0,0,2,12,4,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,217,    },12,1,0,0,1,0,0,0,0,15,1,5,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,45,    public static final Days ZERO = new Days(0);,2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,47,    public static final Days ONE = new Days(1);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,49,    public static final Days TWO = new Days(2);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,53,    public static final Days FOUR = new Days(4);,2,1,0,1,2,3,4,4,0,14,44,1,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,55,    public static final Days FIVE = new Days(5);,2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,57,    public static final Days SIX = new Days(6);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,61,    public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);,6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,63,    public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);,6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,66,    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());,2,0,0,3,6,3,10,2,0,17,106,2,0.02564,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,6,2,0,2,4,0,6,2,0,17,66,1,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,101,        if (chrono != null && chrono.getZone() == zone) {,4,3,0,2,5,0,4,0,0,11,49,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,104,        synchronized (cCache) {,4,0,0,1,3,0,0,0,0,5,23,3,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,110,        },12,1,0,0,1,0,0,0,0,15,1,5,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,112,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.02548,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,123,        return iZone.hashCode();,10,0,0,1,2,1,14,2,0,29,24,3,0.02469,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,218,        return 0;,6,2,0,0,0,1,0,0,0,8,9,9,0.02454,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,81,"        super(base, zone);",2,0,0,1,2,0,0,4,0,6,18,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,55,        if (base == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,58,        base = base.withUTC();,2,0,0,1,2,0,4,0,0,7,22,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,59,        if (base == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,62,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",10,0,0,1,2,0,4,12,0,27,66,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,154,"        fields.eras = convertField(fields.eras, converted);",16,0,0,1,2,0,8,0,0,26,51,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,155,"        fields.centuries = convertField(fields.centuries, converted);",2,0,0,1,2,0,4,0,0,6,61,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,156,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,157,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,159,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,160,"        fields.days = convertField(fields.days, converted);",10,3,0,1,2,0,8,0,0,22,51,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,163,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,164,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,0,0,0,9,57,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,165,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,166,"        fields.millis = convertField(fields.millis, converted);",12,0,0,1,2,0,4,0,0,18,55,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,170,"        fields.year = convertField(fields.year, converted);",16,0,0,1,2,0,8,0,0,26,51,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,174,"        fields.era = convertField(fields.era, converted);",10,0,0,1,2,0,4,0,0,15,49,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",8,0,0,1,2,0,4,0,0,13,63,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,180,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,2,0,1,2,0,0,0,0,11,65,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",10,0,0,1,2,0,4,0,0,15,71,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,1,0,1,2,0,4,0,0,18,69,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,198,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,201,            return (DurationField)converted.get(field);,0,0,0,2,4,1,6,2,0,8,43,7,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,204,"        converted.put(field, zonedField);",0,0,0,1,2,0,12,0,0,12,33,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,205,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,212,        if (converted.containsKey(field)) {,6,1,0,2,5,0,10,0,0,18,35,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,215,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,220,"        converted.put(field, zonedField);",2,0,0,1,2,0,14,0,0,17,33,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,221,        return zonedField;,6,4,0,0,0,1,0,0,0,11,18,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,387,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,390,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,391,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,393,            iTimeField = useTimeArithmetic(durationField);,8,4,0,1,2,0,8,0,0,21,46,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,394,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,2,2,0,9,41,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,395,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,286,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,287,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,409,        if (type == null) {,4,1,0,1,3,3,0,4,0,12,19,1,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,415,            cDays = type;,10,0,0,0,0,0,6,0,0,18,13,3,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,417,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,10,55,        return iType;,6,0,0,0,0,1,0,2,0,9,13,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,147,        long scalar = iScalar;,6,1,0,0,0,0,0,0,0,7,22,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,149,        hash += getType().hashCode();,8,0,0,2,4,0,4,0,0,13,29,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,10,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,142,        long millis = iUnitMillis;,6,1,0,0,0,0,0,0,0,7,26,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,143,        int hash = (int) (millis ^ (millis >>> 32));,2,0,0,3,6,0,0,0,0,2,44,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,10,49,        return DurationFieldType.millis();,8,0,0,1,2,1,8,0,0,17,34,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,10,155,        return (int) getUnitMillis();,0,0,0,2,4,1,2,0,0,2,29,6,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,141,        return iUnitField;,2,0,0,0,0,1,4,0,0,6,18,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,101,        return getWrappedField().getLeapDurationField();,2,0,0,2,4,1,8,0,0,10,48,1,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,95,        return null;,4,0,0,0,0,1,0,0,0,5,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,94,        return iChronology.weeks();,4,2,0,1,2,1,8,0,0,14,27,3,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,208,        return null;,4,0,0,0,0,1,4,0,0,8,12,1,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,133,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.02395,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,282,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.02339,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,0,0,1,2,3,0,12,0,17,106,2,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,2,0,1,1,2,0,0,2,0,7,48,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,171,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,4,2,0,11,47,1,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,173,            fields.yearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,50,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,54,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,180,    },4,3,0,0,1,0,0,0,0,7,1,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",2,0,0,4,8,0,14,0,0,16,82,3,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,47,    },2,1,0,0,1,0,0,0,0,3,1,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,2,0,0,1,2,2,0,4,0,8,70,2,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0,0,0,1,2,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,            int saveMillis = 0;,6,0,0,0,0,0,0,2,0,8,19,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,6,2,0,15,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,                if (millis > firstMillis) {,4,1,0,1,3,0,0,0,0,5,27,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,                    if (first == null) {,2,1,0,1,3,0,0,0,0,3,20,9,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,                            if (rule.getSaveMillis() == 0) {,8,1,0,2,5,0,10,2,0,22,32,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",12,0,0,1,2,0,0,4,0,19,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,                    if (first == null) {,10,4,0,1,3,0,6,0,0,20,20,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,            iRules = copy;,6,1,0,0,0,0,2,0,0,9,14,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,            return first;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,            Rule nextRule = null;,4,2,0,0,0,0,0,0,0,6,21,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,            while (it.hasNext()) {,8,1,0,2,5,0,0,0,0,10,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,                Rule rule = it.next();,8,5,1,1,2,0,14,2,0,34,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",2,0,0,1,2,0,10,0,0,12,60,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,                if (next <= nextMillis) {,4,0,0,1,3,2,18,2,0,27,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,                    nextRule = rule;,6,0,0,0,0,0,0,0,0,7,16,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,2,1,0,3,7,0,14,0,0,17,50,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,            if (iUpperYear < Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",8,0,0,1,2,1,0,2,0,10,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,            if (iUpperYear == Integer.MAX_VALUE) {,2,0,0,1,3,0,0,0,0,2,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,                return Long.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,22,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,            if (iRules.size() == 2) {,0,1,0,2,5,0,4,0,0,5,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,                Rule endRule = iRules.get(1);,4,1,0,1,2,0,4,2,0,11,29,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,4,0,0,1,3,0,0,0,0,5,49,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {",8,0,0,1,3,0,0,2,0,10,56,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,            iMillis = millis;,2,0,0,0,0,0,0,0,0,2,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,            iNameKey = rule.getNameKey();,0,0,0,1,2,0,4,0,0,4,29,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,            iWallOffset = standardOffset + rule.getSaveMillis();,8,2,0,1,2,0,4,0,0,15,52,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,        },2,1,0,0,1,0,0,0,0,3,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,            return iMillis;,4,0,0,0,0,1,0,0,0,4,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,            return iNameKey;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,            return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,            return iStandardOffset;,4,0,0,0,0,1,0,0,0,5,23,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,            if (other == null) {,4,1,0,1,3,0,10,2,0,17,20,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,            return iMillis > other.iMillis &&,8,3,0,0,0,1,0,0,0,11,33,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,            int size = transitions.size();,2,1,0,1,2,0,0,0,0,3,30,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,            int[] standardOffsets = new int[size];,0,1,0,2,4,0,2,0,0,4,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,            String[] nameKeys = new String[size];,2,1,0,2,4,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,            Transition last = null;,4,1,0,0,0,0,0,0,0,5,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,            for (int i=0; i<size; i++) {,18,0,0,1,3,0,0,0,0,18,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,                Transition tr = transitions.get(i);,2,0,0,1,2,2,0,4,0,9,35,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,                if (!tr.isTransitionFrom(last)) {,6,1,0,2,5,3,8,2,0,20,33,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,2,4,0,4,0,0,9,36,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,                last = tr;,4,0,0,0,0,0,0,0,0,5,10,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,            String[] zoneNameData = new String[5];,2,0,0,2,4,0,0,4,0,6,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,            for (int j = 0; j < zoneStrings.length; j++) {,8,1,0,1,3,3,0,6,0,18,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,                String[] set = zoneStrings[j];,2,0,1,2,4,0,0,2,0,8,30,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,6,4,1,3,7,0,4,0,0,16,58,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,47,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1429,                String curNameKey = nameKeys[i];,2,0,1,1,2,0,0,2,0,8,32,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1430,                String nextNameKey = nameKeys[i + 1];,2,0,0,1,2,0,4,0,0,7,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1434,                long nextStdOffset = standardOffsets[i + 1];,4,1,1,1,2,0,0,0,0,7,44,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",6,1,1,4,8,0,4,4,0,21,81,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1436,                if (curOffset != nextOffset &&,4,8,0,0,1,0,0,0,0,12,30,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1458,                if (tailZone.iStartRecurrence.getNameKey(),4,0,0,1,3,0,2,0,0,6,42,9,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1480,            return new PrecalculatedZone,8,0,0,0,0,1,4,0,0,13,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1690,            if (iTailZone != null) {,2,1,0,1,3,0,0,0,0,3,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,772,            return iNameKey;,4,0,0,0,0,1,0,0,0,4,16,1,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,316,        if (type == null) {,4,1,0,1,3,2,0,2,0,9,19,1,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,319,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,597,        iTypes = types;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,599,    },4,0,0,0,1,0,0,2,0,7,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",8,0,0,1,2,3,6,12,0,30,90,1,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,58,    static int YEAR_INDEX = 0;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,59,    static int MONTH_INDEX = 1;,2,0,0,0,0,1,0,0,0,3,27,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,61,    static int DAY_INDEX = 3;,2,0,0,0,0,1,0,0,0,3,25,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,62,    static int HOUR_INDEX = 4;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,64,    static int SECOND_INDEX = 6;,2,0,0,0,0,1,0,0,0,3,28,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,102,        PeriodType type = cStandard;,8,0,0,0,0,0,0,2,0,11,28,3,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,103,        if (type == null) {,4,1,0,1,3,0,0,2,0,8,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,116,        return type;,2,3,0,0,0,1,0,0,0,5,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,164,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,165,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,617,        return iTypes.length;,4,0,0,0,0,1,0,0,0,4,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,515,            return System.currentTimeMillis();,4,0,0,1,2,1,4,0,0,9,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,282,            chronology = DateTimeUtils.getChronology(chronology);,6,0,0,1,2,0,10,0,0,18,53,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,11,56,        return getPeriodType().size();,0,0,0,2,4,1,4,0,0,4,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,107,        type = checkPeriodType(type);,2,0,0,1,2,0,0,0,0,2,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,108,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,109,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,110,"        iValues = chrono.get(this, startInstant, endInstant);",4,0,0,1,2,0,20,0,0,25,53,3,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,111,    },2,0,0,0,1,0,4,0,0,6,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,255,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,256,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,16,0,0,19,45,1,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,257,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);",2,0,0,1,2,0,6,0,0,9,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,2,0,0,1,3,3,0,4,0,9,73,2,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,318,        return iType;,0,0,0,0,0,1,10,0,0,10,13,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,243,        if (minuendInstant < subtrahendInstant) {,6,2,0,1,3,0,0,2,0,11,41,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,247,        int minuendYear = iChronology.getYear(minuendInstant);,2,0,0,1,2,0,6,0,0,8,54,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",2,0,0,1,2,0,8,0,0,10,75,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",2,0,0,1,2,0,8,0,0,10,84,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,12,4,0,3,6,0,0,0,0,16,98,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,        int minuendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",4,1,0,2,5,1,16,0,0,22,78,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,273,        long subtrahendRem = subtrahendInstant,4,0,0,0,0,0,0,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,280,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);",2,1,0,2,4,1,12,0,0,16,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,            return ImpreciseDateTimeField.this,2,0,0,0,0,1,0,0,0,2,34,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,485,        long yearStart = getYearMillis(year);,4,0,0,1,2,0,4,4,0,12,37,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,4,0,0,4,76,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0,0,0,3,6,1,2,0,0,2,47,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,4,3,0,3,6,1,4,0,0,11,69,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,10,1,0,1,2,0,4,0,0,16,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,156,        if (subtrahendRem >= FEB_29) {,10,1,0,1,3,0,0,2,0,13,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,4,2,0,2,6,0,4,0,0,10,61,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,        int difference = minuendYear - subtrahendYear;,6,1,0,0,0,0,0,0,0,7,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,167,        if (minuendRem < subtrahendRem) {,6,2,0,1,3,0,0,0,0,8,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,168,            difference--;,4,1,0,0,0,0,0,0,0,6,13,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,170,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,14,0,0,16,32,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,48,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,177,        int millisOfDay = getMillisOfDay(instant);,2,0,0,1,2,0,4,0,0,6,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,                if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,8,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,184,                    dayOfYear--;,2,0,0,0,0,0,0,0,0,3,12,10,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,190,                    dayOfYear++;,4,2,0,0,0,0,2,0,0,10,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,58,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,59,            return instant;,2,0,0,0,0,1,0,0,0,2,15,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,61,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,88,        if (minuendInstant < subtrahendInstant) {,4,1,0,1,3,0,0,0,0,5,41,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,11,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,8,0,0,10,77,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,106,        return diff;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,188,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,92,        if (months == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,112,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,113,        if (monthToUse >= 0) {,8,1,0,1,3,0,0,0,0,10,22,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,114,            yearToUse = thisYear + (monthToUse / iMax);,14,2,0,1,2,3,0,6,0,27,43,1,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,115,            monthToUse = (monthToUse % iMax) + 1;,6,2,0,1,2,0,0,0,0,9,37,6,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",2,0,0,1,2,0,8,0,0,10,67,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,138,        if (dayToUse > maxDay) {,4,1,0,1,3,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,144,        long datePart =,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,182,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,11,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.5,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,11,104,        long addition = value * iUnitMillis;  // safe,8,1,0,0,0,0,0,0,0,9,45,1,0.5,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,82,        long sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,23,5,0.5,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.5,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,88,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();,2,0,0,1,2,1,0,8,0,11,66,2,0.33333,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,        cVerbose.set(Boolean.FALSE);,6,0,0,1,2,0,10,0,0,17,28,1,0.33333,1,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,77,        return INSTANCE_UTC;,4,1,0,0,0,1,0,0,0,5,20,3,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",4,1,0,1,2,0,8,0,0,13,61,3,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,304,        if (thisDom > maxDom) {,6,1,0,1,3,1,4,0,0,12,23,3,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,6,0,0,1,2,0,4,0,0,10,56,3,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,404,        int year = (int) (i2 / unitMillis);,6,1,0,2,4,0,0,0,0,7,35,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,406,        long yearStart = getYearMillis(year);,8,1,0,1,2,0,4,0,0,13,37,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,6,2,0,1,4,0,0,0,0,8,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,428,        return year;,2,0,0,0,0,1,8,0,0,10,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,450,"        return getDayOfMonth(millis, year, month);",8,3,0,1,2,1,8,0,0,19,42,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,6,2,0,4,8,0,8,0,0,16,52,5,0.33333,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,        if (date == null) {,2,0,0,1,3,0,14,0,0,16,19,1,0.28571,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,        if (this == partial) {,2,0,0,1,3,0,0,0,0,2,22,4,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,14,0,0,1,2,0,4,4,0,24,38,3,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,6,0,0,2,5,0,4,0,0,11,44,1,0.25806,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",16,2,0,2,5,0,8,0,0,27,57,1,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0,0,0,0,0,0,6,0,0,6,32,11,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.19104,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,2,0,0,1,2,1,4,0,0,6,31,4,0.17021,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.125,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,6,0,0,0,0,0,0,0,0,7,23,3,0.11679,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,2,0,0,0,0,1,8,2,0,12,20,6,0.10774,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2,0,0,1,2,0,4,4,0,10,78,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,        return iLocalMillis;,4,0,0,0,0,1,6,0,0,10,20,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,2,0,0,1,3,0,4,0,0,6,19,5,0.09756,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,        return iChronology;,16,4,0,0,0,1,16,4,0,42,19,1,0.09249,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",4,1,0,2,4,0,6,0,0,11,35,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,2,2,0,6,56,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,0,0,0,2,53,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",10,1,1,1,2,1,0,0,0,13,43,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,12,0,1,1,2,1,4,2,0,23,32,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,8,1,0,1,3,0,0,0,0,10,26,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,4,0,0,1,2,1,6,0,0,11,33,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,2,0,0,1,3,0,4,0,0,6,26,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0,0,0,1,3,0,0,2,0,3,26,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,192,            cutoverInstant = DEFAULT_CUTOVER;,8,2,0,0,0,0,14,0,0,25,33,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,83,            year++;,0,0,0,0,0,0,10,0,0,10,7,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",10,1,0,2,4,1,4,0,0,17,84,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,129,    },2,0,0,0,1,0,8,0,0,10,1,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",6,0,1,1,2,0,14,2,0,26,116,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,108,        if (chrono == null) {,10,1,0,1,3,0,0,8,0,20,21,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",6,0,0,1,2,0,2,2,0,10,64,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",8,1,0,2,4,0,8,2,0,22,91,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,116,        return chrono;,4,0,0,0,0,1,0,0,0,5,14,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,204,        if (getParam() == null) {,2,1,0,2,5,0,8,0,0,12,25,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,211,            field = fields.yearOfEra;,10,0,0,0,0,0,0,0,0,12,25,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,6,0,0,10,42,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",8,0,0,1,2,0,0,0,0,10,54,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,221,            fields.centuryOfEra = new DividedDateTimeField(,32,10,0,0,1,0,14,4,0,67,47,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,4,4,0,18,47,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,229,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,68,            iMinValue = min + 1;,8,5,0,0,0,0,6,0,0,22,20,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,74,        iSkip = skip;,8,0,0,0,0,0,0,0,0,10,13,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,75,    },6,0,0,0,1,3,2,2,0,13,1,2,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);",2,1,0,1,2,1,0,0,0,3,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);",4,1,0,1,2,1,0,0,0,5,34,7,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,228,        return iField.getMaximumValue();,2,0,0,1,2,1,2,2,0,6,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,100,        return iMinValue;,4,0,0,0,0,1,0,0,0,5,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,344,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,0,0,0,6,39,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",26,0,0,2,4,0,4,0,0,31,96,3,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",4,0,0,2,4,0,16,0,0,22,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",8,4,0,2,4,0,4,0,0,18,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",2,0,0,2,4,0,0,0,0,2,102,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,224,            leapYears = (relativeYear + 3) >> 2;,6,2,1,1,2,0,0,2,0,14,36,3,0.07529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,888,"            instant = add(newInstant, 1);",16,1,0,1,2,0,10,4,0,33,29,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,127,        int year = get(instant);,2,1,0,1,2,0,0,0,0,3,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,129,        if (instant != yearStartMillis) {,4,1,0,1,3,0,0,0,0,5,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,133,        int thisWeekyear = get( instant );,12,1,0,1,2,0,6,0,0,20,34,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,134,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,1,1,2,0,0,0,0,9,65,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,10,0,0,13,55,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,155,        if ( setToWeek > maxOutWeeks ) {,4,2,0,1,3,0,4,0,0,10,32,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,162,        long workInstant = instant; // Get a copy,6,1,0,0,0,0,0,0,0,7,41,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,168,"        workInstant = iChronology.setYear( workInstant, year );",6,1,0,1,2,1,0,0,0,8,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,179,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),2,0,0,1,2,0,12,2,0,18,56,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,239,        return instant;,10,0,0,0,0,2,2,6,0,20,15,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1083,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1084,            iField = dateTimeField;,0,0,0,0,0,0,4,0,0,5,23,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,612,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,613,        },4,0,0,0,1,0,0,2,0,7,1,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,625,            iGregorianField = gregorianField;,4,0,0,0,0,0,0,0,0,5,33,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,626,            iCutover = cutoverMillis;,6,0,0,0,0,0,0,2,0,9,25,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,627,            iConvertByWeekyear = convertByWeekyear;,2,0,0,0,0,0,0,0,0,2,39,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,630,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,634,                rangeField = julianField.getRangeDurationField();,4,0,0,1,2,0,8,0,0,14,49,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,764,            return iDurationField;,2,1,0,0,0,1,0,0,0,3,22,6,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,788,            return iGregorianField.getLeapDurationField();,12,0,0,1,2,1,4,4,0,21,46,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",14,1,0,3,6,0,0,2,0,19,62,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,189,        zone = DateTimeUtils.getZone(zone);,2,0,0,1,2,0,6,0,0,9,35,8,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,215,            chrono = new GJChronology,2,0,0,0,0,0,6,2,0,11,25,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,228,        chronos.add(chrono);,4,0,0,1,2,0,6,0,0,11,20,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,230,        return chrono;,8,0,0,0,0,1,4,0,0,13,14,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,465,        Object[] params = (Object[])getParam();,0,0,1,4,8,0,12,0,0,16,39,9,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,467,        JulianChronology julian = (JulianChronology)params[0];,6,1,0,2,4,0,0,0,0,7,54,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,469,        Instant cutoverInstant = (Instant)params[2];,16,2,1,2,4,0,10,8,0,39,44,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,470,        iCutoverMillis = cutoverInstant.getMillis();,4,0,1,1,2,0,4,0,0,14,44,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,472,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,474,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,476,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,2,0,0,3,7,0,0,0,0,2,82,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,527,            fields.dayOfYear = new CutoverField(,6,2,0,0,1,0,4,2,0,16,36,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,65,6,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,541,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,4,2,0,11,40,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,543,            fields.years = fields.year.getDurationField();,12,1,0,1,2,0,6,0,0,21,46,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,549,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,551,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,553,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,555,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,557,            fields.weekyear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,44,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,561,            fields.weekyears = fields.weekyear.getDurationField();,12,2,0,1,2,0,8,0,0,23,54,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,567,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,569,            cf.iRangeDurationField = fields.months;,2,1,0,0,0,0,0,0,0,3,39,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,570,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,934,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,935,        },8,0,0,0,1,1,0,2,0,12,1,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",2,0,0,1,2,0,6,0,0,9,69,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,958,            if (durationField == null) {,2,1,0,1,3,0,0,0,0,3,28,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,219,        int relativeYear = year - 1968;,8,2,0,0,0,0,0,0,0,10,31,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,12,0,0,2,4,0,4,0,0,18,89,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,20,0,0,1,2,0,10,0,0,32,45,1,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,10,2,0,14,46,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,131,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,132,                chronos = new JulianChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,140,            },2,0,0,0,1,0,0,0,0,3,1,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,0,0,5,62,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,245,        return MAX_YEAR;,10,0,1,0,0,4,2,4,0,22,16,1,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,257,        return MILLIS_PER_MONTH;,4,1,0,0,0,1,0,0,0,5,24,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,265,        if (getBase() == null) {,4,1,0,2,5,0,2,0,0,8,24,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,266,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.07512,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,81,        if (value <= iSkip) {,4,1,0,1,3,0,8,0,0,13,21,1,0.07512,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,339,        long jan1millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,493,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,494,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,495,        if (week == 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,508,"        return getWeekOfWeekyear(instant, getYear(instant));",2,0,0,2,4,1,8,0,0,11,52,3,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,8,0,0,10,55,3,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,517,        if (instant < firstWeekMillis1) {,4,1,0,1,3,0,0,0,0,5,33,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,521,        if (instant >= firstWeekMillis2) {,2,0,0,1,3,0,0,2,0,4,34,10,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,402,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.07485,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.07485,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,8,5,0,5,10,1,2,4,0,20,71,3,0.07485,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.07468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,103,        return DateTimeConstants.MONDAY;,10,0,0,0,0,1,2,2,0,14,32,4,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),8,2,0,1,2,1,0,0,0,10,45,4,0.07459,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.07451,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,2,0,0,2,4,0,4,0,0,7,52,4,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,4,0,0,6,51,6,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,4,0,0,2,4,0,18,0,0,22,50,1,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,106,    },2,0,0,0,1,0,0,0,0,2,1,5,0.07442,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,12,299,        if (zone == null) {,10,1,0,1,3,0,0,4,0,15,19,1,0.07433,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,12,302,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.07433,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,14,1,0,0,0,0,4,0,0,21,50,3,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,420,            yearStart += oneYear;,8,0,0,0,0,0,0,0,0,9,21,3,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,422,            if (yearStart <= instant) {,4,1,0,1,3,0,0,0,0,5,27,7,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,424,                year++;,2,0,0,0,0,0,0,0,0,3,7,9,0.07399,0,0,-1
defect4j,time,org/joda/time/Instant,12,119,        iMillis = instant;,4,3,0,0,0,0,0,0,0,7,18,4,0.07232,0,0,-1
defect4j,time,org/joda/time/Instant,12,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.07223,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.07183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.07183,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,92,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06737,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.06439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,300,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,59,5,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",4,0,0,1,2,2,8,4,0,19,61,1,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,2,1,0,2,4,1,4,0,0,7,54,6,0.06172,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",6,0,0,1,2,1,8,4,0,19,59,3,0.06172,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.0616,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,48,5,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,177,        int millisOfDay = getMillisOfDay(instant);,4,0,0,1,2,0,4,0,0,8,42,3,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,4,2,0,2,5,0,0,2,0,9,44,3,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.06142,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.06136,0,0,-1
defect4j,time,org/joda/time/DateTime,12,527,        return this;,6,1,0,0,0,1,0,4,0,11,12,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,393,        },2,0,0,0,1,0,0,0,0,2,1,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,99,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,102,        iUpperLimit = upperLimit;,6,0,0,0,0,0,8,0,0,16,25,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,4,1,0,1,2,0,4,0,0,10,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,4,1,0,1,2,0,4,0,0,10,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,0,12,0,14,66,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,213,"        fields.eras = convertField(fields.eras, converted);",10,0,0,1,2,0,4,2,0,17,51,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,217,"        fields.weekyears = convertField(fields.weekyears, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,218,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,221,"        fields.halfdays = convertField(fields.halfdays, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,222,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,225,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,229,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",2,0,0,1,2,0,0,0,0,2,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",2,0,0,1,2,0,0,0,0,2,69,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,239,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,1,1,2,0,16,0,0,29,65,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",10,0,0,1,2,0,10,0,0,22,65,1,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",2,0,0,1,2,0,8,2,0,13,69,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",10,0,0,1,2,0,4,0,0,15,67,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,253,    },12,1,0,0,1,0,0,0,0,15,1,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,257,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,259,        if (converted.containsKey(field)) {,2,0,0,2,5,0,14,0,0,17,35,1,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,262,        LimitDurationField limitField = new LimitDurationField(field);,4,0,0,1,2,0,0,4,0,8,62,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,264,        return limitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,274,        LimitDateTimeField limitField =,2,0,0,0,0,0,0,2,0,4,31,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,280,        return limitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,453,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,454,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,455,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,456,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,111,        return null;,2,1,0,0,0,1,0,0,0,3,12,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.06119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.06119,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,80,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.06119,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.06113,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,55,    },2,0,0,0,1,3,0,0,0,5,1,2,0.06113,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,12,3,0,2,4,0,2,0,0,18,72,1,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },2,1,0,0,1,0,6,0,0,9,1,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,4,0,0,1,2,1,0,0,0,5,22,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,6,1,0,0,0,1,0,0,0,7,22,1,0.02632,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,2,1,0,2,4,1,18,0,0,21,55,1,0.025,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,2,0,0,0,0,1,0,2,0,5,9,10,0.02439,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,14,6,0,0,0,1,8,0,0,32,7,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,4,0,0,1,3,0,6,0,0,10,17,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,14,1,0,0,0,0,0,2,0,18,38,1,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,16,2,0,0,0,0,12,0,0,33,6,1,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,2,1,0,2,4,1,14,0,0,17,50,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,10,2,0,12,52,1,0.01613,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",8,5,0,2,5,0,0,0,0,13,56,4,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,0,8,0,0,10,30,1,0.01471,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },2,0,0,0,1,0,4,0,0,7,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",4,0,0,1,2,0,4,0,0,9,20,3,0.01389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,8,3,0,1,2,0,8,2,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,4,0,0,1,3,0,4,0,0,8,16,1,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,245,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0122,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,638,        return (indexOf(type) >= 0);,4,1,0,2,4,1,4,0,0,9,28,9,0.01205,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1089,            long valueLong = getFieldValue(period);,6,0,0,1,2,0,10,2,0,18,39,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1090,            if (valueLong == Long.MAX_VALUE) {,16,0,1,1,3,0,12,2,0,34,34,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,336,        if (value < 0) {,10,1,0,1,3,0,6,2,0,21,16,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,343,        return ,12,1,0,0,0,1,4,0,0,19,6,1,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,264,        return type;,6,0,0,0,0,1,0,4,0,10,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,237,        checkPeriod(period);,2,0,0,1,2,0,0,0,0,2,20,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,239,        PeriodPrinter printer = getPrinter();,2,0,0,1,2,0,2,2,0,6,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",2,0,0,2,4,0,8,4,0,14,85,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,242,        return buf.toString();,6,0,0,1,2,1,4,0,0,10,22,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1797,            int sum = 0;,6,2,0,0,0,0,0,2,0,12,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1122,            if (valueLong == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,34,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1134,            if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1139,            if (iFieldType >= SECONDS_MILLIS) {,6,2,0,1,3,0,0,0,0,8,35,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1146,            if (iSuffix != null) {,6,1,0,1,3,0,0,0,0,8,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,236,        checkPrinter();,8,0,0,1,2,0,2,0,0,11,15,6,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1806,            PeriodPrinter[] printers = iPrinters;,12,0,1,1,2,0,8,2,0,34,37,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1809,"                printers[i].printTo(buf, period, locale);",10,0,1,2,4,0,8,0,0,23,41,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1811,        },10,2,0,0,1,0,0,0,0,13,1,3,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1460,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,251,        if (iPrinter == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01124,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,113,        int index = indexOf(type);,14,2,0,1,2,1,28,0,0,46,26,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,114,        if (index == -1) {,6,2,0,1,3,0,0,0,0,9,18,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,95,        int[] result = new int[size()];,4,0,0,3,6,0,14,0,0,18,31,3,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,97,            result[i] = getValue(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,99,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0101,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,262,        if (period == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0099,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,392,            if (newValue != 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00917,0,0,-1
defect4j,time,org/joda/time/Period,13,353,    },2,0,0,0,1,0,8,0,0,11,1,6,0.0087,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,653,        return -1;,4,0,0,0,0,1,0,2,0,8,10,3,0.00855,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,87,            for (; size > digits; size--) {,10,1,0,1,3,0,0,2,0,14,31,1,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.00746,0,0,-1
defect4j,time,org/joda/time/Period,13,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",16,0,0,2,4,0,4,0,0,20,90,4,0.00633,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,66,            buf.append((char)(value + '0'));,4,1,0,3,6,0,10,0,0,15,32,6,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,92,    },8,1,0,0,1,0,0,4,0,15,1,4,0.00503,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",14,2,0,2,4,0,4,2,0,23,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",10,2,0,2,4,0,12,2,0,27,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",6,0,0,2,4,0,10,0,0,17,62,3,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,462,        return newValues;,4,0,0,0,0,1,0,0,0,5,17,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,91,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,92,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,453,        int[] newValues = new int[size()];,4,0,0,3,6,0,6,2,0,13,34,3,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,397,            values[index] = newValue;,2,0,1,1,2,0,0,0,0,7,25,6,0.00418,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,390,        int index = indexOf(type);,4,0,0,1,2,0,8,2,0,14,26,3,0.00415,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,650,                return i;,2,0,0,0,0,1,0,0,0,2,9,8,0.0038,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,648,"        for (int i = 0, isize = size(); i < isize; i++) {",4,0,0,2,5,0,0,2,0,6,49,4,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,4,0,0,15,24,1,0.00377,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,555,        return appendSuffix(new SimpleAffix(text));,2,0,0,2,4,1,4,0,0,7,43,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,652,"        return appendSeparator(text, text, null, false, true);",0,0,0,1,2,1,6,0,0,9,54,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,0,4,0,0,7,50,5,0.00364,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,859,        SimpleAffix(String text) {,6,0,0,1,3,0,4,2,0,12,26,1,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,228,        if (text == null) {,8,1,0,1,3,0,0,4,0,14,19,1,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,234,        return this;,4,0,0,0,0,1,0,2,0,7,12,6,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1544,        Literal(String text) {,4,0,0,1,3,0,0,2,0,6,22,3,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1545,            iText = text;,4,0,0,0,0,0,0,0,0,5,13,5,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1541,"        static final Literal EMPTY = new Literal("""");",2,0,0,1,2,2,0,4,0,9,45,3,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,2,1,0,2,4,0,8,0,0,12,62,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,6,0,0,2,4,0,2,4,0,12,61,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,609,        iFieldFormatters[newField.getFieldType()] = newField;,4,0,1,2,4,0,4,2,0,13,53,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,611,        return this;,4,1,0,0,0,1,0,0,0,5,12,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1064,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",14,1,0,1,3,0,0,4,0,20,63,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1065,            iMinPrintedDigits = field.iMinPrintedDigits;,6,0,0,0,0,0,14,0,0,21,44,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1069,            iFieldType = field.iFieldType;,4,0,0,0,0,0,0,0,0,4,30,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1070,            iFieldFormatters = field.iFieldFormatters;,6,0,0,0,0,0,0,0,0,7,42,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1071,            iPrefix = field.iPrefix;,16,1,0,0,0,0,0,0,0,19,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1072,            if (field.iSuffix != null) {,4,1,0,1,3,0,0,0,0,5,28,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1076,        },8,0,0,0,1,0,4,0,0,13,1,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1531,            return iFieldType;,0,0,1,0,0,1,6,0,0,11,18,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,464,        return this;,14,0,1,0,0,1,8,2,0,29,12,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,737,        List<Object> pairs = iElementPairs;,4,0,0,0,0,0,0,4,0,8,35,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,738,        if (pairs.size() == 0) {,2,1,0,2,5,0,12,0,0,16,24,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,750,        Separator lastSeparator = null;,4,0,0,0,0,0,0,2,0,6,31,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,757,            i--;  // element pairs,6,0,0,0,0,0,0,0,0,8,22,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,761,        if (lastSeparator != null && pairs.size() == 0) {,2,3,0,2,5,0,4,0,0,9,49,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,764,            Object[] comp = createComposite(pairs);,2,0,0,2,4,0,4,2,0,8,39,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,766,            Separator separator = new Separator(,2,0,0,0,1,0,0,4,0,6,36,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,800,            Separator sep = (Separator) elementPairs.get(0);,2,0,0,2,4,0,4,4,0,10,48,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,802,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",2,0,0,2,4,0,12,2,0,16,86,8,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,804,"                return new PeriodFormatter(sep, sep);",6,0,0,1,2,1,2,4,0,12,37,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1595,"                boolean useBefore, boolean useAfter) {",4,0,0,0,2,0,0,0,0,4,38,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1596,            iText = text;,4,0,0,0,0,0,0,0,0,5,13,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1618,            iBeforePrinter = beforePrinter;,8,0,0,0,0,0,0,0,0,10,31,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1619,            iBeforeParser = beforeParser;,4,0,0,0,0,0,0,2,0,6,29,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1620,            iUseBefore = useBefore;,6,0,0,0,0,0,4,0,0,12,23,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1621,            iUseAfter = useAfter;,8,0,0,0,0,0,0,0,0,10,21,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1622,        },2,1,0,0,1,0,0,0,0,3,1,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1750,            iAfterPrinter = afterPrinter;,6,0,0,0,0,0,4,0,0,13,29,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1751,            iAfterParser = afterParser;,6,0,0,0,0,0,0,2,0,9,27,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1752,            return this;,4,0,0,0,0,1,0,2,0,6,12,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,424,        appendField(WEEKS);,4,0,0,1,2,0,4,0,0,8,19,3,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,425,        return this;,2,0,0,0,0,1,0,2,0,5,12,6,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,779,        if (iPrefix != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00297,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,782,        iPrefix = null;,10,0,0,0,0,0,4,0,0,16,15,4,0.00297,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,398,        appendField(YEARS);,6,1,0,1,2,0,12,0,0,20,19,1,0.00296,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,530,"        appendField(type, iMinPrintedDigits);",2,0,0,1,2,0,6,0,0,8,37,3,0.00279,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,531,    },2,0,0,0,1,0,4,0,0,7,1,4,0.00279,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,128,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",10,0,0,0,1,0,0,4,0,15,72,3,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,536,"        append0(field, field);",4,0,0,1,2,0,0,2,0,7,22,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,537,        iFieldFormatters[type] = field;,2,0,1,1,2,0,0,0,0,7,31,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,538,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1054,            iMinPrintedDigits = minPrintedDigits;,4,0,0,0,0,0,0,0,0,5,37,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1055,            iPrintZeroSetting = printZeroSetting;,4,0,0,0,0,0,0,0,0,5,37,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1056,            iMaxParsedDigits = maxParsedDigits;,6,1,0,0,0,0,10,0,0,18,35,1,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1057,            iRejectSignedValues = rejectSignedValues;,8,0,0,0,0,0,0,0,0,10,41,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1058,            iFieldType = fieldType;,6,3,0,0,0,0,0,0,0,10,23,1,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1060,            iPrefix = prefix;,6,0,0,0,0,0,0,0,0,7,17,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1061,            iSuffix = suffix;,4,0,0,0,0,0,0,0,0,5,17,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1062,        },2,0,0,0,1,0,0,0,0,2,1,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,88,        iPrinter = printer;,2,0,0,0,0,0,10,0,0,12,19,8,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,89,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,90,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,91,        iParseType = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,125,        return formatter;,16,5,0,0,0,1,8,0,0,29,17,1,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,798,        int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,5,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,799,        if (size >= 2 && elementPairs.get(0) instanceof Separator) {,2,2,0,2,5,0,4,2,0,10,60,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,807,        Object[] comp = createComposite(elementPairs);,10,3,0,2,4,0,4,2,0,19,46,3,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,808,        if (notPrinter) {,2,0,0,1,3,0,0,0,0,2,17,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,810,        } else if (notParser) {,2,0,0,1,4,0,0,0,0,2,23,5,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,813,"            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",0,0,1,5,10,1,0,6,0,10,76,8,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,824,                Composite comp = new Composite(elementPairs);,6,0,0,1,2,0,0,4,0,10,45,1,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1766,        Composite(List<Object> elementPairs) {,4,0,0,1,3,0,0,4,0,8,38,3,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1767,            List<Object> printerList = new ArrayList<Object>();,2,0,1,1,2,0,0,4,0,8,51,5,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1768,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1770,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,8,0,0,8,49,6,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1772,            if (printerList.size() <= 0) {,2,0,0,2,5,0,0,0,0,3,30,4,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1775,                iPrinters = printerList.toArray(,2,0,0,0,1,0,4,0,0,7,32,7,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1779,            if (parserList.size() <= 0) {,10,5,0,2,5,0,4,0,0,19,29,1,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1837,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1838,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1839,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1841,                    if (element instanceof Composite) {,2,0,0,1,3,0,8,2,0,12,35,1,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1844,                        printerList.add(element);,0,0,0,1,2,0,6,0,0,6,25,12,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1848,                element = elementPairs.get(i + 1);,4,1,0,1,2,0,4,0,0,10,34,7,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1849,                if (element instanceof PeriodParser) {,2,0,0,1,3,0,0,2,0,4,38,8,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1850,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00277,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1853,                        parserList.add(element);,0,0,0,1,2,0,10,0,0,10,24,1,0.00277,0,0,-1
defect4j,time,org/joda/time/Period,13,298,"        super(0L, null, null);",0,0,0,1,2,0,0,0,0,1,22,3,0.00275,0,0,-1
defect4j,time,org/joda/time/Period,13,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,0.00275,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,101,    public PeriodFormatterBuilder() {,2,0,0,1,3,1,0,0,0,3,33,2,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,102,        clear();,2,0,0,1,2,0,4,2,0,8,8,3,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,172,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,4,0,0,0,0,0,0,0,0,5,43,4,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,173,        iMaxParsedDigits = 10;,2,0,0,0,0,0,0,0,0,3,22,4,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,174,        iRejectSignedValues = false;,4,2,0,0,0,0,2,0,0,8,28,8,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,175,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,176,        if (iElementPairs == null) {,2,1,0,1,3,0,14,0,0,18,28,3,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,181,        iNotPrinter = false;,2,0,0,0,0,0,0,0,0,4,20,4,0.00272,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,183,        iFieldFormatters = new FieldFormatter[10];,10,1,0,1,2,0,0,2,0,15,42,1,0.00272,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,255,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00257,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,257,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00257,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,13,276,        int size = period.size();,2,0,0,1,2,0,6,0,0,9,25,1,0.0025,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,13,277,        int[] values = new int[size];,2,0,1,2,4,0,0,0,0,4,29,5,0.0025,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,13,289,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0025,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,102,        PeriodType type = cStandard;,8,0,0,0,0,0,0,2,0,11,28,1,0.0024,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,103,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0024,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.0024,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,114,            cStandard = type;,4,0,0,0,0,0,10,0,0,15,17,3,0.0024,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,116,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.0024,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,318,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00231,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,2,0,0,1,3,3,0,4,0,9,73,2,0.00231,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,4,0,0,0,0,0,0,0,0,5,41,4,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,112,        checkPermission();,0,0,0,1,2,0,8,0,0,8,18,3,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,159,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,160,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,530,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,531,            iMillis = fixedMillis;,4,0,0,0,0,0,0,0,0,5,22,5,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,532,        },2,0,0,0,1,0,0,2,0,5,1,6,0.00179,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,2,0,2,34,6,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,182,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,595,        super();,4,0,0,1,2,0,0,0,0,5,8,8,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,597,        iTypes = types;,4,0,0,0,0,0,0,0,0,5,15,4,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,598,        iIndices = indices;,4,0,0,0,0,0,0,0,0,5,19,4,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",2,0,0,1,2,3,0,12,0,17,90,2,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,63,    static int MINUTE_INDEX = 5;,4,1,0,0,0,1,0,0,0,6,28,1,0.00166,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,65,    static int MILLI_INDEX = 7;,2,0,0,0,0,1,0,0,0,3,27,2,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,133,        DateTimeZone zone = cDefault;,4,0,0,0,0,0,0,2,0,6,29,4,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,136,                zone = cDefault;,4,0,0,0,0,0,0,0,0,5,16,8,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,137,                if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,8,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,138,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,141,"                            String id = System.getProperty(""user.timezone"");",2,0,0,1,2,0,4,2,0,9,48,14,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,143,                                temp = forID(id);,2,0,0,1,2,0,4,0,0,7,17,16,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,154,                    if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,10,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,157,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,159,            },2,0,0,0,1,0,0,0,0,2,1,4,0.00147,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,13,161,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00147,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,4,2,0,2,4,0,6,0,0,12,66,5,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,101,        if (chrono != null && chrono.getZone() == zone) {,6,3,0,2,5,0,4,0,0,13,49,3,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,104,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,106,            if (chrono == null) {,10,1,0,1,3,0,4,0,0,16,21,3,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",4,0,0,2,4,0,14,2,0,22,76,1,0.00135,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,13,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.00135,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,        return ldp;,2,1,0,0,0,1,0,0,0,3,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.4183,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")",4,1,0,1,3,0,0,0,0,5,36,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,                break;,2,0,0,0,0,0,8,0,0,10,6,11,0.34409,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,780,        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();,2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,781,        fields.add(DateTimeFieldType.monthOfYear());,4,1,0,2,4,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,782,        fields.add(DateTimeFieldType.dayOfMonth());,4,0,0,2,4,0,12,0,0,16,43,1,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);",2,0,0,2,4,4,0,8,0,13,67,2,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,        iDateTimeFieldType = fieldType;,4,1,0,0,0,0,4,0,0,10,31,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,        iDurationFieldType = null;,4,1,0,0,0,0,14,0,0,21,26,1,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,        iStringValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,        iUpperBound = upperBound;,2,1,0,0,0,0,0,0,0,3,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,                return false;,4,0,0,0,0,1,0,2,0,7,13,1,0.30769,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,0,0,2,37,5,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,        if (lowerBound == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,        return buf.toString();,2,0,0,1,2,1,10,4,0,17,22,1,0.288,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,            bld.appendLiteral('-');,2,1,0,1,2,0,4,0,0,8,23,3,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,            bld.appendMonthOfYear(2);,2,2,0,1,2,0,4,0,0,8,25,10,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,                    i--;,8,1,0,0,0,0,0,0,0,11,4,1,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,                    break;,10,4,0,0,0,0,0,0,0,15,6,3,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,            buf.append('\'');,0,0,0,1,2,0,10,0,0,10,17,8,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,            boolean inLiteral = false;,2,1,0,0,0,0,0,0,0,4,26,5,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,                if (c == '\'') {,2,0,0,1,3,0,10,0,0,12,16,1,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,                    buf.append(c);,2,0,0,1,2,0,6,0,0,8,14,3,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,                    buf.append(c);,2,0,0,1,2,0,6,0,0,9,14,6,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,        return withZone(DateTimeZone.UTC);,6,1,0,1,2,1,0,2,0,10,34,1,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,                iPrintedLengthEstimate = 0;,10,0,0,0,0,0,26,2,0,40,27,1,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,                formatter = builder.toFormatter();,10,0,0,1,2,0,8,2,0,23,34,3,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);",4,1,0,1,2,0,8,0,0,13,40,1,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,        return createFormatterForPattern(pattern);,14,1,0,1,2,1,6,4,0,25,42,1,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,        DateTimeFormatter formatter = null;,4,0,0,0,0,0,4,0,0,8,35,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,4,2,0,1,2,0,0,0,0,6,66,9,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,        if (iZone == zone) {,10,1,0,1,3,0,12,2,0,27,20,1,0.24427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",8,1,0,0,1,1,0,2,0,11,56,3,0.24427,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,2,1,0,5,11,0,10,0,0,13,82,1,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,    },14,4,1,0,1,0,12,0,0,37,1,3,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,            indexRef[0] = i;,2,0,0,1,2,0,14,2,0,20,16,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,            i = indexRef[0];,4,0,1,1,2,0,0,0,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,            char c = token.charAt(0);,2,0,0,1,2,0,12,0,0,14,25,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,            switch (c) {,2,0,0,1,3,0,0,0,0,3,12,6,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,574,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,4,0,0,7,38,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,577,        int length = pattern.length();,14,2,0,1,2,0,10,2,0,30,30,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,579,        char c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,8,27,5,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,3,0,1,3,0,0,2,0,12,51,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,621,        indexRef[0] = i;,2,0,1,1,2,0,0,2,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,622,        return buf.toString();,10,2,0,1,2,1,12,0,0,25,22,1,0.23188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,334,        return MIN;,8,0,0,0,0,1,0,2,0,12,11,1,0.22069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,339,        return iMax;,2,0,0,0,0,1,0,0,0,2,12,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1649,        return dye;,4,0,0,0,0,1,0,0,0,5,11,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1633,        if (dwe == null) {,2,0,0,1,3,0,6,0,0,8,18,5,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1634,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1639,        return dwe;,4,1,0,0,0,1,0,0,0,5,11,3,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1623,        if (wwe == null) {,4,0,0,1,3,0,0,4,0,8,18,8,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1629,        return wwe;,10,2,0,0,0,1,0,0,0,12,11,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,8,0,0,0,0,11,60,4,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,215,"            instant = add(instant, valueToAdd);",2,0,0,1,2,0,6,0,0,9,35,6,0.21053,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,520,"        return new MonthDay(this, newValues);",10,0,0,1,2,1,4,2,0,17,37,6,0.21053,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1614,        if (we == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1619,        return we;,6,1,0,0,0,1,0,0,0,7,10,1,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",14,8,0,2,4,1,8,0,0,31,66,3,0.20915,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,370,        if (text == null) {,2,0,0,1,3,0,8,2,0,12,19,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,373,        switch (text.length()) {,6,0,0,2,5,0,16,2,0,25,24,1,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,379,                return append0(new StringLiteral(text));,10,0,0,2,4,1,6,2,0,19,40,3,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1233,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",4,0,0,1,2,0,0,2,0,7,67,6,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,139,            dayToUse = maxDay;,4,0,0,0,0,0,0,0,0,5,18,6,0.19048,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,276,        if (parsers == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,279,        int length = parsers.length;,8,0,0,0,0,0,6,0,0,14,28,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,289,        for (i = 0; i < length - 1; i++) {,8,2,0,1,3,0,0,0,0,12,34,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,296,"        return append0(printer, new MatchingParser(copyOfParsers));",4,3,0,2,4,1,4,0,0,11,59,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,319,        if (parser == null) {,6,1,0,1,3,0,0,0,0,7,21,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2752,            super();,6,0,0,1,2,0,0,0,0,6,8,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2754,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2755,            for (int i=parsers.length; --i>=0 ;) {,8,1,0,1,3,0,0,0,0,10,38,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2759,                    if (len > est) {,6,0,0,1,3,0,4,0,0,12,16,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2760,                        est = len;,4,0,0,0,0,0,0,0,0,5,10,11,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2768,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2684,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,314,                if (fieldIndex == 0) {,2,1,0,1,3,0,0,0,0,3,22,8,0.18182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1367,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.17978,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,549,        if (extended) {,2,0,0,1,3,0,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,550,            bld.appendLiteral('-');,0,0,0,1,2,0,4,0,0,5,23,7,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,552,    },2,1,0,0,1,0,4,0,0,7,1,3,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,293,        boolean reducedPrec = false;,2,0,0,0,0,0,0,0,0,3,28,5,0.14815,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,185,    },4,0,0,0,1,0,0,0,0,5,1,6,0.1435,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,181,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.14318,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,128,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,129,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,131,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,135,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.13361,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.13333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,362,"        super(partial, values);",4,0,0,1,2,0,0,0,0,4,23,4,0.12903,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,249,        return iChronology;,6,0,0,0,0,1,10,0,0,17,19,3,0.12075,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,818,        return getMaximumValue(instant);,12,2,0,1,2,1,4,2,0,22,32,6,0.10978,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,804,        return getMaximumValue();,0,0,0,1,2,1,12,0,0,12,25,3,0.10959,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.10903,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,772,        return getMinimumValue(instant);,4,0,0,1,2,1,4,0,0,9,32,3,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,183,        int size = partial.size();,4,0,0,1,2,0,10,0,0,15,26,3,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,185,            int value = values[i];,6,0,1,1,2,0,0,0,0,10,22,1,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,186,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,14,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.1,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,612,"        return withFieldAdded(DurationFieldType.days(), days);",2,0,0,2,4,1,14,4,0,20,54,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,309,            if (proposed <= max) {,2,0,0,1,3,0,4,0,0,7,22,4,0.09756,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1600,        return mye;,2,0,0,0,0,1,0,0,0,2,11,4,0.0944,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",2,0,0,2,4,1,14,2,0,18,68,3,0.08791,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",4,0,0,2,4,1,0,0,0,5,67,5,0.08533,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,14,260,            return true;,2,0,0,0,0,1,6,0,0,10,12,1,0.08399,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,204,            for (int i=chronos.size(); --i>=0; ) {,10,3,0,2,5,0,8,0,0,23,38,1,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,209,                    return chrono;,2,0,0,0,0,1,0,0,0,2,14,10,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,503,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.08333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",8,0,0,3,6,0,0,2,0,10,62,4,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,282,    },6,4,0,0,1,0,0,0,0,10,1,4,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,6,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,221,            chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,6,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,477,            return;,2,0,1,0,0,1,0,4,0,8,7,4,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,499,            return iDurationField;,4,0,0,0,0,1,0,0,0,4,22,1,0.0829,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,307,        return withZone(DateTimeZone.UTC);,4,0,0,1,2,1,2,0,0,6,34,5,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,320,        if (zone == getZone()) {,2,1,0,2,5,0,2,0,0,5,24,4,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,293,        if ((base = getBase()) != null) {,6,2,0,3,7,0,4,2,0,16,33,3,0.08184,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,550,            return iField.getMinimumValue();,2,0,0,1,2,1,8,2,0,12,32,1,0.08142,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,8,2,0,14,60,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,6,2,0,12,58,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2736,            if (array != null) {,2,1,0,1,3,0,4,0,0,7,20,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2738,                    list.add(array[i]);,0,0,1,2,4,0,8,0,0,12,19,4,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2741,        },8,3,0,0,1,0,0,0,0,11,1,4,0.08112,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,194,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,4,0,0,7,46,6,0.08112,0,0,-1
defect4j,time,org/joda/time/Instant,14,144,        return this;,8,1,0,0,0,1,0,2,0,11,12,1,0.08101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.08091,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.08071,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,468,            if (get(result) != value) {,2,1,0,2,5,0,4,0,0,7,27,5,0.08071,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,466,"            localInstant = iField.set(localInstant, value);",2,0,0,1,2,0,8,0,0,11,47,5,0.0794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,974,        int offsetLocal = getOffset(instantLocal);,4,0,0,1,2,0,0,0,0,5,42,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,976,        int offset = getOffset(instantLocal - offsetLocal);,6,1,0,1,2,0,2,0,0,9,51,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,1009,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,2,0,0,3,7,0,0,0,0,3,69,4,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,172,        return iParser;,10,1,0,0,0,1,4,0,0,16,15,1,0.07911,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,154,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.07767,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,345,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.07729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1141,            return true;,2,0,0,0,0,1,2,0,0,5,12,1,0.07583,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1107,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.07547,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,298,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07273,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,304,        DateTimeField nextField = null;,4,0,0,0,0,0,0,4,0,8,31,4,0.07273,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,306,        while (valueToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.07273,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,14,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.07199,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,65,        iChronology = chronology;,4,0,0,0,0,0,6,2,0,13,25,3,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,88,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,95,        return iMinValue;,6,0,0,0,0,1,0,0,0,7,17,1,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,129,    },4,0,0,0,1,0,0,0,0,4,1,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",2,0,0,1,2,3,4,12,0,21,116,1,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,107,        BuddhistChronology chrono = cCache.get(zone);,2,0,0,1,2,0,6,2,0,10,45,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,108,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,116,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,204,        if (getParam() == null) {,0,1,0,2,5,0,2,0,0,4,25,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,206,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,207,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,211,            field = fields.yearOfEra;,8,0,0,0,0,0,0,0,0,9,25,3,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,221,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,226,            fields.yearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,234,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,173,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,2,0,0,4,46,4,0.06995,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.06995,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,153,"        return super.set(instant, value - iOffset);",8,1,0,1,2,1,0,0,0,9,43,5,0.06972,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.06972,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.06949,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,14,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",12,0,0,0,1,1,0,0,0,13,61,3,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",2,0,0,2,4,0,8,0,0,11,48,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,135,"        instant = hourOfDay().set(instant, hourOfDay);",4,0,1,2,4,0,8,4,0,19,46,3,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,714,                    if (instant + iGapDuration < iCutover) {,6,2,0,1,3,0,0,0,0,8,40,9,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,715,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,915,                return gregorianToJulianByYear(instant);,4,0,1,1,2,1,6,2,0,14,40,1,0.06934,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,172,"        return iField.set(instant, value);",6,1,0,1,2,1,8,0,0,15,34,3,0.06926,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,74,public final class GJChronology extends AssembledChronology {,4,1,0,0,1,2,4,2,0,13,61,1,0.06926,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,724,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,12,0,0,15,43,1,0.06926,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,912,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.06926,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,737,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.06897,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,644,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.06889,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.06867,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1198,            return 1;,2,0,0,0,0,1,0,12,0,14,9,4,0.06772,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1288,            return iMaxParsedDigits;,0,1,0,0,0,1,0,2,0,4,24,13,0.06744,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,14,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.06744,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,14,184,        return INSTANCE_UTC;,2,0,0,0,0,1,6,0,0,9,20,4,0.06737,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,359,        return append0(new CharacterLiteral(c));,14,1,0,2,4,1,2,2,0,21,40,3,0.06723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1170,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.06723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2580,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2582,                int printEst = 0;,8,0,0,0,0,0,0,0,0,9,17,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2583,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,4,0,0,2,4,0,12,4,0,21,63,6,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2585,                    printEst += printer.estimatePrintedLength();,8,0,0,1,2,0,4,2,0,16,44,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2588,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,4,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2596,                iParsers = new DateTimeParser[size];,4,0,1,1,2,0,0,2,0,9,36,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2597,                int parseEst = 0;,4,0,0,0,0,1,0,0,0,5,17,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2598,                for (int i=0; i<size; i++) {,10,1,0,1,3,0,0,0,0,12,28,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2599,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,2,0,0,2,4,0,6,4,0,12,59,9,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2601,                    iParsers[i] = parser;,4,0,1,1,2,3,0,4,0,16,21,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2603,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2715,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2716,                if (element instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,41,8,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2717,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2726,                    if (element instanceof Composite) {,8,1,0,1,3,0,4,2,0,16,35,1,0.06716,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1430,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.06695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1426,            iMinPrintedDigits = minPrintedDigits;,10,0,0,0,0,3,0,4,0,18,37,1,0.06695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1281,            super();,2,1,0,1,2,0,0,0,0,3,8,6,0.06688,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1282,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.06688,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1283,            iMaxParsedDigits = maxParsedDigits;,4,0,0,0,0,0,0,0,0,5,35,5,0.06688,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1284,            iSigned = signed;,8,1,0,0,0,0,6,2,0,18,17,3,0.06688,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1139,                return ((Composite)f).isParser();,2,0,0,3,6,1,2,2,0,6,33,9,0.06674,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2701,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.06674,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1117,                f = new Composite(iElementPairs);,4,0,0,1,2,0,0,2,0,7,33,8,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2571,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2572,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2574,"            decompose(elementPairs, printerList, parserList);",2,1,0,1,2,0,16,0,0,21,49,1,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2591,            if (parserList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,29,5,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2605,        },2,0,0,0,1,0,6,0,0,9,1,7,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2713,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.0666,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2714,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.0666,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,788,            return iGregorianField.getLeapDurationField();,2,0,0,1,2,1,12,0,0,14,46,1,0.06646,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,955,            return instantUTC;,2,1,0,0,0,1,0,0,0,3,18,5,0.06591,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,768,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.06584,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,14,541,            return iLeapDurationField;,0,0,0,0,0,1,0,2,0,2,26,13,0.06571,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",12,0,0,2,4,0,12,2,0,28,105,3,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.06564,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",14,0,0,3,6,0,4,2,0,22,62,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,2,0,1,1,2,2,12,4,0,26,69,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,4,0,0,7,126,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,189,        zone = DateTimeUtils.getZone(zone);,2,0,0,1,2,0,6,0,0,9,35,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,191,        if (gregorianCutover == null) {,4,1,0,1,3,0,0,0,0,5,31,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,24,1,0,1,2,0,6,8,0,41,51,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,201,            chronos = new ArrayList<GJChronology>(2);,10,0,0,1,2,0,4,4,0,20,41,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,214,        if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,230,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,467,        JulianChronology julian = (JulianChronology)params[0];,4,0,1,2,4,0,6,4,0,17,54,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,469,        Instant cutoverInstant = (Instant)params[2];,12,1,1,2,4,0,4,4,0,24,44,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,470,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,473,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,4,0,0,3,7,0,0,0,0,5,82,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,491,        fields.copyFieldsFrom(gregorian);,2,0,0,1,2,0,12,0,0,15,33,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,497,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,1,0,3,7,0,8,0,0,9,55,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,72,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,526,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,6,0,0,2,4,0,8,0,0,15,61,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,65,6,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,541,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,543,            fields.years = fields.year.getDurationField();,8,0,0,1,2,0,2,0,0,11,46,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,544,            fields.yearOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,45,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,546,            fields.yearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,49,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,549,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,551,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,10,0,0,19,58,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,553,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,555,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,12,0,0,23,54,3,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,559,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,567,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,569,            cf.iRangeDurationField = fields.months;,8,0,0,0,0,0,0,0,0,9,39,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,570,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,612,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,613,        },12,1,0,0,1,0,0,0,0,15,1,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,622,"                     long cutoverMillis, boolean convertByWeekyear) {",4,0,0,0,2,0,0,0,0,4,48,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,624,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,627,            iConvertByWeekyear = convertByWeekyear;,4,0,0,0,0,0,0,0,0,5,39,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,630,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,632,            DurationField rangeField = gregorianField.getRangeDurationField();,2,0,0,1,2,0,8,2,0,12,66,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,633,            if (rangeField == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,634,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,636,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,764,            return iDurationField;,6,0,0,0,0,1,0,0,0,7,22,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,0,0,1,2,0,0,0,0,11,71,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",8,0,0,1,2,0,0,0,0,8,69,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,959,"                durationField = new LinkedDurationField(iDurationField, this);",6,0,0,1,2,0,0,2,0,9,62,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,961,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,128,        long yearStartMillis = iChronology.getYearMillis(year);,4,0,0,1,2,3,6,4,0,18,55,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,129,        if (instant != yearStartMillis) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,1083,"            super(durationField, durationField.getType());",4,1,0,2,4,0,14,0,0,19,46,1,0.06557,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.06551,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.06551,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,14,527,            return iRangeDurationField;,4,0,0,0,0,1,4,0,0,8,27,1,0.06551,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.06537,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,6,4,0,1,2,1,0,0,0,10,79,4,0.06537,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.06531,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.06531,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,14,523,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.06524,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.06504,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,890,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.06504,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.06497,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,221,        if (relativeYear <= 0) {,4,1,0,1,3,0,0,0,0,5,24,1,0.06497,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.06497,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.06484,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.06478,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,81,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.06478,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.06478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.06471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.06465,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,272,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.06458,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,269,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06452,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,144,        long total = val1 * val2;,6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,10,2,0,1,3,0,0,0,0,12,27,3,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,148,        return total;,2,1,0,0,0,1,2,0,0,7,13,4,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,136,        switch (val2) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },10,1,0,0,1,0,0,0,0,12,1,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",10,0,0,0,1,1,0,2,0,13,55,1,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,6,0,0,0,0,1,8,0,0,15,15,3,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,10,0,0,0,0,2,30,6,0,50,7,1,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },2,1,0,0,1,0,0,0,0,3,1,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,8,0,0,9,42,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,14,5,0,1,3,0,2,2,0,24,32,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,4,0,0,1,2,0,6,0,0,12,41,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,6,0,0,8,33,1,0.196,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,6,1,0,0,0,0,8,0,0,16,6,3,0.18702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,6,0,0,1,2,0,0,8,0,14,30,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,0,0,0,2,4,0,4,0,0,4,28,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,6,1,0,1,3,0,0,0,0,8,12,3,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,0,1,1,1,2,0,8,0,0,14,38,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,2,0,0,1,2,1,4,2,0,8,22,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",10,0,0,1,2,3,2,12,0,28,112,1,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,4,1,0,1,3,0,0,0,0,6,18,7,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,4,0,0,2,5,0,0,0,0,5,36,5,0.17754,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },2,0,0,0,1,0,0,2,0,4,1,3,0.17626,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,0,0,0,5,68,5,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,4,1,0,2,4,0,4,0,0,9,64,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,6,0,0,11,36,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,14,3,0,1,3,0,0,0,0,18,12,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",6,1,0,0,1,0,0,2,0,9,46,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,14,0,0,1,3,0,0,2,0,18,19,1,0.16388,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,6,1,0,2,5,0,2,0,0,10,24,3,0.16388,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,        int count = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,5,30,5,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,351,        if (count > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,364,            for (int i = 0; i < count; i++) {,4,0,0,1,3,0,4,2,0,10,33,3,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,379,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,419,            for (int i=0; i<high; i++) {,6,0,0,1,3,0,0,0,0,7,28,6,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1322,            },2,0,0,0,1,0,4,0,0,6,1,10,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1329,            if (length >= 9) {,8,2,0,1,3,0,10,0,0,21,18,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1334,                int i = position;,8,1,0,0,0,0,4,2,0,17,17,3,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1344,                while (i < position) {,6,2,0,1,3,0,0,0,0,8,22,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1353,            return position;,0,0,0,0,0,1,12,0,0,13,16,6,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,247,    },10,5,0,0,1,0,0,0,0,15,1,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,6,0,0,1,3,0,4,2,0,12,67,3,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,273,        iSavedState = null;,10,1,0,0,0,0,0,0,0,13,19,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,275,        iSavedFieldsCount = savedFieldsCount + 1;,4,1,0,0,0,0,0,0,0,6,41,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,468,            iField = field;,8,2,0,0,0,0,12,0,0,23,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,469,            iValue = value;,6,0,0,0,0,0,0,0,0,7,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,471,            iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.15605,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,954,            dt = new DateTimeFormatterBuilder(),12,3,0,1,2,0,0,4,0,21,35,3,0.15605,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1318,                if (c < '0' || c > '9') {,2,1,0,1,3,0,0,0,0,3,25,4,0.15506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",8,3,0,2,4,0,4,0,0,15,65,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1294,            boolean negative = false;,6,1,0,0,0,0,2,0,0,10,25,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,2,1,0,2,5,0,10,0,0,13,55,3,0.15457,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,917,            tt = new DateTimeFormatterBuilder(),2,0,0,1,2,0,4,2,0,9,35,1,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1875,"                printTo(buf, null, instant, chrono);",0,1,1,1,2,0,18,0,0,29,36,1,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1482,        if (hmsf == null) {,4,1,0,1,3,0,4,2,0,11,19,3,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1483,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,2,37,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1490,        return hmsf;,24,7,0,0,0,1,14,4,0,53,12,1,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1691,        if (fse == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14583,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2112,            if (displayZone == null) {,4,2,0,1,3,0,4,0,0,10,26,7,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,0,0,1,3,0,6,0,0,8,57,5,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,72,    private SavedField[] iSavedFields = new SavedField[8];,6,0,0,2,4,1,4,8,0,19,54,1,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,121,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,123,        iChrono = chrono.withUTC();,10,1,0,1,2,0,8,0,0,21,27,3,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,127,    },10,1,0,0,1,0,0,0,0,12,1,7,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,928,        return parser;,2,0,0,0,0,1,0,0,0,2,14,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",4,1,0,2,4,1,0,0,0,5,64,5,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1909,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1913,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1923,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.14121,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.13499,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,155,            return 1;,0,1,0,0,0,1,10,0,0,11,9,5,0.13315,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,146,        long otherMillis = otherField.getUnitMillis();,8,1,0,1,2,0,22,0,0,32,46,1,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.13032,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,866,        return yearMonthDay();,6,1,0,1,2,2,2,0,0,10,22,3,0.12629,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1358,        if (ymd == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.12468,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.12468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2621,                locale = Locale.getDefault();,4,0,0,1,2,0,4,2,0,11,29,1,0.12343,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2624,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,582,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,584,        return buf.toString();,0,0,0,1,2,1,4,2,0,6,22,1,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,460,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,14,2,0,18,64,3,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,618,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,619,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,624,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,0,0,0,9,40,3,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,625,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,23,65,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,631,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,18,0,0,23,79,1,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,437,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2120,                buf.append('+');,10,2,0,1,2,1,4,0,0,18,16,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,128,        iPrinter = printer;,4,0,1,0,0,0,4,0,0,13,19,1,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,132,        iChrono = chrono;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,135,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1708,        return ze;,4,0,0,0,0,1,0,0,0,4,10,3,0.09423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2101,                est += iMinFields - 1;,4,0,0,0,0,0,4,2,0,10,22,10,0.09263,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09159,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2144,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,12,1,0,0,0,0,0,0,0,15,63,5,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,657,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.09024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,661,        return printer;,6,1,1,0,0,1,0,0,0,10,15,1,0.09024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,538,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",6,0,0,2,4,1,2,2,0,10,62,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1858,            iFieldType = fieldType;,4,0,0,0,0,0,8,0,0,13,23,1,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1863,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1864,            iMaxDigits = maxDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1868,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2026,            return iMaxDigits;,4,1,0,0,0,1,4,0,0,10,18,3,0.08991,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,8,2,0,12,41,3,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1588,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,1,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1596,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.08974,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2138,                buf.append(':');,8,0,0,1,2,0,8,0,0,18,16,1,0.08929,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,4,1,0,2,5,0,0,0,0,5,74,4,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2236,            return estimatePrintedLength();,4,3,0,1,2,1,0,0,0,7,31,4,0.08893,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,902,            if (prev < instantAdjusted) {,4,1,0,1,3,0,0,0,0,5,29,7,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,903,                int offsetPrev = getOffset(prev);,2,0,0,1,2,0,4,0,0,6,33,10,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,904,                int diff = offsetPrev - offsetLocal;,12,3,0,0,0,0,4,0,0,21,36,3,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,905,                if (instantAdjusted - prev <= diff) {,8,2,0,1,3,0,0,0,0,10,37,3,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,164,        if (instant == null) {,10,1,0,1,3,0,4,0,0,16,22,3,0.08734,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2119,            if (displayOffset >= 0) {,2,1,0,1,3,0,0,0,0,3,25,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2131,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2132,            if (displayOffset == 0 && iMinFields <= 1) {,4,3,0,1,3,0,0,0,0,7,44,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2137,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2141,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.08591,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,8,0,0,11,53,1,0.08537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,1,2,2,0,4,33,5,0.08522,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2085,            iZeroOffsetParseText = zeroOffsetParseText;,4,0,0,0,0,0,0,0,0,5,43,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2086,            iShowSeparators = showSeparators;,12,1,0,0,0,0,6,0,0,20,33,1,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2094,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2095,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1682,            sme = new DateTimeFormatterBuilder(),6,3,0,1,2,0,0,2,0,12,36,4,0.08291,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.08291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,146,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.08291,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,141,        instant -= offset;,6,1,0,0,0,0,0,0,0,8,18,3,0.08263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1662,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.08221,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1663,            hde = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08221,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,0,1,2,1,0,0,0,3,50,4,0.0798,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.07632,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",2,1,0,2,4,0,0,0,0,3,57,4,0.07632,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,900,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.07562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.07504,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.07402,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,882,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,887,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.07368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1585,        if (ye == null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1586,            ye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,0,2,0,10,33,4,0.07061,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,260,            return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.06872,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,205,                chrono = chronos.get(i);,2,0,0,1,2,0,6,0,0,9,24,8,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,10,0,0,16,63,3,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,209,                    return chrono;,2,0,0,0,0,1,0,0,0,2,14,10,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,397,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.06863,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,939,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,943,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06844,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,516,                    return chronology.hourOfDay();,2,0,0,1,2,1,10,4,0,16,30,1,0.06844,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,499,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",8,0,0,3,6,0,0,2,0,10,62,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,6,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,320,        if (zone == getZone()) {,2,1,0,2,5,0,2,0,0,5,24,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,293,        if ((base = getBase()) != null) {,4,1,0,3,7,0,18,0,0,26,33,1,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,296,        return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,3,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,474,            return result;,2,0,0,0,0,1,4,4,0,10,14,1,0.06658,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.06577,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,468,            if (get(result) != value) {,2,1,0,2,5,0,4,0,0,7,27,5,0.06577,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,465,            long localInstant = iZone.convertUTCToLocal(instant);,4,0,0,1,2,1,6,0,0,11,53,1,0.06464,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,976,        int offset = getOffset(instantLocal - offsetLocal);,6,1,0,1,2,0,2,0,0,9,51,5,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,978,        if (offsetLocal != offset) {,4,1,0,1,3,0,0,0,0,5,28,4,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1009,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.06414,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,1014,        return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,4,0.06414,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,12,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,12,0.06298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,451,        if (maxDigits < minDigits) {,6,2,0,1,3,0,0,0,0,8,28,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,454,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,457,        if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,3,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",8,0,0,2,4,1,0,2,0,11,72,3,0.06282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,209,        if (formatter == null) {,2,0,0,1,3,0,0,0,0,2,24,4,0.06164,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,172,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.0614,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,154,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.06027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,345,        iFormatter = null;,14,1,0,0,0,0,0,0,0,18,18,3,0.05998,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,259,        if (this == readableInstant) {,4,1,1,1,3,0,0,2,0,10,30,1,0.05868,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1104,                Object printer = iElementPairs.get(0);,2,0,0,1,2,0,4,2,0,8,38,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1105,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1107,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.05854,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1109,                        f = printer;,8,1,0,0,0,0,4,0,0,14,12,3,0.05854,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,54,    },2,0,0,0,1,0,0,0,0,2,1,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,65,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,88,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,89,            value--;,4,0,0,0,0,0,0,0,0,4,8,6,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,16,82,            value--;,2,0,0,0,0,0,2,0,0,5,8,3,0.05691,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,153,"        return super.set(instant, value - iOffset);",8,1,0,1,2,1,4,0,0,13,43,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,128,"        super(base, param);",6,0,0,1,2,0,0,0,0,6,19,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",2,0,0,1,2,3,0,4,0,10,85,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",2,0,0,1,2,3,0,12,0,17,116,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,104,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,108,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",2,0,0,2,4,0,6,2,0,12,76,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",4,0,0,1,2,0,0,4,0,8,64,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,114,"            cCache.put(zone, chrono);",2,0,0,1,2,0,8,0,0,11,25,1,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,116,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,206,            DateTimeField field = fields.year;,8,0,1,0,0,0,0,6,0,16,34,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,207,            fields.year = new OffsetDateTimeField(,6,0,0,0,1,0,4,4,0,15,38,3,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,211,            field = fields.yearOfEra;,6,0,0,0,0,0,0,0,0,7,25,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,216,            field = fields.weekyear;,6,0,0,0,0,0,0,0,0,7,24,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,42,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,221,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,0,2,0,12,47,1,0.05691,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.05691,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,16,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.05684,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,8,0,0,13,33,3,0.05665,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,133,"        instant = monthOfYear().set(instant, monthOfYear);",12,0,0,2,4,0,12,2,0,28,50,3,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",12,0,0,2,4,0,12,2,0,28,48,3,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,16,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,12,0,0,18,56,1,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,16,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,715,                        instant = gregorianToJulian(instant);,4,0,0,1,2,3,4,16,0,28,37,1,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.05632,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,724,"                instant = iJulianField.set(instant, value);",4,0,0,1,2,0,8,0,0,13,43,1,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,725,                if (instant >= iCutover) {,5,2,0,1,3,0,0,0,0,7,26,1,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,912,            if (iConvertByWeekyear) {,4,0,0,1,3,0,0,0,0,4,25,4,0.05626,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,78,        if (year <= 0) {,6,1,0,1,3,0,0,2,0,10,16,3,0.05613,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.05613,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",8,0,0,2,4,1,4,0,0,12,84,4,0.05613,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,228,        return iField.getMaximumValue();,2,0,0,1,2,1,12,0,0,14,32,3,0.05606,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,710,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,712,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,737,            return instant;,10,4,0,0,0,1,0,0,0,15,15,1,0.056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,644,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.05594,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,16,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.05543,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,402,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.05543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,396,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.05373,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,402,        if (minDigits < 0 || maxDigits <= 0) {,0,1,0,1,3,0,2,0,0,4,38,4,0.05373,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,405,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.05373,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,768,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.05344,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,16,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.05332,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,105,3,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",12,0,0,2,4,0,4,4,0,22,96,1,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,131,            instant = iChronology.getYearMillis(year + 1);,8,3,0,1,2,0,4,0,0,16,46,1,0.05326,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",6,0,0,3,6,0,0,2,0,9,62,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,2,0,0,1,2,2,0,4,0,9,69,2,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,189,        zone = DateTimeUtils.getZone(zone);,2,0,0,1,2,0,6,0,0,9,35,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,1,0,1,2,0,4,0,0,7,51,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,215,            chrono = new GJChronology,14,1,0,0,0,0,0,2,0,20,25,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,228,        chronos.add(chrono);,2,0,0,1,2,0,12,0,0,15,20,1,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,469,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,470,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,472,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,473,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,474,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,6,1,0,3,7,0,8,0,0,16,82,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,485,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,6,2,0,1,2,0,8,0,0,18,72,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,497,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,1,0,3,7,0,8,0,0,9,55,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,72,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,526,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,65,6,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,533,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,544,            fields.yearOfEra = new ImpreciseCutoverField(,8,0,0,0,1,0,0,4,0,13,45,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,551,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,553,            fields.monthOfYear = new ImpreciseCutoverField(,6,0,0,0,1,3,0,6,0,16,47,1,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,555,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,557,            fields.weekyear = new ImpreciseCutoverField(,12,2,0,0,1,0,0,2,0,17,44,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,561,            fields.weekyears = fields.weekyear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,567,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,569,            cf.iRangeDurationField = fields.months;,8,0,0,0,0,0,0,0,0,9,39,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,570,            fields.dayOfMonth = cf;,8,0,0,0,0,0,4,0,0,14,23,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",2,1,0,1,2,1,8,0,0,11,71,3,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",8,0,0,1,2,0,4,0,0,13,71,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,956,        {,4,0,0,0,1,0,0,0,0,5,1,4,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",8,0,0,1,2,0,0,0,0,8,69,5,0.0532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,959,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.0532,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,225,    },0,0,0,0,1,0,6,0,0,6,1,6,0.00339,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,3,0,0,1,0,5,0,0,12,46,1,0.00337,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,4,0,0,1,3,0,0,0,0,5,19,4,0.00273,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,6,1,0,1,3,0,0,2,0,9,21,3,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,2,0,0,1,2,1,12,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,4,2,0,1,3,0,0,0,0,6,22,3,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,2,0,0,1,2,0,6,0,0,8,46,5,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,4,0,0,2,5,0,0,0,0,5,40,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,2,0,0,1,3,1,6,0,0,9,45,1,0.0015,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,10,2,0,0,0,1,0,0,0,13,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,2,0,0,1,3,0,0,4,0,6,36,5,0.00136,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,6,0,0,1,2,1,8,0,0,15,50,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.00125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,127,    },2,0,0,0,1,0,0,4,0,6,1,8,0.00123,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00114,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,955,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,12,0,0,17,51,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,4,0,0,0,0,0,6,0,0,11,48,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.00099,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,4,2,1,1,2,1,0,0,0,9,27,1,0.00088,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,6,0,0,6,45,7,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,924,        int offset = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,35,5,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,930,        return instantLocal;,2,0,0,0,0,1,0,0,0,2,20,4,0.00078,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,295,        return iMillis;,14,2,0,0,0,1,16,2,0,37,15,1,0.00072,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,10,0,0,16,52,3,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,213,                leapYears--;,4,0,0,0,0,0,0,0,0,6,12,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",10,1,0,2,4,0,6,0,0,18,78,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1533,            i = ~i;,8,0,0,0,0,0,0,0,0,11,7,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,200,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1528,            long[] transitions = iTransitions;,6,1,0,1,2,0,0,0,0,7,34,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1572,            i = (i >= 0) ? (i + 1) : ~i;,2,0,0,2,4,0,0,0,0,2,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,140,        int period = (int)(millis >> 32);,2,0,0,2,4,0,4,2,0,8,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,141,        Info[] cache = iInfoCache;,2,0,0,1,2,0,0,0,0,2,26,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,142,        int index = period & cInfoCacheMask;,8,1,0,0,0,0,4,0,0,14,36,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,145,            info = createInfo(millis);,2,0,0,1,2,0,4,2,0,9,26,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,148,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,152,        long periodStart = millis & (0xffffffffL << 32);,10,2,0,1,2,0,0,2,0,14,48,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,153,"        Info info = new Info(iZone, periodStart);",12,1,0,1,2,0,16,2,0,33,41,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,158,            long next = iZone.nextTransition(periodStart);,14,3,0,1,2,0,6,0,0,23,46,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,159,            if (next == periodStart || next > end) {,4,0,0,1,3,0,0,0,0,4,40,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,166,        return info;,10,1,0,0,0,1,0,0,0,11,12,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,178,        private int iStandardOffset = Integer.MIN_VALUE;,10,0,0,0,0,0,14,2,0,27,48,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,181,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,182,            iZoneRef = zone;,6,0,0,0,0,0,0,0,0,7,16,1,0.00056,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,8,2,0,13,45,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,257,    },2,1,0,0,1,0,0,0,0,4,1,6,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,252,        super();,4,1,1,1,2,0,12,2,0,23,8,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,8,2,0,12,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,448,        int year = getYear(millis);,4,0,0,1,2,0,0,0,0,5,27,6,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,107,        if ((base = iBase) != null) {,8,1,1,2,5,0,0,0,0,12,29,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,12,7,0,4,8,0,4,0,0,23,52,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,93,        return,8,0,1,0,0,0,0,2,0,15,6,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",2,0,0,3,6,0,16,0,0,18,115,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",2,1,0,4,8,0,14,0,0,17,89,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",2,0,0,3,6,0,0,0,0,2,97,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,232,        if ((value < lowerBound) || (value > upperBound)) {,14,5,0,3,7,0,0,0,0,19,51,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,233,        return MILLIS_PER_YEAR / 2;,8,5,0,0,0,1,0,0,0,13,27,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,120,        if (isLeapYear(year)) {,4,2,0,2,5,0,4,0,0,11,23,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,0,0,1,2,0,2,0,0,6,56,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,6,2,0,2,4,0,0,0,0,8,64,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,14,2,0,1,4,0,12,0,0,30,61,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,428,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,139,        if (isLeapYear(year)) {,4,0,0,2,5,0,0,0,0,5,23,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,202,        int leapYears = year / 100;,2,1,0,0,0,0,0,0,0,3,27,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,0,0,5,10,1,4,2,0,12,69,1,0.00047,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,284,        return instant;,0,0,0,0,0,1,4,0,0,4,15,6,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,386,"        millis += getTotalMillisByYearMonth(year, month);",4,0,0,1,2,0,0,2,0,7,49,4,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,51,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,52,    },4,0,0,0,1,0,0,0,0,5,1,6,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,360,        return getYearInfo(year).iFirstDayMillis;,14,1,0,1,2,1,18,2,0,37,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,739,        if (info == null || info.iYear != year) {,2,0,0,1,3,0,4,0,0,7,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,8,0,0,16,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",6,1,0,2,4,0,8,2,0,18,76,1,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,108,"                cCache.put(zone, chrono);",4,1,0,1,2,0,0,0,0,5,25,5,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,96,        if (zone == null) {,8,1,0,1,3,0,4,2,0,15,19,1,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,104,        synchronized (cCache) {,4,0,0,1,3,0,0,2,0,6,23,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,112,        return chrono;,8,1,0,0,0,1,0,0,0,10,14,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,17,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,1,0,2,0,6,70,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,288,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,290,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,56,        if (base == null) {,2,0,0,1,3,0,2,2,0,6,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,59,        base = base.withUTC();,2,0,0,1,2,0,4,0,0,7,22,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,60,        if (base == null) {,12,1,0,1,3,0,12,0,0,26,19,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,8,12,0,22,66,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,163,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,167,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,1,2,0,0,0,0,5,57,12,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,169,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,173,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,177,"        fields.era = convertField(fields.era, converted);",8,1,0,1,2,0,16,0,0,26,49,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",2,0,0,1,2,0,6,0,0,8,65,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",10,0,0,1,2,0,4,0,0,15,77,3,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",10,0,0,1,2,0,4,0,0,15,69,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,1,0,1,2,0,4,0,0,9,67,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,197,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,200,        if (field == null || !field.isSupported()) {,2,1,0,2,5,0,6,0,0,9,44,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,201,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,204,            return (DurationField)converted.get(field);,4,0,0,2,4,2,14,2,0,22,43,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,208,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,218,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,224,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,393,            iField = field;,2,1,0,0,0,0,0,0,0,3,15,6,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,394,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,397,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,315,        return iParam;,4,1,0,0,0,1,0,0,0,5,14,7,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,252,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,111,        return iChronology.days();,2,0,0,1,2,1,8,2,0,12,26,3,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,142,        long millis = iUnitMillis;,4,0,0,0,0,0,0,0,0,4,26,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,148,        int hash = (int) (scalar ^ (scalar >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,149,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,17,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,17,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,17,56,        return iChronology.years();,12,0,0,1,2,1,8,0,0,22,27,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,17,58,        return iChronology.weekyears();,8,0,0,1,2,1,8,0,0,17,31,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,95,        return null;,4,1,0,0,0,1,4,0,0,10,12,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,17,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",6,1,0,4,8,0,10,0,0,18,82,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,17,47,    },4,0,0,0,1,0,0,0,0,5,1,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,122,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,1,0,1,2,3,8,12,0,28,106,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,4,0,1,1,2,0,8,4,0,19,48,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,169,        if (getBase().getZone() == DateTimeZone.UTC) {,16,1,0,3,7,0,8,0,0,27,46,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,173,            fields.yearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,50,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,6,1,0,0,1,0,2,2,0,12,54,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,178,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,81,        return INSTANCE_UTC;,10,1,0,0,0,1,0,0,0,11,20,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,146,        return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,5,0.00032,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,45,public final class GregorianChronology extends BasicGJChronology {,2,0,0,0,1,2,0,2,0,6,66,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,148,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,8,0,0,14,39,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,149,    },4,1,0,0,1,0,0,0,0,5,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",2,0,0,3,6,3,0,12,0,17,122,2,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,72,    },4,3,0,0,1,0,6,2,0,15,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,100,"        return getInstance(zone, 4);",2,0,0,1,2,1,10,0,0,12,28,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,111,        if (zone == null) {,4,1,0,1,3,0,2,0,0,7,19,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,115,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",2,1,0,1,2,0,4,0,0,9,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,934,        },4,0,0,0,1,0,0,0,0,4,1,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",12,1,0,1,2,0,10,4,0,29,69,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,2,0,0,0,0,0,6,0,0,9,31,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,601,        },2,0,0,0,1,0,2,2,0,7,1,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,8,0,0,0,0,0,0,2,0,11,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,6,0,0,14,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,4,0,0,10,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,0,0,0,3,126,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,4,0,0,1,2,0,6,0,0,12,35,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,2,1,1,2,0,10,4,0,22,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,10,1,0,1,3,0,6,2,0,20,31,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,230,        return chrono;,10,5,0,0,0,1,4,0,0,20,14,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0,0,0,1,2,0,14,0,0,14,44,8,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,8,1,0,0,0,0,8,0,0,19,33,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,464,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,473,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,10,1,0,1,2,0,0,2,0,13,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,505,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,521,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,534,            fields.yearOfCentury = new ImpreciseCutoverField(,8,4,0,0,1,0,0,0,0,12,49,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,537,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,541,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,4,0,0,4,47,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,549,            fields.weekyears = fields.weekyear.getDurationField();,2,1,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,558,            fields.dayOfMonth = cf;,6,0,0,0,0,0,8,0,0,15,23,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,133,        return instant;,8,2,0,0,0,1,2,0,0,12,15,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,84,        return value;,4,0,0,0,0,1,0,0,0,5,13,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,221,        if (relativeYear <= 0) {,24,11,0,1,3,0,0,0,0,37,24,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,2,0,2,4,0,0,0,0,7,89,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,253,        return MILLIS_PER_YEAR / 2;,4,1,0,0,0,1,0,0,0,5,27,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,133,        int thisWeekyear = get( instant );,4,1,0,1,2,0,2,4,0,11,34,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,140,        int thisDow = iChronology.getDayOfWeek(instant);,8,0,0,1,2,0,0,2,0,11,48,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,155,        if ( setToWeek > maxOutWeeks ) {,8,0,0,1,3,0,0,0,0,9,32,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,162,        long workInstant = instant; // Get a copy,16,2,0,0,0,0,14,6,0,40,41,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,179,        if ( workWoyYear < year ) {,8,1,0,1,3,0,4,0,0,14,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,10,1,0,1,2,0,10,2,0,23,64,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",4,1,0,2,4,0,10,0,0,16,66,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,60,        return iChronology.getWeekyear(instant);,2,0,0,1,2,2,0,0,0,3,40,2,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,494,"        int week = getWeekOfWeekyear(instant, year);",2,1,0,1,2,0,6,0,0,9,44,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,539,            if (daysSince19700101 < -3) {,10,0,0,1,3,0,0,2,0,14,29,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,239,        return instant;,2,1,0,0,0,1,0,0,0,3,15,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),10,3,0,1,2,1,0,0,0,13,71,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,4,0,0,1,2,0,0,0,0,5,45,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,0,0,0,0,3,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,521,        if (instant >= firstWeekMillis2) {,4,1,0,1,3,0,0,0,0,5,34,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,96,            return instant - instant % iUnitMillis - iUnitMillis;,2,0,0,0,0,1,0,0,0,2,53,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,0.00101,0,0,-1
defect4j,time,org/joda/time/Instant,18,120,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,129,        synchronized (cCache) {,4,0,0,1,3,0,4,0,0,9,23,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,131,            if (chronos == null) {,6,1,0,1,3,0,0,0,0,8,22,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,149,                chronos[minDaysInFirstWeek - 1] = chrono;,6,2,1,1,2,0,0,0,0,11,41,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,152,        return chrono;,6,0,0,0,0,1,10,2,0,18,14,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,245,        return MAX_YEAR;,22,11,0,0,0,1,4,0,0,37,16,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,257,        return MILLIS_PER_MONTH;,4,0,0,0,0,1,6,2,0,13,24,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,265,        if (getBase() == null) {,2,0,0,2,5,0,0,0,0,2,24,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,266,            super.assemble(fields);,4,0,1,1,2,0,0,4,0,10,23,1,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,268,"            fields.year = new SkipDateTimeField(this, fields.year);",10,0,0,1,2,0,6,2,0,19,55,3,0.00096,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,65,        super(field);,22,1,0,1,2,0,12,0,0,37,13,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,67,        int min = super.getMinimumValue();,6,0,0,1,2,0,4,0,0,10,34,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,69,            iMinValue = min - 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,75,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,76,    },2,0,1,0,1,0,0,2,0,7,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,52,"        this(field, null);",2,0,0,1,2,0,0,0,0,2,18,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,63,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,66,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,68,    },2,0,0,0,1,0,6,0,0,9,1,9,0.00087,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00075,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",10,0,0,0,1,0,6,2,0,20,75,1,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,177,        int millisOfDay = getMillisOfDay(instant);,2,0,0,1,2,0,4,0,0,6,42,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00071,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,551,        if (instant >= 0) {,6,2,0,1,3,0,0,0,0,8,19,1,0.0007,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,219,    },4,0,0,0,1,0,0,0,0,5,1,5,0.00069,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,214,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",4,0,0,3,6,0,0,0,0,5,97,12,0.00068,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.00066,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,18,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,2,0,0,2,50,7,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,449,"        int month = getMonthOfYear(millis, year);",8,1,0,1,2,0,6,0,0,15,41,3,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,54,        return iChronology.getYear(instant);,2,0,0,1,2,1,6,0,0,8,36,1,0.00065,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,221,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,93,        return,10,1,0,0,0,0,2,0,0,14,6,3,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,233,        return MILLIS_PER_YEAR / 2;,4,2,0,0,0,1,0,0,0,6,27,3,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,18,139,        if (isLeapYear(year)) {,6,0,0,2,5,0,4,4,0,14,23,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,1,0,1,2,0,2,0,0,7,56,3,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,428,        return year;,12,0,0,0,0,1,4,4,0,22,12,1,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,202,        int leapYears = year / 100;,6,1,0,0,0,0,0,0,0,7,27,1,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,10,4,0,2,4,1,0,0,0,14,90,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,8,0,5,10,1,0,0,0,14,69,4,0.00062,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.00061,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,18,51,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,8,1,1,1,2,0,2,4,0,17,50,3,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,739,        if (info == null || info.iYear != year) {,4,4,0,1,3,0,0,0,0,9,41,5,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,771,            iYear = year;,4,0,0,0,0,0,0,0,0,5,13,5,0.00059,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,255,        return chrono;,4,0,0,0,0,1,0,0,0,4,14,4,0.00053,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,4,0,0,1,2,0,0,2,0,7,55,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00051,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,6,2,0,10,49,7,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,178,        if (zone == null) {,8,0,0,1,3,0,0,0,0,9,19,1,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,182,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.0005,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,252,        if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,4,0.00047,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,18,90,        return iField.getRangeDurationField();,4,3,0,1,2,1,4,0,0,11,38,3,0.00046,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,18,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00046,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,147,                        },2,0,0,0,1,0,0,0,0,3,1,4,0.00046,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,133,        DateTimeZone zone = cDefault;,4,0,0,0,0,0,0,2,0,6,29,4,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,134,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,136,                zone = cDefault;,4,0,0,0,0,0,0,0,0,5,16,8,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,138,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,141,"                            String id = System.getProperty(""user.timezone"");",2,0,0,1,2,0,4,2,0,9,48,14,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,142,                            if (id != null) {  // null check avoids stack overflow,4,1,0,1,3,0,4,0,0,10,54,5,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,157,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,18,161,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00045,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,18,122,        return iRangeField;,4,0,0,0,0,1,2,0,0,6,19,1,0.00045,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,45,public final class GregorianChronology extends BasicGJChronology {,2,0,0,0,1,2,0,2,0,6,66,1,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,148,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,8,0,0,14,39,3,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",2,0,0,3,6,3,0,12,0,17,122,2,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,111,        if (zone == null) {,4,1,0,1,3,0,2,0,0,7,19,1,0.00045,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,4,1,0,1,2,0,8,0,0,15,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,4,1,0,3,6,0,12,2,0,20,29,3,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,10,1,0,5,10,0,4,0,0,17,55,1,0.00244,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,2,0,0,1,2,1,12,2,0,17,32,1,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,8,0,0,1,3,0,6,0,0,17,23,3,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,6,0,0,0,0,0,14,0,0,20,26,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,10,1,0,1,3,0,4,2,0,18,31,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0,0,0,0,1,0,10,0,0,10,1,7,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,4,0,0,1,2,0,10,2,0,16,50,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,18,0,0,19,78,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,2,0,0,1,2,1,8,0,0,10,22,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,1,0,1,2,0,6,0,0,13,54,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,16,0,0,17,29,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,83,                digits = 4;,2,0,0,0,0,0,6,0,0,9,11,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,6,2,0,10,43,7,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,16,4,0,43,65,1,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,8,0,0,14,79,3,0.00235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,8,2,0,1,3,0,4,2,0,18,19,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,12,1,0,1,3,0,12,2,0,30,31,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,28,6,0,1,3,0,10,0,0,46,18,1,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,8,2,0,15,36,3,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,6,0,0,0,0,1,18,2,0,27,30,1,0.00199,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.00193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,2,0,0,0,0,0,0,0,0,2,22,7,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,2,0,0,3,6,0,4,0,0,7,32,11,0.00187,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,10,3,0,1,3,0,12,0,0,25,22,1,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,10,2,0,1,3,0,0,0,0,12,24,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,0,0,0,2,38,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",2,0,0,2,4,1,10,0,0,12,62,6,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,6,1,0,1,2,0,0,0,0,7,8,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,4,0,1,1,3,0,6,0,0,15,21,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0,0,0,0,0,0,0,0,0,1,23,7,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,4,1,0,0,0,1,0,0,0,5,18,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,18,0,0,1,3,0,12,0,0,31,22,1,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2106,            return est;,4,1,0,0,0,1,0,0,0,5,11,4,0.00182,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00178,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2085,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,10,0,0,12,43,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00173,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,164,        if (instant == null) {,12,7,0,1,3,0,0,0,0,21,22,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1687,        return sme;,6,0,0,0,0,1,0,0,0,7,11,1,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1672,            mhe = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1662,        if (hde == null) {,6,1,0,1,3,0,0,0,0,9,18,3,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1663,            hde = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,0,0,5,36,4,0.00168,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,149,        return instant.getMillis();,8,1,0,1,2,1,4,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,50,        if (value < 0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,62,        if (value < 10) {,4,1,0,1,3,0,0,2,0,8,17,3,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,92,    },12,1,0,0,1,0,4,2,0,21,1,3,0.00159,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1604,        if (dme == null) {,0,0,0,1,3,0,6,0,0,6,18,5,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1605,            dme = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,11,36,3,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,140,        int offset = zone.getOffsetFromLocal(instant);,8,0,0,1,2,0,4,0,0,13,46,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,142,        if (offset != zone.getOffset(instant)) {,2,1,0,2,5,0,6,0,0,9,40,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,188,                if (isLeapYear(year)) {,2,1,0,2,5,0,8,0,0,12,23,4,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1594,        if (mye == null) {,10,6,0,1,3,0,4,0,0,21,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,170,            periodStart = next;,12,1,0,0,0,0,0,4,0,20,19,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",8,1,0,2,4,0,10,0,0,21,57,3,0.00149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",8,0,0,2,4,1,12,0,0,21,69,3,0.00147,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.00146,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,935,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,6,0,0,11,45,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,936,        if (iChrono != null) {,2,0,0,1,3,0,2,0,0,4,22,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",6,4,0,2,4,1,4,0,0,14,68,1,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,8,0,0,8,29,5,0.00139,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,885,        final int offsetAdjusted = getOffset(instantAdjusted);,6,0,0,1,2,1,4,0,0,12,54,3,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,19,887,        if (offsetLocal != offsetAdjusted) {,4,0,0,1,3,0,6,2,0,13,36,3,0.00136,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00133,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,12,2,0,23,33,1,0.00132,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,4,0,0,17,43,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,18,0,0,18,58,5,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2736,            if (array != null) {,10,1,0,1,3,0,2,0,0,14,20,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2741,        },2,0,0,0,1,0,4,2,0,9,1,6,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,551,            } else if (iMode == 's') {,8,1,0,1,4,0,14,2,0,28,26,1,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,554,                offset = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,4,0,0,6,46,10,0.00128,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.00128,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,212,"        return append0(formatter.getPrinter(), formatter.getParser());",4,3,0,3,6,1,10,0,0,17,62,1,0.00126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,153,        return iPrinter;,2,1,0,0,0,1,0,0,0,3,16,5,0.00123,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,346,        iElementPairs.add(printer);,2,1,0,1,2,0,0,0,0,3,27,4,0.00123,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1543,            return iTailZone.getOffset(instant);,2,0,0,1,2,1,8,0,0,10,36,1,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1141,            return true;,8,0,0,0,0,1,4,0,0,14,12,3,0.0012,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1107,                if (printer != null) {,2,0,0,1,3,1,4,0,0,7,22,4,0.0012,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1304,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,4,0,0,7,46,16,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1311,                start = startRecurrence.next,2,0,0,0,0,0,4,0,0,7,28,7,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1319,            },2,0,0,0,1,0,4,0,0,7,1,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1330,            },4,0,0,0,1,0,0,0,0,5,1,4,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1332,            return (start > end) ? startRecurrence : endRecurrence;,16,1,0,1,2,1,4,0,0,22,55,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,114,            yearToUse = thisYear + (monthToUse / iMax);,8,2,0,1,2,0,0,0,0,11,43,6,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,8,0,0,11,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",4,1,1,2,4,0,0,0,0,7,52,8,0.00119,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,578,"                    next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,6,0,0,9,34,9,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,103,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,113,        if (monthToUse >= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,138,        if (dayToUse > maxDay) {,4,1,0,1,3,0,0,0,0,5,24,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,146,        return datePart + timePart;,4,1,0,0,0,1,0,0,0,5,27,4,0.00118,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,92,        if (months == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00118,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1580,            if (instant < end) {,4,2,0,1,3,0,8,0,0,14,20,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1583,            return iTailZone.nextTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1199,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1200,            Recurrence startRecurrence = iStartRecurrence;,2,1,0,0,0,0,8,0,0,11,46,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1201,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1208,                if (instant > 0 && start < 0) {,2,0,0,1,3,0,12,0,0,15,31,8,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1223,                if (instant > 0 && end < 0) {,4,3,0,1,3,0,0,0,0,7,29,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1235,            return (start > end) ? end : start;,12,2,1,1,2,1,0,0,0,17,35,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,573,"                next = setDayOfWeek(chrono, next);",4,0,0,1,2,1,6,0,0,12,34,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,4,0,0,2,4,0,8,0,0,12,48,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,549,            if (iMode == 'w') {,10,3,0,1,3,0,0,0,0,15,19,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,558,            instant += offset;,6,1,0,0,0,0,4,0,0,12,18,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,563,"            next = chrono.millisOfDay().set(next, 0);",2,0,0,2,4,0,8,2,0,12,41,6,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,1,0,2,4,0,4,0,0,7,52,3,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,567,            if (iDayOfWeek == 0) {,2,1,0,1,3,0,0,0,0,3,22,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,583,            return next - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,706,            if (iDayOfMonth >= 0) {,4,1,0,1,3,0,4,0,0,9,23,1,0.00116,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,776,            return iSaveMillis;,2,1,0,0,0,1,8,0,0,11,19,3,0.00116,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,61,        int thisYear = get(instant);,2,0,0,1,2,0,0,0,0,2,28,4,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,0.00112,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,19,58,        if (years == 0) {,8,2,0,1,3,0,0,4,0,14,17,1,0.00112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,396,        if (fieldType == null) {,6,2,0,1,3,0,0,0,0,8,24,4,0.0011,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,1,0,0,1,1,0,0,0,5,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,8,1,0,0,0,0,0,0,0,10,63,6,0.00108,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,359,        return append0(new CharacterLiteral(c));,4,0,0,2,4,1,0,0,0,4,40,6,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2580,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2581,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2582,                int printEst = 0;,2,0,0,0,0,0,6,0,0,8,17,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2583,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,0,2,4,0,0,0,0,2,63,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2585,                    printEst += printer.estimatePrintedLength();,6,0,0,1,2,0,4,0,0,12,44,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2586,                    iPrinters[i] = printer;,10,0,1,1,2,0,4,0,0,20,23,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2588,                iPrintedLengthEstimate = printEst;,6,0,0,0,0,0,4,0,0,11,34,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2595,                int size = parserList.size();,2,0,0,1,2,0,4,0,0,6,29,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2596,                iParsers = new DateTimeParser[size];,4,0,0,1,2,0,0,0,0,5,36,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2597,                int parseEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2598,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,4,0,0,14,28,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2601,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2603,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2715,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2716,                if (element instanceof DateTimePrinter) {,4,1,0,1,3,0,0,2,0,7,41,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2717,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2720,                        printerList.add(element);,8,0,0,1,2,0,0,0,0,10,25,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2725,                if (element instanceof DateTimeParser) {,2,0,0,1,3,0,0,0,0,2,40,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2726,                    if (element instanceof Composite) {,4,0,0,1,3,0,0,2,0,6,35,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1426,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,4,0,0,7,37,7,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1282,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1129,                return ((Composite)f).isPrinter();,2,0,0,3,6,1,2,2,0,6,34,9,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2701,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2705,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1117,                f = new Composite(iElementPairs);,4,0,0,1,2,0,0,2,0,7,33,8,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2571,            List<Object> printerList = new ArrayList<Object>();,4,0,0,1,2,0,0,8,0,12,51,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2572,            List<Object> parserList = new ArrayList<Object>();,6,1,0,1,2,0,0,8,0,15,50,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2591,            if (parserList.size() <= 0) {,4,2,0,2,5,0,4,0,0,10,29,1,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2713,            int size = elementPairs.size();,6,1,1,1,2,0,0,2,0,12,31,5,0.00105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,105,        DateTimePrinter printer = null;,2,0,0,0,0,0,0,2,0,4,31,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,0,2,0,7,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,109,        DateTimeParser parser = null;,4,0,0,0,0,2,0,6,0,12,29,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,111,            parser = (DateTimeParser) f;,12,1,0,1,2,1,4,4,0,23,28,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,114,"            return new DateTimeFormatter(printer, parser);",4,0,0,1,2,1,0,2,0,6,46,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,108,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,109,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,110,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,111,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,112,        iChrono = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,340,        return this;,2,0,0,0,0,1,0,0,0,2,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1137,        if (f instanceof DateTimeParser) {,10,1,0,1,3,0,2,2,0,15,34,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,4,0,0,7,29,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1102,        if (f == null) {,12,2,0,1,3,0,0,0,0,16,16,3,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1120,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1123,        return f;,4,0,0,0,0,1,0,0,0,4,9,5,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,85,    },2,2,0,0,1,0,4,0,0,9,1,4,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,70,        return sum;,2,1,0,0,0,1,0,0,0,3,11,6,0.00101,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,64,        int sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,104,        long addition = value * iUnitMillis;  // safe,6,1,0,0,0,0,0,0,0,7,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,19,105,"        return FieldUtils.safeAdd(instant, addition);",2,0,0,1,2,1,16,0,0,18,45,3,0.00096,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,82,        long sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,23,5,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,10,5,0,3,7,0,6,0,0,21,45,3,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,88,        return sum;,6,1,0,0,0,1,0,0,0,7,11,3,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,480,            chronology = DateTimeUtils.getChronology(chronology);,6,1,0,1,2,0,6,0,0,14,53,1,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00084,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1540,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.0008,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,19,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,2,0,0,8,52,8,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,19,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,2,1,0,2,4,1,4,0,0,7,54,6,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,1,2,0,10,2,0,13,53,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,294,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",4,0,0,1,2,0,14,2,0,20,59,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",10,0,0,1,2,0,12,6,0,28,61,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,298,        if (thisDom > maxDom) {,4,1,0,1,3,0,0,0,0,5,23,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,458,"        int month = getMonthOfYear(millis, year);",12,0,0,1,2,0,12,2,0,27,41,3,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",2,0,0,2,4,0,10,0,0,12,88,3,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.00056,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,177,        int millisOfDay = getMillisOfDay(instant);,6,0,0,1,2,0,4,2,0,13,42,3,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,2,0,0,1,2,0,6,0,0,9,43,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1528,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1529,"            int i = Arrays.binarySearch(transitions, instant);",4,0,0,1,2,0,0,0,0,4,50,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1570,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1571,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1572,            i = (i >= 0) ? (i + 1) : ~i;,8,2,0,2,4,0,0,0,0,12,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,19,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,149,        Info[] cache = iInfoCache;,4,0,0,1,2,0,0,2,0,6,26,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,150,        int index = period & cInfoCacheMask;,6,1,0,0,0,0,0,0,0,7,36,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,154,            cache[index] = info;,4,1,1,1,2,0,0,0,0,10,20,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,156,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,160,        long periodStart = millis & (0xffffffffL << 32);,4,2,0,1,2,0,0,0,0,6,48,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,161,"        Info info = new Info(iZone, periodStart);",8,0,0,1,2,0,0,8,0,17,41,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,163,        long end = periodStart | 0xffffffffL;,6,1,0,0,0,0,0,0,0,7,37,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,166,            long next = iZone.nextTransition(periodStart);,4,0,0,1,2,0,12,2,0,18,46,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,167,            if (next == periodStart || next > end) {,8,3,0,1,3,0,0,0,0,11,40,6,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,174,        return info;,4,0,1,0,0,1,0,0,0,9,12,3,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00055,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,252,        super();,2,1,0,1,2,0,0,2,0,5,8,1,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,253,        iChronology = checkChronology(chronology);,6,0,0,1,2,0,4,2,0,14,42,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,75,5,0.00051,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,19,131,        return iRange - 1;,2,1,0,0,0,1,0,0,0,3,18,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,47,        return iChronology.getDayOfMonth(instant);,12,1,0,1,2,1,6,0,0,21,42,3,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,10,1,1,1,2,1,4,0,0,18,50,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,468,        long dateMillis = getYearMillis(year);,4,0,0,1,2,0,4,0,0,8,38,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",4,1,0,1,2,0,14,0,0,20,53,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,19,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,19,107,        if ((base = iBase) != null) {,14,1,0,2,5,0,4,2,0,23,29,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.0005,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,19,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,19,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.00049,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,        int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,        if (tokenLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,                    int maxDigits = 9;,2,0,0,0,0,0,0,0,0,2,18,10,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,                    switch (c) {,4,0,0,1,3,0,10,0,0,14,12,3,0.0102,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,359,        if (text.length() <= sampleLen + 3) {,4,2,0,2,5,0,8,0,0,14,37,3,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,                if (tokenLen == 2) {,6,1,0,1,3,0,0,2,0,9,20,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,        Chronology chrono = selectChronology(null);,2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,                builder.appendDayOfMonth(tokenLen);,2,0,0,1,2,0,14,0,0,17,35,1,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.005,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,                    i--;,2,0,0,0,0,0,4,0,0,7,4,3,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,                String sub = token.substring(1);,2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,                c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,                    i++;,2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,                char peek = pattern.charAt(i + 1);,8,1,0,1,2,0,8,0,0,17,34,3,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,        int length = pattern.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,        int[] indexRef = new int[1];,0,0,1,2,4,0,0,0,0,3,28,11,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,16,0,0,19,45,3,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,        int i = indexRef[0];,2,0,0,1,2,0,6,0,0,9,20,8,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,        int length = pattern.length();,6,0,0,1,2,0,4,0,0,11,30,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,        char c = pattern.charAt(i);,6,1,0,1,2,0,6,0,0,14,27,7,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,10,8,0,1,3,0,4,0,0,26,51,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",6,0,0,1,2,3,0,14,0,25,112,1,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,            return position + 1;,2,0,0,0,0,1,0,0,0,2,20,5,0.00362,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,            if (a != b) {,12,2,0,1,3,0,0,4,0,19,13,1,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,            if (position >= text.length()) {,2,1,0,2,5,0,8,0,0,11,32,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1322,            },10,1,0,0,1,0,0,4,0,15,1,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1329,            if (length >= 9) {,6,0,1,1,3,0,6,2,0,19,18,1,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1339,                    value = text.charAt(i++) - '0';,2,0,0,1,2,0,6,0,0,9,31,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1342,                },10,0,0,0,1,0,8,4,0,22,1,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1343,                position += length;,8,0,0,0,0,0,0,2,0,11,19,4,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1344,                while (i < position) {,10,3,0,1,3,0,0,0,0,14,22,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1353,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",2,0,0,3,6,0,8,2,0,12,62,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,262,        int savedFieldsCount = iSavedFieldsCount;,2,0,1,0,0,0,6,0,0,13,41,8,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,468,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,469,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,471,            iLocale = null;,6,0,0,0,0,0,0,0,0,8,15,1,0.00326,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1295,            int length = 0;,10,4,0,0,0,0,0,0,0,14,15,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2682,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2691,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.00315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,119,        super();,2,0,1,1,2,0,0,0,0,6,8,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,120,        chrono = DateTimeUtils.getChronology(chrono);,4,0,0,1,2,0,0,0,0,5,45,5,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,121,        iMillis = instantLocal;,4,1,0,0,0,0,0,0,0,6,23,6,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,4,0,0,12,58,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,125,        iPivotYear = pivotYear;,14,2,0,0,0,0,2,0,0,20,23,3,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,920,        DateTimeParser parser = iParser;,4,0,0,0,0,0,0,2,0,6,32,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,921,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00291,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,0,0,0,3,29,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,1,0,5,10,0,0,0,0,11,55,1,0.00247,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,78,        } else {,8,2,0,0,2,0,0,0,0,11,8,6,0.00247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1180,            buf.append(iValue);,2,0,0,1,2,0,10,0,0,13,19,4,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1181,        },2,1,0,0,1,0,4,0,0,7,1,1,0.00245,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2608,            DateTimePrinter[] elements = iPrinters;,10,1,0,1,2,0,0,2,0,14,39,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2609,            if (elements == null) {,8,2,0,1,3,0,10,0,0,21,23,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2613,            if (locale == null) {,2,2,0,1,3,0,8,0,0,12,21,4,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2618,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2619,            for (int i = 0; i < len; i++) {,10,2,0,1,3,0,0,0,0,13,31,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2622,        },12,2,0,0,1,0,0,2,0,16,1,2,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,1,0,2,4,0,8,0,0,12,76,1,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,14,0,0,3,6,0,24,4,0,44,78,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,582,"        printTo(buf, instant);",14,6,0,1,2,0,10,0,0,30,22,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,6,0,0,13,54,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,460,"        printTo(buf, millis, chrono);",6,0,0,1,2,0,8,0,0,15,29,3,0.0024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,617,        DateTimePrinter printer = requirePrinter();,6,1,0,1,2,0,4,2,0,13,43,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,623,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,8,0,0,18,40,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,65,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,80,            if (value < 1000) {,8,1,0,1,3,0,6,0,0,17,19,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.00236,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1541,                return iWallOffsets[i - 1];,2,1,1,1,2,1,0,0,0,5,27,8,0.00217,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2602,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.002,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,66,            buf.append((char)(value + '0'));,8,1,0,3,6,2,10,6,0,28,32,1,0.00193,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,67,        } else if (value < 100) {,8,1,0,1,4,0,0,0,0,10,25,1,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,656,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,660,        return printer;,2,0,0,0,0,1,0,0,0,2,15,5,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00164,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00164,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,910,        return offsetAdjusted;,6,1,0,0,0,1,0,0,0,7,22,3,0.00154,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,882,        final int offsetLocal = getOffset(instantLocal);,4,1,0,1,2,1,4,0,0,10,48,3,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,884,        final long instantAdjusted = instantLocal - offsetLocal;,6,0,0,0,0,0,0,0,0,7,56,5,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,0,0,0,0,2,54,7,0.00152,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,520,                    return chronology.minuteOfHour();,2,0,0,1,2,1,4,0,0,6,33,4,0.00145,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",4,0,0,2,4,1,0,0,0,5,66,4,0.00144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,935,        chrono = DateTimeUtils.getChronology(chrono);,14,0,0,1,2,0,6,2,0,25,45,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,939,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,942,        return chrono;,4,0,1,0,0,1,4,4,0,14,14,3,0.0014,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,31,    private static final double LOG_10 = Math.log(10);,10,0,0,1,2,3,8,0,0,22,50,1,0.0014,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",8,0,0,2,4,1,4,0,0,13,67,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,496,                    return chronology.monthOfYear();,2,0,1,1,2,1,0,0,0,6,32,8,0.00133,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,10,0,0,10,60,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,454,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,10,0,0,12,38,3,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.00129,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",6,0,0,2,4,1,2,2,0,11,73,7,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,405,        if (minDigits <= 1) {,2,1,0,1,3,0,10,0,0,13,21,4,0.0011,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1288,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,359,        return append0(new CharacterLiteral(c));,2,0,0,2,4,1,2,2,0,6,40,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1170,            iValue = value;,2,1,0,0,0,0,0,0,0,3,15,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1171,        },4,0,0,0,1,0,0,0,0,5,1,5,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2574,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2576,                int printEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2577,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,16,0,0,26,28,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2579,                    printEst += printer.estimatePrintedLength();,4,0,0,1,2,0,8,0,0,13,44,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2580,                    iPrinters[i] = printer;,2,0,1,1,2,0,0,0,0,7,23,9,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2582,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2589,                int size = parserList.size();,2,0,0,1,2,0,0,0,0,2,29,4,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2592,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2709,                Object element = elementPairs.get(i);,2,0,0,1,2,0,8,2,0,12,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2710,                if (element instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,41,8,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2711,                    if (element instanceof Composite) {,6,0,0,1,3,0,0,2,0,9,35,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2714,                        printerList.add(element);,2,0,0,1,2,0,10,2,0,14,25,1,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2720,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1430,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1425,"            super(fieldType, maxParsedDigits, signed);",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1427,        },4,1,0,0,1,0,8,0,0,13,1,1,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1284,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1139,                return ((Composite)f).isParser();,8,0,0,3,6,1,4,0,0,13,33,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2695,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2699,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1117,                f = new Composite(iElementPairs);,6,1,0,1,2,0,4,2,0,15,33,3,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2565,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2566,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2570,            if (printerList.size() <= 0) {,2,1,0,2,5,0,4,0,0,7,30,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2585,            if (parserList.size() <= 0) {,8,0,0,2,5,0,4,0,0,13,29,4,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2708,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,105,        DateTimePrinter printer = null;,4,0,0,0,0,0,0,2,0,6,31,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,6,2,0,13,30,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,109,        DateTimeParser parser = null;,2,0,0,0,0,0,0,2,0,4,29,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,113,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,109,        iParser = parser;,6,0,0,0,0,0,0,0,0,7,17,3,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,110,        iLocale = null;,2,0,0,0,0,0,8,0,0,11,15,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,114,        iPivotYear = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1127,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1128,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1137,        if (f instanceof DateTimeParser) {,2,0,0,1,3,0,0,2,0,4,34,5,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1138,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1100,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1102,        if (f == null) {,4,1,0,1,3,0,0,2,0,7,16,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1116,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1120,            iFormatter = f;,8,0,0,0,0,0,0,0,0,10,15,1,0.00102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00095,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,20,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00095,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1540,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00089,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1576,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00087,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,295,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00079,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00069,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,0,0,11,54,4,0.00068,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,86,        return getInstance(DateTimeZone.getDefault());,2,3,0,2,4,1,6,0,0,11,46,3,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1533,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,205,                if (iOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,7,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,2,0,0,1,2,0,0,0,0,2,43,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,20,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1529,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1530,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.00064,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1570,            long[] transitions = iTransitions;,4,0,0,1,2,0,0,0,0,4,34,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1572,            i = (i >= 0) ? (i + 1) : ~i;,12,2,0,2,4,0,6,0,0,23,28,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,185,        private int iOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,40,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,186,        private int iStandardOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,48,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,189,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,190,            iZoneRef = zone;,4,0,0,0,0,0,0,0,0,5,16,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,191,        },2,0,0,0,1,0,2,0,0,5,1,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,149,        Info[] cache = iInfoCache;,6,0,0,1,2,0,0,2,0,8,26,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,150,        int index = period & cInfoCacheMask;,8,1,0,0,0,3,4,4,0,20,36,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,151,        Info info = cache[index];,2,0,1,1,2,0,4,2,0,12,25,1,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,153,            info = createInfo(millis);,2,0,0,1,2,0,4,0,0,7,26,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,154,            cache[index] = info;,2,0,1,1,2,0,0,0,0,7,20,6,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,156,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,160,        long periodStart = millis & (0xffffffffL << 32);,4,2,0,1,2,0,0,0,0,6,48,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,161,"        Info info = new Info(iZone, periodStart);",6,0,0,1,2,0,0,4,0,10,41,4,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,163,        long end = periodStart | 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,37,5,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,164,        Info chain = info;,8,3,0,0,0,0,0,2,0,13,18,3,0.00063,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,167,            if (next == periodStart || next > end) {,8,3,0,1,3,0,0,0,0,11,40,6,0.00063,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,253,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,4,4,0,13,42,1,0.00062,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,75,5,0.00062,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,20,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.0006,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,4,0,0,1,2,1,0,0,0,5,43,4,0.00059,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,54,        return iChronology.getYear(instant);,2,1,0,1,2,1,14,0,0,17,36,1,0.00058,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,468,        long dateMillis = getYearMillis(year);,8,1,0,1,2,0,4,0,0,14,38,1,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,14,2,0,4,8,0,8,2,0,27,52,3,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,241,        return (1970L * MILLIS_PER_YEAR) / 2;,6,3,0,1,2,1,6,0,0,16,37,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,2,0,0,1,2,0,2,0,0,4,56,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,16,0,0,16,35,3,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0,0,0,1,4,0,10,0,0,10,61,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,428,        return year;,4,0,0,0,0,1,0,0,0,4,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,202,        int leapYears = year / 100;,4,1,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,2,0,6,23,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,14,5,0,2,4,1,0,0,0,19,90,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,20,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,10,8,0,5,10,1,0,0,0,20,69,1,0.00055,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.00054,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,0,2,0,5,49,6,0.00054,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,20,284,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00054,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,6,1,1,1,2,0,0,2,0,11,50,4,0.00052,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,739,        if (info == null || info.iYear != year) {,8,0,0,1,3,0,4,0,0,13,41,4,0.00052,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,743,        return info;,2,0,0,0,0,1,4,0,0,6,12,3,0.00052,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,771,            iYear = year;,6,0,0,0,0,0,8,0,0,15,13,1,0.00052,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,20,772,            iFirstDayMillis = firstDayMillis;,12,0,0,0,0,0,0,0,0,15,33,1,0.00052,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,20,51,        super();,4,1,0,1,2,0,4,0,0,10,8,7,0.00052,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",2,0,0,2,4,0,8,2,0,13,76,8,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,4,2,0,2,4,0,6,0,0,12,66,5,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,101,        if (chrono != null && chrono.getZone() == zone) {,6,4,0,2,5,0,8,0,0,18,49,3,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,104,        synchronized (cCache) {,4,1,0,1,3,0,0,0,0,5,23,3,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,112,        return chrono;,10,0,0,0,0,1,0,0,0,11,14,1,0.00048,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,20,255,        return chrono;,4,0,1,0,0,1,0,0,0,8,14,1,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,20,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,8,0,0,2,4,1,0,0,0,8,70,5,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,82,"        super(base, zone);",6,1,0,1,2,0,0,0,0,7,18,3,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,56,        if (base == null) {,12,1,0,1,3,0,4,2,0,20,19,3,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,60,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,66,"        return new ZonedChronology(base, zone);",4,0,0,1,2,1,0,2,0,6,39,5,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,86,        return (DateTimeZone)getParam();,2,0,0,2,4,1,2,2,0,6,32,1,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,0,12,0,14,66,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,158,"        fields.centuries = convertField(fields.centuries, converted);",12,0,0,1,2,0,4,2,0,20,61,3,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,159,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,163,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,166,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,20,168,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,10,2,0,0,0,0,0,0,0,12,59,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,4,1,0,1,3,0,8,0,0,14,18,3,0.0597,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,12,3,0,1,3,0,4,0,0,19,61,1,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,4,1,0,3,6,1,16,0,0,21,84,1,0.04762,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,2,1,0,0,0,1,6,0,0,11,13,4,0.04167,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",4,0,0,1,2,1,12,0,0,18,36,3,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,14,4,0,1,3,0,0,0,0,19,32,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.0396,0,0,-1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",10,0,0,2,4,1,4,4,0,18,68,1,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",6,0,0,2,4,1,8,0,0,15,69,3,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,1,0,2,4,1,8,0,0,11,68,6,0.03571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,10,5,0,3,7,0,6,0,0,21,53,1,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,14,0,0,16,77,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,10,2,0,0,0,1,0,0,0,13,32,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,2,0,0,0,0,1,6,0,0,8,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,4,0,0,5,26,1,0.01914,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,2,1,0,1,2,0,0,0,0,3,37,7,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,16,7,0,2,4,1,12,2,0,42,79,1,0.01762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,8,1,0,1,2,1,0,0,0,10,28,4,0.01606,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,28,4,0,1,3,0,20,0,0,57,26,1,0.01575,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,2,0,0,2,4,1,4,2,0,8,58,5,0.01493,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,2,1,0,0,0,0,8,0,0,11,28,5,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,0,0,3,7,0,20,2,0,27,53,3,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,8,1,0,0,0,1,0,2,0,11,14,1,0.01476,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,6,1,0,1,2,1,4,0,0,11,26,1,0.01389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,4,4,0,1,3,0,8,0,0,16,16,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,4,1,0,1,3,0,6,0,0,11,17,1,0.0137,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,324,        return iType.getFieldType(index);,6,4,0,1,2,1,10,0,0,21,33,3,0.01201,0,0,-1
defect4j,time,org/joda/time/Period,22,298,"        super(0L, null, null);",6,0,0,1,2,0,4,0,0,11,22,3,0.00955,0,0,-1
defect4j,time,org/joda/time/Period,22,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,0.00955,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,115,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00952,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,266,            switch (iOrdinal) {,6,1,0,1,3,0,0,0,0,7,19,4,0.00937,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,287,            return PeriodType.standard();,6,1,0,1,2,1,4,0,0,12,29,1,0.00868,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,22,117,"        return FieldUtils.safeAdd(instant, value);",16,2,0,1,2,1,16,2,0,38,42,1,0.00866,0,0,-1
defect4j,time,org/joda/time/Duration,22,177,    },2,0,0,0,1,0,0,0,0,3,1,4,0.00847,0,0,-1
defect4j,time,org/joda/time/Duration,22,43,    public static final Duration ZERO = new Duration(0L);,0,0,1,1,2,0,4,0,0,9,53,7,0.00847,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,239,        super();,4,0,0,1,2,0,0,2,0,6,8,4,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,240,        type = checkPeriodType(type);,2,1,0,1,2,0,0,0,0,3,29,5,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,242,        iType = type;,6,1,0,0,0,0,0,0,0,8,13,1,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,243,"        iValues = chrono.get(this, duration);",8,2,0,1,2,0,0,4,0,14,37,3,0.0084,0,0,-1
defect4j,time,org/joda/time/base/BaseDuration,22,61,        super();,0,0,0,1,2,0,6,0,0,6,8,9,0.0084,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,44,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.0084,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,64,        int sum = val1 + val2;,4,2,0,0,0,0,0,0,0,6,22,6,0.00839,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,2,0,0,3,7,0,0,0,0,3,45,4,0.00839,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,278,        if (duration != 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00826,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,289,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.00826,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,303,        return iType;,4,0,1,0,0,1,6,0,0,15,13,1,0.00815,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,335,        return iValues[index];,0,0,1,1,2,1,0,0,0,9,22,4,0.00805,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,103,        if (type == null) {,4,1,0,1,3,0,0,0,0,5,19,5,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.00752,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,10,0,0,0,0,1,4,0,0,14,21,3,0.00725,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,835,        if (this == obj) {,4,0,0,1,3,0,0,2,0,6,18,4,0.00676,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,596,        iName = name;,8,1,0,0,0,0,0,0,0,10,13,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",10,0,0,1,2,3,0,12,0,25,90,1,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,60,    static int WEEK_INDEX = 2;,2,0,0,0,0,1,0,0,0,3,26,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,62,    static int HOUR_INDEX = 4;,2,1,1,0,0,0,0,0,0,5,26,7,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,63,    static int MINUTE_INDEX = 5;,2,0,0,0,0,1,0,0,0,3,28,2,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,64,    static int SECOND_INDEX = 6;,4,0,0,0,0,0,2,0,0,6,28,5,0.00551,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,65,    static int MILLI_INDEX = 7;,2,0,0,0,0,1,0,0,0,3,27,2,0.00551,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,253,            return ISOChronology.getInstance();,4,1,0,1,2,1,12,0,0,18,35,1,0.00481,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,86,        return getInstance(DateTimeZone.getDefault());,4,0,0,2,4,1,6,0,0,11,46,3,0.00374,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,255,        return chrono;,14,0,0,0,0,1,10,4,0,31,14,3,0.00312,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,82,        checkPermission();,2,1,0,1,2,0,6,0,0,10,18,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,84,    },0,0,0,0,1,0,2,0,0,3,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,133,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00291,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,174,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,175,        if (sm != null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.0028,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,181,        synchronized(DateTimeZone.class) {,2,0,1,1,3,0,0,2,0,6,34,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,96,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,104,        synchronized (cCache) {,6,0,0,1,3,0,6,0,0,12,23,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,111,        cFastCache[index] = chrono;,4,0,1,1,2,0,0,0,0,10,27,1,0.00277,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00265,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,22,252,        if (chrono == null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.00261,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,134,        if (zone == null) {,4,2,0,1,3,0,4,0,0,10,19,3,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,137,                if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,8,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,138,                    DateTimeZone temp = null;,6,0,1,0,0,0,0,4,0,14,25,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,154,                    if (temp == null) {,4,1,0,1,3,0,8,0,0,14,19,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,159,            },6,1,1,0,1,0,0,2,0,13,1,1,0.0026,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,82,"        super(base, zone);",4,0,0,1,2,0,0,0,0,4,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,83,    },2,1,0,0,1,0,4,0,0,7,1,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,56,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,59,        base = base.withUTC();,4,0,0,1,2,0,4,0,0,9,22,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,22,11,0,1,2,1,4,0,0,37,87,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,86,        return (DateTimeZone)getParam();,6,1,0,2,4,1,2,2,0,12,32,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,158,"        fields.centuries = convertField(fields.centuries, converted);",2,1,0,1,2,0,0,0,0,3,61,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,159,"        fields.years = convertField(fields.years, converted);",14,0,0,1,2,0,6,2,0,24,53,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,161,"        fields.weekyears = convertField(fields.weekyears, converted);",12,0,0,1,2,0,4,2,0,20,61,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,162,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0,1,0,1,2,0,4,0,0,5,59,6,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,166,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,168,"        fields.seconds = convertField(fields.seconds, converted);",16,0,0,1,2,0,8,0,0,26,57,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,173,"        fields.year = convertField(fields.year, converted);",14,0,0,1,2,0,4,0,0,20,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,177,"        fields.era = convertField(fields.era, converted);",8,0,0,1,2,0,4,0,0,13,49,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",8,0,0,1,2,0,4,0,0,13,63,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,183,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,1,1,2,0,18,0,0,31,59,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,18,0,0,27,77,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",10,0,0,1,2,0,12,0,0,24,71,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",14,2,0,1,2,0,4,0,0,21,65,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,3,0,1,2,0,4,0,0,20,69,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,14,71,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,200,        if (field == null || !field.isSupported()) {,4,2,0,2,5,0,12,0,0,20,44,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,201,            return field;,4,0,0,0,0,1,6,0,0,10,13,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,204,            return (DurationField)converted.get(field);,2,1,0,2,4,1,12,2,0,17,43,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,208,        return zonedField;,2,0,0,0,0,1,2,0,0,4,18,3,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,218,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,224,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,393,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,394,            iZone = zone;,8,0,1,0,0,1,0,2,0,15,13,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,396,            iTimeField = useTimeArithmetic(durationField);,2,0,0,1,2,0,4,0,0,7,46,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,397,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,398,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,288,            iField = field;,6,0,1,0,0,0,0,4,0,13,15,1,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,289,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,290,            iZone = zone;,6,0,0,0,0,0,4,2,0,13,13,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,298,            return iField.getUnitMillis();,2,1,0,1,2,1,0,0,0,3,30,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,109,        return getWrappedField().getUnitMillis() * iScalar;,6,2,0,2,4,1,12,0,0,21,51,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,22,726,        return null;,4,1,0,0,0,1,4,0,0,10,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,142,        long millis = iUnitMillis;,10,0,0,0,0,1,4,0,0,16,26,3,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,144,        hash += getType().hashCode();,4,0,0,2,4,0,4,0,0,9,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,148,        int hash = (int) (scalar ^ (scalar >>> 32));,2,0,0,3,6,0,0,2,0,5,44,6,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,149,        hash += getType().hashCode();,2,1,0,2,4,0,6,2,0,12,29,1,0.00258,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,22,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.00258,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,22,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.00258,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,94,        return iChronology.weeks();,4,1,0,1,2,1,4,0,0,9,27,3,0.00257,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,22,55,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00256,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,139,        return iRangeField;,4,0,0,0,0,1,4,2,0,10,19,1,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,122,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,0,0,1,2,3,0,12,0,17,106,2,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,2,0,1,1,2,0,0,2,0,7,48,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,68,    },4,0,0,0,1,0,0,0,0,4,1,5,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,171,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,54,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,22,178,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,22,146,        return DateTimeZone.UTC;,10,2,0,0,0,1,4,0,0,18,24,1,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,81,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00256,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,22,143,        if ((base = getBase()) != null) {,4,1,0,3,7,0,2,0,0,9,33,3,0.00256,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,122,        return iRangeField;,4,0,0,0,0,1,4,0,0,8,19,1,0.00255,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,95,        return null;,12,0,0,0,0,3,0,2,0,17,12,1,0.00255,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00255,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,321,            fields.copyFieldsFrom(iBase);,4,0,0,1,2,0,6,0,0,11,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,22,372,            flags = ,2,0,0,0,0,0,0,0,0,3,7,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,148,"        super(base, param, minDaysInFirstWeek);",12,2,0,1,2,0,0,0,0,14,39,3,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,149,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",2,0,0,3,6,3,0,12,0,17,122,2,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,72,    },2,0,0,0,1,0,0,8,0,10,1,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,111,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,115,        synchronized (cCache) {,0,0,1,1,3,0,4,0,0,9,23,7,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,117,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,118,                chronos = new GregorianChronology[7];,2,0,0,1,2,0,0,2,0,5,37,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,127,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,128,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,65,10,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,135,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,138,        return chrono;,12,1,0,0,0,1,0,0,0,14,14,1,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,192,            super.assemble(fields);,4,0,0,1,2,0,10,0,0,14,23,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,225,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,229,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,237,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,22,45,public final class GregorianChronology extends BasicGJChronology {,2,0,0,0,1,2,0,2,0,6,66,1,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,75,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,2,0,0,1,3,3,0,0,0,5,55,2,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,2,0,0,1,3,3,0,0,0,5,55,2,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,2,0,0,1,2,0,0,0,0,3,47,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,56,        long minSum = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,57,        long maxSum = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,58,        for (int i = 0; i < 11; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,61,            minSum += millis;,4,0,0,0,0,0,0,0,0,5,17,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,4,1,1,1,2,0,0,0,0,8,48,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],2,0,1,1,2,0,0,0,0,7,36,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,66,            maxSum += millis;,4,0,0,0,0,0,0,0,0,5,17,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,4,1,1,1,2,0,0,0,0,8,48,6,0.00253,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,69,    },4,1,0,0,1,0,0,0,0,5,1,4,0.00253,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,141,        return HALFDAYS_TYPE;,2,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,169,        return WEEKYEARS_TYPE;,2,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,196,        return CENTURIES_TYPE;,2,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,205,        return ERAS_TYPE;,2,0,0,0,0,1,0,0,0,2,17,4,0.00252,0,0,-1
defect4j,time,org/joda/time/DurationField,22,30,public abstract class DurationField implements Comparable<DurationField> {,2,0,0,0,1,3,0,4,0,10,74,2,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,71,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,72,    },2,0,0,0,1,0,6,0,0,9,1,4,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,49,        if (cCache == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",2,0,0,1,2,0,0,6,0,9,69,6,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,51,            field = null;,4,0,0,0,0,0,8,2,0,18,13,6,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,53,            field = cCache.get(type);,2,0,0,1,2,0,6,0,0,9,25,6,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,55,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,56,            field = new UnsupportedDurationField(type);,4,0,0,1,2,0,0,2,0,7,43,6,0.00252,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,59,        return field;,4,0,0,0,0,1,0,0,0,4,13,1,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeField,22,33,public abstract class DateTimeField {,2,0,0,0,1,2,0,0,0,4,37,1,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,22,445,            iOrdinal = ordinal;,4,0,0,0,0,0,0,0,0,5,19,5,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,22,446,            iUnitType = unitType;,4,0,0,0,0,0,0,0,0,5,21,5,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,22,447,            iRangeType = rangeType;,14,0,0,0,0,0,16,0,0,33,23,1,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,22,452,            return iUnitType;,2,0,0,0,0,1,0,0,0,2,17,5,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,22,154,        iName = name;,4,0,0,0,0,0,0,0,0,5,13,4,0.00252,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",14,1,0,1,2,0,24,4,0,47,36,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",6,1,0,1,2,0,6,0,0,16,38,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",4,0,0,1,2,0,4,0,0,11,56,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,1,2,0,14,0,0,16,35,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");",6,3,0,1,2,0,6,0,0,15,31,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,591,"            map.put(""ACT"", ""Australia/Darwin"");",2,1,0,1,2,0,4,0,0,9,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,592,"            map.put(""AET"", ""Australia/Sydney"");",6,0,0,1,2,0,4,0,0,10,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");",4,2,0,1,2,0,4,0,0,13,38,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,594,"            map.put(""NST"", ""Pacific/Auckland"");",2,0,0,1,2,0,10,0,0,14,35,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,595,            cZoneIdConversion = map;,4,0,0,0,0,0,4,0,0,9,24,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,597,        return map.get(id);,2,0,0,1,2,1,16,0,0,18,19,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,175,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,178,        if (zone == null) {,2,0,0,1,3,0,0,0,0,3,19,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,133,        DateTimeZone zone = cDefault;,6,0,0,0,0,0,0,2,0,9,29,3,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,136,                zone = cDefault;,10,1,0,0,0,0,0,0,0,12,16,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,137,                if (zone == null) {,4,1,1,1,3,0,0,0,0,9,19,3,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,138,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,143,                                temp = forID(id);,2,0,0,1,2,0,4,0,0,7,17,16,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,157,                    cDefault = zone = temp;,2,0,0,0,0,0,4,0,0,7,23,4,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,159,            },4,0,0,0,1,0,8,0,0,13,1,3,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,212,            return zone;,2,1,0,0,0,1,6,0,0,10,12,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,224,        InputStream in = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,226,            in = openResource(id);,4,3,0,1,2,0,0,0,0,7,22,8,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",2,0,0,2,4,0,6,4,0,12,58,7,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,229,            return tz;,2,0,0,0,0,1,0,0,0,2,10,6,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,236,                if (in != null) {,6,1,0,1,3,0,0,0,0,7,17,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,23,240,            },6,1,0,0,1,0,4,0,0,11,1,8,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,95,        if (in instanceof DataInput) {,2,0,0,1,3,0,0,2,0,4,30,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",6,1,0,2,4,1,12,0,0,19,70,3,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,183,        int v = in.readUnsignedByte();,4,0,0,1,2,0,8,0,0,13,30,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,184,        switch (v >> 6) {,12,1,0,1,3,0,4,0,0,19,17,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,187,            v = (v << (32 - 6)) >> (32 - 6);,2,0,0,3,6,0,0,0,0,3,32,7,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,195,            v |= (in.readUnsignedByte());,0,0,0,2,4,0,2,0,0,3,29,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,201,            w |= (in.readUnsignedByte()) << 24;,2,1,0,2,4,0,4,0,0,8,35,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,205,            return w * 1000L;,6,2,0,0,0,1,4,0,0,13,17,3,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1500,            super(id);,20,3,0,1,2,0,22,0,0,47,10,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1505,            iTailZone = tailZone;,6,0,0,0,0,0,0,0,0,6,21,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1348,            long[] transitions = new long[size];,2,0,1,2,4,0,0,0,0,4,36,6,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1350,            int[] standardOffsets = new int[size];,2,0,1,2,4,0,0,0,0,4,38,6,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1356,                standardOffsets[i] = (int)readMillis(in);,2,1,0,3,6,0,0,0,0,3,41,4,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1364,                    nameKeys[i] = pool[index];,2,0,0,2,4,0,0,4,0,6,26,4,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1370,            DSTZone tailZone = null;,2,0,0,0,0,0,0,2,0,4,24,5,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1375,            return new PrecalculatedZone,10,2,0,0,0,1,16,4,0,33,28,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,23,42,        },2,2,0,0,1,0,4,0,0,8,1,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,23,45,        if (i == null) {,6,2,0,1,3,0,0,0,0,9,16,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,23,48,            cacheSize = 512; // (1 << 9),4,0,0,1,2,0,0,2,0,8,28,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,23,62,    },4,1,0,0,1,0,0,0,0,5,1,4,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1177,            iStandardOffset = standardOffset;,14,1,0,0,0,0,4,0,0,21,33,1,0.00028,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,23,1178,            iStartRecurrence = startRecurrence;,4,0,0,0,0,0,0,0,0,5,35,5,0.00028,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,401,    },12,4,0,0,1,0,12,0,0,30,1,1,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,6,0,0,1,2,0,6,0,0,14,46,4,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,0,1,0,1,3,0,8,0,0,9,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,1,2,0,18,0,0,18,44,1,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,                        break;,2,1,1,0,0,0,0,0,0,5,6,8,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);",4,0,0,1,2,0,10,0,0,14,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,                    chrono = chrono.withZone(parsedZone);,2,0,0,1,2,0,6,0,0,9,37,10,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);",4,0,0,1,2,1,0,2,0,6,41,9,1.75,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,                    return chronology.weekOfWeekyear();,0,1,0,1,2,1,14,0,0,16,35,1,1.75,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,1.68966,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,862,            return instant;,8,0,0,0,0,1,10,2,0,22,15,4,1.68966,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,350,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,1.53125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1031,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,1.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,        return iOffset;,2,0,0,0,0,1,0,0,0,2,15,4,1.36111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,1.32432,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {",8,1,0,1,3,1,0,2,0,12,55,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",4,1,0,2,4,0,8,0,0,14,86,1,1.28947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,                        indexRef[0]++;,2,0,1,1,2,0,0,0,0,5,14,1,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",2,1,0,3,7,0,8,0,0,11,52,3,1.25641,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {",18,0,0,1,3,1,6,4,0,31,59,1,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,275,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,278,        iLocalMillis = localMillis;,4,0,0,0,0,0,8,0,0,13,27,3,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,280,    },2,0,0,0,1,0,4,2,0,8,1,7,1.19512,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,        return false;,0,0,0,0,0,1,4,0,0,5,13,4,1.11364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,1.08889,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,548,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,14,1,0,2,4,1,10,0,0,26,54,3,0.94231,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,557,        return iChronology;,6,1,0,0,0,1,0,0,0,7,19,7,0.92453,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,919,        if (ttx == null) {,6,2,0,1,3,0,0,0,0,8,18,1,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,499,            return iDurationField;,4,1,0,0,0,1,0,0,0,5,22,5,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,883,        if (tx == null) {,8,1,0,1,3,0,0,0,0,10,17,3,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1410,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1411,            hms = new DateTimeFormatterBuilder(),4,0,0,1,2,0,6,2,0,13,36,1,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1417,        return hms;,4,0,0,0,0,1,0,2,0,6,11,3,0.875,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,586,        return iLocalMillis;,2,1,0,0,0,1,0,0,0,3,20,5,0.76563,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,595,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,424,                if (tokenLen == 2) {,2,1,0,1,3,0,0,0,0,3,20,7,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,511,        if (fieldType == null) {,6,3,0,1,3,0,6,0,0,15,24,1,0.7,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));",6,0,0,2,4,1,12,2,0,22,47,1,0.7,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,101,        DATE_DURATION_TYPES.add(DurationFieldType.years());,6,3,0,2,4,0,0,0,0,9,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,102,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,4,0,0,2,4,0,10,2,0,16,55,1,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,474,            return result;,8,1,0,0,0,1,0,2,0,12,14,1,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",2,0,0,1,2,3,0,4,0,9,75,2,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,465,            long localInstant = iZone.convertUTCToLocal(instant);,8,0,0,1,2,0,6,0,0,14,53,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);",4,0,0,1,2,2,8,2,0,17,47,1,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,468,            if (get(result) != value) {,10,2,0,2,5,0,0,0,0,13,27,1,0.60494,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1027,        if (newZone == null) {,8,1,0,1,3,0,0,0,0,9,22,1,0.59036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,0,0,0,2,38,4,0.56322,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,283,"        return fixedOffsetZone(id, millisOffset);",2,0,0,1,2,1,6,0,0,8,41,1,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,209,                    return chrono;,2,0,0,0,0,1,12,0,0,14,14,3,0.56322,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,384,        return iCutoverInstant;,10,1,0,0,0,1,0,0,0,12,23,4,0.56322,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1755,            return estimatePrintedLength();,6,0,0,1,2,1,2,0,0,9,31,1,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,293,        if ((base = getBase()) != null) {,2,1,0,3,7,0,0,0,0,3,33,5,0.55056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,194,            cutoverInstant = gregorianCutover.toInstant();,4,1,0,1,2,0,4,0,0,11,46,5,0.54444,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,24,101,        return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,5,30,3,0.53846,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1689,            iShort = isShort;,6,0,0,0,0,0,0,0,0,7,17,1,0.51579,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1681,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.51579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,956,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,0,0,0,4,47,5,0.51042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,973,        int offsetLocal = getOffset(instantLocal);,6,0,0,1,2,0,4,0,0,11,42,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,977,        if (offsetLocal != offset) {,12,3,1,1,3,0,4,0,0,24,28,1,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1008,        long instantUTC = instantLocal - offset;,0,0,0,0,0,0,4,0,0,4,40,7,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1010,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.50515,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1013,        return instantUTC;,6,0,0,0,0,1,0,0,0,6,18,6,0.50515,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,479,                if (tokenLen >= 3) {,12,2,1,1,3,0,4,4,0,27,20,1,0.49495,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,2,0,0,0,0,0,0,0,0,2,49,4,0.47368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,632,            buf.append('+');,4,0,0,1,2,0,0,0,0,5,16,9,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,596,            buf.append('\'');,6,3,0,1,2,0,4,0,0,16,17,1,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.46226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.46226,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,630,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,38,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,631,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,638,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,2,1,0,0,0,0,0,0,0,3,55,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,639,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,0,2,0,4,47,7,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,640,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,0,0,0,0,6,58,1,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,642,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,9,59,5,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,643,        buf.append(':');,6,1,0,1,2,0,4,0,0,12,16,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,645,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,646,        if (offset == 0) {,4,2,0,1,3,0,0,0,0,6,18,4,0.45794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,647,            return buf.toString();,4,1,0,1,2,1,0,0,0,5,22,7,0.45794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,589,                    i++;,4,0,0,0,0,0,0,0,0,6,4,1,0.43363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,586,                char peek = pattern.charAt(i + 1);,4,1,0,1,2,0,4,0,0,9,34,9,0.4188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,587,                if (peek == c) {,10,1,0,1,3,0,0,0,0,11,16,1,0.4188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,497,        } else if (week > 51) {,4,1,0,1,4,0,8,0,0,14,23,1,0.3913,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,563,    },4,0,0,0,1,0,6,0,0,12,1,1,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,585,            while (i + 1 < length) {,4,2,0,1,3,0,0,0,0,6,24,6,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,685,"                cPatternedCache.put(pattern, formatter);",4,0,0,1,2,0,8,0,0,12,40,3,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,688,        return formatter;,2,0,0,0,0,1,0,2,0,5,17,6,0.35766,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,0,0,0,2,28,5,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,405,"            String token = parseToken(pattern, indexRef);",2,1,0,1,2,0,0,0,0,4,45,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,414,            switch (c) {,0,0,0,1,3,0,4,0,0,4,12,9,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,621,        indexRef[0] = i;,2,0,0,1,2,0,10,0,0,13,16,9,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,622,        return buf.toString();,12,0,0,1,2,1,8,2,0,23,22,1,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,677,        DateTimeFormatter formatter = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,679,            formatter = cPatternedCache.get(pattern);,2,0,0,1,2,0,6,0,0,9,41,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,680,            if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,6,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.35507,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.34752,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.34752,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,24,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.32237,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,495,            if (b == null || !b.isSupported()) {,14,3,0,2,5,0,8,2,0,29,36,1,0.27072,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,80,            if (value < 1000) {,2,1,0,1,3,0,0,0,0,3,19,7,0.2663,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,344,"        int month = iChronology.getMonthOfYear(instant, year);",4,0,0,1,2,0,12,0,0,17,54,1,0.26486,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2504,            return iPrintedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,30,5,0.26344,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,24,47,        super();,6,1,0,1,2,0,0,0,0,8,8,1,0.26344,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,371,        long millis = getYearMillis(year);,4,3,0,1,2,0,10,0,0,17,34,1,0.26203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.26203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.26203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,917,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.25521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.25389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,950,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,4,0,0,8,51,3,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,951,        long instantUTC = instantLocal - offsetOriginal;,6,1,0,0,0,0,0,0,0,7,48,5,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,952,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.25128,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,953,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.25128,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1326,        if (ymd == null) {,2,1,0,1,3,0,4,0,0,7,18,1,0.24623,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1327,            ymd = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.24623,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.23671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,655,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,656,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,659,        return printer;,2,0,0,0,0,1,0,0,0,2,15,4,0.23445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,255,        if (iChrono == chrono) {,4,1,0,1,3,0,0,0,0,5,24,4,0.22072,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,406,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.21778,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,24,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",14,0,1,0,1,1,0,2,0,21,61,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,132,"        long instant = year().set(0, year);",4,0,0,2,4,0,12,0,0,17,35,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",6,1,0,2,4,0,14,0,0,22,48,3,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",4,0,0,2,4,0,14,0,0,19,52,3,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,24,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,4,0,0,6,53,5,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,24,82,            value--;,8,1,0,0,0,0,4,0,0,14,8,3,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,24,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,24,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",4,0,0,1,2,0,10,0,0,14,54,3,0.20588,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,24,153,"        return super.set(instant, value - iOffset);",12,1,0,1,2,1,0,0,0,13,43,1,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,54,    },12,0,0,0,1,2,4,2,0,22,1,1,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,65,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,68,            iMinValue = min + 1;,6,2,0,0,0,0,8,0,0,18,20,3,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,91,"        return super.set(millis, value);",8,0,0,1,2,1,4,0,0,12,32,3,0.20588,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,24,95,        return iMinValue;,6,0,0,0,0,1,0,0,0,7,17,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,128,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,129,    },4,0,0,0,1,0,0,0,0,5,1,5,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",2,0,0,1,2,3,0,4,0,10,85,2,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",2,0,0,1,2,3,0,12,0,17,116,2,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,104,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,107,        BuddhistChronology chrono = cCache.get(zone);,2,0,0,1,2,0,6,2,0,10,45,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,108,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",8,1,0,1,2,0,12,4,0,26,64,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",6,0,0,2,4,0,8,4,0,23,91,3,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,204,        if (getParam() == null) {,0,1,0,2,5,0,2,0,0,4,25,4,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,207,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,42,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,221,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,226,            fields.yearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,0,2,0,12,51,1,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,234,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.20588,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,24,236,    },6,0,0,0,1,0,4,2,0,12,1,4,0.20588,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,24,82,"        return iField.set(instant, value);",2,0,0,1,2,1,12,0,0,15,34,1,0.20502,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.20502,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.20502,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,782,            return iJulianField.getMinimumValue();,2,0,0,1,2,1,10,0,0,12,38,1,0.20502,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,102,        iUpperLimit = upperLimit;,6,0,0,0,0,0,0,0,0,7,25,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,67,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,4,1,0,1,2,0,4,0,0,10,65,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,4,1,0,1,2,0,12,0,0,18,65,1,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",6,0,0,3,6,1,0,6,0,12,77,5,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,0,12,0,14,66,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,213,"        fields.eras = convertField(fields.eras, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,6,2,0,17,61,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,216,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,217,"        fields.weekyears = convertField(fields.weekyears, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,218,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,221,"        fields.halfdays = convertField(fields.halfdays, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,223,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,224,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,225,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,229,"        fields.year = convertField(fields.year, converted);",12,0,0,1,2,0,4,0,0,18,51,1,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",10,1,0,1,2,0,4,0,0,16,61,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,239,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",10,0,0,1,2,0,8,0,0,19,77,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",12,0,0,1,2,0,4,2,0,20,71,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",10,0,0,1,2,0,4,0,0,16,65,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,262,        LimitDurationField limitField = new LimitDurationField(field);,4,0,0,1,2,0,0,4,0,8,62,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,264,        return limitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,280,        return limitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,24,51,        super(DateTimeFieldType.era());,2,0,0,2,4,0,10,0,0,12,31,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,24,52,        iEraText = text;,4,0,0,0,0,0,0,0,0,5,16,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,453,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,454,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,455,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,456,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,457,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,458,        },8,5,0,0,1,0,0,0,0,13,1,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,391,        LimitDurationField(DurationField field) {,4,0,0,1,3,0,0,2,0,6,41,3,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,24,392,"            super(field, field.getType());",4,0,0,2,4,0,4,4,0,12,30,4,0.20332,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.20248,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,24,228,        return iField.getMaximumValue();,2,1,1,1,2,1,4,0,0,9,32,3,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,486,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.19919,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,566,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,14,0,0,14,71,5,0.19838,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,701,                    if (instant + iGapDuration < iCutover) {,8,2,0,1,3,0,0,0,0,10,40,1,0.19838,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,702,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,0.19838,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,705,                    if (get(instant) != value) {,6,2,1,2,5,0,4,0,0,15,28,1,0.19838,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,74,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.19758,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,711,"                instant = iJulianField.set(instant, value);",2,0,1,1,2,0,12,0,0,19,43,6,0.19758,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,712,                if (instant >= iCutover) {,6,2,0,1,3,0,0,0,0,8,26,5,0.19758,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,899,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.19758,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,482,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,483,            int result = compareReverse,2,0,0,0,0,0,2,0,0,4,27,6,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,485,            if (result != 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.19679,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,78,        if (year <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.19679,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,85,        return year;,10,0,0,0,0,1,4,0,0,15,12,3,0.19679,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,471,                millis = iField.roundFloor(millis);,2,0,0,1,2,0,6,0,0,9,35,7,0.19522,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,697,            if (instant >= iCutover) {,12,0,0,1,3,0,2,0,0,15,26,1,0.19522,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,698,"                instant = iGregorianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,0.19522,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,699,                if (instant < iCutover) {,12,1,0,1,3,0,4,0,0,18,25,1,0.19522,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,724,            return instant;,6,0,0,0,0,1,0,0,0,7,15,1,0.19522,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,631,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.19444,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.19291,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.19291,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,152,        if (thisMillis < otherMillis) {,6,1,1,1,3,0,0,0,0,12,31,1,0.19291,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,87,1,0.19291,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,341,            DurationField months = DurationFieldType.months().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,68,6,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,342,            DurationField days = DurationFieldType.days().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,64,6,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,343,            DurationField first = savedFields[0].iField.getDurationField();,2,0,0,2,4,0,0,2,0,5,63,6,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,344,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,353,"                millis = savedFields[i].set(millis, resetFields);",2,0,1,2,4,0,6,0,0,13,49,8,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,403,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,10,4,1,5,11,0,2,0,0,23,63,8,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,465,            if (iText == null) {,4,1,0,1,3,0,0,0,0,5,20,1,0.18992,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,466,"                millis = iField.set(millis, iValue);",2,0,0,1,2,0,8,0,0,11,36,7,0.18992,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1621,        if (lte == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.18631,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1622,            lte = new DateTimeFormatterBuilder(),2,0,0,1,2,0,4,0,0,7,36,6,0.18631,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1626,        return lte;,6,0,0,0,0,1,0,0,0,7,11,1,0.18631,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,755,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.18081,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.18015,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,24,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,8,0,0,10,38,3,0.17949,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,24,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.17949,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,24,888,"            instant = add(newInstant, 1);",10,0,0,1,2,0,10,0,0,23,29,1,0.17949,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,24,890,        return instant;,8,1,0,0,0,1,0,0,0,9,15,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",6,0,0,3,6,0,0,2,0,9,62,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,191,        if (gregorianCutover == null) {,12,3,0,1,3,0,8,2,0,28,31,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,4,0,0,1,2,0,6,4,0,14,51,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,214,        if (zone == DateTimeZone.UTC) {,8,1,0,1,3,0,6,2,0,17,31,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,230,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,452,        Object[] params = (Object[])getParam();,4,1,0,4,8,0,2,4,0,11,39,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,454,        JulianChronology julian = (JulianChronology)params[0];,6,0,1,2,4,0,0,4,0,13,54,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,455,        GregorianChronology gregorian = (GregorianChronology)params[1];,4,0,1,2,4,0,0,4,0,14,63,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,456,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,457,        iCutoverMillis = cutoverInstant.getMillis();,10,0,0,1,2,0,8,0,0,20,44,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,459,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,460,        iGregorianChronology = gregorian;,2,1,0,0,0,0,0,0,0,3,33,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,461,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,463,        if (getBase() != null) {,8,1,0,2,5,0,4,0,0,15,24,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,467,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,472,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,478,        fields.copyFieldsFrom(gregorian);,2,0,0,1,2,0,6,0,0,8,33,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,488,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,489,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",16,0,0,2,4,0,4,2,0,24,96,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,492,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,4,4,0,19,99,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,494,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",6,0,0,2,4,0,0,0,0,8,90,10,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,496,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,497,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",6,1,0,1,3,0,4,2,0,14,73,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,499,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",16,0,0,2,4,0,4,2,0,24,99,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,504,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",10,0,0,2,4,0,4,4,0,19,72,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,520,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,528,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,531,            fields.yearOfEra = new ImpreciseCutoverField(,6,2,0,0,1,0,0,2,0,11,45,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,533,            fields.yearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,49,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,536,            fields.centuryOfEra = new ImpreciseCutoverField(,6,1,0,0,1,0,0,2,0,10,48,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,538,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,540,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,542,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,544,            fields.weekyear = new ImpreciseCutoverField(,12,0,0,0,1,0,4,2,0,20,44,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,546,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,548,            fields.weekyears = fields.weekyear.getDurationField();,12,1,0,1,2,0,6,0,0,20,54,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,554,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,557,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,599,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,609,"                     long cutoverMillis, boolean convertByWeekyear) {",4,0,0,0,2,0,0,0,0,4,48,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,612,            iGregorianField = gregorianField;,2,0,0,0,0,0,0,0,0,2,33,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,614,            iConvertByWeekyear = convertByWeekyear;,4,0,0,0,0,0,0,0,0,5,39,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,617,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,620,            if (rangeField == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,621,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,623,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,751,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,921,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,932,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,71,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,944,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",8,0,0,1,2,0,4,0,0,12,69,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,945,            if (durationField == null) {,2,1,0,1,3,0,0,0,0,3,28,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,946,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,8,2,0,15,62,1,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,948,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,1071,            iField = dateTimeField;,4,0,0,0,0,0,0,0,0,5,23,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,24,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,24,128,        long yearStartMillis = iChronology.getYearMillis(year);,2,0,0,1,2,0,6,0,0,8,55,5,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,24,129,        if (instant != yearStartMillis) {,8,1,0,1,3,0,0,0,0,10,33,3,0.17949,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,24,133,        return instant;,4,1,0,0,0,1,0,0,0,5,15,3,0.17949,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,24,280,                    return chronology.days();,2,0,0,1,2,1,4,0,0,6,25,1,0.17883,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,24,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.17818,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,24,81,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.17818,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,24,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.17818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,181,        } else if ( workWoyYear > year ) {,8,1,0,1,4,0,4,0,0,13,34,1,0.17818,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,10,3,0,2,4,0,0,0,0,13,89,5,0.17754,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,8,3,0,1,2,1,0,0,0,12,64,3,0.17754,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.17754,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,24,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,6,4,0,1,2,1,0,0,0,10,79,4,0.17754,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1178,            char b = iValue;,4,0,0,0,0,0,0,0,0,4,16,6,0.17626,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.17563,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,157,        FieldUtils.verifyValueBounds,2,0,0,0,0,0,4,0,0,6,28,3,0.17563,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",6,1,0,1,2,1,8,0,0,16,74,3,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,333,        int count = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,4,30,5,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,334,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,339,        if (count > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,350,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,1,22,4,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,352,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,362,        if (iZone == null) {,4,1,0,1,3,0,0,0,0,5,20,3,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,399,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.175,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1316,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.17438,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1292,                length++;,2,0,0,0,0,0,0,0,0,3,9,7,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1300,            if (length >= 9) {,2,1,0,1,3,0,0,0,0,3,18,5,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1305,                int i = position;,6,0,0,0,0,0,0,0,0,6,17,1,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1306,                if (negative) {,6,1,0,1,3,0,0,0,0,7,15,1,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1310,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1314,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.17376,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1324,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.17376,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.17376,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.17376,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,24,269,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.17314,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,24,272,        return zone;,6,0,0,0,0,1,0,0,0,7,12,3,0.17314,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.17254,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,24,66,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.17254,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,234,"        saveField(new SavedField(fieldType.getField(iChrono), value));",2,0,0,3,6,0,8,2,0,12,62,5,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,249,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,250,        int savedFieldsCount = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,4,41,5,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,252,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,12,2,0,1,3,0,0,2,0,16,67,4,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,261,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,262,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,263,        iSavedFieldsCount = savedFieldsCount + 1;,16,2,0,0,0,0,0,0,0,21,41,3,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,451,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,452,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.17193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,454,            iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,5,0.17193,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,3,6,1,0,0,0,10,89,6,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,133,        int thisWeekyear = get( instant );,10,0,0,1,2,0,4,2,0,17,34,3,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,2,0,0,1,2,0,6,0,0,8,65,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,6,0,0,8,55,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,55,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,155,        if ( setToWeek > maxOutWeeks ) {,4,1,0,1,3,0,0,0,0,5,32,4,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,162,        long workInstant = instant; // Get a copy,4,0,0,0,0,0,0,0,0,4,41,5,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,173,        int workWoyYear = get( workInstant );,2,0,0,1,2,0,0,0,0,2,37,4,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,10,0,0,1,2,0,8,0,0,19,64,3,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),16,2,0,1,2,0,2,0,0,22,56,4,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,24,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.17073,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,493,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.17014,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,        return dt;,4,1,0,0,0,1,0,0,0,5,10,3,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,        if (t == null) {,0,0,0,1,3,0,4,2,0,6,16,1,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,34,6,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);",2,0,0,1,2,0,16,0,0,20,36,1,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,        },2,0,0,0,1,0,0,0,0,2,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,            if (displayZone == null) {,2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,8,0,0,15,57,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,        return hmsf;,6,3,0,0,0,1,0,0,0,9,12,1,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,            return instant % iUnitMillis;,4,1,0,0,0,3,0,4,0,12,29,1,0.0255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,        return ymd;,2,0,0,0,0,1,10,0,0,13,11,5,0.02413,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,889,            if ((offsetLocal - offsetAdjusted) < 0) {,4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,                locale = Locale.getDefault();,2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,78,        } else {,2,1,0,0,2,0,4,0,0,7,8,6,0.0232,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,            DateTimePrinter[] elements = iPrinters;,10,0,0,1,2,0,0,4,0,14,39,1,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,            int len = elements.length;,8,0,0,0,0,0,0,0,0,8,26,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",6,7,0,2,4,0,4,0,0,18,78,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,0,1,2,4,0,0,0,0,6,76,9,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,        },6,2,0,0,1,0,32,8,0,52,1,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,        return buf.toString();,24,6,1,1,2,1,28,4,0,69,22,1,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,18,0,0,18,29,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,    },8,1,0,0,1,0,8,0,0,18,1,1,0.02261,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,                    return chronology.secondOfDay();,2,1,0,1,2,1,0,0,0,5,32,3,0.02233,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,        chrono = selectChronology(chrono);,8,0,0,1,2,0,10,0,0,19,34,3,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,        int offset = zone.getOffset(instant);,6,0,1,1,2,0,14,4,0,27,37,1,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,24,65,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,80,            if (value < 1000) {,6,1,0,1,3,0,0,2,0,9,19,3,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,87,            for (; size > digits; size--) {,8,0,0,1,3,0,2,0,0,11,31,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,90,            buf.append(Integer.toString(value));,2,1,0,2,4,0,0,0,0,3,36,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,        if (lte == null) {,10,1,1,1,3,0,6,0,0,23,18,3,0.02027,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1671,        if (ze == null) {,2,0,0,1,3,0,0,2,0,4,17,4,0.01811,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,67,        } else if (value < 100) {,4,2,0,1,4,0,0,0,0,6,25,4,0.01772,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,655,        DateTimePrinter printer = iPrinter;,2,2,0,0,0,0,4,0,0,9,35,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,656,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,659,        return printer;,8,1,0,0,0,1,0,2,0,12,15,3,0.01731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2070,            int est = 1 + iMinFields << 1;,6,2,0,0,0,0,8,2,0,18,30,1,0.01727,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,532,        if (fieldType == null) {,2,0,0,1,3,3,0,0,0,5,24,1,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,535,        if (maxDigits < minDigits) {,2,0,0,1,3,0,0,0,0,3,28,5,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1834,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1836,        },0,0,0,0,1,0,8,2,0,10,1,7,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1839,            return iMaxDigits;,4,0,0,0,0,1,0,0,0,5,18,10,0.01685,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1997,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,4,0.01685,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,167,        Chronology chrono = instant.getChronology();,6,0,0,1,2,0,0,0,0,6,44,6,0.01664,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1024,        return append0(new TimeZoneOffset,0,0,0,0,1,1,4,4,0,8,33,4,0.01651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2056,            iZeroOffsetParseText = zeroOffsetParseText;,4,1,0,0,0,0,6,0,0,12,43,1,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2058,            if (minFields <= 0 || maxFields < minFields) {,8,2,0,1,3,3,0,12,0,25,46,1,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2065,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2066,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2067,        },4,0,0,0,1,1,16,0,0,21,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,25,164,        if (instant == null) {,6,1,0,1,3,0,0,0,0,7,22,5,0.01587,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1649,        if (sme == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.01579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1639,        if (mhe == null) {,6,4,0,1,3,0,0,0,0,10,18,4,0.01571,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,188,                if (isLeapYear(year)) {,10,0,0,2,5,0,8,0,0,19,23,3,0.01568,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1630,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01565,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1631,            hde = new DateTimeFormatterBuilder(),8,2,0,1,2,0,0,0,0,11,36,6,0.01565,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01459,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,62,        if (value < 10) {,6,1,0,1,3,0,8,2,0,19,17,3,0.01459,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,92,    },8,0,0,0,1,0,4,0,0,13,1,4,0.01459,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1573,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.01404,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1562,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01393,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1568,        return mye;,4,0,0,0,0,1,0,0,0,4,11,4,0.01393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",2,0,0,2,4,1,14,4,0,20,66,3,0.0136,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1553,        if (ye == null) {,2,0,0,1,3,0,0,0,0,2,17,4,0.01353,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1554,            ye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.01353,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,916,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01325,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,919,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.01325,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,900,        return offsetAdjusted;,4,1,0,0,0,1,0,0,0,5,22,3,0.01261,1,1,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.01252,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,881,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.01248,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,886,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.01248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);",6,0,0,3,6,0,12,2,0,21,58,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2632,            if (array != null) {,2,0,0,1,3,0,0,2,0,4,20,4,0.01189,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2637,        },2,0,0,0,1,0,0,0,0,2,1,4,0.01189,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,551,            } else if (iMode == 's') {,2,1,0,1,4,0,0,0,0,4,26,6,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,709,"                instant = chrono.dayOfMonth().set(instant, 1);",2,0,0,2,4,0,0,4,0,7,46,4,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.0117,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,725,                    if (daysToAdd > 0) {,6,1,0,1,3,0,0,2,0,9,20,1,0.0117,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,209,        if (formatter == null) {,4,0,0,1,3,0,6,2,0,13,24,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,345,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,347,        iElementPairs.add(parser);,2,0,0,1,2,0,10,2,0,14,26,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,31,    private static final double LOG_10 = Math.log(10);,8,0,0,1,2,0,4,0,0,13,50,4,0.01141,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1102,            return true;,8,4,0,0,0,1,0,0,0,12,12,4,0.01107,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1076,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.01104,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1079,                    if (printer == parser || parser == null) {,6,3,0,1,3,0,0,0,0,9,42,10,0.01104,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1080,                        f = printer;,4,0,0,0,0,0,0,0,0,5,12,12,0.01104,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1543,            return iTailZone.getOffset(instant);,4,0,0,1,2,1,0,0,0,5,36,6,0.01098,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1305,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,0,2,0,6,46,5,0.01092,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1306,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.01092,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1311,                start = startRecurrence.next,2,0,0,0,0,0,4,0,0,7,28,7,0.01092,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1319,            },8,0,1,0,1,0,0,2,0,14,1,1,0.01092,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1332,            return (start > end) ? startRecurrence : endRecurrence;,8,1,0,1,2,1,0,0,0,9,55,6,0.01092,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",2,0,0,2,4,0,10,0,0,13,52,9,0.01087,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,577,"                    next = setDayOfMonthNext(chrono, next);",2,0,0,1,2,0,6,0,0,9,39,9,0.01087,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,578,"                    next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,6,0,0,9,34,9,0.01087,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,115,            monthToUse = (monthToUse % iMax) + 1;,6,2,0,1,2,0,0,0,0,9,37,6,0.01084,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,103,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",4,0,0,1,2,0,14,0,0,20,62,3,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,112,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",2,0,0,1,2,0,8,0,0,10,67,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,138,        if (dayToUse > maxDay) {,4,1,0,1,3,0,0,0,0,5,24,4,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,144,        long datePart =,2,0,0,0,0,0,0,0,0,2,15,5,0.01078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,92,        if (months == 0) {,4,4,0,1,3,0,4,0,0,12,18,1,0.01073,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1579,            long end = transitions[transitions.length - 1];,8,1,1,1,2,0,0,2,0,13,47,1,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1580,            if (instant < end) {,4,1,0,1,3,0,0,0,0,5,20,5,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1200,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,0,2,0,6,46,5,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1206,                start = startRecurrence.next,10,0,0,0,0,0,4,2,0,19,28,1,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1208,                if (instant > 0 && start < 0) {,4,3,0,1,3,0,0,0,0,7,31,7,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1221,                end = endRecurrence.next,2,0,0,0,0,0,4,0,0,7,24,7,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1223,                if (instant > 0 && end < 0) {,12,4,0,1,3,0,0,0,0,17,29,1,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1235,            return (start > end) ? end : start;,8,1,0,1,2,1,0,0,0,9,35,6,0.01063,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,6,0,0,9,34,7,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,574,                if (next <= instant) {,4,1,1,1,3,0,0,0,0,7,22,1,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,2,0,0,2,4,0,8,0,0,10,48,6,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,6,1,0,0,0,0,0,0,0,7,39,6,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,719,            if (daysToAdd != 0) {,8,1,0,1,3,0,6,6,0,22,21,1,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",2,0,1,2,4,0,0,0,0,7,53,9,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,731,            return instant;,4,0,0,0,0,1,4,2,0,10,15,1,0.01061,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,549,            if (iMode == 'w') {,2,1,0,1,3,0,0,0,0,4,19,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,558,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,563,"            next = chrono.millisOfDay().set(next, 0);",2,0,0,2,4,0,8,0,0,11,41,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,672,"                next = setDayOfMonth(chrono, next);",0,1,0,1,2,0,10,0,0,11,35,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,706,            if (iDayOfMonth >= 0) {,2,1,0,1,3,0,0,0,0,3,23,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,713,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.0106,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,776,            return iSaveMillis;,10,0,0,0,0,1,4,0,0,15,19,1,0.0106,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",6,0,0,2,4,1,2,2,0,11,73,7,0.01031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,61,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.0103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",4,0,0,1,2,0,0,2,0,6,50,5,0.0103,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,396,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.01027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,405,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01027,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1259,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.00998,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,10,1,0,0,0,0,0,0,0,12,63,1,0.00996,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,6,6,0,3,6,1,12,0,0,24,47,1,0.00996,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,359,        return append0(new CharacterLiteral(c));,2,0,0,2,4,1,4,2,0,9,40,4,0.00994,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1141,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.00994,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2476,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2477,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2478,                int printEst = 0;,4,0,0,0,0,0,4,0,0,8,17,4,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2479,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2480,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,1,2,4,0,10,4,0,21,63,4,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2484,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2493,                int parseEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2494,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2496,                    parseEst += parser.estimateParsedLength();,4,1,0,1,2,0,4,0,0,10,42,4,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2497,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2499,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2612,                if (element instanceof DateTimePrinter) {,4,0,0,1,3,0,0,2,0,6,41,4,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2613,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2620,                element = elementPairs.get(i + 1);,8,1,0,1,2,0,4,0,0,15,34,4,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2621,                if (element instanceof DateTimeParser) {,2,0,0,1,3,0,0,2,0,4,40,8,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2622,                    if (element instanceof Composite) {,4,0,0,1,3,0,0,2,0,6,35,1,0.00993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1401,            return iMaxParsedDigits;,2,1,0,0,0,1,0,0,0,3,24,9,0.00991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1396,"            super(fieldType, maxParsedDigits, signed);",12,3,0,1,2,0,0,0,0,15,42,1,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1397,            iMinPrintedDigits = minPrintedDigits;,4,0,0,0,0,0,0,0,0,5,37,5,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1398,        },2,0,0,0,1,0,2,2,0,6,1,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1254,            iMaxParsedDigits = maxParsedDigits;,4,0,0,0,0,0,4,0,0,9,35,1,0.00989,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1255,            iSigned = signed;,4,0,0,0,0,0,0,2,0,6,17,7,0.00989,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1100,                return ((Composite)f).isPrinter();,2,0,0,3,6,1,2,2,0,6,34,9,0.00987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2597,            return iPrinters != null;,2,1,0,0,0,1,0,0,0,3,25,5,0.00987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2601,            return iParsers != null;,4,1,0,0,0,1,0,0,0,5,24,1,0.00987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2465,            super();,2,0,0,1,2,0,0,0,0,2,8,4,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2467,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2472,            if (printerList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,30,5,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2487,            if (parserList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,29,5,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2609,            int size = elementPairs.size();,6,1,0,1,2,0,10,0,0,18,31,1,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2629,        },6,1,0,0,1,0,0,0,0,8,1,5,0.00985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,104,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,105,        DateTimePrinter printer = null;,2,0,0,0,0,0,0,2,0,4,31,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,107,            printer = (DateTimePrinter) f;,4,0,0,1,2,0,0,2,0,7,30,6,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,109,        DateTimeParser parser = null;,2,0,0,0,0,0,6,2,0,10,29,3,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,111,            parser = (DateTimeParser) f;,4,0,0,1,2,0,0,2,0,7,28,6,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,113,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,114,"            return new DateTimeFormatter(printer, parser);",6,0,0,1,2,1,0,4,0,11,46,5,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,108,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,109,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,110,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,111,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,113,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,115,        iDefaultYear = 2000;,4,0,0,0,0,0,8,2,0,15,20,3,0.00953,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1098,        if (f instanceof DateTimePrinter) {,4,0,0,1,3,0,0,4,0,8,35,4,0.00948,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1099,            if (f instanceof Composite) {,6,1,1,1,3,0,0,2,0,12,29,3,0.00948,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1108,        if (f instanceof DateTimeParser) {,2,0,0,1,3,0,0,2,0,4,34,5,0.00948,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1109,            if (f instanceof Composite) {,2,0,0,1,3,0,4,2,0,8,29,3,0.00948,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,336,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1071,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00946,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1073,        if (f == null) {,6,2,0,1,3,0,8,0,0,17,16,3,0.00946,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1074,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.00946,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1091,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.00946,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1094,        return f;,2,0,0,0,0,1,0,0,0,2,9,4,0.00946,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,84,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,4,0,7,40,4,0.00945,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,85,    },4,1,1,0,1,0,0,0,0,8,1,6,0.00945,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,70,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.00925,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.00923,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,25,104,        long addition = value * iUnitMillis;  // safe,6,1,0,0,0,0,0,0,0,7,45,5,0.00877,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00809,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,461,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.0078,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,463,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.0078,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,82,        long sum = val1 + val2;,6,1,0,0,0,0,0,0,0,7,23,5,0.00773,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,88,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.00773,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1576,            if (iTailZone == null) {,2,1,0,1,3,0,0,0,0,3,24,5,0.00713,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,295,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00665,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,8,0,0,14,52,3,0.00644,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.0059,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,25,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,6,4,0,3,7,0,0,2,0,13,54,1,0.00559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,534,        if (instant >= 0) {,2,1,0,1,3,0,6,0,0,9,19,3,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,458,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",2,0,0,1,2,0,10,0,0,12,53,3,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,294,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,59,5,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",2,0,0,1,2,0,8,0,0,10,61,5,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,298,        if (thisDom > maxDom) {,6,2,0,1,3,0,0,0,0,8,23,1,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.00534,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,84,"        return iChronology.setYear(instant, year);",2,0,1,1,2,1,8,2,0,15,42,1,0.00528,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.00518,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,14,0,0,23,54,3,0.00518,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00518,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,167,        if ((base = getBase()) != null) {,12,1,0,3,7,0,6,2,0,24,33,3,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",4,1,0,2,4,0,0,0,0,5,88,5,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",4,0,0,1,2,0,6,0,0,10,48,3,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,10,3,0,2,5,0,0,0,0,14,44,3,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00517,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,125,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.00512,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00512,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,127,    },2,1,0,0,1,0,8,0,0,11,1,3,0.00512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00511,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,168,                break;,6,0,0,0,0,0,0,0,0,7,6,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1533,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1534,            if (i < transitions.length) {,8,2,0,1,3,0,0,0,0,10,29,1,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,205,                if (iOffset == Integer.MIN_VALUE) {,12,2,0,1,3,0,0,0,0,14,35,1,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,8,0,0,1,2,0,6,0,0,15,43,3,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1529,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1530,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1570,            long[] transitions = iTransitions;,6,2,0,1,2,0,0,0,0,9,34,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1571,"            int i = Arrays.binarySearch(transitions, instant);",8,0,0,1,2,0,12,0,0,21,50,1,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1572,            i = (i >= 0) ? (i + 1) : ~i;,12,2,0,2,4,0,0,0,0,17,28,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,148,        int period = (int)(millis >> 32);,4,1,0,2,4,0,0,0,0,5,33,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,149,        Info[] cache = iInfoCache;,4,0,0,1,2,0,10,2,0,16,26,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,150,        int index = period & cInfoCacheMask;,6,1,0,0,0,0,0,0,0,7,36,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,151,        Info info = cache[index];,2,0,1,1,2,0,0,2,0,8,25,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,154,            cache[index] = info;,2,0,1,1,2,0,0,0,0,7,20,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,156,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,160,        long periodStart = millis & (0xffffffffL << 32);,4,2,0,1,2,0,0,0,0,6,48,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,161,"        Info info = new Info(iZone, periodStart);",6,0,0,1,2,0,0,4,0,10,41,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,166,            long next = iZone.nextTransition(periodStart);,2,0,0,1,2,0,6,0,0,8,46,7,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,167,            if (next == periodStart || next > end) {,8,3,0,1,3,0,0,0,0,11,40,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,174,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,186,        private int iStandardOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,48,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,190,            iZoneRef = zone;,4,0,0,0,0,0,0,0,0,5,16,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,191,        },0,0,0,0,1,0,0,2,0,2,1,15,0.00509,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00506,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,            DateTimeField parseField = new PreciseDateTimeField(,2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,            return position + length;,4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,        return iChrono;,2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,    },2,0,0,0,1,0,4,0,0,7,1,7,0.34722,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,6,1,0,1,2,0,14,2,0,23,57,1,0.33784,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,                    expectSeparators = true;,2,0,0,0,0,0,4,0,0,8,24,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,                    limit--;,4,0,0,0,0,0,4,0,0,9,8,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,                    position++;,6,1,0,0,0,0,0,0,0,9,11,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,            limit--;,2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,            position++;,4,0,0,0,0,0,6,0,0,12,11,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,            if (hours > 23) {,6,2,0,1,3,0,0,0,0,9,17,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,4,2,0,11,51,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,            position += 2;,2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,                if (c == ':') {,4,1,0,1,3,0,6,2,0,14,15,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,                if (count == 0 && !expectSeparators) {,4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,6,0,0,9,57,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,                limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,            return position;,6,2,0,0,0,1,2,0,0,10,16,8,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);",12,3,0,2,4,0,20,0,0,38,55,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,                if (c < '0' || c > '9') {,0,0,0,1,3,0,6,0,0,6,25,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,                amount++;,2,0,0,0,0,0,0,0,0,2,9,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,352,        int value = text.charAt(position) - '0';,2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,8,7,0,4,8,1,4,0,0,21,71,3,0.30864,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,424,        return ISODateTimeFormat.dateTime().print(this);,14,2,0,2,4,1,12,2,0,31,48,3,0.30622,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.2907,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,        if (dtp == null) {,8,3,0,1,3,0,4,0,0,15,18,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,            DateTimeParser time = new DateTimeFormatterBuilder(),6,1,0,1,2,0,10,0,0,18,52,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,            dtp = new DateTimeFormatterBuilder(),10,1,0,1,2,0,0,4,0,16,36,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,                return;,8,0,0,0,0,1,4,0,0,12,7,1,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,1,0,0,0,0,4,0,8,62,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,                negative = false;,8,1,0,0,0,0,0,0,0,10,17,6,0.22857,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,                            bestInvalidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,            SavedField[] newArray = new SavedField,2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,        if (dotp == null) {,0,0,0,1,3,0,8,0,0,8,19,9,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),8,3,0,1,2,0,0,0,0,11,60,6,0.22321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2242,            } else if (c == '+') {,0,1,1,1,4,0,0,0,0,10,22,6,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,181,        iSavedState = null;,4,0,0,0,0,0,0,0,0,5,19,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,182,        iOffset = offset;,4,1,0,0,0,0,0,0,0,5,17,5,0.21186,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,902,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,907,        return tt;,6,0,0,0,0,1,0,0,0,7,10,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2715,                if (bestValidState != null) {,2,1,0,1,3,0,0,0,0,3,29,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2718,                return bestValidPos;,2,0,0,0,0,1,0,0,0,2,20,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,866,        if (t == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.20447,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,867,            t = new DateTimeFormatterBuilder(),4,1,0,1,2,0,4,0,0,10,34,6,0.20447,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1846,"                printTo(buf, null, instant, chrono);",6,0,0,1,2,0,0,0,0,7,36,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1850,        },2,1,0,0,1,0,4,0,0,7,1,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1450,        if (hmsf == null) {,10,3,0,1,3,0,0,0,0,14,19,1,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1667,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1236,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",8,0,0,3,7,0,4,0,0,13,69,4,0.19841,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1892,            },8,2,0,0,1,0,0,0,0,10,1,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2699,                        bestValidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,24,11,0.1938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1936,                    digits--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1937,                    length--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1939,                if (length < str.length()) {,2,1,0,2,5,0,4,0,0,7,28,7,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1940,                    if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1941,                        for (int i=0; i<length; i++) {,4,0,0,1,3,0,0,0,0,4,30,6,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1942,                            buf.append(str.charAt(i));,0,0,0,2,4,0,10,0,0,10,26,14,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1908,"            long[] fractionData = getFractionData(fraction, field);",2,0,0,2,4,0,6,0,0,8,55,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1909,            long scaled = fractionData[0];,2,0,1,1,2,0,0,0,0,4,30,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1912,            if ((scaled & 0x7fffffff) == scaled) {,2,0,0,2,5,0,8,0,0,11,38,7,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1918,            int length = str.length();,10,1,0,1,2,0,4,0,0,15,26,1,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1919,            int digits = maxDigits;,2,0,1,0,0,0,0,4,0,8,23,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1930,            if (minDigits < digits) {,4,1,0,1,3,0,0,0,0,5,25,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1965,                switch (maxDigits) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1986,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,4,0,0,3,7,0,4,2,0,10,55,12,0.18382,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,26,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18338,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,475,                    return chronology.dayOfYear();,0,0,0,1,2,1,8,0,0,9,30,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2215,                if (iZeroOffsetParseText.length() == 0) {,4,1,0,2,5,0,4,0,0,10,41,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2226,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",2,0,0,3,7,0,4,2,0,8,97,7,0.18248,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,162,        if (converter != null) {,10,2,0,1,3,0,0,2,0,16,24,3,0.17606,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1326,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.17486,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.17486,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,160,        InstantConverter converter =,2,0,0,0,0,0,0,2,0,4,28,4,0.17483,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,75,            buf.append((char) (d + '0'));,2,1,1,3,6,0,8,0,0,16,29,1,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,12,4,0,5,10,0,4,0,0,22,55,4,0.16798,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1151,            buf.append(iValue);,8,0,0,1,2,0,8,4,0,22,19,1,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1152,        },2,0,0,0,1,0,0,0,0,2,1,4,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2511,            if (elements == null) {,16,2,1,1,3,0,2,2,0,27,23,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2515,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1413,        },2,0,0,0,1,2,0,6,0,10,1,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,10,1,0,3,6,0,4,4,0,20,78,3,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,457,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,16,4,0,27,54,3,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,460,    },2,0,0,0,1,0,4,2,0,8,1,5,0.16368,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.16203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,82,            } else if (value < 10000) {,2,1,0,1,4,0,0,0,0,3,27,8,0.16162,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,617,        chrono = selectChronology(chrono);,8,1,0,1,2,0,0,0,0,10,34,5,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,620,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,0,0,3,7,0,4,0,0,13,65,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,28,0,0,28,79,3,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2713,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,10,4,0,2,5,0,0,0,0,14,74,5,0.16026,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,80,            if (value < 1000) {,6,1,0,1,3,0,4,0,0,12,19,1,0.1596,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2211,            int limit = text.length() - position;,6,1,0,1,2,0,4,0,0,11,37,1,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2214,            if (iZeroOffsetParseText != null) {,2,1,0,1,3,0,0,0,0,3,35,6,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1181,                a = Character.toUpperCase(a);,2,0,0,1,2,0,6,0,0,9,29,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1183,                if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1185,                    b = Character.toLowerCase(b);,2,0,0,1,2,0,6,0,0,9,29,9,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2691,                    if (parsePos > bestValidPos) {,4,1,0,1,3,0,0,0,0,5,30,9,0.14881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2692,                        if (parsePos >= text.length() ||,2,0,0,1,3,0,0,0,0,2,32,4,0.14881,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1622,            lte = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14645,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1626,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.14645,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,495,            if (b == null || !b.isSupported()) {,2,2,0,2,5,0,4,0,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,735,            if (newPos >= text.length()) {,6,1,0,2,5,0,4,0,0,12,30,1,0.13889,0,0,-1
defect4j,time,org/joda/time/DateTime,26,174,"        super(instant, chronology);",4,0,0,1,2,0,0,0,0,4,27,4,0.13763,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.13559,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2703,                    if (parsePos < 0) {,2,1,0,1,3,0,0,0,0,3,19,9,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2704,                        parsePos = ~parsePos;,4,0,0,0,0,0,0,0,0,6,21,11,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2705,                        if (parsePos > bestInvalidPos) {,4,1,0,1,3,0,0,0,0,5,32,11,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2710,                bucket.restoreState(originalState);,2,0,0,1,2,0,20,0,0,23,35,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,289,        if (savedState instanceof SavedState) {,2,0,0,1,3,0,0,2,0,4,39,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,290,            if (((SavedState) savedState).restoreState(this)) {,2,0,0,4,9,0,2,2,0,6,51,7,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,426,            if (enclosing != DateTimeParserBucket.this) {,4,1,0,1,3,0,0,0,0,5,45,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,429,            enclosing.iZone = this.iZone;,6,0,0,0,0,0,0,0,0,7,29,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,430,            enclosing.iOffset = this.iOffset;,8,2,0,0,0,0,0,0,0,11,33,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,432,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,14,1,0,1,3,0,4,0,0,20,59,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,439,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,2,0,0,0,0,0,4,2,0,8,53,6,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,440,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.13369,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,26,343,        int year = iChronology.getYear(instant);,6,0,0,1,2,0,20,0,0,27,40,1,0.13298,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,26,344,"        int month = iChronology.getMonthOfYear(instant, year);",2,0,0,1,2,0,8,0,0,10,54,5,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2669,            int length = parsers.length;,8,0,0,0,0,0,0,0,0,8,28,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2671,            final Object originalState = bucket.saveState();,2,0,0,1,2,1,4,2,0,9,48,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2672,            boolean isOptional = false;,4,0,0,0,0,0,0,0,0,6,27,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2677,            int bestInvalidPos = position;,2,0,0,0,0,0,0,2,0,4,30,6,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2679,            for (int i=0; i<length; i++) {,8,1,0,1,3,0,0,0,0,10,30,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2680,                DateTimeParser parser = parsers[i];,4,1,1,1,2,0,0,2,0,11,35,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2681,                if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,7,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,274,        if (iSavedState == null) {,2,1,0,1,3,0,0,0,0,3,26,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,275,            iSavedState = new SavedState();,2,0,0,1,2,0,0,2,0,5,31,6,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,277,        return iSavedState;,2,0,0,0,0,1,0,0,0,2,19,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,419,            this.iZone = DateTimeParserBucket.this.iZone;,6,0,0,0,0,0,0,0,0,7,45,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,420,            this.iOffset = DateTimeParserBucket.this.iOffset;,8,0,0,0,0,0,2,0,0,11,49,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,422,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,6,0,0,0,0,0,0,0,0,7,69,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1671,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.13061,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1672,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.13061,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2072,                est += iMinFields - 1;,4,1,0,0,0,0,0,0,0,6,22,7,0.13008,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,67,        } else if (value < 100) {,8,3,0,1,4,0,0,0,0,12,25,4,0.12774,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1678,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",4,1,0,5,10,1,16,0,0,22,77,1,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",8,0,0,2,4,1,14,0,0,23,77,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",4,0,0,2,4,1,10,2,0,17,75,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,708,            tpe = new DateTimeFormatterBuilder(),10,0,0,1,2,0,4,2,0,18,36,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,744,        return tpe;,6,0,0,0,0,1,0,2,0,8,11,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,655,        DateTimePrinter printer = iPrinter;,8,0,0,0,0,0,0,2,0,11,35,1,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,656,        if (printer == null) {,4,1,0,1,3,0,4,0,0,10,22,7,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,659,        return printer;,2,0,0,0,0,1,0,0,0,2,15,4,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2070,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.12451,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2074,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,4,3,0,2,5,0,4,0,0,11,74,5,0.12451,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,64,                buf.append('0');,4,0,0,1,2,0,4,0,0,10,16,3,0.12403,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.12379,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,66,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.12379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,532,        if (fieldType == null) {,4,1,0,1,3,0,4,2,0,11,24,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,535,        if (maxDigits < minDigits) {,6,1,0,1,3,0,4,2,0,13,28,3,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1829,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1831,            if (maxDigits > 18) {,4,1,0,1,3,0,0,0,0,5,21,1,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1834,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1839,            return iMaxDigits;,4,0,0,0,0,1,0,0,0,5,18,1,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1997,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,5,0.12144,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,26,123,        return iChronology.getYearMillis(get(instant));,2,0,0,2,4,1,8,0,0,10,47,4,0.12077,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.11985,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,168,        if (chrono == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.11985,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,171,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.11985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2055,            iZeroOffsetPrintText = zeroOffsetPrintText;,6,1,0,0,0,0,0,0,0,8,43,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2056,            iZeroOffsetParseText = zeroOffsetParseText;,4,0,0,0,0,0,0,0,0,5,43,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2057,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2058,            if (minFields <= 0 || maxFields < minFields) {,6,3,0,1,3,0,0,0,0,9,46,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2061,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2065,            iMinFields = minFields;,6,0,0,0,0,0,0,2,0,9,23,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2066,            iMaxFields = maxFields;,8,2,0,0,0,0,6,0,0,17,23,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,255,        if (iChrono == chrono) {,6,1,0,1,3,0,0,0,0,7,24,3,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,729,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,731,        Chronology chrono = selectChronology(iChrono);,2,0,0,1,2,0,4,2,0,8,46,4,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,732,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",12,0,0,1,2,0,6,4,0,22,101,1,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,733,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,734,        if (newPos >= 0) {,8,0,0,1,3,0,4,0,0,13,18,4,0.11468,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11429,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1649,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1655,        return sme;,18,2,0,0,0,1,0,0,0,21,11,1,0.11368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1639,        if (mhe == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11307,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1640,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.11307,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1630,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11268,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1631,            hde = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.11268,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,363,            millis -= iOffset;,6,0,0,0,0,0,0,0,0,7,18,3,0.11013,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.10965,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1896,                    while (--minDigits >= 0) {,6,1,0,1,3,0,0,2,0,11,26,1,0.10965,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,146,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.10649,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.10492,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.10492,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,482,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,483,            int result = compareReverse,2,0,0,0,0,0,2,0,0,4,27,6,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,485,            if (result != 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,471,                millis = iField.roundFloor(millis);,2,0,0,1,2,0,6,0,0,9,35,7,0.10204,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1572,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.10095,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1573,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.10095,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1578,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.10095,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1192,            return position + 1;,2,1,0,0,0,1,0,0,0,3,20,5,0.10081,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1562,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.10016,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1563,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.10016,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1568,        return mye;,6,1,0,0,0,1,0,0,0,7,11,1,0.10016,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,26,66,        return Date.class;,2,1,0,0,0,1,0,0,0,3,18,5,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2473,                iPrinters = null;,2,0,0,0,0,0,0,0,0,3,17,7,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2474,                iPrintedLengthEstimate = 0;,2,0,0,0,0,0,16,0,0,19,27,1,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,341,            DurationField months = DurationFieldType.months().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,68,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,342,            DurationField days = DurationFieldType.days().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,64,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,344,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,353,"                millis = savedFields[i].set(millis, resetFields);",4,0,1,2,4,0,12,2,0,23,49,3,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,403,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,4,1,5,11,0,2,0,0,28,63,1,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,466,"                millis = iField.set(millis, iValue);",2,0,0,1,2,0,8,0,0,11,36,7,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,473,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",2,0,0,2,4,1,0,4,0,6,66,4,0.09771,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1554,            ye = new DateTimeFormatterBuilder(),12,1,0,1,2,0,0,2,0,17,35,1,0.09726,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1558,        return ye;,10,0,0,0,0,1,4,0,0,15,10,3,0.09726,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,371,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.0969,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.0969,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.0969,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,26,77,        return Long.class;,2,0,0,0,0,1,0,2,0,5,18,3,0.09542,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,915,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,916,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,922,        return chrono;,14,1,0,0,0,1,0,0,0,17,14,3,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1178,            char b = iValue;,6,0,0,0,0,0,4,4,0,15,16,3,0.09191,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,332,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,333,        int count = iSavedFieldsCount;,6,0,0,0,0,0,0,0,0,6,30,3,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,334,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,350,        long millis = iMillis;,6,0,0,0,0,0,6,0,0,13,22,1,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,360,        },12,1,0,0,1,0,0,0,0,15,1,5,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,362,        if (iZone == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,399,        if (high > 10) {,4,2,0,1,3,0,0,0,0,6,16,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,402,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,410,    },2,0,0,0,1,0,0,0,0,2,1,4,0.09124,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1554,                if (i > 0) {,4,2,0,1,3,0,0,0,0,6,12,5,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1316,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,10,6,0,4,8,0,4,0,0,23,63,1,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1292,                length++;,10,0,0,0,0,0,4,0,0,16,9,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1300,            if (length >= 9) {,2,1,0,1,3,0,0,0,0,3,18,5,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1305,                int i = position;,4,0,0,0,0,0,0,0,0,4,17,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1306,                if (negative) {,2,0,0,1,3,0,0,0,0,2,15,7,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1310,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1314,                position += length;,6,0,0,0,0,0,0,2,0,10,19,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1315,                while (i < position) {,4,1,0,1,3,0,10,0,0,15,22,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1318,                if (negative) {,6,0,0,1,3,0,4,0,0,11,15,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1323,"            bucket.saveField(iFieldType, value);",6,0,0,1,2,0,8,0,0,14,36,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1324,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.09058,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,253,                return converter;,2,0,0,0,0,1,0,2,0,4,17,8,0.09025,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,249,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,250,        int savedFieldsCount = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,4,41,5,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,252,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,261,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,262,        savedFields[savedFieldsCount] = field;,6,0,1,1,2,0,0,2,0,13,38,3,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,263,        iSavedFieldsCount = savedFieldsCount + 1;,4,1,0,0,0,0,0,0,0,6,41,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,450,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,452,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,454,            iLocale = null;,4,1,0,0,0,0,0,0,0,6,15,1,0.08961,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,611,        if (dpe == null) {,4,1,0,1,3,0,6,0,0,12,18,3,0.08803,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,634,        return dpe;,4,0,0,0,0,4,0,4,0,11,11,1,0.08803,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1289,                if (c < '0' || c > '9') {,4,3,0,1,3,0,0,0,0,9,25,7,0.08711,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,454,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,457,        if (minDigits <= 1) {,4,2,0,1,3,0,4,0,0,10,21,3,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1263,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1265,            boolean negative = false;,10,0,0,0,0,0,8,0,0,20,25,1,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1267,            while (length < limit) {,4,1,0,1,3,0,8,0,0,13,24,1,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1268,                char c = text.charAt(position + length);,8,2,0,1,2,0,4,0,0,14,40,4,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1295,            if (length == 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2584,            DateTimeParser[] elements = iParsers;,18,0,0,1,2,0,22,6,0,49,37,1,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2589,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2590,            for (int i=0; i<len && position >= 0; i++) {,10,3,0,1,3,0,0,0,0,14,44,5,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2593,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.08651,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,477,                    return chronology.monthOfYear();,2,0,0,1,2,1,6,0,0,9,32,7,0.08649,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1617,        return dye;,2,0,0,0,0,1,0,0,0,2,11,4,0.08621,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1601,        if (dwe == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1602,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1607,        return dwe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1592,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08562,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1597,        return wwe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08562,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,12,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2632,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2637,        },2,1,0,0,1,0,0,0,0,3,1,4,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,14,2,0,18,71,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1582,        if (we == null) {,12,1,0,1,3,0,4,0,0,18,17,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1587,        return we;,2,0,0,0,0,1,0,0,0,2,10,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",2,0,0,2,4,1,12,0,0,15,66,1,0.08389,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,0,6,0,0,9,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,209,        if (formatter == null) {,6,1,0,1,3,0,0,0,0,7,24,3,0.08344,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1559,            if (iTailZone == null) {,2,0,0,1,3,0,4,0,0,6,24,5,0.08333,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1562,            return iTailZone.getStandardOffset(instant);,4,0,0,1,2,1,6,0,0,11,44,1,0.08333,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1191,            return iStandardOffset;,4,1,0,0,0,1,4,0,0,10,23,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.08312,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,125,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.08279,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.08279,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,345,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.08247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,346,        iElementPairs.add(printer);,4,0,0,1,2,0,10,2,0,17,27,3,0.08247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,348,        return this;,8,0,0,0,0,1,4,0,0,13,12,4,0.08247,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,465,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.08237,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,153,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.08153,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1203,            super();,2,0,0,1,2,0,0,0,0,2,8,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1205,        },10,0,0,0,1,1,0,2,0,13,1,1,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,370,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1102,            return true;,6,1,0,0,0,1,8,0,0,16,12,3,0.0794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,900,        DateTimeParser parser = iParser;,12,0,0,0,0,0,4,2,0,19,32,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,901,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,904,        return parser;,2,0,0,0,0,1,0,0,0,2,14,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,71,    private SavedField[] iSavedFields = new SavedField[8];,14,1,0,2,4,1,0,4,0,22,54,1,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,120,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,122,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,10,0,0,18,58,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,125,        iDefaultYear = defaultYear;,6,1,0,0,0,0,4,0,0,13,27,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,162,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,163,        iZone = zone == DateTimeZone.UTC ? null : zone;,10,1,0,0,0,0,0,0,0,12,47,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,164,        iOffset = 0;,2,0,0,0,0,0,0,0,0,3,12,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1076,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1079,                    if (printer == parser || parser == null) {,6,3,0,1,3,0,0,0,0,9,42,10,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1080,                        f = printer;,4,0,0,0,0,0,0,0,0,5,12,12,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTime,26,285,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.07692,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,6,1,0,1,3,0,0,0,0,8,18,4,0.02128,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,4,0,0,1,2,0,0,4,0,8,48,4,0.02,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,173,    },2,0,0,0,1,0,0,2,0,4,1,5,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,419,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,4,1,0,0,0,0,0,0,0,7,17,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,6,0,0,0,0,0,4,0,0,11,22,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,2,0,0,1,3,0,0,0,0,2,32,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",4,1,0,1,2,0,12,0,0,18,71,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,6,3,0,1,3,0,4,0,0,16,27,1,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,484,            values[index] = value;,4,3,0,1,2,0,0,0,0,7,22,8,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,406,    },10,0,0,0,1,0,18,2,0,32,1,3,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",16,3,0,3,7,0,22,6,0,50,69,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,10,1,0,1,3,0,0,0,0,11,20,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,8,0,0,0,0,0,0,0,0,9,26,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,14,2,0,1,3,0,2,0,0,18,24,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,401,        if (period == null) {,14,1,0,1,3,0,6,4,0,25,21,1,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,440,        super.setPeriod(period);,24,4,0,1,2,0,42,0,0,73,24,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,338,    },8,0,0,0,1,3,0,12,0,23,1,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1822,            PeriodParser[] parsers = iParsers;,4,0,0,1,2,0,0,2,0,6,34,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1829,"                position = parsers[i].parseInto(period, periodStr, position, locale);",4,1,1,2,4,0,18,0,0,28,69,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1831,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1208,            int suffixPos = -1;,16,1,1,0,0,4,6,2,0,33,19,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1209,            if (iSuffix != null && !mustParse) {,10,2,0,1,3,1,0,0,0,14,36,2,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,335,        if (iParser == null) {,4,2,0,1,3,0,4,0,0,11,22,4,0.01667,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,243,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,2,0,0,2,4,0,12,0,0,14,86,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,244,        type = (type == null ? converter.getPeriodType(period) : type);,6,1,0,2,4,0,6,0,0,14,63,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,246,        iType = type;,8,0,0,0,0,0,0,4,0,13,13,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,247,        if (this instanceof ReadWritablePeriod) {,6,0,0,1,3,0,0,4,0,11,41,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,248,            iValues = new int[size()];,4,0,0,2,4,0,2,0,0,7,26,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,250,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",6,0,0,2,4,0,0,4,0,12,61,1,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,421,        PeriodConverter converter =,2,0,0,0,0,0,0,2,0,4,27,4,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,424,            return converter;,12,0,0,0,0,1,4,2,0,19,17,5,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,266,        if (type == null || length == 0) {,8,3,0,1,3,0,0,0,0,11,34,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,269,        if (length == 1) {,10,2,0,1,3,0,0,0,0,13,18,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,271,            return converters[0];,0,0,1,1,2,1,0,0,0,2,21,7,0.01266,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,73,        for (int i = 0; i < result.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,76,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0119,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,251,        PeriodType type = cYDTime;,8,1,0,0,0,0,0,0,0,10,26,5,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,252,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,3,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,264,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.01176,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,218,        if (index >= length) {,4,1,0,1,3,0,0,0,0,5,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,226,        Converter[] copy = new Converter[length - 1];,4,1,0,2,4,0,0,4,0,9,45,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,229,        for (int i=0; i<length; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,230,            if (i != index) {,8,0,0,1,3,0,4,0,0,13,17,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,256,            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {,2,1,0,3,7,0,0,0,0,3,87,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,259,                converters = set.iConverters;,6,0,0,0,0,0,0,0,0,7,29,8,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,260,                length = converters.length;,8,0,0,0,0,0,4,0,0,13,27,3,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,241,        return String.class;,2,0,1,0,0,1,0,2,0,9,20,3,0.01042,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,1,8,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,36,    static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();,4,1,0,1,2,2,0,4,0,11,82,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,134,        iPeriodConverters = new ConverterSet(new Converter[] {,2,0,0,1,4,0,0,4,0,7,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,147,    },2,0,0,0,1,0,6,0,0,9,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,89,        if (INSTANCE == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,35,        iConverters = converters;,16,3,0,0,0,0,4,2,0,28,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,36,        iSelectEntries = new Entry[1 << 4]; // 16,2,1,0,1,2,0,0,2,0,6,41,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,49,        Entry[] entries = iSelectEntries;,2,0,0,1,2,0,0,0,0,2,33,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,66,"        Converter converter = selectSlow(this, type);",4,0,0,1,2,0,10,2,0,16,45,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,67,"        e = new Entry(type, converter);",6,0,0,1,2,0,0,2,0,9,31,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,88,                iSelectEntries = entries;,10,0,0,0,0,0,0,2,0,14,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,89,                return converter;,2,0,0,0,0,1,8,0,0,10,17,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,244,        int length = converters.length;,12,3,0,0,0,0,0,2,0,20,31,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,247,        for (int i=length; --i>=0; ) {,2,0,0,1,3,0,4,2,0,8,30,8,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,248,            converter = converters[i];,2,0,1,1,2,0,0,0,0,7,26,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,249,            Class<?> supportedType = converter.getSupportedType();,2,0,0,1,2,0,0,0,0,2,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,251,            if (supportedType == type) {,4,1,0,1,3,0,0,0,0,5,28,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,322,"        Entry(Class<?> type, Converter converter) {",6,0,0,1,3,0,0,4,0,10,43,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,45,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,46,    },0,1,0,0,1,0,4,0,0,5,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,39,    static final NullConverter INSTANCE = new NullConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,95,        return null;,2,0,0,0,0,1,8,0,0,11,12,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,43,    static final CalendarConverter INSTANCE = new CalendarConverter();,2,0,0,1,2,2,0,4,0,8,66,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,41,        super();,2,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,42,    },4,0,0,0,1,0,0,0,0,5,1,5,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,35,    static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,41,        super();,8,0,0,1,2,0,4,4,0,17,8,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,35,    static final DateConverter INSTANCE = new DateConverter();,4,1,0,1,2,2,0,4,0,11,58,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,36,    static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,41,    },12,0,0,0,1,0,4,8,0,24,1,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,34,    static final LongConverter INSTANCE = new LongConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,36,    static final ReadablePeriodConverter INSTANCE = new ReadablePeriodConverter();,6,3,0,1,2,2,0,4,0,15,78,1,0.0102,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,384,            if (newValue != 0) {,4,0,0,1,3,0,0,8,0,12,20,6,0.00926,0,0,-1
defect4j,time,org/joda/time/Period,27,326,    },2,0,0,0,1,0,8,0,0,11,1,9,0.00877,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,27,38,        super();,2,0,0,1,2,0,10,2,0,14,8,4,0.00787,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,50,        super();,2,0,0,1,2,0,0,0,0,2,8,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Period,27,303,    },12,8,0,0,1,0,0,0,0,21,1,4,0.00694,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,447,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",6,0,0,2,4,0,12,4,0,22,60,1,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,453,        iValues = newValues;,4,0,0,0,0,0,0,0,0,5,20,4,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,81,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,82,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,83,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",2,0,0,1,2,0,20,4,0,26,98,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,444,        int[] newValues = new int[size()];,10,1,0,3,6,0,6,2,0,21,34,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,445,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",6,5,0,2,4,0,0,0,0,11,60,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,383,        if (index == -1) {,8,1,0,1,3,0,4,0,0,14,18,3,0.00463,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,650,                return i;,4,0,0,0,0,1,0,0,0,5,9,3,0.00422,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,648,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00418,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,0,0,0,7,24,6,0.00418,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00397,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,66,            cStandard = new PeriodFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,40,6,0.00397,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,85,        return cStandard;,8,0,0,0,0,1,2,0,0,11,17,1,0.00397,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,857,        SimpleAffix(String text) {,4,0,0,1,3,0,0,2,0,6,26,3,0.00383,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,859,        },4,0,0,0,1,0,0,0,0,5,1,5,0.00383,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,228,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,234,        return this;,6,0,0,0,0,1,0,0,0,7,12,3,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1543,            iText = text;,10,1,1,0,0,0,0,0,0,16,13,1,0.0037,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1544,        },4,1,0,0,1,0,0,0,0,5,1,6,0.0037,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1539,"        static final Literal EMPTY = new Literal("""");",2,0,0,1,2,2,0,4,0,9,45,3,0.0037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,102,            return chrono;,4,0,0,0,0,1,0,2,0,6,14,3,0.00361,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,27,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.00347,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,2,1,0,2,4,0,8,0,0,12,61,6,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,605,        clearPrefix();,4,0,0,1,2,0,0,2,0,7,14,7,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",6,0,0,2,4,0,0,6,0,12,87,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0,1,0,2,4,0,10,0,0,11,54,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",2,0,0,2,4,0,0,2,0,4,54,8,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1063,            iMinPrintedDigits = field.iMinPrintedDigits;,6,0,0,0,0,0,0,0,0,7,44,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1064,            iPrintZeroSetting = field.iPrintZeroSetting;,6,0,0,0,0,0,0,0,0,7,44,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1065,            iMaxParsedDigits = field.iMaxParsedDigits;,6,0,0,0,0,0,0,0,0,7,42,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1066,            iRejectSignedValues = field.iRejectSignedValues;,6,0,0,0,0,0,0,0,0,7,48,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1067,            iFieldType = field.iFieldType;,10,3,0,0,0,0,0,0,0,14,30,1,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1069,            iPrefix = field.iPrefix;,4,0,0,0,0,0,0,0,0,4,24,6,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1070,            if (field.iSuffix != null) {,4,1,0,1,3,0,0,0,0,5,28,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1529,            return iFieldType;,2,0,0,0,0,1,0,0,0,2,18,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,591,        if (iElementPairs.size() > 0) {,4,2,0,2,5,0,4,0,0,10,31,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,734,        clearPrefix();,6,0,0,1,2,0,2,0,0,9,14,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,737,        List<Object> pairs = iElementPairs;,12,0,0,0,0,0,10,4,0,27,35,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,738,        if (pairs.size() == 0) {,8,1,0,2,5,0,8,0,0,18,24,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,750,        Separator lastSeparator = null;,10,0,0,0,0,0,4,2,0,17,31,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,751,        for (i=pairs.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,32,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,761,        if (lastSeparator != null && pairs.size() == 0) {,2,3,0,2,5,0,4,0,0,9,49,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,764,            Object[] comp = createComposite(pairs);,2,0,0,2,4,0,4,2,0,8,39,6,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,770,            pairs.add(separator);,0,0,0,1,2,0,2,0,0,2,21,7,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,800,            Separator sep = (Separator) elementPairs.get(0);,2,0,0,2,4,0,4,4,0,10,48,6,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1593,"                boolean useBefore, boolean useAfter) {",4,0,0,0,2,0,0,0,0,4,38,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1616,            iBeforePrinter = beforePrinter;,2,0,0,0,0,0,4,0,0,7,31,11,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1617,            iBeforeParser = beforeParser;,4,0,0,0,0,0,0,0,0,5,29,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1618,            iUseBefore = useBefore;,12,0,0,0,0,0,4,0,0,18,23,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1619,            iUseAfter = useAfter;,4,0,0,0,0,0,0,0,0,5,21,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1748,            iAfterPrinter = afterPrinter;,4,0,0,0,0,0,0,0,0,5,29,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1749,            iAfterParser = afterParser;,6,0,0,0,0,0,0,0,0,8,27,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,438,        return this;,2,0,0,0,0,1,2,0,0,4,12,4,0.00332,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,146,        return iParser;,4,1,0,0,0,1,0,0,0,5,15,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,451,        return this;,4,0,0,0,0,1,0,0,0,5,12,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,782,        iPrefix = null;,4,1,0,0,0,0,0,0,0,6,15,6,0.00316,0,0,-1
defect4j,time,org/joda/time/Period,27,63,    public static final Period ZERO = new Period();,4,0,0,1,2,3,0,4,0,12,47,1,0.00302,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,128,        return iPrinter;,2,0,0,0,0,1,10,0,0,12,16,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",8,1,0,0,1,0,0,4,0,13,72,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,538,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1051,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {",4,0,0,0,2,0,14,6,0,24,51,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1052,            iMinPrintedDigits = minPrintedDigits;,4,0,0,0,0,0,0,0,0,5,37,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1053,            iPrintZeroSetting = printZeroSetting;,4,0,0,0,0,0,0,0,0,5,37,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1054,            iMaxParsedDigits = maxParsedDigits;,8,1,0,0,0,0,0,0,0,10,35,1,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1055,            iRejectSignedValues = rejectSignedValues;,4,0,0,0,0,0,0,0,0,5,41,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1056,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1057,            iFieldFormatters = fieldFormatters;,4,0,0,0,0,0,0,0,0,5,35,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1058,            iPrefix = prefix;,4,0,0,0,0,0,0,0,0,5,17,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,89,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,90,        iLocale = null;,6,1,0,0,0,0,0,0,0,8,15,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,92,    },2,0,0,0,1,0,4,0,0,6,1,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,124,        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();,2,0,0,3,6,0,4,2,0,9,63,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,125,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,789,        iNotParser |= (parser == null);,4,1,0,1,2,0,0,0,0,6,31,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,795,        if (notPrinter && notParser) {,4,1,0,1,3,0,6,0,0,11,30,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,805,        Object[] comp = createComposite(elementPairs);,2,0,0,2,4,0,4,2,0,8,46,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,806,        if (notPrinter) {,2,0,0,1,3,0,0,0,0,2,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,816,        switch (elementPairs.size()) {,4,0,0,2,5,0,4,0,0,9,30,1,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,823,"                return new Object[] {comp, comp};",4,0,0,2,4,1,0,2,0,6,33,6,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1764,        Composite(List<Object> elementPairs) {,4,0,0,1,3,0,0,4,0,8,38,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1765,            List<Object> printerList = new ArrayList<Object>();,4,0,0,1,2,0,0,2,0,6,51,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1766,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1770,            if (printerList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,30,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1773,                iPrinters = printerList.toArray(,2,0,0,0,1,0,4,0,0,7,32,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1777,            if (parserList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,29,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1783,        },0,0,0,0,1,0,8,2,0,10,1,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1835,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1836,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1837,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1838,                if (element instanceof PeriodPrinter) {,4,1,0,1,3,0,0,2,0,7,39,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1839,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1846,                element = elementPairs.get(i + 1);,4,1,0,1,2,0,4,0,0,10,34,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1847,                if (element instanceof PeriodParser) {,2,0,0,1,3,0,0,2,0,4,38,8,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1848,                    if (element instanceof Composite) {,6,1,0,1,3,0,0,2,0,9,35,1,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1855,        },4,1,0,0,1,0,0,0,0,5,1,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,101,    public PeriodFormatterBuilder() {,2,0,0,1,3,0,6,0,0,9,33,7,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,103,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,172,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,4,0,0,0,0,0,0,0,0,5,43,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,174,        iRejectSignedValues = false;,2,0,0,0,0,0,0,0,0,4,28,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,175,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,176,        if (iElementPairs == null) {,2,1,0,1,3,0,0,0,0,3,28,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,177,            iElementPairs = new ArrayList<Object>();,8,2,0,1,2,0,0,4,0,16,40,6,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,182,        iNotParser = false;,2,0,0,0,0,0,0,0,0,4,19,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,183,        iFieldFormatters = new FieldFormatter[10];,2,0,0,1,2,0,0,2,0,5,42,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,184,    },4,0,0,0,1,0,0,4,0,8,1,4,0.00288,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,226,        type = checkPeriodType(type);,6,0,0,1,2,0,4,0,0,12,29,1,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,227,        chrono = DateTimeUtils.getChronology(chrono);,10,1,0,1,2,0,8,0,0,20,45,1,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,228,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,229,"        iValues = chrono.get(this, duration);",2,0,0,1,2,0,6,0,0,9,37,4,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,230,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00273,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,0.00272,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,278,        if (duration != 0) {,10,1,0,1,3,0,4,0,0,16,20,3,0.00272,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,287,            return PeriodType.standard();,2,0,0,1,2,1,10,0,0,13,29,1,0.0027,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,102,        PeriodType type = cStandard;,4,0,0,0,0,0,0,2,0,6,28,4,0.0026,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,103,        if (type == null) {,4,1,0,1,3,0,6,0,0,12,19,1,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,286,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00249,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,299,        return iType.size();,12,1,0,1,2,1,4,0,0,19,20,3,0.00249,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,617,        return iTypes.length;,4,0,0,0,0,1,0,0,0,4,21,5,0.00249,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,4,0,0,0,0,0,0,0,0,5,41,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,252,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,172,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,173,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,180,            cDefault = zone;,4,0,0,0,0,0,4,0,0,9,16,3,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,96,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,101,        if (chrono != null && chrono.getZone() == zone) {,4,3,0,2,5,0,4,0,0,11,49,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,104,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,106,            if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,3,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",2,0,0,2,4,0,8,2,0,13,76,8,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,111,        cFastCache[index] = chrono;,6,1,1,1,2,0,4,0,0,17,27,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,112,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,27,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,1,0,2,4,1,16,0,0,17,70,3,0.00192,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,27,55,        return iType;,4,0,0,0,0,1,4,0,0,9,13,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,27,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,8,0,0,8,38,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,109,        return getWrappedField().getUnitMillis() * iScalar;,4,2,0,2,4,1,4,0,0,10,51,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,148,        int hash = (int) (scalar ^ (scalar >>> 32));,8,2,0,3,6,0,6,0,0,17,44,1,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,149,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,151,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,27,69,        return iField;,10,3,0,0,0,1,0,0,0,13,14,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,142,        long millis = iUnitMillis;,4,0,0,0,0,0,0,0,0,4,26,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,27,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,27,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,27,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,27,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,1165,        return 57 + getID().hashCode();,2,1,0,2,4,1,4,0,0,7,31,4,0.00191,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,776,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,847,"            setMillis(getChronology().seconds().add(getMillis(), seconds));",2,0,0,5,10,0,12,0,0,14,63,3,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1633,            if (months != 0) {,8,1,0,1,3,0,4,2,0,15,18,1,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1634,                result = result.withMonths(months);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,286,                minutesOffset = hoursInMinutes - minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.0,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();,2,0,0,1,2,1,0,8,0,11,66,2,0.33333,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,        cVerbose.set(Boolean.FALSE);,6,0,0,1,2,0,10,0,0,17,28,1,0.33333,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,900,        return offsetAdjusted;,4,1,0,0,0,1,0,0,0,5,22,3,0.01261,1,1,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,0,6,0,0,9,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,448,"               return iZone.convertLocalToUTC(localInstant, false);",0,0,0,1,2,1,6,0,0,7,52,8,0.0,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,1,0,0,0,2,52,5,0.0,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
