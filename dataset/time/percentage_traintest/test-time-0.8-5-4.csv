dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/DateTimeZone,23,302,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,                break;,0,0,0,0,0,0,0,0,0,0,6,4,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,490,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,508,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,6.125,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",0,0,0,1,2,0,6,0,0,6,22,5,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",0,0,0,1,2,0,0,0,0,3,39,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,    },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,0,0,0,0,7,38,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },0,0,0,0,1,0,0,0,0,1,1,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,570,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,574,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,3.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,            return getWeeksInYear(year - 1);,0,0,0,1,2,1,0,0,0,4,32,4,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,        return parseLocalDateTime(text).toLocalDate();,0,0,0,2,4,1,0,0,0,7,46,4,2.72222,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());",0,0,0,3,6,1,0,0,0,10,56,4,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,2.57895,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,8,0,0,8,78,6,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,399,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,401,    },12,4,0,0,1,0,12,0,0,30,1,1,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,6,0,0,1,2,0,6,0,0,14,46,4,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,0,1,0,1,3,0,8,0,0,9,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,1,2,0,18,0,0,18,44,1,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,                        break;,2,1,1,0,0,0,0,0,0,5,6,8,1.8,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,8,0,0,8,57,6,0.06429,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,893,                long nextLocal = nextTransition(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,49,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,894,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0,0,0,1,2,0,0,0,0,3,66,4,0.04167,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,895,                if (nextLocal != nextAdjusted) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04167,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,        return iZone.nextTransition(instant);,0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,63,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,                buf.append(':');,0,0,0,1,2,0,8,0,0,11,16,1,0.03409,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03358,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,        return dt;,4,1,0,0,0,1,0,0,0,5,10,3,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,            tt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,        return tt;,0,0,0,0,0,1,0,0,0,1,10,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,        if (t == null) {,0,0,0,1,3,0,4,2,0,6,16,1,0.02813,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0,-1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0,-1
defect4j,time,org/joda/time/DateTime,26,518,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,519,        if (getChronology() == chronology) {,0,0,0,2,5,0,0,0,0,7,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,522,        return super.toDateTime(chronology);,0,0,0,1,2,1,0,0,0,4,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,5,10,1,0,0,0,16,75,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.52083,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,        iChronology = chrono;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,26,843,        return getOffset(instant) == getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.48039,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);",0,0,0,2,4,1,0,0,0,7,45,4,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,51,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,                return iStandardOffset;,0,0,0,0,0,1,0,0,0,1,23,4,0.36364,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,        return ISOChronology.getInstance(zone);,0,0,0,1,2,1,0,0,0,4,39,4,0.35211,0,0,-1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0,0,0,4,8,1,0,0,0,13,84,4,0.34783,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,59,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0,0,0,2,4,0,0,0,0,6,55,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,                long nn = n / 10;,0,0,0,0,0,0,0,0,0,0,17,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,                n = nn;,0,0,0,0,0,0,0,0,0,0,7,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,            value /= 10;,0,0,0,0,0,0,0,0,0,0,12,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0,0,0,0,0,0,0,0,0,0,13,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02439,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0,0,0,1,2,1,0,0,0,4,24,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,                return period;,0,0,0,0,0,1,0,0,0,1,14,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,2,5,0,0,0,0,7,62,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,3,7,0,0,0,0,10,72,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,                return position + iText.length();,0,0,0,1,2,1,0,0,0,4,33,4,0.02174,0,0,-1
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.02128,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
