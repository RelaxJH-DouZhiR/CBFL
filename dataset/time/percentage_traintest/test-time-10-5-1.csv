dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/DecoratedDurationField,5,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.00563,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,5,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00563,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,5,142,        long millis = iUnitMillis;,2,0,0,0,0,0,0,0,0,2,26,5,0.00563,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,5,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,8,0,0,16,44,3,0.00563,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,5,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00563,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,5,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00563,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,5,102,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,4,0,0,4,48,5,0.00563,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,5,112,        return iChronology.days();,0,0,0,1,2,1,4,0,0,4,26,5,0.00563,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,335,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00563,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,5,221,        return iChronology.weeks();,0,0,0,1,2,1,0,0,0,4,27,4,0.00563,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,148,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.00563,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,5,95,        return iChronology.weeks();,0,0,0,1,2,1,0,0,0,4,27,4,0.00563,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,134,        DateTimeZone zone = cDefault;,4,0,0,0,0,0,0,2,0,6,29,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,135,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,136,            synchronized(DateTimeZone.class) {,4,0,0,1,3,0,2,2,0,8,34,3,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,137,                zone = cDefault;,4,0,0,0,0,0,0,0,0,5,16,8,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,138,                if (zone == null) {,2,1,0,1,3,0,0,0,0,4,19,3,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,139,                    DateTimeZone temp = null;,4,1,0,0,0,0,0,0,0,5,25,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,142,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,143,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,144,                                temp = forID(id);,7,0,0,1,2,0,6,2,0,16,17,5,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,149,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,154,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,155,                    if (temp == null) {,8,2,1,1,3,0,0,8,0,21,19,1,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,158,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,160,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,5,162,        return zone;,4,0,0,0,0,1,6,0,0,11,12,1,0.00562,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,5,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00562,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,5,132,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00562,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,5,161,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00561,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,5,315,        return iParam;,2,0,0,0,0,1,8,0,0,10,14,4,0.00559,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,5,55,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00559,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,5,91,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00559,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,5,140,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,5,57,        return iChronology.years();,0,0,0,1,2,1,4,0,0,4,27,5,0.00559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,5,209,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,5,59,        return iChronology.weekyears();,2,0,0,1,2,1,4,0,0,6,31,1,0.00559,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,5,123,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00558,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,5,96,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00558,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,5,52,        return iChronology.months();,0,0,0,1,2,1,4,0,0,4,28,5,0.00558,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,5,316,        return iChronology.years();,0,0,0,1,2,1,4,0,0,4,27,5,0.00558,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,284,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00557,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,5,142,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.18182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,0,0,0,3,78,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.17241,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0,0,0,1,3,0,0,0,0,4,18,4,0.10256,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0,0,0,2,4,1,0,0,0,7,32,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0,0,0,0,0,1,0,0,0,1,42,4,0.05634,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,2,1,0,0,0,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,2,1,1,1,2,0,0,0,0,5,33,8,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,0,0,0,6,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,531,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05519,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,48,    },2,1,0,0,1,0,0,0,0,3,1,5,0.05519,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,632,        if (this == partial) {,6,2,0,1,3,0,8,0,0,16,22,1,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,635,        if (partial instanceof LocalDate) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,636,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,0.05479,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,4,1,0,0,0,0,0,0,0,6,30,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,229,                leapYears++;,0,0,0,0,0,0,0,0,0,0,12,4,0.05,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,41,        StringBuilder buf = new StringBuilder(),0,0,0,1,2,0,0,0,0,3,39,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,63,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,4,1,0,1,3,0,0,0,0,5,22,3,0.04327,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04327,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.04318,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.03863,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,55,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03704,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.03551,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,50,4,0.03279,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,6,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.03226,0,0,-1
defect4j,time,org/joda/time/Instant,6,144,        return this;,2,0,1,0,0,1,0,4,0,8,12,4,0.03045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,8,0,0,11,46,1,0.03045,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,54,        super();,6,1,0,1,2,0,4,0,0,12,8,4,0.027,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.027,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.02629,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,8,4,0,1,2,0,4,0,0,19,36,1,0.0252,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",20,3,0,2,4,0,4,4,0,32,105,1,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,511,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,512,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,21,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,515,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,516,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,518,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,519,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.02518,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,886,        long newInstant = roundFloor(instant);,0,0,0,1,2,0,0,0,0,3,38,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,888,"            instant = add(newInstant, 1);",6,1,0,1,2,0,18,0,0,26,29,3,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,943,"            this(julianField, gregorianField, null, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,944,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,954,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,0,0,1,2,0,4,2,0,17,71,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,955,        },8,2,0,0,1,0,0,0,0,10,1,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,965,        {,2,1,0,0,1,0,0,0,0,3,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,966,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0,0,0,1,2,0,0,0,0,3,69,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,967,            if (durationField == null) {,0,0,0,1,3,0,6,0,0,7,28,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,968,"                durationField = new LinkedDurationField(iDurationField, this);",6,0,1,1,2,0,0,2,0,17,62,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,970,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,971,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,621,"            this(julianField, gregorianField, cutoverMillis, false);",2,0,0,1,2,0,8,0,0,10,56,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,622,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,631,"                     long cutoverMillis, boolean convertByWeekyear) {",6,0,0,0,2,0,6,0,0,12,48,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,632,            super(gregorianField.getType());,0,0,0,2,4,0,0,0,0,6,32,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,633,            iJulianField = julianField;,14,2,0,0,0,0,4,2,0,24,27,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,634,            iGregorianField = gregorianField;,0,0,0,0,0,0,0,0,0,0,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,635,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,4,25,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,636,            iConvertByWeekyear = convertByWeekyear;,0,0,0,0,0,0,0,0,0,0,39,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,639,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,16,0,0,22,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,641,            DurationField rangeField = gregorianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,66,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,642,            if (rangeField == null) {,2,0,0,1,3,0,0,4,0,7,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,643,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,645,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,646,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,773,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,270,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,6,1,0,1,2,2,0,4,0,14,69,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,84,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,190,        zone = DateTimeUtils.getZone(zone);,8,0,0,1,2,0,6,0,0,15,35,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,192,        if (gregorianCutover == null) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,199,        synchronized (cCache) {,2,0,0,1,3,0,8,0,0,10,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,200,            ArrayList<GJChronology> chronos = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,201,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,202,                chronos = new ArrayList<GJChronology>(2);,4,0,0,1,2,1,4,4,0,14,41,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,203,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,214,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,215,                chrono = new GJChronology,2,1,0,0,0,0,0,0,0,3,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,227,            chronos.add(chrono);,0,0,0,1,2,0,6,0,0,6,20,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,228,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,229,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,474,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,1,39,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,476,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,477,        GregorianChronology gregorian = (GregorianChronology)params[1];,6,0,1,2,4,0,4,6,0,18,63,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,478,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,479,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,481,        iJulianChronology = julian;,10,3,0,0,0,0,0,0,0,14,27,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,482,        iGregorianChronology = gregorian;,0,0,0,0,0,0,0,0,0,0,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,483,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,485,        if (getBase() != null) {,2,1,0,2,5,0,0,0,0,4,24,9,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,489,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,0,0,3,7,0,0,0,0,10,82,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,494,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,500,        fields.copyFieldsFrom(gregorian);,4,2,0,1,2,0,0,0,0,6,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,506,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,10,6,0,3,7,0,2,2,0,20,55,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,526,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",14,0,0,2,4,0,12,2,0,30,72,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,535,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,536,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,541,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,542,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,550,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,552,            fields.years = fields.year.getDurationField();,14,0,0,1,2,0,2,0,0,19,46,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,553,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,45,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,555,            fields.yearOfCentury = new ImpreciseCutoverField(,6,0,0,0,1,0,4,2,0,14,49,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,558,            fields.centuryOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,48,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,560,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,562,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,564,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,566,            fields.weekyear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,568,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,570,            fields.weekyears = fields.weekyear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,576,            CutoverField cf = new CutoverField,4,0,0,0,0,0,8,4,0,17,34,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,578,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,579,            fields.dayOfMonth = cf;,10,0,0,0,0,0,0,2,0,14,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,581,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,584,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,2,0,0,2,71,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1094,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1095,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1096,        },12,1,0,0,1,0,10,0,0,24,1,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,127,        int year = get(instant);,0,0,0,1,2,0,0,0,0,3,24,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,129,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,133,        return instant;,4,0,0,0,0,1,0,0,0,4,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,72,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,1,2,1,2,0,0,12,60,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,81,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,84,        return value;,4,0,0,0,0,1,16,0,0,20,13,1,0.0251,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,133,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,134,        if ( thisWeekyear == year ) {,0,0,0,1,3,0,0,0,0,4,29,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,140,        int thisDow = iChronology.getDayOfWeek(instant);,6,0,1,1,2,0,6,0,0,17,48,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,4,0,0,1,2,0,10,0,0,15,65,3,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0,0,0,1,2,0,0,0,0,3,55,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,14,2,1,1,2,2,4,2,0,28,53,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,0,0,0,2,55,8,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,155,        if ( setToWeek > maxOutWeeks ) {,4,1,0,1,3,0,0,0,0,5,32,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,162,        long workInstant = instant; // Get a copy,0,0,0,0,0,0,0,0,0,0,41,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,168,"        workInstant = iChronology.setYear( workInstant, year );",0,0,0,1,2,0,0,0,0,3,55,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,173,        int workWoyYear = get( workInstant );,4,0,0,1,2,0,8,0,0,12,37,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,179,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,181,        } else if ( workWoyYear > year ) {,0,0,0,1,4,0,0,0,0,5,34,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,6,1,0,1,2,0,10,0,0,18,64,3,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),10,2,0,1,2,0,0,0,0,14,56,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,221,        if (relativeYear <= 0) {,4,2,0,1,3,0,0,0,0,6,24,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,0,0,0,0,6,89,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.02508,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,96,        return iField.get(instant);,0,0,0,1,2,1,6,0,0,6,27,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,3,6,1,0,0,0,10,89,6,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,6,0,0,6,40,5,0.02505,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,502,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,503,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,504,        if (week == 1) {,10,1,0,1,3,0,0,0,0,12,16,3,0.02503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,185,        return iMinDaysInFirstWeek;,0,0,0,0,0,1,0,0,0,1,27,4,0.025,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0,0,0,3,6,0,0,0,0,9,66,4,0.025,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.02495,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,353,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,8,0,0,14,39,3,0.02493,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,548,            if (daysSince19700101 < -3) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0249,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,163,        return getMaximumValue(instant);,10,0,0,1,2,1,14,6,0,31,32,1,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0,0,0,2,4,0,0,0,0,6,59,4,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,235,        int wow = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,49,5,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,236,        if (wow > 1) {,6,1,0,1,3,0,0,0,0,8,14,1,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,239,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.0249,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),8,2,0,1,2,1,0,0,0,10,71,6,0.0249,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,792,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.02488,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,6,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.02485,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,6,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.02485,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,302,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.02483,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,517,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,2,4,1,0,0,0,7,52,4,0.02483,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,299,        if (zone == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.0248,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,348,        long jan1millis = getYearMillis(year);,0,0,0,1,2,0,2,0,0,2,38,6,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,349,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0,0,0,1,2,0,0,0,0,3,45,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,351,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,4,2,0,2,5,0,0,0,0,6,48,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,525,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,526,        if (instant < firstWeekMillis1) {,8,4,0,1,3,0,0,0,0,12,33,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,529,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,530,        if (instant >= firstWeekMillis2) {,4,1,0,1,3,0,0,0,0,5,34,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,533,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.02478,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,0,0,0,1,63,4,0.02475,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,95,            instant += 1;,4,0,0,0,0,0,6,2,0,13,13,3,0.02468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.02468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,6,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.02456,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,153,        if ((base = getBase()) != null) {,4,1,0,3,7,0,6,0,0,14,33,4,0.02451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,0,0,0,0,28,4,0.02451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.02451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0,0,0,1,2,1,0,0,0,4,45,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,96,"        return super.set(millis, value);",8,0,0,1,2,1,6,0,0,15,32,3,0.02439,0,0,-1
defect4j,time,org/joda/time/Instant,6,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.02404,0,0,-1
defect4j,time,org/joda/time/Instant,6,119,        iMillis = instant;,4,0,0,0,0,0,0,0,0,5,18,4,0.02404,0,0,-1
defect4j,time,org/joda/time/Instant,6,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02404,0,0,-1
defect4j,time,org/joda/time/Instant,6,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.02376,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",10,0,0,3,6,3,0,16,0,32,116,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,45,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,0,0,0,4,28,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,46,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,131,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,132,                chronos = new JulianChronology[7];,4,1,0,1,2,0,12,2,0,21,34,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,140,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,62,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,152,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,241,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,245,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,257,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,4,0,0,6,24,1,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,265,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,266,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02336,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,224,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.02111,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.02111,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02111,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,196,        return iField.getRangeDurationField();,0,0,0,1,2,1,4,0,0,4,38,5,0.02111,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,65,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,66,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,67,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,68,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,69,            iMinValue = min - 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,75,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0211,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,212,        return iField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,32,5,0.0211,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,52,"        this(field, null);",2,0,0,1,2,0,0,0,0,2,18,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,62,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,63,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,66,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,67,        iType = (type == null ? field.getType() : type);,6,1,0,2,4,0,4,0,0,12,48,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,6,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02106,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,92,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,115,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.02034,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,306,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.0197,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,316,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0197,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,319,        if (zone == getZone()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0197,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,320,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,292,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.01963,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,295,        return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,5,0.01963,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.01941,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,444,"        return getMonthOfYear(millis, getYear(millis));",2,0,0,2,4,1,6,0,0,9,47,4,0.01862,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,0,0,0,4,43,4,0.01862,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.01822,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,6,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,6,0,0,6,41,5,0.0182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,543,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01809,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,79,            if (year == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01717,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.01717,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,921,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.01713,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",2,0,0,1,3,0,2,0,0,5,60,6,0.01712,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,80,        return instant + (value - get(instant)) * iUnitMillis;,0,0,0,2,4,1,0,0,0,7,54,4,0.01712,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,75,public final class GJChronology extends AssembledChronology {,0,0,0,0,1,0,0,0,0,1,61,4,0.01709,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,175,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",4,1,0,1,2,0,6,0,0,11,48,3,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,177,        int millisOfDay = getMillisOfDay(instant);,0,0,0,1,2,0,0,0,0,3,42,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,0,0,0,3,52,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,198,        return instant;,2,0,0,0,0,1,6,0,0,9,15,7,0.01706,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,494,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.01705,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,495,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,12,4,0,3,6,1,0,0,0,16,76,3,0.01705,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,78,        if (year <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01693,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.01693,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",8,1,0,2,4,1,4,0,0,13,84,3,0.01693,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,560,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0168,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,222,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01656,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,217,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.01655,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,614,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,3,6,0,16,0,0,16,115,5,0.01633,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,615,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,8,0,0,8,60,5,0.01633,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,4,8,0,14,0,0,14,89,5,0.01631,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,3,6,0,14,0,0,14,97,5,0.01631,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,691,        return getMaxMonth();,0,0,0,1,2,1,0,0,0,4,21,4,0.01631,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,240,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01631,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,6,235,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.0163,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,6,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01595,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.01592,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.01555,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,457,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.01553,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,458,"        int month = getMonthOfYear(millis, year);",0,0,0,1,2,0,0,0,0,3,41,4,0.01553,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,459,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,0,0,0,4,42,4,0.01553,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.01553,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,0,0,0,4,36,4,0.01552,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,120,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.0155,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,221,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.0154,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,477,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.01533,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,478,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.01533,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,479,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,0,0,0,10,76,4,0.01533,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.01519,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,93,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.01519,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.01515,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,241,        return (1970L * MILLIS_PER_YEAR) / 2;,2,2,0,1,2,1,0,0,0,4,37,4,0.01515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,408,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,0,0,1,2,0,2,0,0,6,56,3,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,409,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,410,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,413,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,0,0,0,6,35,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,415,        long yearStart = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,37,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,416,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,418,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,420,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,12,5,0,1,4,0,4,0,0,21,61,3,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,437,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.01513,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,139,        if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.01512,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,202,        int leapYears = year / 100;,4,1,0,0,0,0,0,0,0,5,27,5,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,7,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,14,5,0,2,4,1,0,0,0,19,90,1,0.01499,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,8,0,5,10,1,0,2,0,16,69,1,0.01484,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,394,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.01471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,395,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.01471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,396,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,74,4,0.01471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,369,        return getYearInfo(year).iFirstDayMillis;,2,0,0,1,2,1,4,0,0,6,41,5,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,747,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,14,1,1,1,2,0,4,2,0,24,50,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,748,        if (info == null || info.iYear != year) {,8,3,0,1,3,0,0,0,0,11,41,4,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,749,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,750,            iYearInfoCache[year & CACHE_MASK] = info;,10,3,1,1,2,0,2,0,0,18,41,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,752,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,779,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,780,            iYear = year;,4,0,0,0,0,0,0,0,0,5,13,5,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,781,            iFirstDayMillis = firstDayMillis;,0,0,0,0,0,0,0,0,0,0,33,4,0.01417,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,782,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01417,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,61,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01411,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01411,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.01267,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,561,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0,0,0,2,4,1,0,0,0,7,58,4,0.01113,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,6,282,        if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01109,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,6,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.01091,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,6,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.01091,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,6,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.01087,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,6,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.01087,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,6,56,        return iChronology.years();,0,0,0,1,2,1,0,0,0,4,27,4,0.01087,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,6,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.01087,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.01087,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,58,        return iChronology.weekyears();,0,0,0,1,2,1,0,0,0,4,31,4,0.01087,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,6,55,        return iType;,4,0,0,0,0,1,0,0,0,4,13,4,0.01087,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,6,122,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.01085,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,95,        return null;,0,0,0,0,0,1,8,0,0,8,12,9,0.01084,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,51,        return iChronology.months();,0,0,0,1,2,1,4,0,0,4,28,5,0.01084,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,315,        return iChronology.years();,0,0,0,1,2,1,4,0,0,4,27,5,0.01084,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,6,141,        return iUnitField;,0,0,0,0,0,1,0,0,0,1,18,4,0.01082,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,45,public final class GregorianChronology extends BasicGJChronology {,4,0,0,0,1,5,0,6,0,15,66,1,0.01065,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,148,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,149,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",6,0,0,3,6,3,0,12,0,22,122,1,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,72,    },2,1,0,0,1,0,4,0,0,8,1,6,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,100,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,111,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,115,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,116,            GregorianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,49,6,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,117,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,118,                chronos = new GregorianChronology[7];,2,0,0,1,2,0,0,2,0,5,37,8,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,119,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,122,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,126,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,127,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,128,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,65,10,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,135,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,137,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,138,        return chrono;,6,0,0,0,0,1,0,0,0,7,14,1,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,191,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,192,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,194,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,225,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,229,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,237,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.01064,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,700,        return 12;,0,0,0,0,0,1,0,2,0,2,10,14,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,75,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,2,0,0,1,3,3,0,0,0,5,55,2,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0,0,0,1,3,0,0,0,0,4,55,4,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,2,0,0,1,2,0,0,0,0,3,47,4,0.01063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,2,0,0,1,2,0,0,0,0,3,47,4,0.01063,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0,0,0,2,4,1,0,0,0,7,47,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.03361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0,0,0,1,2,0,0,0,0,3,74,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,0,0,0,3,40,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0,0,0,0,0,0,0,0,0,0,33,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0,0,0,1,2,1,0,0,0,4,23,4,0.01375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,0,0,3,7,0,0,0,0,10,77,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.01303,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,2,0,0,1,2,0,6,0,0,8,31,6,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,4,0,0,0,0,0,0,0,0,5,16,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1247,            if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.0127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1240,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01266,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1359,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1367,            if (length >= 9) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1372,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1373,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },4,1,0,0,1,0,0,0,0,5,1,6,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1382,                while (i < position) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1385,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1390,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,6,1,0,0,0,1,0,0,0,8,16,1,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,6,0,0,1,2,0,6,2,0,15,40,3,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,363,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,419,            for (int i=0; i<high; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,262,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,6,3,0,0,0,0,0,0,0,9,41,10,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,274,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,276,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,468,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,6,0,0,0,0,0,0,0,0,8,15,1,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,471,            iLocale = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,8,1,0,1,3,0,10,2,0,21,23,1,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,2,0,0,0,0,0,0,0,0,3,26,6,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,4,3,0,1,3,0,4,0,0,11,44,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",2,0,0,2,4,0,0,0,0,2,57,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2743,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1356,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.01208,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1332,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1333,            int length = 0;,0,0,0,0,0,0,4,0,0,4,15,5,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1334,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,6,1,0,1,2,0,4,0,0,11,40,8,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,18,11,0,2,5,0,6,0,0,37,55,1,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1362,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,932,        return parser;,4,1,0,0,0,1,0,0,0,5,14,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,120,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,121,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,4,0,0,1,2,0,8,0,0,14,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,6,0,0,0,0,0,0,0,0,9,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,128,    },4,0,0,0,1,0,0,0,0,5,1,5,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,8,0,0,0,0,0,0,4,0,13,32,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,4,1,0,0,0,1,0,0,0,5,24,1,0.01064,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.01058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1401,"            super(fieldType, maxParsedDigits, signed);",4,0,0,1,2,0,0,2,0,6,42,7,0.0105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0105,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,155,            return 1;,2,0,0,0,0,1,2,2,0,6,9,4,0.01039,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,146,        long otherMillis = otherField.getUnitMillis();,0,0,0,1,2,0,0,0,0,3,46,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,149,        if (thisMillis == otherMillis) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,87,4,0.01018,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00988,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1358,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1359,            ymd = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1365,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.00976,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,294,                    return chronology.months();,2,1,0,1,2,1,4,0,0,7,27,3,0.00966,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,298,                    return chronology.days();,4,0,0,1,2,1,4,0,0,9,25,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1653,        if (lte == null) {,6,2,0,1,3,0,0,0,0,9,18,6,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,36,3,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.00832,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,129,        super();,8,0,0,1,2,0,4,0,0,13,8,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,130,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,131,        iParser = parser;,2,0,0,0,0,0,0,0,0,2,17,6,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,132,        iLocale = locale;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,133,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,134,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,135,        iZone = zone;,10,1,0,0,0,0,10,0,0,23,13,3,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,136,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,137,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,138,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1703,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1704,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1708,        return ze;,2,0,0,0,0,1,4,0,0,7,10,7,0.00745,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2139,                est += iMinFields - 1;,12,1,0,0,0,0,4,0,0,19,22,1,0.00733,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2137,            int est = 1 + iMinFields << 1;,0,0,0,0,0,0,0,0,0,0,30,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2138,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,6,4,0,2,5,0,4,0,0,14,74,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2144,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2274,            return estimatePrintedLength();,8,0,0,1,2,1,6,0,0,15,31,1,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1091,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00676,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,4,0,0,11,33,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2125,            if (minFields <= 0 || maxFields < minFields) {,8,3,0,1,3,0,0,0,0,11,46,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2128,            if (minFields > 4) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2133,            iMaxFields = maxFields;,2,1,0,0,0,0,0,0,0,3,23,8,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2134,        },4,1,0,0,1,0,0,0,0,5,1,4,0.00671,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,282,            chronology = DateTimeUtils.getChronology(chronology);,8,3,0,1,2,2,6,4,0,25,53,1,0.00661,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1681,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1682,            sme = new DateTimeFormatterBuilder(),8,4,0,1,2,0,0,2,0,15,36,3,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.00654,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,144,        return localInstant;,6,0,0,0,0,1,0,0,0,7,20,1,0.00653,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1662,        if (hde == null) {,4,0,0,1,3,0,0,4,0,8,18,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1663,            hde = new DateTimeFormatterBuilder(),8,5,0,1,2,0,0,0,0,13,36,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00651,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,138,        DateTimeZone zone = getZone();,6,0,0,1,2,0,8,2,0,16,30,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,139,        int offset = zone.getOffsetFromLocal(localInstant);,10,0,0,1,2,0,6,4,0,20,51,1,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,141,        if (offset != zone.getOffset(localInstant)) {,4,1,1,2,5,0,6,0,0,16,45,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00645,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,71,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00625,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.0062,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,928,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00593,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,938,        return offsetAdjusted;,10,0,1,0,0,1,0,0,0,14,22,1,0.00589,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,910,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,912,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,913,        final int offsetAdjusted = getOffset(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,54,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,915,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.00579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1605,            dme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1610,        return dme;,0,0,0,0,0,1,0,0,0,1,11,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1600,        return mye;,2,0,0,0,0,1,0,0,0,2,11,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.00569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,514,            return iLeapDurationField;,4,0,0,0,0,1,0,0,0,5,26,5,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,547,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,564,            return iField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.00557,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1586,            ye = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,2,0,10,35,5,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1590,        return ye;,6,2,0,0,0,1,0,0,0,9,10,1,0.00556,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00552,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,943,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,944,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,947,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,950,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00543,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,7,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,204,                for (int i = chronos.size(); --i >= 0;) {,6,2,0,2,5,0,4,0,0,13,41,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,205,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,206,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,2,2,0,1,3,0,16,0,0,20,63,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,209,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,12,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,395,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,404,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,4,0,0,4,56,5,0.00538,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,496,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00533,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,500,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.00533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,279,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",12,5,0,3,6,0,0,2,0,19,62,3,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,219,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,220,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,485,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,305,        return withZone(DateTimeZone.UTC);,4,0,0,1,2,1,2,0,0,6,34,5,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,315,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,318,        if (zone == getZone()) {,0,0,0,2,5,0,6,2,0,8,24,7,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,319,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,291,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,0.00524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,294,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,194,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,4,0,0,7,46,6,0.00522,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,471,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.00522,0,0,-1
defect4j,time,org/joda/time/Instant,7,144,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00522,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,67,5,0.00517,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.00515,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,1,2,0,0,0,0,3,68,4,0.00515,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,465,            if (get(result) != value) {,4,1,0,2,5,0,4,0,0,10,27,1,0.00515,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00512,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,462,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00506,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,463,"            localInstant = iField.set(localInstant, value);",2,0,0,1,2,0,8,0,0,11,47,5,0.00506,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,985,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,1,2,1,6,0,0,6,47,5,0.00505,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1002,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1004,        int offset = getOffset(instantLocal - offsetLocal);,0,0,0,1,2,0,0,0,0,3,51,4,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1006,        if (offsetLocal != offset) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1035,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1037,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,12,6,0,3,7,2,0,4,0,24,69,1,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1040,        return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,4,0.00504,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,8,2,0,14,60,1,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,0,0,0,9,58,4,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2779,                for (int i=0; i<array.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2780,                    list.add(array[i]);,0,0,1,2,4,0,4,0,0,8,19,10,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00493,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,7,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.00492,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,486,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,489,        if (maxDigits < minDigits) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,217,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,10,0,0,10,62,5,0.00483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,174,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.00481,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,156,        return iPrinter;,0,0,0,0,0,1,0,0,0,1,16,4,0.00473,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,384,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.00468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,385,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.00468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,386,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00468,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,7,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1169,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0046,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1179,            return true;,0,0,0,0,0,1,6,0,0,7,12,3,0.0046,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1142,                Object printer = iElementPairs.get(0);,2,0,0,1,2,0,4,2,0,8,38,8,0.00458,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1143,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.00458,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1145,                if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00458,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1146,                    if (printer == parser || parser == null) {,6,3,0,1,3,0,0,0,0,9,42,10,0.00458,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1147,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,131,"        super(base, param);",0,0,0,1,2,0,0,0,0,3,19,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,132,    },4,0,0,0,1,0,0,0,0,5,1,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",4,0,0,1,2,0,0,0,0,5,116,5,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,104,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,108,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,109,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,110,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,112,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",2,0,0,2,4,0,6,2,0,12,76,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,114,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",4,0,0,1,2,0,0,4,0,8,64,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,115,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,116,"                cCache.put(zone, chrono);",2,0,0,1,2,0,8,0,0,10,25,3,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,118,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,119,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,215,        if (getParam() == null) {,0,1,0,2,5,0,2,0,0,4,25,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,217,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,218,            fields.year = new OffsetDateTimeField(,6,0,0,0,1,0,8,2,0,17,38,3,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,222,            field = fields.yearOfEra;,0,0,0,0,0,0,0,0,0,0,25,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,223,            fields.yearOfEra = new DelegatedDateTimeField(,6,0,0,0,1,0,2,2,0,11,46,1,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,227,            field = fields.weekyear;,6,0,0,0,0,0,0,0,0,7,24,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,228,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,42,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,231,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,232,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,235,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,237,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,240,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,242,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,245,            fields.era = ERA_FIELD;,2,1,0,0,0,0,0,0,0,3,23,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,7,247,    },0,0,0,0,1,0,2,0,0,2,1,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,53,"        this(chronology, field, 0);",4,0,0,1,2,0,4,0,0,8,27,3,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,54,    },2,0,0,0,1,3,0,4,0,9,1,2,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,65,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,68,            iMinValue = min + 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,10,0,0,10,72,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,88,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,89,            value--;,4,1,1,0,0,0,0,0,0,8,8,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,7,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00458,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,7,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",2,0,1,1,2,0,0,0,0,7,54,6,0.00458,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,7,153,"        return super.set(instant, value - iOffset);",12,1,0,1,2,1,0,0,0,14,43,1,0.00458,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,82,            value--;,4,2,0,0,0,0,0,0,0,6,8,6,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,6,0,0,6,46,5,0.00457,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,7,82,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00457,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,803,            return iJulianField.getMinimumValue();,2,0,0,1,2,1,10,0,0,12,38,1,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,834,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,79,            if (year == 0) {,4,1,0,1,3,0,4,0,0,10,16,1,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,83,            year++;,6,1,0,0,0,0,0,0,0,8,7,4,0.00457,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.00456,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,7,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,61,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",2,0,0,2,4,0,8,0,0,11,48,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,7,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,8,0,0,8,53,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,587,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,8,0,0,8,71,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,722,                    if (instant + iGapDuration < iCutover) {,6,2,0,1,3,0,0,0,0,8,40,9,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,723,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,726,                    if (get(instant) != value) {,0,0,0,2,5,0,0,0,0,7,28,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,923,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,228,        return iChronology.getMaxYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,74,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00452,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,7,172,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.00452,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,655,                return iJulianField.get(instant);,0,0,0,1,2,1,0,0,0,4,33,4,0.00452,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,732,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,43,7,0.00452,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,733,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00452,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,920,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00452,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,7,228,        return iField.getMaximumValue();,2,0,0,1,2,1,10,0,0,12,32,1,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,78,        if (year <= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,718,            if (instant >= iCutover) {,6,1,1,1,3,0,0,0,0,9,26,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,719,"                instant = iGregorianField.set(instant, value);",6,0,0,1,2,0,8,0,0,16,46,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,720,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,745,            return instant;,4,1,0,0,0,1,0,0,0,5,15,1,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,652,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0045,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,411,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.00445,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,7,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.00445,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,796,            return iGregorianField.getLeapDurationField();,0,0,0,1,2,1,0,0,0,4,46,4,0.00434,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,776,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.0043,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.00429,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,509,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,510,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,511,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,512,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,513,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",14,0,0,2,4,0,4,2,0,22,99,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,514,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,515,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",16,1,1,2,4,0,4,4,0,29,90,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,516,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,102,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,517,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,518,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",6,0,0,1,3,3,4,6,0,20,73,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,520,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,131,            instant = iChronology.getYearMillis(year + 1);,12,1,0,1,2,1,4,0,0,19,46,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,269,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,2,0,0,1,2,2,0,4,0,9,69,2,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,83,        return to.getDateTimeMillis,0,0,0,0,0,1,4,2,0,6,27,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,189,        zone = DateTimeUtils.getZone(zone);,0,0,0,1,2,0,0,0,0,3,35,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,191,        if (gregorianCutover == null) {,2,1,0,1,3,0,0,0,0,3,31,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,198,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,199,            ArrayList<GJChronology> chronos = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,51,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,200,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,201,                chronos = new ArrayList<GJChronology>(2);,0,0,0,1,2,0,0,0,0,3,41,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,202,"                cCache.put(zone, chronos);",6,0,0,1,2,0,10,0,0,17,26,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,213,            if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,214,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,226,            chronos.add(chrono);,2,1,0,1,2,0,6,0,0,9,20,3,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,227,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,228,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,473,        Object[] params = (Object[])getParam();,8,0,0,4,8,1,2,4,0,15,39,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,475,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,476,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,477,        Instant cutoverInstant = (Instant)params[2];,0,0,0,2,4,0,0,0,0,6,44,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,478,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,480,        iJulianChronology = julian;,0,0,0,0,0,0,0,0,0,0,27,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,481,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,482,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,484,        if (getBase() != null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,488,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,493,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0,0,0,1,2,0,0,0,0,3,72,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,499,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,6,0,0,6,33,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,505,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,2,0,0,3,7,0,0,0,0,2,55,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,525,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,72,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,534,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,535,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,540,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,541,            fields.weekOfWeekyear = new CutoverField(,2,0,0,0,1,0,0,0,0,2,41,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,549,            fields.year = new ImpreciseCutoverField(,2,0,0,0,1,0,0,0,0,2,40,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,551,            fields.years = fields.year.getDurationField();,8,0,0,1,2,0,2,0,0,11,46,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,552,            fields.yearOfEra = new ImpreciseCutoverField(,10,0,0,0,1,0,4,2,0,17,45,6,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,554,            fields.yearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,49,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,557,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,559,            fields.centuries = fields.centuryOfEra.getDurationField();,0,0,0,1,2,0,0,0,0,3,58,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,561,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,563,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,565,            fields.weekyear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,44,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,567,            fields.weekyearOfCentury = new ImpreciseCutoverField(,16,1,0,0,1,0,0,2,0,22,53,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,569,            fields.weekyears = fields.weekyear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,575,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,577,            cf.iRangeDurationField = fields.months;,8,0,0,0,0,0,0,0,0,9,39,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,578,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,580,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,583,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,8,0,0,8,71,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,942,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,943,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,953,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,1,0,1,2,0,0,0,0,12,71,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,954,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,964,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,965,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",8,0,0,1,2,0,0,0,0,8,69,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,966,            if (durationField == null) {,4,2,0,1,3,0,0,0,0,6,28,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,967,"                durationField = new LinkedDurationField(iDurationField, this);",2,1,0,1,2,0,0,0,0,3,62,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,969,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,970,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,620,"            this(julianField, gregorianField, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,56,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,621,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,630,"                     long cutoverMillis, boolean convertByWeekyear) {",4,0,0,0,2,0,0,0,0,4,48,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,631,            super(gregorianField.getType());,2,0,0,2,4,0,0,0,0,2,32,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,632,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,633,            iGregorianField = gregorianField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,634,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,5,25,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,635,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,0,0,0,7,39,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,638,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,640,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,641,            if (rangeField == null) {,10,1,0,1,3,0,4,0,0,16,25,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,642,                rangeField = julianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,49,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,644,            iRangeDurationField = rangeField;,16,1,0,0,0,0,0,0,0,20,33,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,645,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,772,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,1091,"            super(durationField, durationField.getType());",2,1,0,2,4,0,0,0,0,3,46,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,1092,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,1093,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,128,        long yearStartMillis = iChronology.getYearMillis(year);,14,1,0,1,2,0,6,0,0,23,55,3,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,129,        if (instant != yearStartMillis) {,8,1,0,1,3,0,0,0,0,10,33,1,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,7,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00428,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00427,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,75,"        return set(instant, get(instant) + years);",14,2,0,2,4,1,8,0,0,26,42,3,0.00427,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,983,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00427,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,221,        if (relativeYear <= 0) {,6,1,0,1,3,0,0,0,0,8,24,1,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,10,3,0,2,4,0,0,0,0,13,89,5,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,14,3,0,1,2,1,4,0,0,22,64,3,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,4,0,0,8,27,1,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,886,        long newInstant = roundFloor(instant);,10,0,0,1,2,0,8,0,0,19,38,3,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00426,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,890,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,181,        } else if ( workWoyYear > year ) {,6,1,0,1,4,0,0,0,0,7,34,3,0.00426,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.00426,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,81,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00426,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,7,84,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.00426,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00425,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00424,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.00424,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.00423,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,548,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.00423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,434,        if (fieldType == null) {,6,1,0,1,3,0,0,0,0,8,24,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,437,        if (maxDigits < minDigits) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,440,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,443,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,153,        if ((base = getBase()) != null) {,6,1,0,3,7,0,2,2,0,14,33,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00422,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,7,96,        return iField.get(instant);,0,0,0,1,2,1,6,0,0,6,27,5,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,1,2,1,0,0,0,4,60,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,26,0,0,28,63,3,0.00421,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,7,302,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00421,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,7,299,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",2,0,0,1,3,0,10,0,0,12,50,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,133,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,134,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,2,0,0,1,2,0,6,0,0,8,65,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,14,0,0,16,55,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,10,1,0,1,2,0,0,0,0,12,53,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,4,0,0,1,2,0,6,0,0,10,55,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,155,        if ( setToWeek > maxOutWeeks ) {,6,2,0,1,3,0,0,2,0,11,32,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,162,        long workInstant = instant; // Get a copy,4,0,0,0,0,0,0,0,0,4,41,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,173,        int workWoyYear = get( workInstant );,6,0,0,1,2,0,4,0,0,10,37,3,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,179,        if ( workWoyYear < year ) {,0,0,0,1,3,0,0,0,0,4,27,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,2,0,0,1,2,0,6,0,0,8,64,5,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),8,2,0,1,2,0,0,0,0,11,56,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.00421,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,204,        return workInstant;,2,0,0,0,0,1,0,0,0,2,19,4,0.00421,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,7,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00419,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,7,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.00419,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,235,        int wow = iChronology.getWeekOfWeekyear(instant);,4,0,0,1,2,0,6,0,0,10,49,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,239,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0,0,0,1,2,1,0,0,0,4,71,4,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.00418,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,14,3,0,3,6,1,0,0,0,17,89,3,0.00418,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,7,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.00415,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,7,163,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00415,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1236,            return 1;,0,0,0,0,0,1,6,0,0,6,9,5,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1212,            return 1;,2,0,0,0,0,1,0,0,0,2,9,4,0.00413,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,7,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,6,0,0,6,40,5,0.00413,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,0.00412,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1326,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,7,103,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,4,0,0,6,32,5,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,7,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00412,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,502,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.00411,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,503,"        int week = getWeekOfWeekyear(instant, year);",0,0,0,1,2,0,0,0,0,3,44,4,0.00411,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,504,        if (week == 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00411,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,7,792,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2641,                int size = parserList.size();,0,0,0,1,2,0,0,0,0,3,29,4,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2642,                iParsers = new DateTimeParser[size];,2,0,1,1,2,0,0,2,0,7,36,7,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2643,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,2,0,0,2,4,0,6,4,0,12,59,9,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2646,                    parseEst += parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,42,4,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2647,                    iParsers[i] = parser;,2,0,1,1,2,0,0,0,0,7,21,9,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2649,                iParsedLengthEstimate = parseEst;,0,0,0,0,0,0,0,0,0,0,33,4,0.0041,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2626,                int size = printerList.size();,2,0,0,1,2,0,4,0,0,6,30,8,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2627,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2628,                int printEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2629,                for (int i=0; i<size; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,0,2,4,0,6,4,0,12,63,9,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2631,                    printEst += printer.estimatePrintedLength();,2,0,0,1,2,0,4,0,0,7,44,9,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2632,                    iPrinters[i] = printer;,2,0,1,1,2,0,0,0,0,7,23,9,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2634,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.00409,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,423,            if (isLeapYear(year)) {,8,1,0,2,5,0,4,0,0,14,23,1,0.00409,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,426,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,12,1,0,0,0,0,0,0,0,15,50,5,0.00409,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,429,            yearStart += oneYear;,0,0,0,0,0,0,0,0,0,0,21,4,0.00409,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,431,            if (yearStart <= instant) {,0,0,0,1,3,0,0,0,0,4,27,4,0.00409,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,433,                year++;,0,0,0,0,0,0,0,0,0,0,7,4,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2761,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2762,                if (element instanceof Composite) {,6,0,0,1,3,0,2,6,0,14,35,1,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2765,                    printerList.add(element);,0,0,0,1,2,0,4,0,0,4,25,5,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2768,                element = elementPairs.get(i + 1);,4,1,0,1,2,0,4,0,0,10,34,7,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2769,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2772,                    parserList.add(element);,12,1,0,1,2,0,0,0,0,15,24,5,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1468,            return iMaxParsedDigits;,2,0,0,0,0,1,6,0,0,8,24,1,0.00409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,397,        return append0(new CharacterLiteral(c));,2,0,0,2,4,1,2,2,0,6,40,5,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1463,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1464,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1465,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1207,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1208,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1209,        },12,1,0,0,1,0,0,0,0,15,1,5,0.00408,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,353,            return jan1millis + (8 - jan1dayOfWeek),0,0,0,1,2,1,0,0,0,4,39,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1319,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1320,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1321,            iMaxParsedDigits = maxParsedDigits;,4,0,0,0,0,0,0,0,0,5,35,5,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.00408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1323,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00408,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,517,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,2,4,1,8,0,0,8,52,5,0.00407,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1167,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.00406,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1177,                return ((Composite)f).isParser();,2,0,0,3,6,1,2,2,0,6,33,9,0.00406,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2747,            return iPrinters != null;,4,2,0,0,0,1,4,0,0,10,25,1,0.00406,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2751,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,163,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,8,0,1,1,2,0,2,2,0,16,45,1,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,75,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,125,        if (zone == null) {,6,1,0,1,3,0,4,0,0,11,19,1,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,46,6,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,131,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,132,                chronos = new JulianChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,140,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,141,            if (chrono == null) {,2,1,0,1,3,0,10,0,0,13,21,3,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,142,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,245,        return MAX_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,257,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,265,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,266,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0,0,0,1,2,0,0,0,0,3,63,4,0.00406,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,7,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00406,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1155,                f = new Composite(iElementPairs);,4,0,0,1,2,0,0,2,0,7,33,8,0.00405,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2615,            super();,8,1,0,1,2,0,0,0,0,10,8,4,0.00405,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2617,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,51,5,0.00405,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2618,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00405,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0,0,0,0,0,0,0,0,0,0,38,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0,0,0,1,2,1,0,0,0,4,31,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0,0,0,1,3,0,0,0,0,4,62,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0,0,0,1,2,0,0,0,0,3,38,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0,0,0,1,4,0,0,0,0,5,22,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0,0,0,1,2,0,0,0,0,3,71,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0,0,0,1,2,0,8,0,0,8,56,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,59,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,669,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,742,        Chronology chrono = selectChronology(iChrono);,0,0,0,1,2,0,0,0,0,3,46,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",14,0,0,1,2,0,0,4,0,19,101,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,26,10,0,1,3,0,22,4,0,66,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,6,1,0,1,3,3,0,12,0,22,24,1,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,10,1,0,1,3,1,0,4,0,17,33,1,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,2,0,1,0,0,1,0,0,0,7,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,2,0,0,1,2,0,8,0,0,11,40,7,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",6,3,1,1,2,0,0,0,0,12,25,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,6,0,0,0,0,0,0,0,0,6,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,365,            for (int i = 0; i < count; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,4,2,0,1,3,0,0,0,0,7,18,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,378,        },8,0,0,0,1,0,0,0,0,10,1,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,380,        if (iOffset != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,8,1,0,1,3,0,0,0,0,9,16,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,6,0,0,16,28,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,427,    },4,0,0,0,1,0,0,0,0,4,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,929,        return parser;,0,0,0,0,0,1,0,2,0,2,14,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,120,        super();,0,0,0,1,2,0,10,0,0,10,8,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,18,0,0,18,54,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,122,        iMillis = instantLocal;,0,0,0,0,0,0,8,0,0,8,23,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,2,1,0,1,2,0,0,0,0,3,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,12,1,0,0,0,0,0,0,0,15,27,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,128,    },8,0,0,0,1,0,0,0,0,10,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,925,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,926,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,10,0,0,10,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,75,            buf.append((char) (d + '0'));,0,0,0,3,6,0,0,0,0,9,29,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,78,        } else {,2,0,0,0,2,0,6,2,0,12,8,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,128,        super();,2,0,0,1,2,0,0,2,0,4,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,129,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,130,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,131,        iLocale = locale;,2,0,0,0,0,0,4,0,0,7,17,7,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,132,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,133,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,134,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,135,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,136,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,2,0,5,27,6,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,137,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,66,            buf.append((char)(value + '0'));,10,0,0,3,6,0,4,2,0,17,32,6,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1091,        return append0(new TimeZoneOffset,4,0,0,0,1,1,6,4,0,15,33,3,0.00172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2125,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2128,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2133,            iMaxFields = maxFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2134,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,50,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,92,    },6,1,0,0,1,1,0,0,0,8,1,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,940,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,941,        if (iChrono != null) {,4,1,0,1,3,0,0,0,0,5,22,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,944,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,947,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.00122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1169,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1179,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1142,                Object printer = iElementPairs.get(0);,4,0,0,1,2,0,0,0,0,5,38,6,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1143,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,0,0,0,2,37,7,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1145,                if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1146,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1147,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,112,            parser = (DateTimeParser) f;,0,0,0,1,2,0,0,0,0,3,28,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,108,            printer = (DateTimePrinter) f;,0,0,0,1,2,0,0,0,0,3,30,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,109,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,110,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,111,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,112,        iLocale = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,113,        iOffsetParsed = false;,0,0,0,0,0,0,0,0,0,0,22,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,114,        iChrono = null;,4,0,0,0,0,0,6,2,0,15,15,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,116,        iPivotYear = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,117,        iDefaultYear = 2000;,14,2,0,0,0,3,10,0,0,31,20,1,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,118,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,105,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,106,        DateTimePrinter printer = null;,4,1,0,0,0,0,0,0,0,5,31,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,107,        if (isPrinter(f)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,110,        DateTimeParser parser = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,111,        if (isParser(f)) {,4,0,0,2,5,0,0,0,0,4,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,114,        if (printer != null || parser != null) {,4,3,0,1,3,0,0,0,0,7,40,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,115,"            return new DateTimeFormatter(printer, parser);",0,0,0,1,2,1,0,0,0,4,46,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1165,        if (f instanceof DateTimePrinter) {,2,0,0,1,3,0,0,2,0,4,35,5,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1166,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1175,        if (f instanceof DateTimeParser) {,2,1,0,1,3,0,0,0,0,3,34,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1176,            if (f instanceof Composite) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,374,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,376,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,377,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,378,        return this;,6,0,0,0,0,1,0,0,0,7,12,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1138,        Object f = iFormatter;,0,0,0,0,0,0,6,0,0,6,22,5,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1140,        if (f == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1141,            if (iElementPairs.size() == 2) {,6,1,0,2,5,0,0,0,0,7,32,6,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1154,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1158,            iFormatter = f;,2,0,0,0,0,0,6,0,0,9,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1161,        return f;,2,0,0,0,0,1,0,0,0,2,9,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,84,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,85,        iElementPairs = new ArrayList<Object>();,10,0,0,1,2,0,4,4,0,20,40,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,285,        return chrono;,6,1,0,0,0,1,6,0,0,13,14,1,0.00036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,175,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,176,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,179,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,182,        synchronized(DateTimeZone.class) {,2,0,0,1,3,0,0,2,0,4,34,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,183,            cDefault = zone;,2,0,0,0,0,0,8,0,0,11,16,5,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,184,        },2,0,0,0,1,0,0,0,0,2,1,5,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,185,    },4,0,0,0,1,0,6,0,0,10,1,3,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,282,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00032,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,148,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,134,        DateTimeZone zone = cDefault;,12,0,0,0,0,0,4,2,0,19,29,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,135,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,136,            synchronized(DateTimeZone.class) {,8,5,0,1,3,0,0,0,0,13,34,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,137,                zone = cDefault;,4,0,0,0,0,0,0,0,0,5,16,8,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,138,                if (zone == null) {,4,1,0,1,3,0,8,0,0,13,19,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,139,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,142,"                            String id = System.getProperty(""user.timezone"");",2,0,0,1,2,0,4,2,0,9,48,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,143,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,144,                                temp = forID(id);,2,0,0,1,2,0,6,2,0,11,17,3,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,149,                        if (temp == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,154,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,155,                    if (temp == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,158,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,160,            },2,0,0,0,1,0,0,0,0,2,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,162,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0003,0,0,-1
defect4j,time,org/joda/time/Chronology,8,63,public abstract class Chronology {,4,0,0,0,1,2,6,0,0,13,34,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,8,54,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,8,55,    },0,0,0,0,1,0,2,0,0,2,1,5,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0,0,0,1,2,0,0,0,0,3,94,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,4,0,0,0,0,3,0,2,0,9,80,2,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0,0,0,1,2,0,0,0,0,3,74,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,48,"        map.put(""UT"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,32,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,49,"        map.put(""UTC"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,33,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,50,"        map.put(""GMT"", DateTimeZone.UTC);",4,0,0,1,2,0,4,0,0,9,33,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,51,"        put(map, ""EST"", ""America/New_York"");",0,0,0,1,2,0,4,0,0,6,36,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,52,"        put(map, ""EDT"", ""America/New_York"");",4,0,0,1,2,0,4,2,0,13,36,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,53,"        put(map, ""CST"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,35,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,54,"        put(map, ""CDT"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,35,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,55,"        put(map, ""MST"", ""America/Denver"");",0,0,0,1,2,0,4,0,0,6,34,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,56,"        put(map, ""MDT"", ""America/Denver"");",0,0,0,1,2,0,4,0,0,6,34,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,57,"        put(map, ""PST"", ""America/Los_Angeles"");",2,0,0,1,2,0,4,2,0,10,39,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0,0,0,1,2,0,0,0,0,3,39,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,59,        cZoneNames = Collections.unmodifiableMap(map);,2,0,0,1,2,0,6,0,0,9,46,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,60,    },0,0,0,0,1,0,14,0,0,14,1,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,63,"            map.put(name, DateTimeZone.forID(id));",4,0,0,2,4,0,12,0,0,17,38,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,66,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,8,524,    static class SystemMillisProvider implements MillisProvider {,0,0,0,0,1,0,0,0,0,1,61,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,205,        if (id == null) {,6,1,1,1,3,0,0,2,0,12,17,1,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,208,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,0,0,0,7,23,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,211,        DateTimeZone zone = cProvider.getZone(id);,2,0,0,1,2,0,6,2,0,10,42,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,212,        if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,213,            return zone;,0,0,0,0,0,1,4,0,0,4,12,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,504,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,8,5,0,1,3,0,0,0,0,16,48,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,509,            iMode = mode;,4,0,0,0,0,0,0,0,0,5,13,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,510,            iMonthOfYear = monthOfYear;,8,0,0,0,0,0,0,0,0,9,27,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,511,            iDayOfMonth = dayOfMonth;,0,0,0,0,0,0,0,0,0,0,25,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,512,            iDayOfWeek = dayOfWeek;,0,0,0,0,0,0,2,0,0,2,23,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,513,            iAdvance = advanceDayOfWeek;,0,0,0,0,0,0,0,0,0,0,28,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,6,0,0,9,27,8,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,515,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,2,5,1,4,2,0,6,46,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,147,            return loadZoneData(id);,0,0,0,1,2,1,0,0,0,4,24,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,224,        InputStream in = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,226,            in = openResource(id);,2,0,0,1,2,0,8,0,0,11,22,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",2,0,0,1,2,0,8,2,0,12,55,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",2,0,0,2,4,0,6,4,0,12,58,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,229,            return tz;,0,0,0,0,0,1,0,0,0,1,10,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,236,                if (in != null) {,10,1,0,1,3,0,0,0,0,12,17,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,237,                    in.close();,0,0,0,1,2,0,4,0,0,4,11,11,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,240,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1176,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1177,            iStandardOffset = standardOffset;,4,0,0,0,0,0,0,0,0,5,33,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1178,            iStartRecurrence = startRecurrence;,6,0,0,0,0,0,0,2,0,9,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1179,            iEndRecurrence = endRecurrence;,4,0,0,0,0,0,0,0,0,5,31,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1180,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1166,"            return new DSTZone(id, (int)readMillis(in), ",0,0,0,2,5,1,0,0,0,8,43,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,95,        if (in instanceof DataInput) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,98,"            return readFrom((DataInput)new DataInputStream(in), id);",2,0,0,3,6,1,4,4,0,10,56,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,0,4,0,0,4,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",8,0,0,2,4,1,4,0,0,13,70,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,183,        int v = in.readUnsignedByte();,6,1,0,1,2,0,4,0,0,11,30,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,184,        switch (v >> 6) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,187,            v = (v << (32 - 6)) >> (32 - 6);,4,4,0,3,6,0,0,0,0,9,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,188,            return v * (30 * 60000L);,2,2,0,1,2,1,0,0,0,4,25,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,192,            v = (v << (32 - 6)) >> (32 - 30);,0,0,0,3,6,0,10,0,0,10,33,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,193,            v |= (in.readUnsignedByte()) << 16;,0,0,0,2,4,0,0,0,0,6,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,194,            v |= (in.readUnsignedByte()) << 8;,0,0,0,2,4,0,0,0,0,6,34,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,195,            v |= (in.readUnsignedByte());,10,4,0,2,4,0,4,0,0,19,29,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,196,            return v * 60000L;,0,0,0,0,0,1,0,0,0,1,18,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,6,4,0,5,10,0,14,0,0,25,46,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,201,            w |= (in.readUnsignedByte()) << 24;,8,1,0,2,4,0,0,0,0,10,35,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,202,            w |= (in.readUnsignedByte()) << 16;,0,0,0,2,4,0,0,0,0,6,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,203,            w |= (in.readUnsignedByte()) << 8;,0,0,0,2,4,0,0,0,0,6,34,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,204,            w |= (in.readUnsignedByte());,10,1,0,2,4,0,4,0,0,17,29,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,205,            return w * 1000L;,2,1,0,0,0,1,0,0,0,3,17,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,209,            return in.readLong();,0,0,0,1,2,1,4,0,0,4,21,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1500,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1501,            iTransitions = transitions;,8,0,0,0,0,0,0,2,0,11,27,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1502,            iWallOffsets = wallOffsets;,0,0,0,0,0,0,0,0,0,0,27,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1503,            iStandardOffsets = standardOffsets;,4,0,0,0,0,0,0,0,0,5,35,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1504,            iNameKeys = nameKeys;,4,0,0,0,0,0,0,0,0,5,21,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1505,            iTailZone = tailZone;,12,5,0,0,0,0,0,0,0,18,21,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1506,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1341,            int poolSize = in.readUnsignedShort();,2,0,0,1,2,0,4,0,0,6,38,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1342,            String[] pool = new String[poolSize];,0,0,0,2,4,0,0,0,0,6,37,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1343,            for (int i=0; i<poolSize; i++) {,8,1,0,1,3,0,0,0,0,10,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1344,                pool[i] = in.readUTF();,0,0,0,2,4,0,0,0,0,6,23,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1347,            int size = in.readInt();,0,0,0,1,2,0,0,0,0,3,24,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1348,            long[] transitions = new long[size];,2,0,1,2,4,0,6,0,0,10,36,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1349,            int[] wallOffsets = new int[size];,2,0,1,2,4,0,0,0,0,4,34,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1350,            int[] standardOffsets = new int[size];,2,0,1,2,4,0,0,0,0,4,38,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1351,            String[] nameKeys = new String[size];,2,0,1,2,4,0,0,4,0,8,37,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1353,            for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1354,                transitions[i] = readMillis(in);,0,0,1,2,4,0,4,0,0,9,32,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1355,                wallOffsets[i] = (int)readMillis(in);,2,0,1,3,6,0,8,2,0,17,37,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1356,                standardOffsets[i] = (int)readMillis(in);,6,1,1,3,6,0,4,0,0,16,41,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1359,                    if (poolSize < 256) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1360,                        index = in.readUnsignedByte();,0,0,0,1,2,0,0,0,0,3,30,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1364,                    nameKeys[i] = pool[index];,0,0,1,2,4,0,4,0,0,13,26,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1367,                },2,0,0,0,1,0,2,2,0,6,1,9,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1370,            DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1371,            if (in.readBoolean()) {,0,0,0,2,5,0,4,0,0,4,23,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1372,"                tailZone = DSTZone.readFrom(in, id);",4,0,0,1,2,0,8,0,0,14,36,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,8,1375,            return new PrecalculatedZone,6,0,0,0,0,1,0,2,0,8,28,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,87,        super(zone.getID());,12,0,0,2,4,0,12,2,0,29,20,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,4,1,0,2,4,2,0,4,0,11,63,2,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,88,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",4,0,0,1,2,0,10,0,0,17,67,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,42,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,45,        if (i == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,48,            cacheSize = 512; // (1 << 9),2,0,0,1,2,0,0,0,0,3,28,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,8,61,        cInfoCacheMask = cacheSize - 1;,4,1,0,0,0,0,0,0,0,6,31,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,0,0,0,0,0,0,0,0,0,0,8,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,7,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,6,2,0,1,3,0,0,0,0,8,17,5,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,6,0,0,7,40,9,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2278,            int limit = text.length() - position;,0,0,0,1,2,0,0,0,0,3,37,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2281,            if (iZeroOffsetParseText != null) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,12,2,0,2,5,0,4,0,0,19,30,1,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,4,2,0,12,56,1,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,742,        Chronology chrono = selectChronology(iChrono);,6,2,0,1,2,0,4,2,0,14,46,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,745,        if (newPos >= 0) {,18,4,1,1,3,0,4,0,0,29,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,257,        if (iChrono == chrono) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,369,                for (int i = 0; i < count; i++) {,12,3,1,1,3,0,0,2,0,34,33,3,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,345,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,363,        long millis = iMillis;,6,1,0,0,0,0,4,0,0,12,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,365,            for (int i = 0; i < count; i++) {,8,2,0,1,3,2,8,2,0,24,33,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,368,            if (resetFields) {,4,0,0,1,3,0,0,0,0,4,18,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,378,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,380,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,416,        if (high > 10) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,929,        return parser;,6,1,0,0,0,1,0,4,0,11,14,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,120,        super();,2,0,0,1,2,0,0,2,0,5,8,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,73,    private SavedField[] iSavedFields = new SavedField[8];,12,5,0,2,4,0,8,0,0,26,54,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,10,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,122,        iMillis = instantLocal;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,123,        iZone = chrono.getZone();,6,0,0,1,2,0,4,0,0,11,25,3,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,124,        iChrono = chrono.withUTC();,2,0,0,1,2,0,4,0,0,7,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,127,        iDefaultYear = defaultYear;,0,0,0,0,0,0,0,0,0,0,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,128,    },2,1,0,0,1,0,0,0,0,3,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,925,        DateTimeParser parser = iParser;,12,0,0,0,0,0,0,2,0,15,32,1,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,926,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,74,            int d = ((value + 1) * 13421772) >> 27;,4,0,0,2,4,0,0,0,0,5,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,75,            buf.append((char) (d + '0'));,0,0,0,3,6,0,0,0,0,9,29,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0,0,0,5,10,0,0,0,0,15,55,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,78,        } else {,10,1,0,0,2,0,0,0,0,12,8,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,128,        super();,2,0,0,1,2,0,6,0,0,8,8,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,129,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,130,        iParser = parser;,2,0,0,0,0,0,6,0,0,8,17,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,131,        iLocale = locale;,0,0,0,0,0,0,0,0,0,0,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,132,        iOffsetParsed = offsetParsed;,16,3,0,0,0,0,0,0,0,22,29,1,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,133,        iChrono = chrono;,6,0,0,0,0,0,0,0,0,6,17,5,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,134,        iZone = zone;,4,1,0,0,0,0,0,0,0,5,13,9,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,135,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,136,        iDefaultYear = defaultYear;,0,0,0,0,0,0,0,0,0,0,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,137,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,64,                buf.append('0');,14,2,0,1,2,0,4,0,0,21,16,3,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,63,            for (; size > 1; size--) {,6,0,0,1,3,0,0,0,0,6,26,5,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,66,            buf.append((char)(value + '0'));,0,0,0,3,6,0,0,0,0,9,32,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1091,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2125,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2128,            if (minFields > 4) {,2,0,0,1,3,0,0,2,0,5,20,6,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2132,            iMinFields = minFields;,10,1,0,0,0,0,2,0,0,15,23,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2133,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2134,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,50,        if (value < 0) {,10,1,0,1,3,0,8,2,0,23,16,3,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,62,        if (value < 10) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,940,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,6,0,0,6,45,5,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,941,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,944,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,947,        return chrono;,2,1,0,0,0,1,0,0,0,3,14,5,0.00137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,3,4,0,0,9,50,2,0.00122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1169,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1179,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1142,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1143,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1145,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1146,                    if (printer == parser || parser == null) {,12,1,1,1,3,0,0,2,0,18,42,1,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1147,                        f = printer;,4,0,0,0,0,0,0,0,0,5,12,12,0.00116,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,112,            parser = (DateTimeParser) f;,0,0,0,1,2,0,0,0,0,3,28,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,108,            printer = (DateTimePrinter) f;,0,0,0,1,2,0,0,0,0,3,30,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,109,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,110,        iPrinter = printer;,6,1,0,0,0,0,0,0,0,7,19,5,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,111,        iParser = parser;,16,3,0,0,0,0,8,0,0,29,17,1,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,112,        iLocale = null;,6,0,0,0,0,0,12,0,0,19,15,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,113,        iOffsetParsed = false;,0,0,0,0,0,0,0,0,0,0,22,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,114,        iChrono = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,116,        iPivotYear = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,117,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,118,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,105,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,106,        DateTimePrinter printer = null;,0,0,0,0,0,0,0,0,0,0,31,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,107,        if (isPrinter(f)) {,2,0,0,2,5,0,4,0,0,6,19,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,110,        DateTimeParser parser = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,111,        if (isParser(f)) {,2,0,0,2,5,1,4,0,0,7,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,114,        if (printer != null || parser != null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,115,"            return new DateTimeFormatter(printer, parser);",4,0,0,1,2,1,0,2,0,6,46,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1165,        if (f instanceof DateTimePrinter) {,6,1,0,1,3,0,6,0,0,15,35,3,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1166,            if (f instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,29,7,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1175,        if (f instanceof DateTimeParser) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1176,            if (f instanceof Composite) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,374,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,376,        iElementPairs.add(element);,2,1,0,1,2,0,18,0,0,22,27,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,377,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,378,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1138,        Object f = iFormatter;,4,0,0,0,0,0,0,2,0,6,22,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1140,        if (f == null) {,2,1,0,1,3,0,4,0,0,7,16,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1141,            if (iElementPairs.size() == 2) {,0,0,0,2,5,0,0,0,0,7,32,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1154,            if (f == null) {,6,1,0,1,3,0,0,0,0,7,16,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1158,            iFormatter = f;,0,0,0,0,0,0,0,0,0,0,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1161,        return f;,4,0,0,0,0,1,4,0,0,9,9,1,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,84,        super();,0,0,0,1,2,0,4,0,0,4,8,5,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,85,        iElementPairs = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,40,4,0.00098,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00098,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,70,        return sum;,2,0,0,0,0,1,6,0,0,8,11,3,0.00097,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,64,        int sum = val1 + val2;,8,1,0,0,0,0,6,0,0,15,22,5,0.00097,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.00097,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00036,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,175,        if (sm != null) {,4,1,0,1,3,2,0,4,0,11,17,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,0,4,2,0,7,70,7,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",4,0,1,1,2,0,0,0,0,6,73,1,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,182,            cDefault = zone;,6,0,0,0,0,0,4,2,0,13,16,3,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,184,    },2,0,0,0,1,0,10,0,0,13,1,9,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,185,,0,0,0,0,0,0,0,0,0,0,0,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,282,        if (chrono == null) {,2,1,0,1,3,0,4,4,0,11,21,3,0.00032,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,148,                        if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,12,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,134,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,136,                zone = cDefault;,0,0,0,0,0,0,0,0,0,0,16,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,137,                if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,138,                    DateTimeZone temp = null;,0,0,0,0,0,0,0,0,0,0,25,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,139,                    try {,0,0,0,0,1,0,0,0,0,1,5,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,142,                            if (id != null) {  // null check avoids stack overflow,2,1,0,1,3,0,0,0,0,3,54,14,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,143,                                temp = forID(id);,0,0,0,1,2,0,0,0,0,3,17,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,144,                            },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,149,                            temp = forTimeZone(TimeZone.getDefault());,0,0,0,2,4,0,0,0,0,6,42,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,154,                    if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,10,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,155,                        temp = UTC;,12,1,0,0,0,0,0,0,0,14,11,1,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,158,                },6,2,0,0,1,0,0,0,0,9,1,6,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,160,        },4,0,0,0,1,0,0,0,0,5,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/Chronology,9,63,public abstract class Chronology {,0,0,0,0,1,0,0,0,0,1,34,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,9,54,        super();,2,0,1,1,2,0,0,4,0,8,8,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,9,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,2,0,0,1,2,3,0,4,0,9,94,2,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,6,0,1,0,0,3,0,2,0,16,80,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",2,0,0,1,2,0,10,12,0,24,74,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,48,"        map.put(""UT"", DateTimeZone.UTC);",8,0,0,1,2,0,4,2,0,15,32,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,49,"        map.put(""UTC"", DateTimeZone.UTC);",8,1,0,1,2,0,4,0,0,14,33,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,50,"        map.put(""GMT"", DateTimeZone.UTC);",0,0,0,1,2,0,0,0,0,3,33,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,51,"        put(map, ""EST"", ""America/New_York"");",12,0,0,1,2,0,14,4,0,34,36,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,52,"        put(map, ""EDT"", ""America/New_York"");",0,0,0,1,2,0,4,0,0,6,36,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,53,"        put(map, ""CST"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,35,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,54,"        put(map, ""CDT"", ""America/Chicago"");",0,0,0,1,2,0,4,0,0,6,35,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,55,"        put(map, ""MST"", ""America/Denver"");",0,0,0,1,2,0,4,0,0,6,34,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,56,"        put(map, ""MDT"", ""America/Denver"");",0,0,0,1,2,0,0,0,0,3,34,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0,0,0,1,2,0,4,0,0,6,39,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0,0,0,1,2,0,4,0,0,6,39,5,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,59,        cZoneNames = Collections.unmodifiableMap(map);,2,0,0,1,2,0,6,2,0,10,46,6,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,63,"            map.put(name, DateTimeZone.forID(id));",2,0,0,2,4,0,12,0,0,15,38,3,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,66,        },6,0,0,0,1,0,6,2,0,15,1,3,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,9,524,    static class SystemMillisProvider implements MillisProvider {,6,0,0,0,1,4,6,6,0,22,61,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,205,            return getDefault();,0,0,0,1,2,1,0,0,0,4,20,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,208,            return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,211,        if (zone != null) {,2,1,0,1,3,0,8,0,0,11,19,3,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,212,            return zone;,2,0,0,0,0,1,0,0,0,2,12,6,0.00027,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,213,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,504,        {,4,0,0,0,1,0,0,0,0,5,1,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,6,5,0,1,3,0,0,0,0,14,48,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,509,            iMode = mode;,0,0,0,0,0,0,0,0,0,0,13,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,510,            iMonthOfYear = monthOfYear;,4,0,0,0,0,0,0,0,0,5,27,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,511,            iDayOfMonth = dayOfMonth;,10,1,0,0,0,0,0,0,0,12,25,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,512,            iDayOfWeek = dayOfWeek;,10,1,0,0,0,0,0,0,0,12,23,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,513,            iAdvance = advanceDayOfWeek;,4,0,0,0,0,0,0,0,0,5,28,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,514,            iMillisOfDay = millisOfDay;,4,0,0,0,0,0,6,0,0,11,27,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,515,        },2,0,0,0,1,0,14,0,0,17,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,2,5,1,4,2,0,6,46,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,147,            return loadZoneData(id);,0,0,0,1,2,1,4,0,0,4,24,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,224,        InputStream in = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,226,            in = openResource(id);,2,0,0,1,2,0,8,0,0,12,22,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0,0,0,1,2,0,0,0,0,3,55,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0,0,0,2,4,0,0,0,0,6,58,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,229,            return tz;,0,0,0,0,0,1,0,0,0,1,10,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,236,                if (in != null) {,2,0,0,1,3,0,0,0,0,2,17,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,237,                    in.close();,0,0,0,1,2,0,4,0,0,4,11,11,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,240,            },2,0,0,0,1,0,10,0,0,12,1,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1176,            super(id);,2,0,0,1,2,0,0,0,0,2,10,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1177,            iStandardOffset = standardOffset;,0,0,1,0,0,0,4,0,0,8,33,10,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1178,            iStartRecurrence = startRecurrence;,4,0,0,0,0,0,0,0,0,5,35,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1179,            iEndRecurrence = endRecurrence;,4,1,0,0,0,0,8,0,0,14,31,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1180,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1166,"            return new DSTZone(id, (int)readMillis(in), ",0,0,0,2,5,1,0,0,0,8,43,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,95,        if (in instanceof DataInput) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,98,"            return readFrom((DataInput)new DataInputStream(in), id);",12,3,0,3,6,1,4,4,0,23,56,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,0,4,0,0,4,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",2,0,0,2,4,1,12,0,0,14,70,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,183,        int v = in.readUnsignedByte();,0,0,0,1,2,0,0,0,0,3,30,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,184,        switch (v >> 6) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,187,            v = (v << (32 - 6)) >> (32 - 6);,4,4,0,3,6,0,0,0,0,9,32,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,188,            return v * (30 * 60000L);,0,0,0,1,2,1,0,0,0,4,25,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,192,            v = (v << (32 - 6)) >> (32 - 30);,4,4,0,3,6,0,0,0,0,9,33,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,193,            v |= (in.readUnsignedByte()) << 16;,0,0,0,2,4,0,0,0,0,6,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,194,            v |= (in.readUnsignedByte()) << 8;,2,1,0,2,4,0,4,0,0,8,34,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,195,            v |= (in.readUnsignedByte());,2,0,0,2,4,0,4,0,0,7,29,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,196,            return v * 60000L;,0,0,0,0,0,1,0,0,0,1,18,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,4,4,0,5,10,0,0,0,0,8,46,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,201,            w |= (in.readUnsignedByte()) << 24;,0,0,0,2,4,0,0,0,0,6,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,202,            w |= (in.readUnsignedByte()) << 16;,10,1,0,2,4,0,8,0,0,21,35,3,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,203,            w |= (in.readUnsignedByte()) << 8;,0,0,0,2,4,0,0,0,0,6,34,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,204,            w |= (in.readUnsignedByte());,2,0,0,2,4,0,4,0,0,7,29,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,205,            return w * 1000L;,10,1,0,0,0,1,0,0,0,11,17,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,209,            return in.readLong();,0,0,0,1,2,1,0,0,0,4,21,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1500,            super(id);,0,0,0,1,2,0,0,0,0,3,10,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1501,            iTransitions = transitions;,4,0,0,0,0,0,0,0,0,5,27,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1502,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,4,0,0,6,27,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1503,            iStandardOffsets = standardOffsets;,0,0,0,0,0,0,0,0,0,0,35,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1504,            iNameKeys = nameKeys;,12,0,0,0,0,0,12,0,0,27,21,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1505,            iTailZone = tailZone;,4,0,0,0,0,0,0,0,0,5,21,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1506,        },2,0,0,0,1,0,0,0,0,2,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1341,            int poolSize = in.readUnsignedShort();,0,0,0,1,2,0,0,0,0,3,38,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1342,            String[] pool = new String[poolSize];,4,0,1,2,4,0,0,4,0,10,37,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1343,            for (int i=0; i<poolSize; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1344,                pool[i] = in.readUTF();,2,0,0,2,4,2,0,4,0,8,23,2,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1347,            int size = in.readInt();,2,0,0,1,2,0,4,0,0,6,24,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1348,            long[] transitions = new long[size];,4,0,1,2,4,0,0,0,0,6,36,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1349,            int[] wallOffsets = new int[size];,10,0,1,2,4,0,0,0,0,13,34,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1350,            int[] standardOffsets = new int[size];,8,3,1,2,4,0,12,2,0,29,38,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1351,            String[] nameKeys = new String[size];,2,0,1,2,4,0,0,4,0,8,37,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1353,            for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1354,                transitions[i] = readMillis(in);,0,0,0,2,4,0,0,0,0,6,32,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1355,                wallOffsets[i] = (int)readMillis(in);,4,0,1,3,6,0,12,0,0,21,37,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1356,                standardOffsets[i] = (int)readMillis(in);,6,0,1,3,6,0,4,0,0,16,41,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1359,                    if (poolSize < 256) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1360,                        index = in.readUnsignedByte();,0,0,0,1,2,0,0,0,0,3,30,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1364,                    nameKeys[i] = pool[index];,0,0,1,2,4,0,0,0,0,9,26,9,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1367,                },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1370,            DSTZone tailZone = null;,2,0,0,0,0,0,6,2,0,10,24,1,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1371,            if (in.readBoolean()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1372,"                tailZone = DSTZone.readFrom(in, id);",2,0,0,1,2,0,8,0,0,11,36,7,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1375,            return new PrecalculatedZone,0,0,0,0,0,1,0,0,0,1,28,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,87,        super(zone.getID());,0,0,0,2,4,0,4,0,0,4,20,5,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0,0,0,2,4,0,0,0,0,6,63,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,88,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",2,0,0,1,2,0,4,0,0,8,67,6,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,42,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,45,        if (i == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00027,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,48,            cacheSize = 512; // (1 << 9),2,0,0,1,2,0,0,0,0,3,28,6,0.00027,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,335,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",0,0,0,3,6,0,0,0,0,9,55,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,4,0,0,4,42,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,0,0,0,2,4,0,0,0,0,6,39,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,40,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,        if (ldp == null) {,0,0,0,1,3,0,0,0,0,4,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,        return ldp;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,        if (iZone == zone) {,0,0,0,1,3,0,0,0,0,4,20,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.66667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,                int month = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,0,0,3,7,0,0,0,0,10,58,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,        switch (text.length()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,                return append0(new StringLiteral(text));,0,0,0,2,4,1,0,0,0,7,40,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,2,4,1,0,0,0,7,66,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,79,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1614,        if (we == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1619,        return we;,0,0,0,0,0,1,0,0,0,1,10,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1629,        return wwe;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1633,        if (dwe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1649,        return dye;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,308,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,312,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,321,        for (i = 0; i < length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,326,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,8,0,0,8,30,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0,0,0,3,6,0,0,0,0,9,63,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,347,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,357,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1150,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2794,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2795,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2797,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2798,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,                if (parser != null) {,14,2,0,1,3,0,8,4,0,30,21,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2800,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2801,                    if (len > est) {,0,0,0,1,3,0,0,0,0,4,16,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2802,                        est = len;,0,0,0,0,0,0,0,0,0,0,10,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2805,            },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2806,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2807,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2623,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2624,                iPrintedLengthEstimate = 0;,0,0,0,0,0,0,0,0,0,0,27,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,364,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,367,        DurationFieldType lastType = null;,2,1,0,0,0,0,0,0,0,3,34,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,368,        for (int i = 0; i < partial.size(); i++) {,16,1,0,2,5,0,8,0,0,27,42,3,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,369,            DateTimeField loopField = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,46,5,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,370,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,371,                if (loopField.getRangeDurationField().getType() != lastType) {,10,0,0,3,7,0,18,0,0,30,62,1,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,375,            lastType = loopField.getDurationField().getType();,0,0,0,2,4,0,0,0,0,6,50,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,377,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,        if (start.size() != end.size()) {,4,1,0,3,7,0,8,0,0,14,33,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,95,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,55,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,96,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,0,0,3,7,0,0,0,0,10,51,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,100,        if (DateTimeUtils.isContiguous(start) == false) {,0,0,0,2,5,0,0,0,0,7,49,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,2,0,0,3,6,0,10,2,0,14,81,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,        return values[0];,20,2,0,1,2,1,4,4,0,32,17,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,        return MIN;,10,0,0,0,0,1,0,4,0,15,11,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,344,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,486,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,        if (maxDigits < minDigits) {,2,0,0,1,3,0,2,0,0,5,28,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1585,        if (ye == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1590,        return ye;,0,0,0,0,0,1,0,0,0,1,10,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,        if (mye == null) {,8,2,0,1,3,0,0,2,0,13,18,3,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,        return mye;,2,0,0,0,0,1,0,0,0,3,11,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,        if (dme == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,6,0,0,8,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,        return dme;,2,0,0,0,0,1,0,2,0,5,11,6,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",2,0,0,2,5,0,0,0,0,2,57,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,242,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,173,        return iParser;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,155,        if (start instanceof LocalDate && end instanceof LocalDate)   {,12,2,0,1,3,0,0,6,0,21,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,162,        return Months.months(amount);,0,0,0,1,2,1,6,0,0,6,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,135,        if (start instanceof LocalDate && end instanceof LocalDate)   {,10,1,0,1,3,0,0,4,0,16,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",4,1,0,1,2,0,14,2,0,21,61,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,142,        return Days.days(amount);,0,0,0,1,2,1,0,0,0,4,25,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);",16,2,0,1,2,0,0,0,0,18,42,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1464,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1465,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1468,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,            super();,10,1,0,1,2,0,8,0,0,20,8,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1321,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,        },6,0,0,0,1,0,8,4,0,18,1,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1326,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,217,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());",6,2,0,3,6,1,0,0,0,8,62,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,384,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,385,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,386,        return this;,10,1,0,0,0,4,4,0,0,18,12,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,397,        return append0(new CharacterLiteral(c));,8,1,1,2,4,1,0,2,0,14,40,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,434,        if (fieldType == null) {,10,1,0,1,3,0,0,0,0,11,24,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,437,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,440,        if (minDigits < 0 || maxDigits <= 0) {,4,1,0,1,3,0,0,0,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,443,        if (minDigits <= 1) {,8,1,0,1,3,0,10,0,0,20,21,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1155,                f = new Composite(iElementPairs);,0,0,0,1,2,0,0,0,0,3,33,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1167,                return ((Composite)f).isPrinter();,0,0,0,3,6,1,0,0,0,10,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1177,                return ((Composite)f).isParser();,12,0,0,3,6,4,6,6,0,28,33,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2615,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2617,            List<Object> printerList = new ArrayList<Object>();,2,0,0,1,2,0,6,8,0,17,51,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2618,            List<Object> parserList = new ArrayList<Object>();,2,0,1,1,2,0,4,8,0,19,50,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2620,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,0,0,0,3,49,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,6,0,1,3,7,0,4,0,0,16,58,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2626,                int size = printerList.size();,8,0,0,1,2,0,4,14,0,27,30,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2627,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2628,                int printEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2629,                for (int i=0; i<size; i++) {,10,1,0,1,3,0,0,0,0,12,28,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2631,                    printEst += printer.estimatePrintedLength();,0,0,0,1,2,0,0,0,0,3,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2632,                    iPrinters[i] = printer;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2634,                iPrintedLengthEstimate = printEst;,4,0,0,0,0,0,0,0,0,5,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,10,0,0,3,7,0,4,2,0,17,56,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2641,                int size = parserList.size();,0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2642,                iParsers = new DateTimeParser[size];,2,0,0,1,2,0,6,0,0,8,36,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2643,                int parseEst = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2644,                for (int i=0; i<size; i++) {,8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0,0,0,2,4,0,0,0,0,6,59,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2646,                    parseEst += parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,7,42,9,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2647,                    iParsers[i] = parser;,0,0,0,1,2,0,0,0,0,3,21,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2649,                iParsedLengthEstimate = parseEst;,4,0,0,0,0,0,0,0,0,5,33,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2651,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2747,            return iPrinters != null;,2,1,0,0,0,1,4,0,0,7,25,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2751,            return iParsers != null;,2,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2759,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2760,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2761,                Object element = elementPairs.get(i);,4,0,0,1,2,0,12,2,0,19,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2762,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2765,                    printerList.add(element);,2,0,0,1,2,0,10,0,0,12,25,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2768,                element = elementPairs.get(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2769,                if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2772,                    parserList.add(element);,0,0,0,1,2,0,6,0,0,6,24,10,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2775,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2780,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1207,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1208,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1209,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1212,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1236,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.33333,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,181,        chronology = DateTimeUtils.getChronology(chronology);,4,0,0,1,2,1,6,0,0,12,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,183,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,184,        iValues = values;,4,0,0,0,0,0,0,0,0,5,17,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,183,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,185,            int value = values[i];,4,1,0,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,199,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,201,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,202,"            if (value < field.getMinimumValue(partial, values)) {",6,1,0,2,5,0,12,0,0,20,53,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,255,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,256,        int[] values = new int[size];,2,0,1,2,4,0,0,0,0,4,29,5,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,258,            for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,259,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,260,"                int value = field.getDifference(endInstant, startInstant);",2,0,0,1,2,0,8,0,0,10,58,9,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,8,0,0,11,46,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,262,                values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,8,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,265,        return values;,2,1,1,0,0,1,0,0,0,12,14,3,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,758,        return getMinimumValue();,2,1,0,1,2,1,0,0,0,3,25,4,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,804,        return getMaximumValue();,2,0,0,1,2,1,8,0,0,10,25,3,0.28571,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,818,        return getMaximumValue(instant);,0,0,0,1,2,1,0,0,0,4,32,4,0.28571,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,225,        return iValues[index];,0,0,1,1,2,1,0,0,0,4,22,5,0.26667,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,10,249,        return iChronology;,10,0,0,0,0,1,4,0,0,15,19,3,0.26667,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,31,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,128,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,129,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,130,        iParser = parser;,4,0,0,0,0,0,0,2,0,7,17,6,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,131,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,132,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,133,        iChrono = chrono;,4,0,0,0,0,0,0,0,0,5,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,134,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,135,        iPivotYear = pivotYear;,4,0,0,0,0,0,10,0,0,15,23,3,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,136,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,137,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,time,org/joda/time/Months,10,230,        return DurationFieldType.months();,0,0,0,1,2,1,4,0,0,4,34,5,0.2,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,216,        if (index != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,219,        return getFieldType();,2,1,0,1,2,1,0,0,0,3,22,7,0.2,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,496,                    return chronology.monthOfYear();,2,0,0,1,2,1,8,0,0,11,32,4,0.2,0,0,-1
defect4j,time,org/joda/time/Days,10,235,        return DurationFieldType.days();,0,0,0,1,2,1,4,0,0,4,32,5,0.2,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,202,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.19048,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,109,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,110,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,111,        iParser = parser;,12,0,0,0,0,0,4,0,0,18,17,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,112,        iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,113,        iOffsetParsed = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,114,        iChrono = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,115,        iZone = null;,2,0,0,0,0,0,0,0,0,3,13,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,116,        iPivotYear = null;,12,1,0,0,0,0,8,0,0,23,18,1,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,117,        iDefaultYear = 2000;,0,0,0,0,0,0,0,0,0,0,20,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,118,    },2,0,0,0,1,0,0,2,0,4,1,8,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,84,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,85,        iElementPairs = new ArrayList<Object>();,2,0,0,1,2,0,0,0,0,2,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,86,    },0,0,0,0,1,0,0,2,0,2,1,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,105,        Object f = getFormatter();,0,0,0,1,2,0,0,0,0,3,26,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,106,        DateTimePrinter printer = null;,0,0,0,0,0,0,0,0,0,0,31,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,107,        if (isPrinter(f)) {,0,0,0,2,5,0,4,0,0,4,19,5,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,108,            printer = (DateTimePrinter) f;,0,0,0,1,2,0,0,0,0,3,30,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,110,        DateTimeParser parser = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,111,        if (isParser(f)) {,0,0,0,2,5,0,4,0,0,4,18,5,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,112,            parser = (DateTimeParser) f;,4,0,0,1,2,0,0,2,0,7,28,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,114,        if (printer != null || parser != null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,115,"            return new DateTimeFormatter(printer, parser);",2,0,0,1,2,4,0,8,0,13,46,2,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,374,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,376,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,377,        iElementPairs.add(element);,0,0,0,1,2,0,0,0,0,3,27,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,378,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1138,        Object f = iFormatter;,6,0,0,0,0,0,0,2,0,8,22,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1140,        if (f == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1141,            if (iElementPairs.size() == 2) {,0,1,0,2,5,0,4,0,0,5,32,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1142,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1143,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1145,                if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1146,                    if (printer == parser || parser == null) {,16,3,0,1,3,0,0,2,0,23,42,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1147,                        f = printer;,6,0,0,0,0,0,4,2,0,13,12,7,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1154,            if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1158,            iFormatter = f;,4,0,0,0,0,0,0,0,0,5,15,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1161,        return f;,2,0,0,0,0,1,8,0,0,10,9,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1165,        if (f instanceof DateTimePrinter) {,0,0,0,1,3,0,0,0,0,4,35,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1166,            if (f instanceof Composite) {,0,0,0,1,3,0,0,0,0,4,29,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1169,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1175,        if (f instanceof DateTimeParser) {,0,0,0,1,3,0,0,0,0,4,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1176,            if (f instanceof Composite) {,0,0,0,1,3,0,0,0,0,4,29,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1179,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.17391,0,0,-1
defect4j,time,org/joda/time/Months,10,92,                return ZERO;,2,0,0,0,0,1,0,0,0,2,12,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.14815,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.14815,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,54,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.13793,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,10,55,    },2,0,0,0,1,0,6,0,0,9,1,9,0.13793,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0,0,0,1,2,1,0,0,0,4,55,4,0.125,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,243,        if (minuendInstant < subtrahendInstant) {,0,0,0,1,3,0,0,0,0,4,41,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,247,        int minuendYear = iChronology.getYear(minuendInstant);,4,0,0,1,2,0,12,0,0,16,54,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0,0,0,1,2,0,0,0,0,3,75,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",2,0,0,1,2,0,8,0,0,10,84,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,12,4,0,3,6,0,4,0,0,20,98,1,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,256,        int minuendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,42,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",2,1,0,2,5,0,8,0,0,11,78,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,271,        long minuendRem = minuendInstant,4,0,0,0,0,0,0,0,0,4,32,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,273,        long subtrahendRem = subtrahendInstant,4,0,0,0,0,0,0,0,0,4,38,5,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,276,        if (minuendRem < subtrahendRem) {,4,1,0,1,3,0,0,0,0,5,33,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,280,        return difference;,4,0,0,0,0,1,0,0,0,4,18,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,6,3,0,3,6,1,6,0,0,15,69,1,0.09091,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,1,2,1,0,0,0,4,59,4,0.09091,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,0,0,0,0,4,60,4,0.08696,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,80,        return instant + (value - get(instant)) * iUnitMillis;,8,3,0,2,4,4,4,4,0,22,54,1,0.08696,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,458,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,459,"        return getDayOfMonth(millis, year, month);",4,0,0,1,2,1,8,0,0,13,42,3,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,1,2,0,10,0,0,10,53,5,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,300,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,16,0,0,18,44,3,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,59,4,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",2,0,0,1,2,0,8,0,0,10,61,5,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,304,        if (thisDom > maxDom) {,4,1,0,1,3,0,0,0,0,5,23,4,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.08511,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,10,0,0,10,84,5,0.08333,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,190,            return ImpreciseDateTimeField.this,3,0,0,0,0,1,0,0,0,4,34,1,0.08333,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,8,0,0,8,42,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,6,1,0,2,4,1,0,0,0,7,58,8,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07843,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,10,3,0,3,6,1,0,0,0,13,76,4,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.07547,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,93,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.07547,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,217,        if ((value < lowerBound) || (value > upperBound)) {,10,3,0,3,7,0,6,0,0,19,51,3,0.07407,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,222,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,2,0,0,1,2,0,2,0,0,4,56,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,4,2,0,2,4,0,2,0,0,8,64,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,404,        int year = (int) (i2 / unitMillis);,6,1,0,2,4,0,0,0,0,7,35,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,407,        long diff = instant - yearStart;,0,0,0,0,0,0,0,0,0,0,32,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,6,2,0,1,4,0,0,0,0,8,61,5,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,428,        return year;,4,0,0,0,0,1,4,0,0,8,12,3,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,233,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,241,        return (1970L * MILLIS_PER_YEAR) / 2;,2,2,0,1,2,1,0,0,0,4,37,4,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.07407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,120,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,385,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,8,3,0,2,4,1,0,0,0,11,74,4,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.07018,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,8,9,0,5,10,1,4,0,0,21,69,1,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,202,        int leapYears = year / 100;,6,1,0,0,0,0,8,0,0,16,27,1,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,7,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,10,4,0,2,4,1,0,0,0,14,90,4,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,139,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.0678,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,360,        return getYearInfo(year).iFirstDayMillis;,10,3,0,1,2,1,4,0,0,17,41,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0,0,0,1,2,0,0,0,0,3,50,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,739,        if (info == null || info.iYear != year) {,8,3,0,1,3,0,0,0,0,11,41,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",4,0,0,2,4,0,4,2,0,11,63,6,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,743,        return info;,0,0,0,0,0,1,2,0,0,2,12,5,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,0,0,0,6,41,3,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,771,            iYear = year;,16,1,0,0,0,0,0,0,0,20,13,1,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,772,            iFirstDayMillis = firstDayMillis;,0,0,0,0,0,0,0,0,0,0,33,4,0.06667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Months,10,249,        return getValue();,4,1,0,1,2,1,2,0,0,7,18,1,0.0625,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,102,            return chrono;,2,0,0,0,0,1,0,0,0,2,14,6,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,371,        long millis = getYearMillis(year);,4,0,0,1,2,2,4,4,0,14,34,1,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,372,"        millis += getTotalMillisByYearMonth(year, month);",6,0,0,1,2,0,6,2,0,16,49,3,0.05882,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,373,        return millis;,4,0,0,0,0,1,0,0,0,4,14,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,10,282,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.05128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,10,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.05128,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,188,            return (int) value;,2,0,0,1,2,1,8,0,0,10,19,6,0.05,0,0,-1
defect4j,time,org/joda/time/Days,10,343,        return getValue();,0,0,0,1,2,1,2,0,0,2,18,5,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.04762,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,108,            return base.getZone();,0,0,0,1,2,1,0,0,0,4,22,4,0.04762,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,10,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.04651,0,0,-1
defect4j,time,org/joda/time/Months,10,90,        switch (months) {,2,0,0,1,3,0,0,0,0,2,17,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,372,        PeriodType type = cMonths;,8,3,0,0,0,0,0,0,0,11,26,4,0.04167,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,373,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.04167,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,374,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.04167,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,379,            cMonths = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.04167,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,381,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,211,        super(months);,0,0,0,1,2,0,0,0,0,3,14,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,45,    public static final Months ZERO = new Months(0);,0,0,0,1,2,0,0,0,0,3,48,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,47,    public static final Months ONE = new Months(1);,2,0,0,1,2,3,0,4,0,9,47,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,49,    public static final Months TWO = new Months(2);,0,0,0,1,2,0,0,0,0,3,47,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,51,    public static final Months THREE = new Months(3);,8,0,0,1,2,3,0,4,0,15,49,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,53,    public static final Months FOUR = new Months(4);,0,0,0,1,2,0,0,0,0,3,48,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,55,    public static final Months FIVE = new Months(5);,2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,57,    public static final Months SIX = new Months(6);,4,2,0,1,2,3,4,4,0,17,47,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,59,    public static final Months SEVEN = new Months(7);,4,0,0,1,2,3,8,6,0,21,49,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,61,    public static final Months EIGHT = new Months(8);,2,0,0,1,2,3,0,4,0,9,49,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,63,    public static final Months NINE = new Months(9);,2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,65,    public static final Months TEN = new Months(10);,4,0,0,1,2,3,0,4,0,11,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,67,    public static final Months ELEVEN = new Months(11);,2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,69,    public static final Months TWELVE = new Months(12);,2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,71,    public static final Months MAX_VALUE = new Months(Integer.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,69,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,73,    public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);,6,0,0,1,2,3,0,4,0,13,69,2,0.04167,0,0,-1
defect4j,time,org/joda/time/Months,10,76,    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());,14,1,0,3,6,3,10,2,0,32,108,1,0.04167,0,0,-1
defect4j,time,org/joda/time/Days,10,102,                return new Days(days);,2,0,0,1,2,1,0,2,0,4,22,6,0.04,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,285,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,283,            return ISOChronology.getInstance();,0,0,0,1,2,1,4,0,0,4,35,7,0.03077,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,92,        if (months == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.02941,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,6,0,0,6,46,5,0.02837,0,0,-1
defect4j,time,org/joda/time/Days,10,80,        switch (days) {,2,0,0,1,3,0,0,0,0,2,15,4,0.02632,0,0,-1
defect4j,time,org/joda/time/Days,10,216,        super(days);,2,0,0,1,2,0,0,0,0,2,12,4,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,217,    },12,1,0,0,1,0,0,0,0,15,1,5,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,45,    public static final Days ZERO = new Days(0);,2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,47,    public static final Days ONE = new Days(1);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,49,    public static final Days TWO = new Days(2);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,51,    public static final Days THREE = new Days(3);,0,0,0,1,2,0,0,0,0,3,45,4,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,53,    public static final Days FOUR = new Days(4);,2,1,0,1,2,3,4,4,0,14,44,1,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,55,    public static final Days FIVE = new Days(5);,2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,57,    public static final Days SIX = new Days(6);,2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,59,    public static final Days SEVEN = new Days(7);,0,0,0,1,2,0,0,0,0,3,45,4,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,61,    public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);,6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,63,    public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);,6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0,0,-1
defect4j,time,org/joda/time/Days,10,66,    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());,2,0,0,3,6,3,10,2,0,17,106,2,0.02564,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,10,294,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.02564,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,96,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,6,2,0,2,4,0,6,2,0,17,66,1,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,101,        if (chrono != null && chrono.getZone() == zone) {,4,3,0,2,5,0,4,0,0,11,49,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,104,        synchronized (cCache) {,4,0,0,1,3,0,0,0,0,5,23,3,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,108,"                cCache.put(zone, chrono);",0,0,0,1,2,0,0,0,0,3,25,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,110,        },12,1,0,0,1,0,0,0,0,15,1,5,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.02548,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,112,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.02548,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,10,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,0.025,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,10,1248,        return 57 + getID().hashCode();,0,0,0,2,4,1,0,0,0,7,31,4,0.02469,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,123,        return iZone.hashCode();,10,0,0,1,2,1,14,2,0,29,24,3,0.02469,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,218,        return 0;,6,2,0,0,0,1,0,0,0,8,9,9,0.02454,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,109,        return getWrappedField().getUnitMillis() * iScalar;,0,0,0,2,4,1,0,0,0,7,51,4,0.02454,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,81,"        super(base, zone);",2,0,0,1,2,0,0,4,0,6,18,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,55,        if (base == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,58,        base = base.withUTC();,2,0,0,1,2,0,4,0,0,7,22,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,59,        if (base == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,62,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,65,"        return new ZonedChronology(base, zone);",0,0,0,1,2,1,0,0,0,4,39,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,85,        return (DateTimeZone)getParam();,0,0,0,2,4,1,2,2,0,4,32,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",10,0,0,1,2,0,4,12,0,27,66,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,154,"        fields.eras = convertField(fields.eras, converted);",16,0,0,1,2,0,8,0,0,26,51,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,155,"        fields.centuries = convertField(fields.centuries, converted);",2,0,0,1,2,0,4,0,0,6,61,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,156,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,157,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,159,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,160,"        fields.days = convertField(fields.days, converted);",10,3,0,1,2,0,8,0,0,22,51,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,163,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,164,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,0,0,0,9,57,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,165,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,166,"        fields.millis = convertField(fields.millis, converted);",12,0,0,1,2,0,4,0,0,18,55,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,170,"        fields.year = convertField(fields.year, converted);",16,0,0,1,2,0,8,0,0,26,51,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,174,"        fields.era = convertField(fields.era, converted);",10,0,0,1,2,0,4,0,0,15,49,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",8,0,0,1,2,0,4,0,0,13,63,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,180,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,2,0,1,2,0,0,0,0,11,65,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",10,0,0,1,2,0,4,0,0,15,71,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,1,0,1,2,0,4,0,0,18,69,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,194,    },0,0,0,0,1,0,4,0,0,4,1,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,197,        if (field == null || !field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,44,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,198,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,200,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,201,            return (DurationField)converted.get(field);,0,0,0,2,4,1,6,2,0,8,43,7,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",4,0,0,2,4,0,2,4,0,10,73,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,204,"        converted.put(field, zonedField);",0,0,0,1,2,0,12,0,0,12,33,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,205,        return zonedField;,2,0,0,0,0,1,0,0,0,2,18,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,209,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,8,0,0,13,44,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,212,        if (converted.containsKey(field)) {,6,1,0,2,5,0,10,0,0,18,35,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,215,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,220,"        converted.put(field, zonedField);",2,0,0,1,2,0,14,0,0,17,33,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,221,        return zonedField;,6,4,0,0,0,1,0,0,0,11,18,3,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,386,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,387,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,390,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,391,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,392,            iDurationField = durationField;,0,0,0,0,0,0,0,0,0,0,31,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,393,            iTimeField = useTimeArithmetic(durationField);,8,4,0,1,2,0,8,0,0,21,46,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,394,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,2,2,0,9,41,1,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,395,            iLeapDurationField = leapDurationField;,4,0,0,0,0,0,0,0,0,5,39,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,396,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,281,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,282,            if (!field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,27,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,285,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,286,            iTimeField = useTimeArithmetic(field);,2,0,0,1,2,0,4,0,0,7,38,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,287,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,10,295,            return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,4,30,6,0.02454,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,315,        return iParam;,0,0,0,0,0,1,0,0,0,1,14,4,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,408,        PeriodType type = cDays;,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,409,        if (type == null) {,4,1,0,1,3,3,0,4,0,12,19,1,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,410,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,415,            cDays = type;,10,0,0,0,0,0,6,0,0,18,13,3,0.02439,0,0,-1
defect4j,time,org/joda/time/PeriodType,10,417,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,10,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,10,55,        return iType;,6,0,0,0,0,1,0,2,0,9,13,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,147,        long scalar = iScalar;,6,1,0,0,0,0,0,0,0,7,22,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0,0,0,3,6,0,0,0,0,9,44,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,149,        hash += getType().hashCode();,8,0,0,2,4,0,4,0,0,13,29,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,150,        hash += getWrappedField().hashCode();,2,0,0,2,4,0,4,0,0,7,37,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,10,151,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,10,69,        return iField;,2,0,0,0,0,1,0,0,0,2,14,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,142,        long millis = iUnitMillis;,6,1,0,0,0,0,0,0,0,7,26,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,143,        int hash = (int) (millis ^ (millis >>> 32));,2,0,0,3,6,0,0,0,0,2,44,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,10,145,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,10,49,        return DurationFieldType.millis();,8,0,0,1,2,1,8,0,0,17,34,3,0.02439,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,10,155,        return (int) getUnitMillis();,0,0,0,2,4,1,2,0,0,2,29,6,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,122,        return iRangeField;,0,0,0,0,0,1,0,0,0,1,19,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,141,        return iUnitField;,2,0,0,0,0,1,4,0,0,6,18,4,0.02439,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,101,        return getWrappedField().getLeapDurationField();,2,0,0,2,4,1,8,0,0,10,48,1,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,95,        return null;,4,0,0,0,0,1,0,0,0,5,12,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,111,        return iChronology.days();,0,0,0,1,2,1,4,0,0,4,26,5,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,94,        return iChronology.weeks();,4,2,0,1,2,1,8,0,0,14,27,3,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,51,        return iChronology.months();,0,0,0,1,2,1,0,0,0,4,28,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,56,        return iChronology.years();,0,0,0,1,2,1,8,0,0,8,27,5,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,315,        return iChronology.years();,0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,334,        return iChronology.days();,0,0,0,1,2,1,4,0,0,4,26,5,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,208,        return null;,4,0,0,0,0,1,4,0,0,8,12,1,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,220,        return iChronology.weeks();,0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,58,        return iChronology.weekyears();,0,0,0,1,2,1,0,0,0,4,31,4,0.02439,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,133,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.02395,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,282,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.02339,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,122,"        super(base, null);",0,0,0,1,2,0,0,0,0,3,18,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",2,0,0,1,2,3,0,12,0,17,106,2,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,2,0,1,1,2,0,0,2,0,7,48,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,171,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,4,2,0,11,47,1,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,173,            fields.yearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,50,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,54,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0,0,0,1,2,0,0,0,0,3,58,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,10,180,    },4,3,0,0,1,0,0,0,0,7,1,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,81,        return INSTANCE_UTC;,0,0,0,0,0,1,0,0,0,1,20,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",2,0,0,4,8,0,14,0,0,16,82,3,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,47,    },2,1,0,0,1,0,0,0,0,3,1,6,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,2,0,0,1,2,2,0,4,0,8,70,2,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,87,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,91,        return getWrappedField().getMaximumValue();,0,0,0,2,4,1,4,0,0,4,43,5,0.02326,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,143,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,146,        return DateTimeZone.UTC;,6,0,0,0,0,1,0,0,0,6,24,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,148,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,149,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",6,0,0,3,6,3,0,12,0,22,122,1,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,4,0,0,4,45,11,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,100,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,111,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,115,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,116,            GregorianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,6,2,0,10,49,6,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,117,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,118,                chronos = new GregorianChronology[7];,2,0,0,1,2,0,0,2,0,5,37,8,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,119,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,122,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,126,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,127,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,128,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,65,10,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,135,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,137,        },6,0,0,0,1,0,0,0,0,7,1,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,138,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,191,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,192,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,225,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,229,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,237,        return MILLIS_PER_MONTH;,0,0,0,0,0,1,0,0,0,1,24,4,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,10,45,public final class GregorianChronology extends BasicGJChronology {,4,0,0,0,1,2,0,2,0,8,66,1,0.02312,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,691,        return 12;,0,0,0,0,0,1,0,0,0,1,10,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,75,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,0,6,2,0,16,39,3,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0,0,0,1,3,0,0,0,0,4,55,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,2,0,0,1,3,3,0,0,0,5,55,2,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,2,0,0,1,2,0,0,0,0,3,47,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,4,0,0,1,2,0,6,0,0,12,47,1,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,56,        long minSum = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,57,        long maxSum = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,58,        for (int i = 0; i < 11; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],2,0,1,1,2,0,0,0,0,6,41,7,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,61,            minSum += millis;,8,0,0,0,0,0,0,0,0,10,17,1,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,4,1,1,1,2,0,0,0,0,8,48,6,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],2,0,1,1,2,0,0,0,0,7,36,6,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,66,            maxSum += millis;,0,0,0,0,0,0,0,0,0,0,17,4,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,4,1,1,1,2,0,0,0,0,8,48,6,0.02299,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02299,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,164,        return MILLIS_OF_SECOND_TYPE;,2,0,0,0,0,1,0,0,0,2,29,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,173,        return MILLIS_OF_DAY_TYPE;,2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,182,        return SECOND_OF_MINUTE_TYPE;,2,0,0,0,0,1,0,0,0,2,29,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,191,        return SECOND_OF_DAY_TYPE;,2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,200,        return MINUTE_OF_HOUR_TYPE;,2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,209,        return MINUTE_OF_DAY_TYPE;,2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,218,        return HOUR_OF_DAY_TYPE;,12,0,0,0,0,1,0,2,0,15,24,3,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,236,        return HOUR_OF_HALFDAY_TYPE;,0,0,0,0,0,1,0,0,0,1,28,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0,0,0,0,0,1,0,0,0,1,33,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,254,        return HALFDAY_OF_DAY_TYPE;,2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,264,        return DAY_OF_WEEK_TYPE;,8,3,0,0,0,1,0,0,0,11,24,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,273,        return DAY_OF_MONTH_TYPE;,2,0,0,0,0,1,0,0,0,2,25,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,282,        return DAY_OF_YEAR_TYPE;,2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,291,        return WEEK_OF_WEEKYEAR_TYPE;,4,0,0,0,0,1,0,2,0,6,29,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,300,        return WEEKYEAR_TYPE;,2,0,0,0,0,1,0,0,0,2,21,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,309,        return WEEKYEAR_OF_CENTURY_TYPE;,2,0,0,0,0,1,0,0,0,2,32,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,318,        return MONTH_OF_YEAR_TYPE;,4,0,0,0,0,4,0,12,0,19,26,1,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,336,        return YEAR_OF_ERA_TYPE;,2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,345,        return YEAR_OF_CENTURY_TYPE;,2,0,0,0,0,1,0,0,0,2,28,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,354,        return CENTURY_OF_ERA_TYPE;,0,0,0,0,0,1,0,0,0,1,27,4,0.02286,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,10,363,        return ERA_TYPE;,4,0,0,0,0,1,0,0,0,4,16,4,0.02286,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,99,"    protected AssembledChronology(Chronology base, Object param) {",6,0,0,1,3,1,0,4,0,11,62,2,0.02286,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,100,        iBase = base;,0,0,0,0,0,0,0,0,0,0,13,4,0.02286,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,10,101,        iParam = param;,4,0,0,0,0,0,0,0,0,5,15,4,0.02286,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
