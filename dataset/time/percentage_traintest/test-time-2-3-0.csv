dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,        return MIN;,0,0,0,0,0,1,0,0,0,1,11,4,0.00329,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.00327,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,8,4,0,16,87,1,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,4,0,0,1,3,0,6,2,0,12,32,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,152,        if (thisMillis < otherMillis) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00233,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",2,1,0,1,2,0,4,0,0,7,59,7,0.0021,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,2,0,0,0,0,0,0,2,0,5,32,10,0.0021,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,294,                    return chronology.months();,0,0,0,1,2,1,0,0,0,4,27,4,0.00197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,2,0,0,1,2,1,4,0,0,6,32,4,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,4,0,0,5,1,12,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,2,0,0,1,2,0,0,0,0,2,22,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,4,0,0,1,2,0,0,0,0,5,42,1,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00121,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,480,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00081,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,2,1,0,1,3,0,0,0,0,3,19,7,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,6,1,0,0,0,1,0,0,0,7,14,3,0.00075,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,285,            return ISOChronology.getInstance();,0,0,0,1,2,1,0,0,0,4,35,4,0.00067,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,0,2,0,0,2,8,5,0.00063,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },8,1,0,0,1,0,0,0,0,10,1,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,116,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.0006,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,166,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00058,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,5,0.00057,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,202,        if (types.length == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,323,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00629,0,0,-1
defect4j,time,org/joda/time/Partial,2,311,        return iTypes.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.00625,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,                    return chronology.years();,4,0,0,1,2,1,16,4,0,24,26,1,0.00459,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.002,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,4,3,0,1,2,1,6,0,0,15,32,1,0.00167,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,2,1,0,1,2,1,2,0,0,5,25,3,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,    },2,0,0,0,1,0,10,0,0,12,1,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,10,1,0,1,3,0,8,0,0,21,32,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,8,1,1,1,2,0,22,0,0,36,22,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,2,0,0,1,2,1,4,0,0,7,32,3,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,            if (value > field.getMaximumValue()) {,0,0,0,2,5,0,0,0,0,7,38,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,4,1,0,2,5,0,10,0,0,15,38,1,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,2,0,0,0,0,1,8,0,0,10,20,1,0.00163,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,4,1,0,2,4,1,8,0,0,13,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,532,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.00131,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,16,1,1,1,2,0,16,4,0,41,53,1,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00128,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,209,                for (int i = chronos.size(); --i >= 0;) {,0,0,0,2,5,0,0,0,0,7,41,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,210,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,10,1,0,1,3,0,28,4,0,44,63,1,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,214,                        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,400,        return iCutoverInstant;,0,0,0,0,0,1,0,0,0,1,23,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",2,1,0,3,6,0,6,0,0,10,62,6,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,285,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,75,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,225,                chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,490,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,514,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00124,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,2,0,0,1,2,1,6,0,0,8,32,5,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,2,0,0,1,2,1,8,0,0,10,32,6,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,310,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,320,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,6,1,0,2,5,0,2,2,0,12,24,3,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,324,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,489,            return result;,2,0,0,0,0,1,0,0,0,2,14,5,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,6,0,0,11,33,1,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,299,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,4,0,0,1,2,0,0,2,0,7,46,5,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",6,0,0,3,6,0,10,4,0,20,105,1,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,197,            if (cutoverDate.getYear() <= 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.00121,0,0,-1
defect4j,time,org/joda/time/Instant,2,144,        return this;,8,0,0,0,0,1,0,0,0,8,12,1,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,0,0,0,2,68,7,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,2,0,0,2,5,0,0,2,0,5,27,6,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",6,1,1,1,2,1,8,2,0,19,47,1,0.0012,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.14368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0,0,0,0,0,1,10,0,0,12,7,3,0.13298,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,636,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11161,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",10,0,0,0,1,0,6,2,0,18,46,3,0.11062,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,4,0,0,1,2,0,0,2,0,6,16,4,0.10593,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,            if (iMaxFields == 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,10,1,0,0,0,0,0,0,0,12,66,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,4,1,0,1,4,0,0,0,0,6,26,5,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,2,1,0,0,0,0,0,0,0,3,11,10,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,4,1,0,1,3,0,0,0,0,5,19,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",6,6,0,2,4,0,4,0,0,17,52,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",2,0,0,1,2,0,12,0,0,15,34,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",4,1,0,1,2,0,6,0,0,12,35,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,10,1,0,0,0,1,0,0,0,12,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,4,2,0,10,46,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,                start = startRecurrence.previous,0,0,0,0,0,0,0,0,0,0,32,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,6,3,0,1,3,0,6,2,0,17,31,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,                end = endRecurrence.previous,0,0,0,0,0,0,0,0,0,0,28,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,                if (instant < 0 && end > 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,12,4,0,2,4,1,0,0,0,16,41,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,                long prev = iTailZone.previousTransition(instant);,0,0,0,1,2,0,0,0,0,3,50,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,                if (prev < instant) {,0,0,0,1,3,0,0,0,0,4,21,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,                    return prev;,0,0,0,0,0,1,0,0,0,1,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,61,4,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,4,0,0,0,0,1,0,0,0,4,20,5,0.0947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,            if (iTailZone != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.09363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,2,0,5,10,0,0,0,0,8,55,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,78,        } else {,4,0,1,0,2,0,0,4,0,13,8,3,0.09058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,128,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.08993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1946,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1947,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1951,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1959,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1961,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08961,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,127,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08929,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,12,5,0,1,2,0,0,0,0,19,34,1,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0,0,0,1,3,0,0,2,0,2,13,8,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1599,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.08834,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0,0,1,1,2,0,0,0,0,9,50,9,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",4,1,0,2,4,0,0,0,0,6,76,7,0.08651,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,0,0,0,4,35,4,0.25,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,445,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,441,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,438,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,458,            newTypes[i] = fieldType;,0,0,0,1,2,0,0,0,0,3,24,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0,0,0,1,2,0,0,0,0,3,67,4,0.04167,1,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,296,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,297,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,298,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,299,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.00787,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,249,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,243,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,333,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,304,                    return chronology.minutes();,0,0,0,1,2,1,4,0,0,4,28,7,0.00629,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.0061,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00565,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,302,                    return chronology.hours();,0,0,0,1,2,1,4,0,0,4,26,7,0.00549,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,282,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00392,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00324,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,818,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00284,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,804,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,200,            int value = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,202,"            if (value < field.getMinimumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,184,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.00265,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.00228,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00228,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,59,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,101,        return ((month - 1) * MILLIS_PER_MONTH);,0,0,0,2,4,1,0,0,0,7,40,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,148,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,158,        return MILLIS_PER_MONTH;,0,0,0,0,0,1,0,0,0,1,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,524,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,108,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,123,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,125,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,135,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,136,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,141,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,146,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0,0,0,1,2,0,0,0,0,3,41,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,152,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,209,        int relativeYear = year - 1687;,0,0,0,0,0,0,0,0,0,0,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,233,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,248,        if (getBase() == null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,252,"            fields.year = new SkipDateTimeField(this, fields.year);",0,0,0,1,2,0,0,0,0,3,55,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,255,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,0,0,0,1,2,0,0,0,0,3,33,4,1.125,1,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0,0,0,6,12,0,0,0,0,18,75,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0,0,0,3,7,0,0,0,0,10,53,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,0,0,3,7,0,0,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,0,0,3,7,0,0,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,564,        if (list.size() > 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);",0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,445,    },0,0,0,0,1,0,0,0,0,1,1,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/Period,5,444,"        super(duration, type, chronology);",0,0,0,1,2,0,0,0,0,3,34,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,372,        PeriodType type = cMonths;,0,0,0,0,0,0,0,0,0,0,26,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,            type = new PeriodType(,0,0,0,0,1,0,4,0,0,4,22,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,224,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,234,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,280,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,505,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,3,6,0,8,0,0,8,50,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,3,6,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,3,6,0,0,0,0,9,48,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,3,6,0,0,0,0,9,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,520,"            cache.put(time(), time());",0,0,0,3,6,0,0,0,0,9,26,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,521,"            cache.put(years(), years());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,522,"            cache.put(months(), months());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,523,"            cache.put(weeks(), weeks());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",2,1,0,3,6,0,8,0,0,12,26,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",2,0,0,3,6,0,4,0,0,6,28,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,526,"            cache.put(minutes(), minutes());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,527,"            cache.put(seconds(), seconds());",0,0,0,3,6,0,0,0,0,9,32,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,528,"            cache.put(millis(), millis());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",6,0,0,1,2,0,6,4,0,18,58,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,2,0,0,1,2,0,6,2,0,10,38,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,532,        if (cached instanceof PeriodType) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",2,0,0,1,2,1,0,2,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,1,2,1,6,0,0,7,38,3,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.18182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,0,0,0,3,78,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.17241,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0,0,0,1,3,0,0,0,0,4,18,4,0.10256,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0,0,0,2,4,1,0,0,0,7,32,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0,0,0,0,0,1,0,0,0,1,42,4,0.05634,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0,0,0,2,4,1,0,0,0,7,47,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.03361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0,0,0,1,2,0,0,0,0,3,74,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,0,0,0,3,40,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0,0,0,0,0,0,0,0,0,0,33,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0,0,0,1,2,1,0,0,0,4,23,4,0.01375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,0,0,3,7,0,0,0,0,10,77,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.01303,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0,0,0,0,0,0,0,0,0,0,38,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0,0,0,1,2,1,0,0,0,4,31,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0,0,0,1,3,0,0,0,0,4,62,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0,0,0,1,2,0,0,0,0,3,38,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0,0,0,1,4,0,0,0,0,5,22,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
