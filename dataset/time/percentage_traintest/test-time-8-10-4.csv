dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,    public DateTimeZoneBuilder() {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,        iRuleSets = new ArrayList<RuleSet>(10);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,        if (fromYear <= toYear) {,0,0,0,1,3,0,0,0,0,4,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,        if (iRuleSets.size() == 0) {,0,0,0,2,5,0,0,0,0,7,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,        if (id == null) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0,0,0,1,2,0,0,0,0,3,64,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,        DSTZone tailZone = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,        int ruleSetCount = iRuleSets.size();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,        for (int i=0; i<ruleSetCount; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,            RuleSet rs = iRuleSets.get(i);,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,            Transition next = rs.firstTransition(millis);,0,0,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,            millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,            saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,            rs = new RuleSet(rs);,0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {",0,0,0,2,5,0,0,0,0,7,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,                saveMillis = next.getSaveMillis();,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,                    tailZone = rs.buildTailZone(id);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,        if (transitions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,        if (zone.isCachable()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,0,0,0,0,7,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,        if (size >= 2) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,            transitions.add(tr);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,            iToYear = toYear;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,            return iToYear;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,            long testInstant = instant;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,            if (instant == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,                year = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,                year = chrono.year().get(instant + wallOffset);,0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,            if (year < iFromYear) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,                testInstant -= 1;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,                year = chrono.year().get(next + wallOffset);,0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,                if (year > iToYear) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,            if (iMode == 'w') {,0,0,0,1,3,0,0,0,0,4,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,                offset = standardOffset + saveMillis;,2,0,1,0,0,0,0,4,0,8,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);",6,4,0,2,4,0,4,0,0,14,41,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);",2,0,0,1,2,0,12,0,0,15,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);",2,1,0,2,4,0,0,0,0,3,34,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);",4,0,0,1,2,0,0,0,0,5,34,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,            return next - offset;,6,0,0,0,0,1,4,0,0,12,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,            return next;,8,1,0,0,0,1,0,0,0,10,12,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,            if (iDayOfMonth >= 0) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0,0,0,2,4,0,0,0,0,6,56,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,10,0,0,2,4,0,18,2,0,31,48,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,0,0,0,3,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,                if (iAdvance) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,                    if (daysToAdd > 0) {,0,0,0,1,3,0,0,0,0,4,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0,0,0,2,4,0,0,0,0,6,53,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,        RuleSet() {,0,0,0,1,3,0,0,0,0,4,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,            iRules = new ArrayList<Rule>(10);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,            iUpperYear = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,        RuleSet(RuleSet rs) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,            iStandardOffset = rs.iStandardOffset;,2,0,0,0,0,0,2,0,0,4,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,            iRules = new ArrayList<Rule>(rs.iRules);,6,0,0,1,2,0,0,2,0,10,40,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,            iInitialNameKey = rs.iInitialNameKey;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,            iUpperYear = rs.iUpperYear;,10,0,0,0,0,0,0,0,0,12,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,            iUpperOfYear = rs.iUpperOfYear;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,            long now = DateTimeUtils.currentTimeMillis();,2,1,0,1,2,0,0,0,0,3,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,10,1,0,3,6,0,14,0,0,27,66,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,0,3,33,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,        },8,0,0,0,1,0,0,0,0,10,1,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,995,                iRules.add(rule);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,997,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1011,            if (iInitialNameKey != null) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0,0,0,1,2,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,            long millis = Long.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,            int saveMillis = 0;,6,0,0,0,0,0,0,2,0,8,19,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,            Transition first = null;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,6,2,0,15,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,                millis = next.getMillis();,0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1032,                if (millis == firstMillis) {,0,0,0,1,3,0,0,0,0,4,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,                if (millis > firstMillis) {,4,1,0,1,3,0,0,0,0,5,27,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,                    if (first == null) {,2,1,0,1,3,0,0,0,0,3,20,9,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,                        for (Rule rule : copy) {,0,0,0,1,3,0,0,0,0,4,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,                            if (rule.getSaveMillis() == 0) {,8,1,0,2,5,0,10,2,0,22,32,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",12,0,0,1,2,0,0,4,0,19,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1045,                                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1047,                        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,                    if (first == null) {,10,4,0,1,3,0,6,0,0,20,20,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,            iRules = copy;,6,1,0,0,0,0,2,0,0,9,14,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,            return first;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,0,0,0,2,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,            Rule nextRule = null;,4,2,0,0,0,0,0,0,0,6,21,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1086,            long nextMillis = Long.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1088,            Iterator<Rule> it = iRules.iterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,            while (it.hasNext()) {,8,1,0,2,5,0,0,0,0,10,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,                Rule rule = it.next();,8,5,1,1,2,0,14,2,0,34,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",2,0,0,1,2,0,10,0,0,12,60,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1092,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,                if (next <= nextMillis) {,4,0,0,1,3,2,18,2,0,27,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,                    nextRule = rule;,6,0,0,0,0,0,0,0,0,7,16,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1101,                    nextMillis = next;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1103,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1105,            if (nextRule == null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,2,1,0,3,7,0,14,0,0,17,50,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,            if (iUpperYear < Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,37,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",8,0,0,1,2,1,0,2,0,10,61,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,            if (iUpperYear == Integer.MAX_VALUE) {,2,0,0,1,3,0,0,0,0,2,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,                return Long.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,22,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,            if (iRules.size() == 2) {,0,1,0,2,5,0,4,0,0,5,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1142,                Rule startRule = iRules.get(0);,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,                Rule endRule = iRules.get(1);,4,1,0,1,2,0,4,2,0,11,29,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,4,0,0,1,3,0,0,0,0,5,49,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,",0,0,0,0,1,1,0,0,0,2,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {",8,0,0,1,3,0,0,2,0,10,56,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,            iMillis = millis;,2,0,0,0,0,0,0,0,0,2,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,            iNameKey = rule.getNameKey();,0,0,0,1,2,0,4,0,0,4,29,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,            iWallOffset = standardOffset + rule.getSaveMillis();,8,2,0,1,2,0,4,0,0,15,52,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,894,            iStandardOffset = standardOffset;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,        },2,1,0,0,1,0,0,0,0,3,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,            return iMillis;,4,0,0,0,0,1,0,0,0,4,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,            return iNameKey;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,            return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,            return iStandardOffset;,4,0,0,0,0,1,0,0,0,5,23,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,922,            return iWallOffset - iStandardOffset;,0,0,0,0,0,1,0,0,0,1,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,            if (other == null) {,4,1,0,1,3,0,10,2,0,17,20,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,930,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,            return iMillis > other.iMillis &&,8,3,0,0,0,1,0,0,0,11,33,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,            int size = transitions.size();,2,1,0,1,2,0,0,0,0,3,30,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1390,            if (size == 0) {,0,0,0,1,3,0,8,0,0,8,16,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1394,            long[] trans = new long[size];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1395,            int[] wallOffsets = new int[size];,0,0,0,2,4,0,6,0,0,6,34,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,            int[] standardOffsets = new int[size];,0,1,0,2,4,0,2,0,0,4,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,            String[] nameKeys = new String[size];,2,1,0,2,4,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,            Transition last = null;,4,1,0,0,0,0,0,0,0,5,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,            for (int i=0; i<size; i++) {,18,0,0,1,3,0,0,0,0,18,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,                Transition tr = transitions.get(i);,2,0,0,1,2,2,0,4,0,9,35,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,                if (!tr.isTransitionFrom(last)) {,6,1,0,2,5,3,8,2,0,20,33,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1407,                trans[i] = tr.getMillis();,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,2,4,0,4,0,0,9,36,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,2,4,0,4,0,0,9,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1410,                nameKeys[i] = tr.getNameKey();,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,                last = tr;,4,0,0,0,0,0,0,0,0,5,10,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,            String[] zoneNameData = new String[5];,2,0,0,2,4,0,0,4,0,6,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0,0,0,4,8,0,0,0,0,12,80,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,            for (int j = 0; j < zoneStrings.length; j++) {,8,1,0,1,3,3,0,6,0,18,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,                String[] set = zoneStrings[j];,2,0,1,2,4,0,0,2,0,8,30,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,6,4,1,3,7,0,4,0,0,16,58,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,47,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1429,                String curNameKey = nameKeys[i];,2,0,1,1,2,0,0,2,0,8,32,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1430,                String nextNameKey = nameKeys[i + 1];,2,0,0,1,2,0,4,0,0,7,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1431,                long curOffset = wallOffsets[i];,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1432,                long nextOffset = wallOffsets[i + 1];,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1433,                long curStdOffset = standardOffsets[i];,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1434,                long nextStdOffset = standardOffsets[i + 1];,4,1,1,1,2,0,0,0,0,7,44,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",6,1,1,4,8,0,4,4,0,21,81,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1436,                if (curOffset != nextOffset &&,4,8,0,0,1,0,0,0,0,12,30,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1457,            if (tailZone != null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1458,                if (tailZone.iStartRecurrence.getNameKey(),4,0,0,1,3,0,2,0,0,6,42,9,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1480,            return new PrecalculatedZone,8,0,0,0,0,1,4,0,0,13,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1690,            if (iTailZone != null) {,2,1,0,1,3,0,0,0,0,3,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1691,                return true;,0,0,0,0,0,1,8,0,0,8,12,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,10,0,0,10,57,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,772,            return iNameKey;,4,0,0,0,0,1,0,0,0,4,16,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,776,            return iSaveMillis;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,86,        return cMillisProvider.getMillis();,0,0,0,1,2,1,4,0,0,4,35,5,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,283,            return ISOChronology.getInstance();,0,0,0,1,2,1,4,0,0,4,35,7,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,316,        if (type == null) {,4,1,0,1,3,2,0,2,0,9,19,1,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,317,            return PeriodType.standard();,0,0,0,1,2,1,0,0,0,4,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,319,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,595,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,596,        iName = name;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,597,        iTypes = types;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,598,        iIndices = indices;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,599,    },4,0,0,0,1,0,0,2,0,7,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",8,0,0,1,2,3,6,12,0,30,90,1,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,58,    static int YEAR_INDEX = 0;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,59,    static int MONTH_INDEX = 1;,2,0,0,0,0,1,0,0,0,3,27,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,60,    static int WEEK_INDEX = 2;,0,0,0,0,0,0,0,0,0,0,26,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,61,    static int DAY_INDEX = 3;,2,0,0,0,0,1,0,0,0,3,25,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,62,    static int HOUR_INDEX = 4;,2,0,0,0,0,1,0,0,0,3,26,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,63,    static int MINUTE_INDEX = 5;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,64,    static int SECOND_INDEX = 6;,2,0,0,0,0,1,0,0,0,3,28,2,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,65,    static int MILLI_INDEX = 7;,0,0,0,0,0,0,6,0,0,6,27,5,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,102,        PeriodType type = cStandard;,8,0,0,0,0,0,0,2,0,11,28,3,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,103,        if (type == null) {,4,1,0,1,3,0,0,2,0,8,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,104,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,114,            cStandard = type;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,116,        return type;,2,3,0,0,0,1,0,0,0,5,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,163,        PeriodType type = cYMD;,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,164,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,165,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,175,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,617,        return iTypes.length;,4,0,0,0,0,1,0,0,0,4,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/PeriodType,11,628,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,11,515,            return System.currentTimeMillis();,4,0,0,1,2,1,4,0,0,9,34,1,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,282,            chronology = DateTimeUtils.getChronology(chronology);,6,0,0,1,2,0,10,0,0,18,53,4,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,292,                    return chronology.years();,0,0,0,1,2,1,4,0,0,4,26,7,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,294,                    return chronology.months();,0,0,0,1,2,1,0,0,0,4,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,11,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,0,0,0,1,3,0,0,0,0,4,73,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,11,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,11,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,11,56,        return getPeriodType().size();,0,0,0,2,4,1,4,0,0,4,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,11,68,        return getPeriodType().getFieldType(index);,0,0,0,2,4,1,6,0,0,6,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,106,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,107,        type = checkPeriodType(type);,2,0,0,1,2,0,0,0,0,2,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,108,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,109,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,110,"        iValues = chrono.get(this, startInstant, endInstant);",4,0,0,1,2,0,20,0,0,25,53,3,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,111,    },2,0,0,0,1,0,4,0,0,6,1,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,254,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,255,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,256,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,16,0,0,19,45,1,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,257,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);",2,0,0,1,2,0,6,0,0,9,37,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,259,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,2,0,0,1,3,3,0,4,0,9,73,2,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,308,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,6,0,0,6,41,5,1.0,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,11,318,        return iType;,0,0,0,0,0,1,10,0,0,10,13,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,298,"        super(0L, null, null);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,299,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,490,"        super(startInstant, endInstant, type, chrono);",0,0,0,1,2,0,0,0,0,3,46,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,491,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,11,65,    public static final Period ZERO = new Period();,2,0,0,1,2,3,0,4,0,9,47,2,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,243,        if (minuendInstant < subtrahendInstant) {,6,2,0,1,3,0,0,2,0,11,41,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,247,        int minuendYear = iChronology.getYear(minuendInstant);,2,0,0,1,2,0,6,0,0,8,54,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",2,0,0,1,2,0,8,0,0,10,75,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,60,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",2,0,0,1,2,0,8,0,0,10,84,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,12,4,0,3,6,0,0,0,0,16,98,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,        int minuendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",4,1,0,2,5,1,16,0,0,22,78,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,271,        long minuendRem = minuendInstant,0,0,0,0,0,0,0,0,0,0,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,273,        long subtrahendRem = subtrahendInstant,4,0,0,0,0,0,0,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,276,        if (minuendRem < subtrahendRem) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,280,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,0,0,0,7,84,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);",2,1,0,2,4,1,12,0,0,16,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,            return ImpreciseDateTimeField.this,2,0,0,0,0,1,0,0,0,2,34,7,1.0,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,11,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,2,4,1,10,0,0,10,84,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,371,        long millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,402,            i2 = i2 - unitMillis + 1;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,485,        long yearStart = getYearMillis(year);,4,0,0,1,2,0,4,4,0,12,37,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,4,0,0,4,76,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0,0,0,2,4,0,0,0,0,6,70,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0,0,0,3,6,1,2,0,0,2,47,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,4,3,0,3,6,1,4,0,0,11,69,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,148,        int minuendYear = getYear(minuendInstant);,0,0,0,1,2,0,0,0,0,3,42,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,149,        int subtrahendYear = getYear(subtrahendInstant);,0,0,0,1,2,0,0,0,0,3,48,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,10,1,0,1,2,0,4,0,0,16,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,156,        if (subtrahendRem >= FEB_29) {,10,1,0,1,3,0,0,2,0,13,30,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,0,4,0,0,4,33,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,4,2,0,2,6,0,4,0,0,10,61,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,        int difference = minuendYear - subtrahendYear;,6,1,0,0,0,0,0,0,0,7,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,167,        if (minuendRem < subtrahendRem) {,6,2,0,1,3,0,0,0,0,8,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,168,            difference--;,4,1,0,0,0,0,0,0,0,6,13,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,170,        return difference;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,14,0,0,16,32,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,48,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,177,        int millisOfDay = getMillisOfDay(instant);,2,0,0,1,2,0,4,0,0,6,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,2,2,0,2,5,0,0,0,0,4,44,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,                if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,8,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,184,                    dayOfYear--;,2,0,0,0,0,0,0,0,0,3,12,10,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,190,                    dayOfYear++;,4,2,0,0,0,0,2,0,0,10,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,0,0,0,4,36,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,58,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,59,            return instant;,2,0,0,0,0,1,0,0,0,2,15,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,61,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,63,"        return set(instant, newYear);",0,0,0,1,2,1,6,0,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,84,"        return iChronology.setYear(instant, year);",0,0,0,1,2,1,8,0,0,8,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,88,        if (minuendInstant < subtrahendInstant) {,4,1,0,1,3,0,0,0,0,5,41,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0,0,0,1,2,1,8,0,0,8,72,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,3,6,0,10,0,0,10,80,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,131,        return iRange - 1;,0,0,0,0,0,1,0,0,0,1,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,11,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,8,0,0,10,77,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,11,115,        return difference / iUnitMillis;,0,0,0,0,0,1,0,0,0,1,32,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0,0,0,3,7,0,0,0,0,10,45,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,106,        return diff;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,63,4,1.0,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,11,188,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,1.0,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,11,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,1,2,1,8,0,0,8,42,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,92,        if (months == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,98,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,103,        int thisYear = iChronology.getYear(instant);,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.5,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,112,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.5,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,1.77778,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,612,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,1805,        return ISODateTimeFormat.date().print(this);,0,0,0,2,4,1,6,0,0,6,44,5,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,597,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,600,        return type.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,60,4,0.8,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,567,        switch (index) {,0,0,0,1,3,0,0,0,0,4,16,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,573,                return getChronology().dayOfMonth().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,58,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,545,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,560,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,564,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,200,        return new LocalDateTime(,0,0,0,0,1,1,0,0,0,2,25,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,210,        int yearOfEra = calendar.get(Calendar.YEAR);,0,0,0,1,2,0,0,0,0,3,44,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0,0,0,1,2,1,8,0,0,10,28,3,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,548,                return chrono.dayOfMonth();,0,0,0,1,2,1,8,0,0,9,27,1,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,550,                return chrono.millisOfDay();,0,0,0,1,2,1,0,0,0,4,28,4,0.37209,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,529,        return 4;,0,0,0,0,0,1,0,0,0,1,9,4,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,663,        if (this == partial) {,0,0,0,1,3,0,0,0,0,4,22,4,0.30189,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,233,        if (date == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.28571,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,        if (date == null) {,2,0,0,1,3,0,14,0,0,16,19,1,0.28571,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,        return super.equals(obj);,0,0,0,1,2,1,0,0,0,4,25,4,0.2735,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,        if (this == partial) {,2,0,0,1,3,0,0,0,0,2,22,4,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,14,0,0,1,2,0,4,4,0,24,38,3,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,6,0,0,2,5,0,4,0,0,11,44,1,0.25806,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",16,2,0,2,5,0,8,0,0,27,57,1,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0,0,0,4,8,0,0,0,0,12,83,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0,0,0,0,0,0,6,0,0,6,32,11,0.20847,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0,0,0,2,4,0,0,0,0,6,68,4,0.20253,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.20253,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.19104,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.17778,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,2,0,0,1,2,1,4,0,0,6,31,4,0.17021,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0,0,0,3,7,0,0,0,0,10,54,4,0.128,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();",0,0,0,3,6,1,0,0,0,10,50,4,0.12308,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,499,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,503,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,6,0,0,0,0,0,0,0,0,7,23,3,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,505,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11679,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,2,0,0,0,0,1,8,2,0,12,20,6,0.10774,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,445,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2,0,0,1,2,0,4,4,0,10,78,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,448,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,450,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,        return iLocalMillis;,4,0,0,0,0,1,6,0,0,10,20,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,2,0,0,1,3,0,4,0,0,6,19,5,0.09756,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,        return iChronology;,16,4,0,0,0,1,16,4,0,42,19,1,0.09249,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08649,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,650,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.08122,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",4,1,0,2,4,0,6,0,0,11,35,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0,0,0,2,4,0,0,0,0,6,48,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0,0,0,2,4,0,0,0,0,6,52,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,2,2,0,6,56,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,0,0,0,2,53,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,82,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",10,1,1,1,2,1,0,0,0,13,43,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,12,0,1,1,2,1,4,2,0,23,32,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,8,1,0,1,3,0,0,0,0,10,26,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,4,0,0,1,2,1,6,0,0,11,33,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,2,0,0,1,3,0,4,0,0,6,26,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,711,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,712,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,714,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,715,                        instant = gregorianToJulian(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,724,"                instant = iJulianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,43,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0,0,0,1,3,0,0,2,0,3,26,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,737,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,38,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,41,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,912,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,915,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,0,0,0,4,40,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,0,0,0,4,46,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,192,            cutoverInstant = DEFAULT_CUTOVER;,8,2,0,0,0,0,14,0,0,25,33,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,74,public final class GJChronology extends AssembledChronology {,0,0,0,0,1,0,0,0,0,1,61,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,78,        if (year <= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,83,            year++;,0,0,0,0,0,0,10,0,0,10,7,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",10,1,0,2,4,1,4,0,0,17,84,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,129,    },2,0,0,0,1,0,8,0,0,10,1,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",6,0,1,1,2,0,14,2,0,26,116,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,85,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,104,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,107,        BuddhistChronology chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,45,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,108,        if (chrono == null) {,10,1,0,1,3,0,0,8,0,20,21,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0,0,0,2,4,0,0,0,0,6,76,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",6,0,0,1,2,0,2,2,0,10,64,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",8,1,0,2,4,0,8,2,0,22,91,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,114,"            cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,7,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,116,        return chrono;,4,0,0,0,0,1,0,0,0,5,14,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,204,        if (getParam() == null) {,2,1,0,2,5,0,8,0,0,12,25,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,206,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,207,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,211,            field = fields.yearOfEra;,10,0,0,0,0,0,0,0,0,12,25,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,212,            fields.yearOfEra = new DelegatedDateTimeField(,4,0,0,0,1,0,0,2,0,7,46,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,216,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,217,            fields.weekyear = new OffsetDateTimeField(,4,0,0,0,1,0,6,0,0,10,42,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",8,0,0,1,2,0,0,0,0,10,54,5,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,221,            fields.centuryOfEra = new DividedDateTimeField(,32,10,0,0,1,0,14,4,0,67,47,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,226,            fields.yearOfCentury = new OffsetDateTimeField(,8,0,0,0,1,0,4,4,0,18,47,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,229,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,51,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,234,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,66,        int min = super.getMinimumValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,68,            iMinValue = min + 1;,8,5,0,0,0,0,6,0,0,22,20,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,74,        iSkip = skip;,8,0,0,0,0,0,0,0,0,10,13,1,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,75,    },6,0,0,0,1,3,2,2,0,13,1,2,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,88,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);",2,1,0,1,2,1,0,0,0,3,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);",4,1,0,1,2,1,0,0,0,5,34,7,0.07556,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,228,        return iField.getMaximumValue();,2,0,0,1,2,1,2,2,0,6,32,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,100,        return iMinValue;,4,0,0,0,0,1,0,0,0,5,17,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,344,            return jan1millis + (8 - jan1dayOfWeek),4,2,0,1,2,1,0,0,0,6,39,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",26,0,0,2,4,0,4,0,0,31,96,3,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",4,0,0,2,4,0,16,0,0,22,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",8,4,0,2,4,0,4,0,0,18,96,1,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",2,0,0,2,4,0,0,0,0,2,102,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.07529,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,224,            leapYears = (relativeYear + 3) >> 2;,6,2,1,1,2,0,0,2,0,14,36,3,0.07529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,888,"            instant = add(newInstant, 1);",16,1,0,1,2,0,10,4,0,33,29,1,0.07521,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,1,2,1,0,0,0,4,60,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,127,        int year = get(instant);,2,1,0,1,2,0,0,0,0,3,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,129,        if (instant != yearStartMillis) {,4,1,0,1,3,0,0,0,0,5,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,133,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,72,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,0,0,0,4,50,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,133,        int thisWeekyear = get( instant );,12,1,0,1,2,0,6,0,0,20,34,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,134,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,140,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,1,1,2,0,0,0,0,9,65,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,10,0,0,13,55,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,155,        if ( setToWeek > maxOutWeeks ) {,4,2,0,1,3,0,4,0,0,10,32,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,162,        long workInstant = instant; // Get a copy,6,1,0,0,0,0,0,0,0,7,41,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,168,"        workInstant = iChronology.setYear( workInstant, year );",6,1,0,1,2,1,0,0,0,8,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,173,        int workWoyYear = get( workInstant );,0,0,0,1,2,0,0,0,0,3,37,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,179,        if ( workWoyYear < year ) {,4,1,0,1,3,0,0,0,0,5,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0,0,0,1,2,0,0,0,0,3,64,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),2,0,0,1,2,0,12,2,0,18,56,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,49,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,239,        return instant;,10,0,0,0,0,2,2,6,0,20,15,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0,0,0,1,2,1,8,0,0,8,71,9,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1083,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1084,            iField = dateTimeField;,0,0,0,0,0,0,4,0,0,5,23,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,1085,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,612,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,613,        },4,0,0,0,1,0,0,2,0,7,1,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,622,"                     long cutoverMillis, boolean convertByWeekyear) {",0,0,0,0,2,0,0,0,0,2,48,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,623,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,624,            iJulianField = julianField;,0,0,0,0,0,0,0,0,0,0,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,625,            iGregorianField = gregorianField;,4,0,0,0,0,0,0,0,0,5,33,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,626,            iCutover = cutoverMillis;,6,0,0,0,0,0,0,2,0,9,25,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,627,            iConvertByWeekyear = convertByWeekyear;,2,0,0,0,0,0,0,0,0,2,39,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,630,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,632,            DurationField rangeField = gregorianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,66,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,633,            if (rangeField == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,634,                rangeField = julianField.getRangeDurationField();,4,0,0,1,2,0,8,0,0,14,49,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,636,            iRangeDurationField = rangeField;,0,0,0,0,0,0,0,0,0,0,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,637,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,764,            return iDurationField;,2,1,0,0,0,1,0,0,0,3,22,6,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,768,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,788,            return iGregorianField.getLeapDurationField();,12,0,0,1,2,1,4,4,0,21,46,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",14,1,0,3,6,0,0,2,0,19,62,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0,0,0,1,2,0,0,0,0,3,126,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,83,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,189,        zone = DateTimeUtils.getZone(zone);,2,0,0,1,2,0,6,0,0,9,35,8,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,191,        if (gregorianCutover == null) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,51,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,201,            chronos = new ArrayList<GJChronology>(2);,0,0,0,1,2,0,0,0,0,3,41,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,202,"            cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,214,        if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,215,            chrono = new GJChronology,2,0,0,0,0,0,6,2,0,11,25,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,228,        chronos.add(chrono);,4,0,0,1,2,0,6,0,0,11,20,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,230,        return chrono;,8,0,0,0,0,1,4,0,0,13,14,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,465,        Object[] params = (Object[])getParam();,0,0,1,4,8,0,12,0,0,16,39,9,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,467,        JulianChronology julian = (JulianChronology)params[0];,6,1,0,2,4,0,0,0,0,7,54,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,2,0,1,2,4,0,0,4,0,8,63,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,469,        Instant cutoverInstant = (Instant)params[2];,16,2,1,2,4,0,10,8,0,39,44,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,470,        iCutoverMillis = cutoverInstant.getMillis();,4,0,1,1,2,0,4,0,0,14,44,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,472,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,473,        iGregorianChronology = gregorian;,0,0,0,0,0,0,0,0,0,0,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,474,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,476,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,2,0,0,3,7,0,0,0,0,2,82,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,485,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0,0,0,1,2,0,0,0,0,3,72,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,491,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,6,0,0,6,33,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,497,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,0,0,3,7,0,0,0,0,10,55,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,72,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,526,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,61,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,527,            fields.dayOfYear = new CutoverField(,6,2,0,0,1,0,4,2,0,16,36,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,65,6,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,533,            fields.weekOfWeekyear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,41,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,541,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,4,2,0,11,40,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,543,            fields.years = fields.year.getDurationField();,12,1,0,1,2,0,6,0,0,21,46,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,544,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,8,0,0,8,45,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,546,            fields.yearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,49,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,549,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,551,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,553,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,555,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,557,            fields.weekyear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,44,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,559,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,53,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,561,            fields.weekyears = fields.weekyear.getDurationField();,12,2,0,1,2,0,8,0,0,23,54,3,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,567,            CutoverField cf = new CutoverField,2,0,0,0,0,0,0,4,0,6,34,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,569,            cf.iRangeDurationField = fields.months;,2,1,0,0,0,0,0,0,0,3,39,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,570,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,572,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,934,"            this(julianField, gregorianField, null, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,62,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,935,        },8,0,0,0,1,1,0,2,0,12,1,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,71,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,946,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,956,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",2,0,0,1,2,0,6,0,0,9,69,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,958,            if (durationField == null) {,2,1,0,1,3,0,0,0,0,3,28,5,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,959,"                durationField = new LinkedDurationField(iDurationField, this);",0,0,0,1,2,0,0,0,0,3,62,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,961,            iDurationField = durationField;,0,0,0,0,0,0,0,0,0,0,31,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,962,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,211,        return (year & 3) == 0;,0,0,0,1,2,1,0,0,0,4,23,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,219,        int relativeYear = year - 1968;,8,2,0,0,0,0,0,0,0,10,31,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,221,        if (relativeYear <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,12,0,0,2,4,0,4,0,0,18,89,1,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.07521,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,539,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,20,0,0,1,2,0,10,0,0,32,45,1,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,125,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,130,            JulianChronology[] chronos = cCache.get(zone);,2,0,0,2,4,0,10,2,0,14,46,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,131,            if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,132,                chronos = new JulianChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,136,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,140,            },2,0,0,0,1,0,0,0,0,3,1,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,0,0,5,62,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,245,        return MAX_YEAR;,10,0,1,0,0,4,2,4,0,22,16,1,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,257,        return MILLIS_PER_MONTH;,4,1,0,0,0,1,0,0,0,5,24,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,265,        if (getBase() == null) {,4,1,0,2,5,0,2,0,0,8,24,3,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,266,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,268,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07512,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,12,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,0,0,0,1,63,4,0.07512,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,80,        int value = super.get(millis);,0,0,0,1,2,0,0,0,0,3,30,4,0.07512,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,81,        if (value <= iSkip) {,4,1,0,1,3,0,8,0,0,13,21,1,0.07512,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,12,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.07512,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,96,        return iField.get(instant);,0,0,0,1,2,1,0,0,0,4,27,4,0.07503,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,339,        long jan1millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0,0,0,1,2,0,0,0,0,3,45,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0,0,0,2,5,0,0,0,0,7,48,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,493,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,494,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,495,        if (week == 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,508,"        return getWeekOfWeekyear(instant, getYear(instant));",2,0,0,2,4,1,8,0,0,11,52,3,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,8,0,0,10,55,3,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,517,        if (instant < firstWeekMillis1) {,4,1,0,1,3,0,0,0,0,5,33,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,521,        if (instant >= firstWeekMillis2) {,2,0,0,1,3,0,0,2,0,4,34,10,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.07494,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,163,        return getMaximumValue(instant);,0,0,0,1,2,1,0,0,0,4,32,4,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,6,0,0,6,40,5,0.07494,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,402,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,0,0,0,9,25,6,0.07485,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.07485,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,8,5,0,5,10,1,2,4,0,20,71,3,0.07485,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.07468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,96,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,103,        return DateTimeConstants.MONDAY;,10,0,0,0,0,1,2,2,0,14,32,4,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,112,        return DateTimeConstants.SUNDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.07468,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),8,2,0,1,2,1,0,0,0,10,45,4,0.07459,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.07451,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0,0,0,1,2,0,0,0,0,3,99,4,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,2,0,0,2,4,0,4,0,0,7,52,4,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,8,0,0,8,55,5,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,4,0,0,6,51,6,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0,0,0,2,4,0,8,0,0,8,55,5,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,4,0,0,2,4,0,18,0,0,22,50,1,0.07442,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,106,    },2,0,0,0,1,0,0,0,0,2,1,5,0.07442,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,12,299,        if (zone == null) {,10,1,0,1,3,0,0,4,0,15,19,1,0.07433,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,12,302,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.07433,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,414,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,8,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,14,1,0,0,0,0,4,0,0,21,50,3,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,420,            yearStart += oneYear;,8,0,0,0,0,0,0,0,0,9,21,3,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,422,            if (yearStart <= instant) {,4,1,0,1,3,0,0,0,0,5,27,7,0.07399,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,424,                year++;,2,0,0,0,0,0,0,0,0,3,7,9,0.07399,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,12,792,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.07382,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,54,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07306,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07306,0,0,-1
defect4j,time,org/joda/time/Instant,12,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07232,0,0,-1
defect4j,time,org/joda/time/Instant,12,119,        iMillis = instant;,4,3,0,0,0,0,0,0,0,7,18,4,0.07232,0,0,-1
defect4j,time,org/joda/time/Instant,12,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07232,0,0,-1
defect4j,time,org/joda/time/Instant,12,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.07223,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.07183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,0.07183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.07183,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,92,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06737,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,213,                leapYears--;,2,0,0,0,0,0,0,0,0,3,12,8,0.06439,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,534,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.06419,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,10,0,0,10,41,5,0.06419,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,1,2,0,0,0,0,3,53,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,300,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,59,5,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",4,0,0,1,2,2,8,4,0,19,61,1,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,304,        if (thisDom > maxDom) {,0,0,0,1,3,0,0,0,0,4,23,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,1,2,1,10,0,0,11,68,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,458,"        int month = getMonthOfYear(millis, year);",0,0,0,1,2,0,0,0,0,3,41,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,12,459,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,0,0,0,4,42,4,0.06184,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,2,1,0,2,4,1,4,0,0,7,54,6,0.06172,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",6,0,0,1,2,1,8,4,0,19,59,3,0.06172,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,0.0616,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,84,"        return iChronology.setYear(instant, year);",0,0,0,1,2,1,8,0,0,8,42,5,0.0616,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,3,6,0,0,0,0,9,80,4,0.0616,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,112,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.0616,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,175,        int thisYear = getYear(instant);,2,0,0,1,2,0,4,0,0,6,32,5,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,48,5,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,177,        int millisOfDay = getMillisOfDay(instant);,4,0,0,1,2,0,4,0,0,8,42,3,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,4,2,0,2,5,0,0,2,0,9,44,3,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0,0,0,1,2,0,0,0,0,3,52,4,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,196,        instant += millisOfDay;,4,0,0,0,0,0,0,0,0,5,23,4,0.06142,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,198,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.06142,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,0,8,0,0,8,60,5,0.06136,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.06136,0,0,-1
defect4j,time,org/joda/time/DateTime,12,527,        return this;,6,1,0,0,0,1,0,4,0,11,12,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,391,        LimitDurationField(DurationField field) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,393,        },2,0,0,0,1,0,0,0,0,2,1,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,99,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,102,        iUpperLimit = upperLimit;,6,0,0,0,0,0,8,0,0,16,25,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,67,        if (base == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,4,1,0,1,2,0,4,0,0,10,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,4,1,0,1,2,0,4,0,0,10,65,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",0,0,0,3,6,1,0,0,0,10,77,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,0,12,0,14,66,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,213,"        fields.eras = convertField(fields.eras, converted);",10,0,0,1,2,0,4,2,0,17,51,3,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,216,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,217,"        fields.weekyears = convertField(fields.weekyears, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,218,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,221,"        fields.halfdays = convertField(fields.halfdays, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,222,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,223,"        fields.minutes = convertField(fields.minutes, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,224,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,225,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.0613,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,12,229,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.0613,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",0,0,0,2,4,1,0,0,0,7,43,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,237,            buf.append('-');,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,255,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,82,4,0.16667,0,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0,0,0,4,8,1,0,0,0,13,83,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",0,0,0,1,2,0,0,0,0,3,23,4,0.07143,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,0,0,0,0,0,0,0,0,0,0,60,4,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0,0,0,3,6,0,0,0,0,9,75,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,692,        values[realIndex] = newValue;,0,0,0,1,2,0,0,0,0,3,29,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,693,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,689,        if (realIndex == -1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,            return iText.length();,0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,                int seconds = period.get(DurationFieldType.seconds());,0,0,0,2,4,0,0,0,0,6,54,4,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,12,3,0,2,4,0,2,0,0,18,72,1,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },2,1,0,0,1,0,6,0,0,9,1,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,4,0,0,1,2,1,0,0,0,5,22,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,                    return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.02703,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,6,1,0,0,0,1,0,0,0,7,22,1,0.02632,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,2,1,0,2,4,1,18,0,0,21,55,1,0.025,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,2,0,0,0,0,1,0,2,0,5,9,10,0.02439,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,                return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,14,6,0,0,0,1,8,0,0,32,7,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,                sum += iSuffix.calculatePrintedLength(value);,0,0,0,1,2,0,0,0,0,3,45,4,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1147,"                iSuffix.printTo(buf, value);",0,0,0,1,2,0,0,0,0,3,28,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1633,            PeriodPrinter before = iBeforePrinter;,0,0,0,0,0,0,0,0,0,0,38,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1636,"            int sum = before.calculatePrintedLength(period, locale)",0,0,0,1,2,0,0,0,0,3,55,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,4,0,0,1,3,0,6,0,0,10,17,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,14,1,0,0,0,0,0,2,0,18,38,1,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1659,            PeriodPrinter after = iAfterPrinter;,0,0,0,0,0,0,0,0,0,0,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1661,"            before.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,36,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1662,            if (iUseBefore) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1676,"            after.printTo(buf, period, locale);",0,0,0,1,2,0,0,0,0,3,35,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1677,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1412,                value = period.get(DurationFieldType.minutes());,0,0,0,2,4,0,0,0,0,6,48,4,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,16,2,0,0,0,0,12,0,0,33,6,1,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1403,                value = period.get(DurationFieldType.weeks());,0,0,0,2,4,0,0,0,0,6,46,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1404,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1400,                value = period.get(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,47,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1401,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1406,                value = period.get(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,45,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1407,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1409,                value = period.get(DurationFieldType.hours());,0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1410,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,2,1,0,2,4,1,14,0,0,17,50,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1434,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0,0,0,3,7,0,0,0,0,10,61,4,0.01667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1487,                return type.isSupported(DurationFieldType.minutes());,0,0,0,2,4,1,0,0,0,7,53,4,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,10,2,0,12,52,1,0.01613,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1485,                return type.isSupported(DurationFieldType.hours());,0,0,0,2,4,1,8,0,0,8,51,7,0.01563,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1398,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1477,                return type.isSupported(DurationFieldType.years());,0,0,0,2,4,1,0,0,0,7,51,4,0.01493,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",8,5,0,2,5,0,0,0,0,13,56,4,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,0,8,0,0,10,30,1,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1083,                return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.01408,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,293,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,294,        iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,295,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.01389,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },2,0,0,0,1,0,4,0,0,7,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",4,0,0,1,2,0,4,0,0,9,20,3,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,684,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1430,                switch (iPrintZeroSetting) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1079,            if (stopAt <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1082,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {,0,0,0,2,5,0,0,0,0,7,88,4,0.01299,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1788,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,8,3,0,1,2,0,8,2,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1790,            for (int i=printers.length; sum < stopAt && --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1791,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",0,0,0,2,4,0,0,0,0,6,73,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1793,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01282,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1135,"                FormatUtils.appendUnpaddedInteger(buf, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1385,                type = period.getPeriodType();,0,0,0,1,2,0,0,0,0,3,30,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,4,0,0,1,3,0,4,0,0,8,16,1,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,236,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,245,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0122,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,258,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,638,        return (indexOf(type) >= 0);,4,1,0,2,4,1,4,0,0,9,28,9,0.01205,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1089,            long valueLong = getFieldValue(period);,6,0,0,1,2,0,10,2,0,18,39,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1090,            if (valueLong == Long.MAX_VALUE) {,16,0,1,1,3,0,12,2,0,34,34,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1094,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,82,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1095,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1108,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1110,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1113,            if (iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1117,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,336,        if (value < 0) {,10,1,0,1,3,0,6,2,0,21,16,1,0.01176,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,343,        return ,12,1,0,0,0,1,4,0,0,19,6,1,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,251,        PeriodType type = cYDTime;,0,0,0,0,0,0,0,0,0,0,26,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,252,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,253,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,262,            cYDTime = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.01163,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,264,        return type;,6,0,0,0,0,1,0,4,0,10,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,237,        checkPeriod(period);,2,0,0,1,2,0,0,0,0,2,20,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,239,        PeriodPrinter printer = getPrinter();,2,0,0,1,2,0,2,2,0,6,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",2,0,0,2,4,0,8,4,0,14,85,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,241,"        printer.printTo(buf, period, iLocale);",0,0,0,1,2,0,0,0,0,3,38,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,242,        return buf.toString();,6,0,0,1,2,1,4,0,0,10,22,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1797,            int sum = 0;,6,2,0,0,0,0,0,2,0,12,12,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1798,            PeriodPrinter[] printers = iPrinters;,0,0,0,1,2,0,0,0,0,3,37,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1799,            for (int i=printers.length; --i>=0; ) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1800,"                sum += printers[i].calculatePrintedLength(period, locale);",0,0,0,2,4,0,0,0,0,6,58,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1802,            return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1121,            long valueLong = getFieldValue(period);,0,0,0,1,2,0,0,0,0,3,39,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1122,            if (valueLong == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,34,5,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1125,            int value = (int) valueLong;,0,0,0,1,2,0,0,0,0,3,28,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1126,            if (iFieldType >= SECONDS_MILLIS) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1130,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1133,            int minDigits = iMinPrintedDigits;,0,0,0,0,0,0,0,0,0,0,34,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1134,            if (minDigits <= 1) {,4,1,0,1,3,0,0,0,0,5,21,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1139,            if (iFieldType >= SECONDS_MILLIS) {,6,2,0,1,3,0,0,0,0,8,35,1,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1146,            if (iSuffix != null) {,6,1,0,1,3,0,0,0,0,8,22,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1149,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,236,        checkPrinter();,8,0,0,1,2,0,2,0,0,11,15,6,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1806,            PeriodPrinter[] printers = iPrinters;,12,0,1,1,2,0,8,2,0,34,37,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1807,            int len = printers.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1808,            for (int i=0; i<len; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1809,"                printers[i].printTo(buf, period, locale);",10,0,1,2,4,0,8,0,0,23,41,1,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1811,        },10,2,0,0,1,0,0,0,0,13,1,3,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1382,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1387,"            if (type != null && isSupported(type, iFieldType) == false) {",0,0,0,2,5,0,0,0,0,7,61,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1393,            switch (iFieldType) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1429,            if (value == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1460,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,254,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,251,        if (iPrinter == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01124,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,113,        int index = indexOf(type);,14,2,0,1,2,1,28,0,0,46,26,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,114,        if (index == -1) {,6,2,0,1,3,0,0,0,0,9,18,1,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,117,        return getValue(index);,0,0,0,1,2,1,0,0,0,4,23,4,0.01111,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,95,        int[] result = new int[size()];,4,0,0,3,6,0,14,0,0,18,31,3,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,96,        for (int i = 0; i < result.length; i++) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,97,            result[i] = getValue(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0101,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,99,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0101,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,262,        if (period == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0099,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,265,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0099,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,392,            if (newValue != 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00917,0,0,-1
defect4j,time,org/joda/time/Period,13,353,    },2,0,0,0,1,0,8,0,0,11,1,6,0.0087,0,0,-1
defect4j,time,org/joda/time/Period,13,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0,0,0,1,2,0,0,0,0,3,73,4,0.00862,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,653,        return -1;,4,0,0,0,0,1,0,2,0,8,10,3,0.00855,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,80,            if (value < 1000) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,87,            for (; size > digits; size--) {,10,1,0,1,3,0,0,2,0,14,31,1,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.00769,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.00746,0,0,-1
defect4j,time,org/joda/time/Period,13,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",16,0,0,2,4,0,4,0,0,20,90,4,0.00633,0,0,-1
defect4j,time,org/joda/time/Period,13,330,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00633,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,50,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,62,        if (value < 10) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,66,            buf.append((char)(value + '0'));,4,1,0,3,6,0,10,0,0,15,32,6,0.00503,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,92,    },8,1,0,0,1,0,0,4,0,15,1,4,0.00503,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0,0,0,2,4,0,0,0,0,6,62,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",14,2,0,2,4,0,4,2,0,23,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,2,4,0,0,0,0,6,58,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",10,2,0,2,4,0,12,2,0,27,60,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0,0,0,2,4,0,10,0,0,10,64,5,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,2,4,0,0,0,0,6,64,4,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",6,0,0,2,4,0,10,0,0,17,62,3,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,462,        return newValues;,4,0,0,0,0,1,0,0,0,5,17,1,0.00498,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,91,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,92,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",0,0,0,1,2,0,0,0,0,3,108,4,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,453,        int[] newValues = new int[size()];,4,0,0,3,6,0,6,2,0,13,34,3,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,2,4,0,10,0,0,10,60,5,0.00493,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,397,            values[index] = newValue;,2,0,1,1,2,0,0,0,0,7,25,6,0.00418,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,399,    },0,0,0,0,1,0,8,0,0,8,1,5,0.00418,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,390,        int index = indexOf(type);,4,0,0,1,2,0,8,2,0,14,26,3,0.00415,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,391,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00415,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,650,                return i;,2,0,0,0,0,1,0,0,0,2,9,8,0.0038,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,13,137,        return getPeriodType().indexOf(type);,0,0,0,2,4,1,6,0,0,6,37,5,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,648,"        for (int i = 0, isize = size(); i < isize; i++) {",4,0,0,2,5,0,0,2,0,6,49,4,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,4,0,0,15,24,1,0.00377,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,66,            cStandard = new PeriodFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,40,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,85,        return cStandard;,0,0,0,0,0,1,0,0,0,1,17,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0,0,0,1,2,0,0,0,0,3,37,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,501,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,555,        return appendSuffix(new SimpleAffix(text));,2,0,0,2,4,1,4,0,0,7,43,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,652,"        return appendSeparator(text, text, null, false, true);",0,0,0,1,2,1,6,0,0,9,54,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,552,        if (text == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00365,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1602,                iParsedForms = new String[] {text};,0,0,0,2,4,0,0,0,0,6,35,4,0.00364,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,0,4,0,0,7,50,5,0.00364,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,859,        SimpleAffix(String text) {,6,0,0,1,3,0,4,2,0,12,26,1,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,860,            iText = text;,0,0,0,0,0,0,0,0,0,0,13,4,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,861,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,228,        if (text == null) {,8,1,0,1,3,0,0,4,0,14,19,1,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,231,        clearPrefix();,0,0,0,1,2,0,2,0,0,2,14,5,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,232,        Literal literal = new Literal(text);,0,0,0,1,2,0,0,0,0,3,36,4,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,233,"        append0(literal, literal);",0,0,0,1,2,0,6,0,0,6,26,5,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,234,        return this;,4,0,0,0,0,1,0,2,0,7,12,6,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1544,        Literal(String text) {,4,0,0,1,3,0,0,2,0,6,22,3,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1545,            iText = text;,4,0,0,0,0,0,0,0,0,5,13,5,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1546,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1541,"        static final Literal EMPTY = new Literal("""");",2,0,0,1,2,2,0,4,0,9,45,3,0.0035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,319,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,2,1,0,2,4,0,8,0,0,12,62,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,6,0,0,2,4,0,2,4,0,12,61,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,605,        clearPrefix();,0,0,0,1,2,0,0,0,0,3,14,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",0,0,0,2,4,0,0,0,0,6,87,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0,0,0,2,4,0,0,0,0,6,54,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",0,0,0,2,4,0,0,0,0,6,54,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,609,        iFieldFormatters[newField.getFieldType()] = newField;,4,0,1,2,4,0,4,2,0,13,53,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,611,        return this;,4,1,0,0,0,1,0,0,0,5,12,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1064,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",14,1,0,1,3,0,0,4,0,20,63,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1065,            iMinPrintedDigits = field.iMinPrintedDigits;,6,0,0,0,0,0,14,0,0,21,44,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1066,            iPrintZeroSetting = field.iPrintZeroSetting;,0,0,0,0,0,0,0,0,0,0,44,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1067,            iMaxParsedDigits = field.iMaxParsedDigits;,0,0,0,0,0,0,0,0,0,0,42,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1068,            iRejectSignedValues = field.iRejectSignedValues;,0,0,0,0,0,0,0,0,0,0,48,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1069,            iFieldType = field.iFieldType;,4,0,0,0,0,0,0,0,0,4,30,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1070,            iFieldFormatters = field.iFieldFormatters;,6,0,0,0,0,0,0,0,0,7,42,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1071,            iPrefix = field.iPrefix;,16,1,0,0,0,0,0,0,0,19,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1072,            if (field.iSuffix != null) {,4,1,0,1,3,0,0,0,0,5,28,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1075,            iSuffix = suffix;,0,0,0,0,0,0,0,0,0,0,17,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1076,        },8,0,0,0,1,0,4,0,0,13,1,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1531,            return iFieldType;,0,0,1,0,0,1,6,0,0,11,18,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,463,        appendField(MINUTES);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,464,        return this;,14,0,1,0,0,1,8,2,0,29,12,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,591,        if (iElementPairs.size() > 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,599,        if (originalPrinter == null || originalParser == null ||,0,0,0,0,1,0,0,0,0,1,56,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,730,        if (text == null || finalText == null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,734,        clearPrefix();,0,0,0,1,2,0,0,0,0,3,14,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,737,        List<Object> pairs = iElementPairs;,4,0,0,0,0,0,0,4,0,8,35,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,738,        if (pairs.size() == 0) {,2,1,0,2,5,0,12,0,0,16,24,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,750,        Separator lastSeparator = null;,4,0,0,0,0,0,0,2,0,6,31,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,751,        for (i=pairs.size(); --i>=0; ) {,0,0,0,2,5,0,0,0,0,7,32,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,752,            if (pairs.get(i) instanceof Separator) {,0,0,0,2,5,0,0,0,0,7,40,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,757,            i--;  // element pairs,6,0,0,0,0,0,0,0,0,8,22,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,761,        if (lastSeparator != null && pairs.size() == 0) {,2,3,0,2,5,0,4,0,0,9,49,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,764,            Object[] comp = createComposite(pairs);,2,0,0,2,4,0,4,2,0,8,39,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,765,            pairs.clear();,0,0,0,1,2,0,4,0,0,4,14,7,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,766,            Separator separator = new Separator(,2,0,0,0,1,0,0,4,0,6,36,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,770,            pairs.add(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,771,            pairs.add(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,774,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,800,            Separator sep = (Separator) elementPairs.get(0);,2,0,0,2,4,0,4,4,0,10,48,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,801,            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {,0,0,0,1,3,0,0,0,0,4,60,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,802,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",2,0,0,2,4,0,12,2,0,16,86,8,0.00314,0,0,-1
