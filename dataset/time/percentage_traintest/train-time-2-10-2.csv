dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,8,4,0,16,87,1,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,4,0,0,1,3,0,6,2,0,12,32,4,0.00233,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",2,1,0,1,2,0,4,0,0,7,59,7,0.0021,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,2,0,0,0,0,0,0,2,0,5,32,10,0.0021,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,2,0,0,1,2,1,4,0,0,6,32,4,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,4,0,0,5,1,12,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,2,0,0,1,2,0,0,0,0,2,22,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,4,0,0,1,2,0,0,0,0,5,42,1,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,2,1,0,1,3,0,0,0,0,3,19,7,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,6,1,0,0,0,1,0,0,0,7,14,3,0.00075,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,0,2,0,0,2,8,5,0.00063,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },8,1,0,0,1,0,0,0,0,10,1,4,0.00063,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,5,0.00057,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,                    return chronology.years();,4,0,0,1,2,1,16,4,0,24,26,1,0.00459,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,4,3,0,1,2,1,6,0,0,15,32,1,0.00167,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,2,1,0,1,2,1,2,0,0,5,25,3,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,    },2,0,0,0,1,0,10,0,0,12,1,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,10,1,0,1,3,0,8,0,0,21,32,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,8,1,1,1,2,0,22,0,0,36,22,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,2,0,0,1,2,1,4,0,0,7,32,3,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,4,1,0,2,5,0,10,0,0,15,38,1,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,2,0,0,0,0,1,8,0,0,10,20,1,0.00163,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,4,1,0,2,4,1,8,0,0,13,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,16,1,1,1,2,0,16,4,0,41,53,1,0.00128,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,10,1,0,1,3,0,28,4,0,44,63,1,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",2,1,0,3,6,0,6,0,0,10,62,6,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,2,0,0,1,2,1,6,0,0,8,32,5,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,2,0,0,1,2,1,8,0,0,10,32,6,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,6,1,0,2,5,0,2,2,0,12,24,3,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,489,            return result;,2,0,0,0,0,1,0,0,0,2,14,5,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,6,0,0,11,33,1,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,4,0,0,1,2,0,0,2,0,7,46,5,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",6,0,0,3,6,0,10,4,0,20,105,1,0.00121,0,0,-1
defect4j,time,org/joda/time/Instant,2,144,        return this;,8,0,0,0,0,1,0,0,0,8,12,1,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,0,0,0,2,68,7,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,2,0,0,2,5,0,0,2,0,5,27,6,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",6,1,1,1,2,1,8,2,0,19,47,1,0.0012,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0,0,0,0,0,1,10,0,0,12,7,3,0.13298,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",10,0,0,0,1,0,6,2,0,18,46,3,0.11062,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,4,0,0,1,2,0,0,2,0,6,16,4,0.10593,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,10,1,0,0,0,0,0,0,0,12,66,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,4,1,0,1,4,0,0,0,0,6,26,5,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,2,1,0,0,0,0,0,0,0,3,11,10,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,4,1,0,1,3,0,0,0,0,5,19,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",6,6,0,2,4,0,4,0,0,17,52,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",2,0,0,1,2,0,12,0,0,15,34,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",4,1,0,1,2,0,6,0,0,12,35,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,10,1,0,0,0,1,0,0,0,12,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,4,2,0,10,46,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,6,3,0,1,3,0,6,2,0,17,31,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,12,4,0,2,4,1,0,0,0,16,41,1,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,4,0,0,0,0,1,0,0,0,4,20,5,0.0947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,2,0,5,10,0,0,0,0,8,55,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,78,        } else {,4,0,1,0,2,0,0,4,0,13,8,3,0.09058,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,12,5,0,1,2,0,0,0,0,19,34,1,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0,0,0,1,3,0,0,2,0,2,13,8,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.08834,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0,0,1,1,2,0,0,0,0,9,50,9,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",4,1,0,2,4,0,0,0,0,6,76,7,0.08651,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,            type = new PeriodType(,0,0,0,0,1,0,4,0,0,4,22,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,                DurationField field = period.getFieldType(i).getField(this);,14,3,1,2,4,0,16,2,0,39,60,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);",2,0,0,1,2,0,12,0,0,15,46,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,                values[i] = value;,2,1,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,        return values;,6,0,0,0,0,1,8,0,0,14,14,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,        int[] values = new int[size];,4,0,1,2,4,0,4,0,0,11,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,        if (duration != 0) {,6,0,0,1,3,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,        if (iRuleSets.size() > 0) {,2,2,0,2,5,0,4,0,0,8,27,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,0,4,2,0,6,29,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,            OfYear ofYear = new OfYear,4,1,0,0,0,0,12,4,0,22,26,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",8,0,0,1,2,0,0,4,0,12,68,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",8,0,0,1,2,0,0,4,0,12,51,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,            getLastRuleSet().addRule(rule);,10,0,0,2,4,0,10,2,0,23,31,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,        return this;,2,0,0,0,0,1,0,2,0,4,12,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,8,0,0,9,43,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,        long millis = Long.MIN_VALUE;,2,0,0,0,0,3,0,4,0,9,29,2,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,        int saveMillis = 0;,2,0,0,0,0,0,0,0,0,2,19,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,            if (next == null) {,2,1,0,1,3,0,0,0,0,3,19,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);",2,1,0,1,2,0,6,0,0,9,33,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",4,1,0,3,7,0,12,0,0,19,64,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,                    if (tailZone != null) {,4,1,0,1,3,0,0,0,0,5,23,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,                        break;,2,1,0,0,0,0,0,0,0,3,6,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,                if (tailZone == null && i == ruleSetCount - 1) {,6,4,0,1,3,0,0,0,0,10,48,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,            millis = rs.getUpperLimit(saveMillis);,2,0,0,1,2,0,6,0,0,9,38,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,        if (transitions.size() == 1 && tailZone == null) {,2,3,0,2,5,0,10,0,0,15,50,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",2,0,0,1,2,0,12,2,0,16,87,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,            return CachedDateTimeZone.forZone(zone);,4,0,0,1,2,1,18,0,0,22,40,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,        int size = transitions.size();,4,0,0,1,2,0,0,2,0,6,30,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,        if (size == 0) {,2,0,0,1,3,2,0,10,0,14,16,3,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,            transitions.add(tr);,0,0,0,1,2,0,6,0,0,6,20,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,            return true;,2,1,0,0,0,1,0,0,0,4,12,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,        Transition last = transitions.get(size - 1);,4,0,0,1,2,0,0,0,0,4,44,7,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,        int offsetForLast = 0;,2,0,0,0,0,0,0,0,0,2,22,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,4,1,0,2,4,0,6,0,0,12,58,6,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,        int offsetForNew = last.getWallOffset();,6,0,0,1,2,0,8,0,0,15,40,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,        long lastLocal = last.getMillis() + offsetForLast;,4,1,0,1,2,0,4,0,0,9,50,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,        long newLocal = tr.getMillis() + offsetForNew;,4,1,0,1,2,0,4,0,0,9,46,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,        if (newLocal != lastLocal) {,4,1,0,1,3,0,0,0,0,5,28,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,            return true;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,        return cVerbose.get();,12,1,0,1,2,1,10,0,0,24,22,1,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,        return getInstance(DateTimeZone.getDefault());,4,3,0,2,4,1,6,0,0,13,46,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",18,8,0,1,3,0,8,2,0,38,55,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,            iRecurrence = recurrence;,6,0,0,0,0,0,0,0,0,7,25,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,            iFromYear = fromYear;,4,0,0,0,0,0,0,0,0,5,21,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,            return iRecurrence.getSaveMillis();,2,0,0,1,2,1,4,0,0,7,35,4,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,            final int wallOffset = standardOffset + saveMillis;,6,1,0,0,0,1,0,0,0,8,51,5,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",8,1,0,2,4,0,10,0,0,20,59,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",12,3,0,1,2,0,0,0,0,16,70,1,1.0,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,            if (next > instant) {,12,2,0,1,3,0,0,0,0,14,21,1,1.0,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,6,4,0,1,2,1,0,0,0,10,53,6,4.0,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,6,0,0,4,8,1,0,0,0,6,52,4,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0,0,0,4,8,1,18,0,0,19,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,4,0,0,4,8,1,8,0,0,12,59,3,0.7619,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,12,1,0,3,6,1,12,0,0,27,52,1,0.66667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,8,0,0,1,2,0,8,0,0,17,44,1,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,        return new LocalDate(,0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,        if (calendar == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0,0,0,1,2,1,8,0,0,10,28,3,0.37209,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,2,0,1,1,2,1,0,0,0,7,32,4,0.37209,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,        switch (index) {,0,0,0,1,3,0,6,0,0,6,16,10,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,                return chrono.year();,2,1,0,1,2,1,4,0,0,8,21,3,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.32,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,2,1,0,0,1,1,0,0,0,3,25,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0,0,1,2,5,0,0,0,0,3,44,11,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,        return new LocalDate(,2,0,0,0,1,1,0,2,0,4,21,4,0.30769,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,        if (date == null) {,2,0,0,1,3,0,14,0,0,16,19,1,0.28571,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,        if (this == partial) {,2,0,0,1,3,0,0,0,0,2,22,4,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,14,0,0,1,2,0,4,4,0,24,38,3,0.25806,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,6,0,0,2,5,0,4,0,0,11,44,1,0.25806,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",16,2,0,2,5,0,8,0,0,27,57,1,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0,0,0,4,8,0,0,0,0,12,83,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0,0,0,0,0,0,6,0,0,6,32,11,0.20847,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,6,0,0,0,0,1,0,0,0,7,20,3,0.19104,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,2,0,0,1,2,1,4,0,0,6,31,4,0.17021,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.125,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,6,0,0,0,0,0,0,0,0,7,23,3,0.11679,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,2,0,0,0,0,1,8,2,0,12,20,6,0.10774,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2,0,0,1,2,0,4,4,0,10,78,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,        return iLocalMillis;,4,0,0,0,0,1,6,0,0,10,20,1,0.1,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,2,0,0,1,3,0,4,0,0,6,19,5,0.09756,0,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,        return iChronology;,16,4,0,0,0,1,16,4,0,42,19,1,0.09249,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",4,1,0,2,4,0,6,0,0,11,35,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,2,2,0,6,56,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",2,0,0,2,4,1,0,0,0,2,53,4,0.07556,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",10,1,1,1,2,1,0,0,0,13,43,3,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,12,0,1,1,2,1,4,2,0,23,32,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,8,1,0,1,3,0,0,0,0,10,26,1,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,4,0,0,1,2,1,6,0,0,11,33,4,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,2,0,0,1,3,0,4,0,0,6,26,6,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0,0,0,1,3,0,0,2,0,3,26,7,0.07556,0,0,-1
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,2,0,0,2,4,0,2,0,0,4,38,5,1.0,0,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",4,1,0,2,4,0,0,0,0,5,78,7,1.0,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,2,0,0,1,2,1,12,0,0,15,39,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,2,0,0,0,0,0,0,0,0,3,11,9,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,6,0,0,13,39,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,8,4,0,5,10,0,8,0,0,21,55,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,2,0,0,1,4,0,8,2,0,12,25,10,0.2,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,4,1,1,0,0,0,0,0,0,8,50,1,0.125,0,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",4,1,0,4,8,1,4,2,0,11,84,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,2,4,0,0,0,0,5,64,4,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,2,1,0,1,2,0,0,0,0,3,16,6,0.06667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,2,0,0,1,2,0,0,2,0,5,32,6,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,3,0,2,6,0,12,0,0,17,74,1,0.05,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",2,0,0,2,6,0,12,0,0,14,74,1,0.04762,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,12,3,0,2,4,0,2,0,0,18,72,1,0.04348,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },2,1,0,0,1,0,6,0,0,9,1,6,0.04167,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,4,0,0,1,2,1,0,0,0,5,22,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,6,1,0,0,0,1,0,0,0,7,22,1,0.02632,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,2,1,0,2,4,1,18,0,0,21,55,1,0.025,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,2,0,0,0,0,1,0,2,0,5,9,10,0.02439,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,14,6,0,0,0,1,8,0,0,32,7,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,4,0,0,1,3,0,6,0,0,10,17,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,14,1,0,0,0,0,0,2,0,18,38,1,0.02083,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,16,2,0,0,0,0,12,0,0,33,6,1,0.02041,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,2,1,0,2,4,1,14,0,0,17,50,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,10,2,0,12,52,1,0.01613,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",8,5,0,2,5,0,0,0,0,13,56,4,0.01471,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,0,8,0,0,10,30,1,0.01471,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },2,0,0,0,1,0,4,0,0,7,1,4,0.01389,0,0,-1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",4,0,0,1,2,0,4,0,0,9,20,3,0.01389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,8,3,0,1,2,0,8,2,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,4,0,0,1,3,0,4,0,0,8,16,1,0.0122,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,        return ldp;,2,1,0,0,0,1,0,0,0,3,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.4183,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")",4,1,0,1,3,0,0,0,0,5,36,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,                break;,2,0,0,0,0,0,8,0,0,10,6,11,0.34409,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,780,        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();,2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,781,        fields.add(DateTimeFieldType.monthOfYear());,4,1,0,2,4,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,782,        fields.add(DateTimeFieldType.dayOfMonth());,4,0,0,2,4,0,12,0,0,16,43,1,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);",2,0,0,2,4,4,0,8,0,13,67,2,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,        iDateTimeFieldType = fieldType;,4,1,0,0,0,0,4,0,0,10,31,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,        iDurationFieldType = null;,4,1,0,0,0,0,14,0,0,21,26,1,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,        iStringValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,        iUpperBound = upperBound;,2,1,0,0,0,0,0,0,0,3,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,                return false;,4,0,0,0,0,1,0,2,0,7,13,1,0.30769,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,0,0,2,37,5,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,        if (lowerBound == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,        return buf.toString();,2,0,0,1,2,1,10,4,0,17,22,1,0.288,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,            bld.appendLiteral('-');,2,1,0,1,2,0,4,0,0,8,23,3,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,            bld.appendMonthOfYear(2);,2,2,0,1,2,0,4,0,0,8,25,10,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,18,0,0,18,37,5,0.27586,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,                    i--;,8,1,0,0,0,0,0,0,0,11,4,1,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,                    break;,10,4,0,0,0,0,0,0,0,15,6,3,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,            buf.append('\'');,0,0,0,1,2,0,10,0,0,10,17,8,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,            boolean inLiteral = false;,2,1,0,0,0,0,0,0,0,4,26,5,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,                if (c == '\'') {,2,0,0,1,3,0,10,0,0,12,16,1,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,                    buf.append(c);,2,0,0,1,2,0,6,0,0,8,14,3,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,                    buf.append(c);,2,0,0,1,2,0,6,0,0,9,14,6,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,            },0,0,0,0,1,0,8,0,0,8,1,5,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,        return withZone(DateTimeZone.UTC);,6,1,0,1,2,1,0,2,0,10,34,1,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,                iPrintedLengthEstimate = 0;,10,0,0,0,0,0,26,2,0,40,27,1,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,                formatter = builder.toFormatter();,10,0,0,1,2,0,8,2,0,23,34,3,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);",4,1,0,1,2,0,8,0,0,13,40,1,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,        return createFormatterForPattern(pattern);,14,1,0,1,2,1,6,4,0,25,42,1,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,        DateTimeFormatter formatter = null;,4,0,0,0,0,0,4,0,0,8,35,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,4,2,0,1,2,0,0,0,0,6,66,9,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,        if (iZone == zone) {,10,1,0,1,3,0,12,2,0,27,20,1,0.24427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",8,1,0,0,1,1,0,2,0,11,56,3,0.24427,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,2,1,0,5,11,0,10,0,0,13,82,1,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,    },14,4,1,0,1,0,12,0,0,37,1,3,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,            indexRef[0] = i;,2,0,0,1,2,0,14,2,0,20,16,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,            i = indexRef[0];,4,0,1,1,2,0,0,0,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,            char c = token.charAt(0);,2,0,0,1,2,0,12,0,0,14,25,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,            switch (c) {,2,0,0,1,3,0,0,0,0,3,12,6,0.23188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,144,        long total = val1 * val2;,6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,10,2,0,1,3,0,0,0,0,12,27,3,0.03846,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },10,1,0,0,1,0,0,0,0,12,1,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",10,0,0,0,1,1,0,2,0,13,55,1,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,6,0,0,0,0,1,8,0,0,15,15,3,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,10,0,0,0,0,2,30,6,0,50,7,1,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },2,1,0,0,1,0,0,0,0,3,1,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,8,0,0,9,42,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,14,5,0,1,3,0,2,2,0,24,32,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,4,0,0,1,2,0,6,0,0,12,41,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,6,0,0,8,33,1,0.196,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,6,1,0,0,0,0,8,0,0,16,6,3,0.18702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,6,0,0,1,2,0,0,8,0,14,30,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,0,0,0,2,4,0,4,0,0,4,28,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,10,0,0,10,30,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,6,1,0,1,3,0,0,0,0,8,12,3,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,0,1,1,1,2,0,8,0,0,14,38,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,2,0,0,1,2,1,4,2,0,8,22,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",10,0,0,1,2,3,2,12,0,28,112,1,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,4,1,0,1,3,0,0,0,0,6,18,7,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,4,0,0,2,5,0,0,0,0,5,36,5,0.17754,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },2,0,0,0,1,0,0,2,0,4,1,3,0.17626,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,0,0,0,5,68,5,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,4,1,0,2,4,0,4,0,0,9,64,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,6,0,0,11,36,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,14,3,0,1,3,0,0,0,0,18,12,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",6,1,0,0,1,0,0,2,0,9,46,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,14,0,0,1,3,0,0,2,0,18,19,1,0.16388,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,6,1,0,2,5,0,2,0,0,10,24,3,0.16388,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,        int count = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,5,30,5,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,351,        if (count > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,225,    },0,0,0,0,1,0,6,0,0,6,1,6,0.00339,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,3,0,0,1,0,5,0,0,12,46,1,0.00337,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,4,0,0,1,3,0,0,0,0,5,19,4,0.00273,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,6,1,0,1,3,0,0,2,0,9,21,3,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,2,0,0,1,2,1,12,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,4,2,0,1,3,0,0,0,0,6,22,3,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,2,0,0,1,2,0,6,0,0,8,46,5,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,4,0,0,2,5,0,0,0,0,5,40,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,2,0,0,1,3,1,6,0,0,9,45,1,0.0015,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,10,2,0,0,0,1,0,0,0,13,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,2,0,0,1,3,0,0,4,0,6,36,5,0.00136,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,6,0,0,1,2,1,8,0,0,15,50,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.00125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,127,    },2,0,0,0,1,0,0,4,0,6,1,8,0.00123,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00114,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,955,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,12,0,0,17,51,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,4,0,0,0,0,0,6,0,0,11,48,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,4,2,1,1,2,1,0,0,0,9,27,1,0.00088,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",2,1,0,1,2,0,4,0,0,9,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,934,        },4,0,0,0,1,0,0,0,0,4,1,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",12,1,0,1,2,0,10,4,0,29,69,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,2,0,0,0,0,0,6,0,0,9,31,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,601,        },2,0,0,0,1,0,2,2,0,7,1,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,611,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,8,0,0,0,0,0,0,2,0,11,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,6,0,0,14,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,4,0,0,10,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,0,0,0,3,126,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,4,0,0,1,2,0,6,0,0,12,35,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,2,1,1,2,0,10,4,0,22,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,10,1,0,1,3,0,6,2,0,20,31,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,230,        return chrono;,10,5,0,0,0,1,4,0,0,20,14,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0,0,0,1,2,0,14,0,0,14,44,8,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,8,1,0,0,0,0,8,0,0,19,33,1,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,4,1,0,1,2,0,8,0,0,15,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,4,1,0,3,6,0,12,2,0,20,29,3,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,10,1,0,5,10,0,4,0,0,17,55,1,0.00244,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,2,0,0,1,2,1,12,2,0,17,32,1,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,8,0,0,1,3,0,6,0,0,17,23,3,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,6,0,0,0,0,0,14,0,0,20,26,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,10,1,0,1,3,0,4,2,0,18,31,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0,0,0,0,1,0,10,0,0,10,1,7,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,4,0,0,1,2,0,10,2,0,16,50,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,18,0,0,19,78,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,2,0,0,1,2,1,8,0,0,10,22,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,1,0,1,2,0,6,0,0,13,54,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,16,0,0,17,29,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,83,                digits = 4;,2,0,0,0,0,0,6,0,0,9,11,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,6,2,0,10,43,7,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,16,4,0,43,65,1,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,8,0,0,14,79,3,0.00235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,8,2,0,1,3,0,4,2,0,18,19,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,12,1,0,1,3,0,12,2,0,30,31,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,28,6,0,1,3,0,10,0,0,46,18,1,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,8,2,0,15,36,3,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,6,0,0,0,0,1,18,2,0,27,30,1,0.00199,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.00193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,2,0,0,0,0,0,0,0,0,2,22,7,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,2,0,0,3,6,0,4,0,0,7,32,11,0.00187,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,10,3,0,1,3,0,12,0,0,25,22,1,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,10,2,0,1,3,0,0,0,0,12,24,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,0,0,0,2,38,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",2,0,0,2,4,1,10,0,0,12,62,6,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,6,1,0,1,2,0,0,0,0,7,8,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,4,0,1,1,3,0,6,0,0,15,21,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0,0,0,0,0,0,0,0,0,1,23,7,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,4,1,0,0,0,1,0,0,0,5,18,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,18,0,0,1,3,0,12,0,0,31,22,1,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,            for (String id : ALL_IDS) {,0,0,0,1,3,0,14,0,0,14,27,6,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,                    bucket.setZone(DateTimeZone.forID(id));,0,0,0,2,4,0,10,0,0,10,39,10,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,    static enum TimeZoneId,2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,        INSTANCE;,2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,            for (String id : ALL_IDS) {,4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,            MAX_LENGTH = max;,2,0,0,0,0,1,0,0,0,3,17,2,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,        },2,1,0,0,1,0,10,0,0,14,1,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,            return MAX_LENGTH;,10,0,0,0,0,1,10,0,0,24,18,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",10,0,0,1,2,0,10,2,0,23,46,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,    },4,0,0,0,1,0,0,4,0,8,1,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,",8,1,0,0,1,0,0,0,0,9,36,3,0.0625,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",2,1,0,0,0,1,8,0,0,13,68,1,0.01316,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,369,        if (errorPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,                        indexRef[0]++;,0,0,1,1,2,0,0,0,0,3,14,11,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,3,7,0,8,0,0,8,52,12,0.0122,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,                builder.appendHourOfDay(tokenLen);,10,4,0,1,2,0,6,0,0,21,34,3,0.01163,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,        int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,        if (tokenLen > 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,            char c = token.charAt(0);,0,0,0,1,2,0,4,0,0,4,25,7,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,            switch (c) {,0,0,0,1,3,0,6,0,0,6,12,5,0.01136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,                    int maxDigits = 9;,2,0,0,0,0,0,0,0,0,2,18,10,0.0102,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,                    switch (c) {,4,0,0,1,3,0,10,0,0,14,12,3,0.0102,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,20,359,        if (text.length() <= sampleLen + 3) {,4,2,0,2,5,0,8,0,0,14,37,3,0.0099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,                if (tokenLen == 2) {,6,1,0,1,3,0,0,2,0,9,20,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,        Chronology chrono = selectChronology(null);,2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,                builder.appendDayOfMonth(tokenLen);,2,0,0,1,2,0,14,0,0,17,35,1,0.00546,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.005,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,                    i--;,2,0,0,0,0,0,4,0,0,7,4,3,0.00442,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,                String sub = token.substring(1);,2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,            buf.append('\'');,0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,                c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,616,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,12,0.00441,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,                    buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,                    i++;,2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,                char peek = pattern.charAt(i + 1);,8,1,0,1,2,0,8,0,0,17,34,3,0.00413,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,        int length = pattern.length();,2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,        int[] indexRef = new int[1];,0,0,1,2,4,0,0,0,0,3,28,11,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,16,0,0,19,45,3,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,        int i = indexRef[0];,2,0,0,1,2,0,6,0,0,9,20,8,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,        int length = pattern.length();,6,0,0,1,2,0,4,0,0,11,30,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,        char c = pattern.charAt(i);,6,1,0,1,2,0,6,0,0,14,27,7,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,10,8,0,1,3,0,4,0,0,26,51,1,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",6,0,0,1,2,3,0,14,0,25,112,1,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,            return position + 1;,2,0,0,0,0,1,0,0,0,2,20,5,0.00362,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,            if (a != b) {,12,2,0,1,3,0,0,4,0,19,13,1,0.00333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,            if (position >= text.length()) {,2,1,0,2,5,0,8,0,0,11,32,4,0.0033,0,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,2,1,0,2,4,1,6,2,0,11,31,1,0.5,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,0,0,0,0,0,1,4,0,0,5,19,7,0.33333,0,0,-1
defect4j,time,org/joda/time/Period,22,382,        super(duration);,2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,0,0,1,3,0,0,0,0,3,45,10,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",6,1,0,1,2,0,2,0,0,10,66,4,0.08511,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,6,1,0,1,2,1,6,0,0,13,31,3,0.08511,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",8,1,0,1,2,1,0,0,0,10,41,5,0.07143,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,2,1,0,1,3,0,10,0,0,13,32,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,2,0,0,1,2,0,6,4,0,12,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,6,2,0,1,2,0,8,0,0,18,38,1,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,4,2,0,7,16,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",2,0,0,1,2,0,8,8,0,18,47,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,12,1,0,1,2,0,4,4,0,22,58,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,10,2,0,0,0,0,0,0,0,12,59,3,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.0597,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,4,1,0,1,3,0,8,0,0,14,18,3,0.0597,0,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,12,3,0,1,3,0,4,0,0,19,61,1,0.04938,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,4,1,0,3,6,1,16,0,0,21,84,1,0.04762,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,2,1,0,0,0,1,6,0,0,11,13,4,0.04167,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",4,0,0,1,2,1,12,0,0,18,36,3,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,2,0,1,1,2,0,0,0,0,7,18,10,0.0404,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,14,4,0,1,3,0,0,0,0,19,32,4,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,2,0,0,2,4,0,8,2,0,12,60,8,0.0396,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,                if (field.isPrecise()) {,0,0,0,2,5,0,4,0,0,4,24,9,0.0396,0,0,-1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",10,0,0,2,4,1,4,4,0,18,68,1,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",6,0,0,2,4,1,8,0,0,15,69,3,0.03636,0,0,-1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,1,0,2,4,1,8,0,0,11,68,6,0.03571,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,10,5,0,3,7,0,6,0,0,21,53,1,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,            return iField.getDifference,0,0,0,0,0,1,4,0,0,4,27,6,0.02439,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",2,0,0,1,2,0,14,0,0,16,77,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,10,2,0,0,0,1,0,0,0,13,32,3,0.02105,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,6,1,0,0,0,0,0,0,0,7,24,5,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.0197,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,2,0,0,0,0,1,6,0,0,8,12,4,0.0197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,4,0,0,5,26,1,0.01914,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,2,1,0,1,2,0,0,0,0,3,37,7,0.01762,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,16,7,0,2,4,1,12,2,0,42,79,1,0.01762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,8,1,0,1,2,1,0,0,0,10,28,4,0.01606,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,28,4,0,1,3,0,20,0,0,57,26,1,0.01575,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0,-1
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,2,0,0,2,4,1,4,2,0,8,58,5,0.01493,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,2,1,0,0,0,0,8,0,0,11,28,5,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,0,0,3,7,0,20,2,0,27,53,3,0.01476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,8,1,0,0,0,1,0,2,0,11,14,1,0.01476,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,6,1,0,1,2,1,4,0,0,11,26,1,0.01389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,4,4,0,1,3,0,8,0,0,16,16,1,0.0137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,4,1,0,1,3,0,6,0,0,11,17,1,0.0137,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,            dtz = cProvider.getZone(convId);,2,0,0,1,2,0,6,0,0,9,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,            return dtz;,0,0,0,0,0,1,12,0,0,12,11,5,0.16667,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,        final String id = zone.getID();,6,1,0,1,2,1,4,2,0,14,31,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,        DateTimeZone dtz = null;,4,1,0,0,0,0,0,2,0,7,24,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,        String convId = getConvertedId(id);,2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,313,        if (convId != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,316,        if (dtz == null) {,4,1,0,1,3,0,8,0,0,13,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,319,        if (dtz != null) {,10,4,0,1,3,0,0,0,0,15,18,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;",6,0,0,0,0,0,12,6,0,25,44,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,560,        if (map == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");",2,1,0,1,2,0,4,0,0,9,22,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");",14,1,0,1,2,0,24,4,0,47,36,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");",6,1,0,1,2,0,6,0,0,16,38,3,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",4,0,0,1,2,0,4,0,0,11,56,1,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,1,2,0,14,0,0,16,35,7,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,576,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,1,2,0,6,0,0,6,36,9,0.14286,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");",6,3,0,1,2,0,6,0,0,15,31,1,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,6,1,0,1,2,0,16,0,0,25,39,3,12.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,2,0,0,4,8,1,6,2,0,10,65,5,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,4,0,0,0,0,0,4,0,0,8,53,1,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,2,0,0,1,3,0,0,0,0,2,31,8,7.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,        return instant;,2,0,0,0,0,1,6,0,0,8,15,1,7.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,4,1,0,1,3,0,6,0,0,12,44,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,0,0,0,0,0,1,2,0,0,2,21,6,6.125,1,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4,1,0,3,6,0,4,4,0,13,78,3,4.9,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,6,0,0,1,2,0,4,2,0,12,39,1,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",0,0,1,2,4,0,8,0,0,12,42,8,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },2,0,0,0,1,0,2,2,0,6,1,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4,0,0,2,4,0,0,0,0,6,81,5,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },0,0,0,0,1,0,4,0,0,4,1,7,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,2,0,0,1,2,0,0,0,0,2,19,4,4.45455,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,4,0,0,1,3,0,0,2,0,6,35,3,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,3.76923,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,8,1,0,0,0,1,0,0,0,10,42,1,3.76923,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,2,0,0,1,2,1,6,2,0,10,25,6,3.26667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,6,0,0,0,0,1,4,0,0,11,9,1,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,4,0,0,1,2,1,0,0,0,5,50,5,2.72222,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",4,0,0,1,2,1,4,0,0,8,57,5,2.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,396,        super();,8,1,0,1,2,0,0,0,0,10,8,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,8,2,0,2,4,0,8,0,0,20,63,1,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,8,0,0,8,78,6,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,4,0,0,0,0,0,0,0,0,5,23,4,2.04167,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,401,    },12,4,0,0,1,0,12,0,0,30,1,1,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,6,0,0,1,2,0,6,0,0,14,46,4,2.04167,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,0,1,0,1,3,0,8,0,0,9,25,4,2.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,1,2,0,18,0,0,18,44,1,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,                        break;,2,1,1,0,0,0,0,0,0,5,6,8,1.8,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",10,0,0,1,2,0,0,4,0,14,101,4,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);",4,0,0,1,2,0,10,0,0,14,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);",0,0,0,1,2,0,12,0,0,12,47,5,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,                    chrono = chrono.withZone(parsedZone);,2,0,0,1,2,0,6,0,0,9,37,10,1.75,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);",4,0,0,1,2,1,0,2,0,6,41,9,1.75,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,                    return chronology.weekOfWeekyear();,0,1,0,1,2,1,14,0,0,16,35,1,1.75,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,1.68966,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,862,            return instant;,8,0,0,0,0,1,10,2,0,22,15,4,1.68966,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,350,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,1.53125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,24,1031,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,1.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,        return iOffset;,2,0,0,0,0,1,0,0,0,2,15,4,1.36111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,1.32432,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {",8,1,0,1,3,1,0,2,0,12,55,1,1.28947,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",4,1,0,2,4,0,8,0,0,14,86,1,1.28947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,                        indexRef[0]++;,2,0,1,1,2,0,0,0,0,5,14,1,1.25641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",2,1,0,3,7,0,8,0,0,11,52,3,1.25641,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {",18,0,0,1,3,1,6,4,0,31,59,1,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,275,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,278,        iLocalMillis = localMillis;,4,0,0,0,0,0,8,0,0,13,27,3,1.19512,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,280,    },2,0,0,0,1,0,4,2,0,8,1,7,1.19512,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,        return false;,0,0,0,0,0,1,4,0,0,5,13,4,1.11364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,1.08889,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,548,        return iLocalMillis;,2,0,0,0,0,1,0,0,0,2,20,4,0.96078,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,14,1,0,2,4,1,10,0,0,26,54,3,0.94231,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,557,        return iChronology;,6,1,0,0,0,1,0,0,0,7,19,7,0.92453,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,919,        if (ttx == null) {,6,2,0,1,3,0,0,0,0,8,18,1,0.90741,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,499,            return iDurationField;,4,1,0,0,0,1,0,0,0,5,22,5,0.90741,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,883,        if (tx == null) {,8,1,0,1,3,0,0,0,0,10,17,3,0.89091,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1410,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1411,            hms = new DateTimeFormatterBuilder(),4,0,0,1,2,0,6,2,0,13,36,1,0.875,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1417,        return hms;,4,0,0,0,0,1,0,2,0,6,11,3,0.875,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,586,        return iLocalMillis;,2,1,0,0,0,1,0,0,0,3,20,5,0.76563,0,0,-1
defect4j,time,org/joda/time/LocalDateTime,24,595,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,424,                if (tokenLen == 2) {,2,1,0,1,3,0,0,0,0,3,20,7,0.74242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,511,        if (fieldType == null) {,6,3,0,1,3,0,6,0,0,15,24,1,0.7,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));",6,0,0,2,4,1,12,2,0,22,47,1,0.7,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,101,        DATE_DURATION_TYPES.add(DurationFieldType.years());,6,3,0,2,4,0,0,0,0,9,51,4,0.68056,0,0,-1
defect4j,time,org/joda/time/LocalDate,24,102,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,4,0,0,2,4,0,10,2,0,16,55,1,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,474,            return result;,8,1,0,0,0,1,0,2,0,12,14,1,0.68056,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",2,0,0,1,2,3,0,4,0,9,75,2,0.62025,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,465,            long localInstant = iZone.convertUTCToLocal(instant);,8,0,0,1,2,0,6,0,0,14,53,6,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);",4,0,0,1,2,2,8,2,0,17,47,1,0.60494,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.60494,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,                offset = standardOffset;,4,0,0,0,0,0,0,0,0,5,24,8,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);",8,0,0,1,2,0,0,0,0,8,21,3,0.125,0,0,-1
defect4j,time,org/joda/time/DateTime,25,287,    },2,0,0,0,1,0,4,0,0,7,1,6,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,                    dayOfYear++;,2,1,0,0,0,0,0,0,0,3,12,4,0.06618,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,    },2,0,0,0,1,0,0,0,0,2,1,6,0.04598,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,                buf.append('+');,4,0,0,1,2,0,4,0,0,10,16,1,0.04265,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,        return ISODateTimeFormat.dateTime().print(this);,2,0,0,2,4,1,12,0,0,15,48,1,0.04167,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0393,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,                buf.append(':');,0,0,0,1,2,0,8,0,0,11,16,1,0.03409,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,0,0,0,0,0,0,0,2,62,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,            if (displayOffset == 0 && iMinFields <= 1) {,6,3,0,1,3,0,4,2,0,15,44,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,12,3,0,0,0,0,8,0,0,25,66,4,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",4,0,0,1,2,0,8,0,0,13,49,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,            if (iMaxFields == 2) {,6,1,0,1,3,0,0,0,0,8,22,1,0.03273,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,        if (dt == null) {,2,0,0,1,3,0,0,2,0,5,17,6,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,        return dt;,4,1,0,0,0,1,0,0,0,5,10,3,0.0298,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,        if (t == null) {,0,0,0,1,3,0,4,2,0,6,16,1,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,34,6,0.02813,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);",2,0,0,1,2,0,16,0,0,20,36,1,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,        },2,0,0,0,1,0,0,0,0,2,1,4,0.02795,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,            if (displayZone == null) {,2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,8,0,0,15,57,5,0.02769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,        return hmsf;,6,3,0,0,0,1,0,0,0,9,12,1,0.02761,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,            return instant % iUnitMillis;,4,1,0,0,0,3,0,4,0,12,29,1,0.0255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,        return ymd;,2,0,0,0,0,1,10,0,0,13,11,5,0.02413,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,889,            if ((offsetLocal - offsetAdjusted) < 0) {,4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,                locale = Locale.getDefault();,2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.0232,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,78,        } else {,2,1,0,0,2,0,4,0,0,7,8,6,0.0232,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,            DateTimePrinter[] elements = iPrinters;,10,0,0,1,2,0,0,4,0,14,39,1,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,            int len = elements.length;,8,0,0,0,0,0,0,0,0,8,26,4,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",6,7,0,2,4,0,4,0,0,18,78,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",2,0,1,2,4,0,0,0,0,6,76,9,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,        },6,2,0,0,1,0,32,8,0,52,1,3,0.02284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,        return buf.toString();,24,6,1,1,2,1,28,4,0,69,22,1,0.02267,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,18,0,0,18,29,5,0.02261,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,    },8,1,0,0,1,0,8,0,0,18,1,1,0.02261,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,                    return chronology.secondOfDay();,2,1,0,1,2,1,0,0,0,5,32,3,0.02233,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,        chrono = selectChronology(chrono);,8,0,0,1,2,0,10,0,0,19,34,3,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,        int offset = zone.getOffset(instant);,6,0,1,1,2,0,14,4,0,27,37,1,0.02228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,24,65,4,0.02228,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,80,            if (value < 1000) {,6,1,0,1,3,0,0,2,0,9,19,3,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,87,            for (; size > digits; size--) {,8,0,0,1,3,0,2,0,0,11,31,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,25,90,            buf.append(Integer.toString(value));,2,1,0,2,4,0,0,0,0,3,36,5,0.02206,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,        if (lte == null) {,10,1,1,1,3,0,6,0,0,23,18,3,0.02027,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,            DateTimeField parseField = new PreciseDateTimeField(,2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,            return position + length;,4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,        return iChrono;,2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,    },2,0,0,0,1,0,4,0,0,7,1,7,0.34722,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,6,1,0,1,2,0,14,2,0,23,57,1,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,65,        return p.withChronology(chrono).parseMillis(str);,0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,                    expectSeparators = true;,2,0,0,0,0,0,4,0,0,8,24,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,                    limit--;,4,0,0,0,0,0,4,0,0,9,8,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,                    position++;,6,1,0,0,0,0,0,0,0,9,11,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,            limit--;,2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,            position++;,4,0,0,0,0,0,6,0,0,12,11,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,            if (hours > 23) {,6,2,0,1,3,0,0,0,0,9,17,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,4,2,0,11,51,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,            position += 2;,2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,                if (c == ':') {,4,1,0,1,3,0,6,2,0,14,15,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,                if (count == 0 && !expectSeparators) {,4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,6,0,0,9,57,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,                limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,            return position;,6,2,0,0,0,1,2,0,0,10,16,8,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);",12,3,0,2,4,0,20,0,0,38,55,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,                if (c < '0' || c > '9') {,0,0,0,1,3,0,6,0,0,6,25,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,                amount++;,2,0,0,0,0,0,0,0,0,2,9,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,352,        int value = text.charAt(position) - '0';,2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,8,7,0,4,8,1,4,0,0,21,71,3,0.30864,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,424,        return ISODateTimeFormat.dateTime().print(this);,14,2,0,2,4,1,12,2,0,31,48,3,0.30622,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.2907,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,        if (dtp == null) {,8,3,0,1,3,0,4,0,0,15,18,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,            DateTimeParser time = new DateTimeFormatterBuilder(),6,1,0,1,2,0,10,0,0,18,52,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,            dtp = new DateTimeFormatterBuilder(),10,1,0,1,2,0,0,4,0,16,36,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,                return;,8,0,0,0,0,1,4,0,0,12,7,1,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,1,0,0,0,0,4,0,8,62,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,                negative = false;,8,1,0,0,0,0,0,0,0,10,17,6,0.22857,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,                            bestInvalidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,            SavedField[] newArray = new SavedField,2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,        if (dotp == null) {,0,0,0,1,3,0,8,0,0,8,19,9,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),8,3,0,1,2,0,0,0,0,11,60,6,0.22321,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,6,1,0,1,3,0,0,0,0,8,18,4,0.02128,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,4,0,0,1,2,0,0,4,0,8,48,4,0.02,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,173,    },2,0,0,0,1,0,0,2,0,4,1,5,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,419,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,4,1,0,0,0,0,0,0,0,7,17,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,6,0,0,0,0,0,4,0,0,11,22,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,2,0,0,1,3,0,0,0,0,2,32,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",4,1,0,1,2,0,12,0,0,18,71,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,6,3,0,1,3,0,4,0,0,16,27,1,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,484,            values[index] = value;,4,3,0,1,2,0,0,0,0,7,22,8,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,406,    },10,0,0,0,1,0,18,2,0,32,1,3,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",16,3,0,3,7,0,22,6,0,50,69,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,10,1,0,1,3,0,0,0,0,11,20,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,8,0,0,0,0,0,0,0,0,9,26,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,14,2,0,1,3,0,2,0,0,18,24,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,401,        if (period == null) {,14,1,0,1,3,0,6,4,0,25,21,1,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,776,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,847,"            setMillis(getChronology().seconds().add(getMillis(), seconds));",2,0,0,5,10,0,12,0,0,14,63,3,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1633,            if (months != 0) {,8,1,0,1,3,0,4,2,0,15,18,1,0.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1634,                result = result.withMonths(months);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,286,                minutesOffset = hoursInMinutes - minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.0,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();,2,0,0,1,2,1,0,8,0,11,66,2,0.33333,1,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,        cVerbose.set(Boolean.FALSE);,6,0,0,1,2,0,10,0,0,17,28,1,0.33333,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,4,0,0,3,6,3,4,4,0,14,52,1,1.33333,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,4,3,0,4,8,1,0,0,0,7,65,4,0.8,1,1,-1
defect4j,time,org/joda/time/LocalDate,12,542,        if (fieldType == null) {,4,0,0,1,3,0,6,2,0,13,24,3,0.7619,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,2,0,0,1,2,0,4,0,0,6,22,6,0.07143,1,1,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0,0,0,1,4,0,8,0,0,8,29,5,0.00139,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,                    return position + id.length();,6,1,0,1,2,1,4,0,0,14,30,1,0.125,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");",4,0,0,1,2,0,4,0,0,11,31,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,583,"            map.put(""MET"", ""Asia/Tehran"");",2,0,0,1,2,0,10,4,0,18,30,3,0.14286,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,25,900,        return offsetAdjusted;,4,1,0,0,0,1,0,0,0,5,22,3,0.01261,1,1,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,0,6,0,0,9,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,448,"               return iZone.convertLocalToUTC(localInstant, false);",0,0,0,1,2,1,6,0,0,7,52,8,0.0,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,1,0,0,0,2,52,5,0.0,1,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
