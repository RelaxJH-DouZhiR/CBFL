dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,127,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,128,        iPrinter = printer;,4,0,1,0,0,0,4,0,0,13,19,1,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,129,        iParser = parser;,0,0,0,0,0,0,0,0,0,0,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,131,        iOffsetParsed = offsetParsed;,0,0,0,0,0,0,0,0,0,0,29,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,132,        iChrono = chrono;,4,0,0,0,0,0,0,0,0,5,17,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,134,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,135,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1047,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2608,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.09722,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1605,            if (iTailZone != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.09441,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1703,        if (ze == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.09423,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1704,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.09423,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1708,        return ze;,4,0,0,0,0,1,0,0,0,4,10,3,0.09423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2101,                est += iMinFields - 1;,4,0,0,0,0,0,4,2,0,10,22,10,0.09263,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.09159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.09159,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2144,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,12,1,0,0,0,0,0,0,0,15,63,5,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2145,            if (displayOffset == 0 && iMinFields <= 2) {,0,0,0,1,3,0,0,0,0,4,44,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2146,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,657,        DateTimePrinter printer = iPrinter;,4,0,0,0,0,0,0,2,0,6,35,4,0.09024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,658,        if (printer == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.09024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,661,        return printer;,6,1,1,0,0,1,0,0,0,10,15,1,0.09024,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,532,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,535,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,538,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",6,0,0,2,4,1,2,2,0,10,62,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,77,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1857,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1858,            iFieldType = fieldType;,4,0,0,0,0,0,8,0,0,13,23,1,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1860,            if (maxDigits > 18) {,0,0,0,1,3,0,0,0,0,4,21,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1863,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1864,            iMaxDigits = maxDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1865,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1868,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,5,0.08991,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2026,            return iMaxDigits;,4,1,0,0,0,1,4,0,0,10,18,3,0.08991,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,8,2,0,12,41,3,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1587,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1588,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,1,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1589,            if (i >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1595,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.08974,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1596,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.08974,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2138,                buf.append(':');,8,0,0,1,2,0,8,0,0,18,16,1,0.08929,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2100,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,4,1,0,2,5,0,0,0,0,5,74,4,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2106,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.08893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2236,            return estimatePrintedLength();,4,3,0,1,2,1,0,0,0,7,31,4,0.08893,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,901,            long prev = previousTransition(instantAdjusted);,0,0,0,1,2,0,10,0,0,10,48,5,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,902,            if (prev < instantAdjusted) {,4,1,0,1,3,0,0,0,0,5,29,7,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,903,                int offsetPrev = getOffset(prev);,2,0,0,1,2,0,4,0,0,6,33,10,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,904,                int diff = offsetPrev - offsetLocal;,12,3,0,0,0,0,4,0,0,21,36,3,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,905,                if (instantAdjusted - prev <= diff) {,8,2,0,1,3,0,0,0,0,10,37,3,0.08766,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,164,        if (instant == null) {,10,1,0,1,3,0,4,0,0,16,22,3,0.08734,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.08703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2119,            if (displayOffset >= 0) {,2,1,0,1,3,0,0,0,0,3,25,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2126,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,62,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2127,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2128,            if (iMaxFields == 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2131,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2132,            if (displayOffset == 0 && iMinFields <= 1) {,4,3,0,1,3,0,0,0,0,7,44,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2136,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,66,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2137,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2140,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2141,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.08591,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,8,0,0,11,53,1,0.08537,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,1,2,2,0,4,33,5,0.08522,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2083,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2085,            iZeroOffsetParseText = zeroOffsetParseText;,4,0,0,0,0,0,0,0,0,5,43,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2086,            iShowSeparators = showSeparators;,12,1,0,0,0,0,6,0,0,20,33,1,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2087,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2094,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2095,            iMaxFields = maxFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.08463,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2096,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08463,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.08348,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1681,        if (sme == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08291,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1682,            sme = new DateTimeFormatterBuilder(),6,3,0,1,2,0,0,2,0,12,36,4,0.08291,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.08291,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,16,146,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.08291,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.08263,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,140,        int offset = zone.getOffsetFromLocal(instant);,0,0,0,1,2,0,0,0,0,3,46,4,0.08263,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,141,        instant -= offset;,6,1,0,0,0,0,0,0,0,8,18,3,0.08263,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,142,        if (offset != zone.getOffset(instant)) {,0,0,0,2,5,0,0,0,0,7,40,4,0.08263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08249,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.08249,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1662,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.08221,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1663,            hde = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08221,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.08221,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,4,0,0,4,35,7,0.08072,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,0,1,2,1,0,0,0,3,50,4,0.0798,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07916,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.07903,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.07632,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",2,1,0,2,4,0,0,0,0,3,57,4,0.07632,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07632,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,900,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.07562,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.07504,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07402,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.07402,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,882,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,884,        final long instantAdjusted = instantLocal - offsetLocal;,0,0,0,0,0,0,0,0,0,0,56,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.07368,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,16,887,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.07368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.07346,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1600,        return mye;,0,0,0,0,0,1,0,0,0,1,11,4,0.07346,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,69,5,0.07174,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1585,        if (ye == null) {,2,1,0,1,3,0,8,0,0,11,17,3,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1586,            ye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.07143,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1590,        return ye;,2,0,0,0,0,1,0,0,0,2,10,4,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,517,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.07091,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,550,            return iField.getMinimumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.07091,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,567,            return iField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.07091,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,520,                    return chronology.minuteOfHour();,8,0,0,1,2,1,0,2,0,10,33,4,0.07061,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.0702,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,31,4,0.06882,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,260,            return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.06872,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,204,            for (int i=chronos.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,38,6,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,205,                chrono = chronos.get(i);,2,0,0,1,2,0,6,0,0,9,24,8,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,10,0,0,16,63,3,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,209,                    return chrono;,2,0,0,0,0,1,0,0,0,2,14,10,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,397,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.06863,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,406,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,4,0,0,4,56,5,0.06863,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,939,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,940,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,943,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,946,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.06844,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,516,                    return chronology.hourOfDay();,2,0,0,1,2,1,10,4,0,16,30,1,0.06844,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.06834,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,499,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,16,503,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",8,0,0,3,6,0,0,2,0,10,62,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,282,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,6,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,221,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,477,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.06768,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,307,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,317,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.06685,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,16,320,        if (zone == getZone()) {,2,1,0,2,5,0,2,0,0,5,24,4,0.06685,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,8,2,0,1,2,0,2,0,0,12,88,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1168,        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0,0,0,1,2,0,0,0,0,3,87,4,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1169,        if (instantBefore == instantAfter) {,2,0,0,1,3,0,2,0,0,4,36,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1174,        long local = convertUTCToLocal(instant);,2,0,0,1,2,0,4,0,0,6,40,5,0.5,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",12,1,0,1,2,1,4,0,0,18,86,1,0.5,1,0,-1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,666,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0,0,0,3,6,0,0,0,0,9,59,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,686,        return withMillis(newMillis);,0,0,0,1,2,1,4,0,0,4,29,5,0.5,0,0,-1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,",4,1,0,0,1,0,6,0,0,12,36,3,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1098,        if (hours == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",2,0,0,4,8,0,10,0,0,12,63,5,0.05,0,0,-1
defect4j,time,org/joda/time/DateTime,17,1102,        return withMillis(instant);,0,0,0,1,2,1,4,0,0,4,27,5,0.05,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,        return getChronology().getZone();,0,1,0,2,4,1,8,0,0,10,33,3,0.01887,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,                return iWallOffsets[i];,2,0,1,1,2,1,0,0,0,6,23,1,0.01639,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,            return iNextInfo.getOffset(millis);,8,1,0,1,2,1,10,6,0,25,35,1,0.00862,0,0,-1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,84,6,0.005,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,            int offset = getOffsetToAdd(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.00476,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,344,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,            return offset;,2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,266,        return,0,0,0,0,0,0,0,0,0,0,6,4,0.0037,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,225,    },0,0,0,0,1,0,6,0,0,6,1,6,0.00339,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,3,0,0,1,0,5,0,0,12,46,1,0.00337,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,            return instant % iUnitMillis;,4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,        if (instant >= 0) {,4,0,0,1,3,0,0,0,0,5,19,4,0.00273,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.00242,0,0,-1
defect4j,time,org/joda/time/DateTime,17,220,"        super(instant, chronology);",0,0,0,1,2,0,0,0,0,3,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTime,17,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,168,        if (chrono == null) {,6,1,0,1,3,0,0,2,0,9,21,3,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00177,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,149,        return instant.getMillis();,2,0,0,1,2,1,12,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,146,        if (instant == null) {,4,2,0,1,3,0,0,0,0,6,22,3,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,        int offset = zone.getOffsetFromLocal(instant);,2,0,0,1,2,0,6,0,0,8,46,5,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,        if (offset != zone.getOffset(instant)) {,4,0,0,2,5,0,0,0,0,5,40,4,0.0015,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,        return localToUTC(getBase().getDateTimeMillis,2,0,0,1,3,1,6,0,0,9,45,1,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00148,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,            periodStart = next;,4,0,0,0,0,0,0,0,0,5,19,6,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0,0,0,2,4,0,0,0,0,6,57,4,0.0014,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0014,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,900,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00139,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,910,        return offsetAdjusted;,2,0,0,0,0,1,0,0,0,2,22,4,0.00138,1,1,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,882,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,48,4,0.00136,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,17,884,        final long instantAdjusted = instantLocal - offsetLocal;,10,2,0,0,0,1,0,0,0,13,56,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,885,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,887,        if (offsetLocal != offsetAdjusted) {,2,0,0,1,3,0,0,4,0,6,36,5,0.00136,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.00131,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,6,0,0,1,2,1,8,0,0,15,50,6,0.00129,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00127,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,0,0,1,2,1,0,0,0,2,43,4,0.00125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,124,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,125,        iChronology = checkChronology(chronology);,0,0,0,1,2,0,0,0,0,3,42,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00123,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,127,    },2,0,0,0,1,0,0,4,0,6,1,8,0.00123,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00114,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.00109,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,955,            return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,6,0.00104,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,951,        int offsetOriginal = getOffset(originalInstantUTC);,4,0,0,1,2,0,12,0,0,17,51,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,952,        long instantUTC = instantLocal - offsetOriginal;,4,0,0,0,0,0,6,0,0,11,48,1,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.00099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,954,        if (offsetLocalFromOriginal == offsetOriginal) {,4,1,0,1,3,0,0,0,0,5,48,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,104,        long addition = value * iUnitMillis;  // safe,0,0,0,0,0,0,0,0,0,0,45,4,0.00096,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,17,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,1,2,1,8,0,0,8,45,5,0.00096,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1535,                if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1536,                    return iWallOffsets[i - 1];,4,2,1,1,2,1,0,0,0,9,27,1,0.00088,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1574,                return transitions[i];,0,0,0,1,2,1,0,0,0,4,22,4,0.00088,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,304,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,82,        long sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,23,4,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,6,0,0,6,45,7,0.00085,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,88,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.00085,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,17,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00084,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,924,        int offset = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,35,5,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,925,        long instantLocal = instantUTC + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,68,4,0.00078,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,930,        return instantLocal;,2,0,0,0,0,1,0,0,0,2,20,4,0.00078,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,295,        return iMillis;,14,2,0,0,0,1,16,2,0,37,15,1,0.00072,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,80,            return (int) ((instant / getUnitMillis()) % iRange);,4,2,0,4,8,1,10,0,0,16,52,3,0.0007,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,17,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,6,0,0,6,43,5,0.00066,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,213,                leapYears--;,4,0,0,0,0,0,0,0,0,6,12,1,0.00064,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0,0,0,3,7,0,0,0,0,10,54,4,0.00061,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,167,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",10,1,0,2,4,0,6,0,0,18,78,1,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,10,0,0,10,84,5,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,0,0,0,6,88,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,0,0,0,6,89,4,0.00056,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,0,0,0,4,59,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,160,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1533,            i = ~i;,8,0,0,0,0,0,0,0,0,11,7,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1534,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,103,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,0,0,0,7,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,197,                if (iOffset == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0,0,0,1,2,0,0,0,0,3,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,200,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1528,            long[] transitions = iTransitions;,6,1,0,1,2,0,0,0,0,7,34,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1529,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1530,            if (i >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1570,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1571,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1572,            i = (i >= 0) ? (i + 1) : ~i;,2,0,0,2,4,0,0,0,0,2,28,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1573,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,140,        int period = (int)(millis >> 32);,2,0,0,2,4,0,4,2,0,8,33,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,141,        Info[] cache = iInfoCache;,2,0,0,1,2,0,0,0,0,2,26,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,142,        int index = period & cInfoCacheMask;,8,1,0,0,0,0,4,0,0,14,36,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,143,        Info info = cache[index];,0,0,0,1,2,0,0,0,0,3,25,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,145,            info = createInfo(millis);,2,0,0,1,2,0,4,2,0,9,26,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,146,            cache[index] = info;,0,0,0,1,2,0,0,0,0,3,20,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,148,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,152,        long periodStart = millis & (0xffffffffL << 32);,10,2,0,1,2,0,0,2,0,14,48,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,153,"        Info info = new Info(iZone, periodStart);",12,1,0,1,2,0,16,2,0,33,41,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,155,        long end = periodStart | 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,156,        Info chain = info;,0,0,0,0,0,0,0,0,0,0,18,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,158,            long next = iZone.nextTransition(periodStart);,14,3,0,1,2,0,6,0,0,23,46,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,159,            if (next == periodStart || next > end) {,4,0,0,1,3,0,0,0,0,4,40,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,166,        return info;,10,1,0,0,0,1,0,0,0,11,12,3,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,180,"        Info(DateTimeZone zone, long periodStart) {",0,0,0,1,3,0,0,0,0,4,43,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,177,        private int iOffset = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,40,4,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,178,        private int iStandardOffset = Integer.MIN_VALUE;,10,0,0,0,0,0,14,2,0,27,48,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,181,            iPeriodStart = periodStart;,4,0,0,0,0,0,0,0,0,5,27,5,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,182,            iZoneRef = zone;,6,0,0,0,0,0,0,0,0,7,16,1,0.00056,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00056,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,256,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,8,2,0,13,45,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,257,    },2,1,0,0,1,0,0,0,0,4,1,6,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,252,        super();,4,1,1,1,2,0,12,2,0,23,8,3,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,253,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,8,2,0,12,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,75,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,448,        int year = getYear(millis);,4,0,0,1,2,0,0,0,0,5,27,6,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,449,"        int month = getMonthOfYear(millis, year);",0,0,0,1,2,0,0,0,0,3,41,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,0,0,0,4,42,4,0.00051,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,17,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,17,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,6,0,0,6,36,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,107,        if ((base = iBase) != null) {,8,1,1,2,5,0,0,0,0,12,29,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,17,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0,0,0,1,2,0,0,0,0,3,53,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0,0,0,3,6,1,0,0,0,10,76,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,12,7,0,4,8,0,4,0,0,23,52,3,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,93,        return,8,0,1,0,0,0,0,2,0,15,6,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",2,0,0,3,6,0,16,0,0,18,115,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,1,2,1,0,0,0,4,60,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,17,79,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",2,1,0,4,8,0,14,0,0,17,89,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",2,0,0,3,6,0,0,0,0,2,97,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,682,        return getMaxMonth();,0,0,0,1,2,1,0,0,0,4,21,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,237,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00049,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,17,232,        if ((value < lowerBound) || (value > upperBound)) {,14,5,0,3,7,0,0,0,0,19,51,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,233,        return MILLIS_PER_YEAR / 2;,8,5,0,0,0,1,0,0,0,13,27,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,241,        return (1970L * MILLIS_PER_YEAR) / 2;,2,2,0,1,2,1,0,0,0,4,37,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,120,        if (isLeapYear(year)) {,4,2,0,2,5,0,4,0,0,11,23,1,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,4,0,0,1,2,0,2,0,0,6,56,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,6,2,0,2,4,0,0,0,0,8,64,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,401,        if (i2 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,0,0,0,6,35,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,407,        long diff = instant - yearStart;,0,0,0,0,0,0,0,0,0,0,32,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,14,2,0,1,4,0,12,0,0,30,61,3,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,428,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00049,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,17,139,        if (isLeapYear(year)) {,4,0,0,2,5,0,0,0,0,5,23,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,221,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,202,        int leapYears = year / 100;,2,1,0,0,0,0,0,0,0,3,27,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,203,        if (year < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,8,4,0,2,4,0,0,0,0,13,55,6,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,90,4,0.00048,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,17,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,0,0,5,10,1,4,2,0,12,69,1,0.00047,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,284,        return instant;,0,0,0,0,0,1,4,0,0,4,15,6,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,385,        long millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,34,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,386,"        millis += getTotalMillisByYearMonth(year, month);",4,0,0,1,2,0,0,2,0,7,49,4,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,74,4,0.00044,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,17,270,        return DateTimeUtils.getChronology(chronology);,0,0,0,1,2,1,6,0,0,6,47,5,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,51,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.00044,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,17,52,    },4,0,0,0,1,0,0,0,0,5,1,6,0.00044,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,360,        return getYearInfo(year).iFirstDayMillis;,14,1,0,1,2,1,18,2,0,37,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0,0,0,1,2,0,8,0,0,8,50,5,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,739,        if (info == null || info.iYear != year) {,2,0,0,1,3,0,4,0,0,7,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0,0,0,2,4,0,0,0,0,6,63,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,741,            iYearInfoCache[year & CACHE_MASK] = info;,6,1,1,1,2,0,0,0,0,10,41,6,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,743,        return info;,0,0,0,0,0,1,4,0,0,6,12,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,770,"        YearInfo(int year, long firstDayMillis) {",6,0,0,1,3,0,8,0,0,16,41,1,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,771,            iYear = year;,0,0,0,0,0,0,0,0,0,0,13,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,772,            iFirstDayMillis = firstDayMillis;,0,0,0,0,0,0,0,0,0,0,33,4,0.00043,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,17,773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00043,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,61,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00042,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,17,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00042,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",6,1,0,2,4,0,8,2,0,18,76,1,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,108,"                cCache.put(zone, chrono);",4,1,0,1,2,0,0,0,0,5,25,5,0.00039,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,96,        if (zone == null) {,8,1,0,1,3,0,4,2,0,15,19,1,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,104,        synchronized (cCache) {,4,0,0,1,3,0,0,2,0,6,23,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,106,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,111,        cFastCache[index] = chrono;,2,0,1,1,2,0,0,0,0,7,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,112,        return chrono;,8,1,0,0,0,1,0,0,0,10,14,3,0.00037,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,17,255,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,17,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,1,0,2,0,6,70,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,17,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00035,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,123,        return iZone.hashCode();,0,0,0,1,2,1,4,0,0,4,24,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,17,133,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00034,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1237,        return 57 + getID().hashCode();,0,0,0,2,4,1,0,0,0,7,31,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,284,            super(field.getType());,0,0,0,2,4,0,0,0,0,6,23,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,285,            if (!field.isSupported()) {,0,0,0,2,5,0,4,0,0,5,27,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,288,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,289,            iTimeField = useTimeArithmetic(field);,0,0,0,1,2,0,0,0,0,3,38,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,290,            iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,291,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,298,            return iField.getUnitMillis();,0,0,0,1,2,1,0,0,0,4,30,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,82,"        super(base, zone);",0,0,0,1,2,0,0,0,0,3,18,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,56,        if (base == null) {,2,0,0,1,3,0,2,2,0,6,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,59,        base = base.withUTC();,2,0,0,1,2,0,4,0,0,7,22,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,60,        if (base == null) {,12,1,0,1,3,0,12,0,0,26,19,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,66,"        return new ZonedChronology(base, zone);",0,0,0,1,2,1,0,0,0,4,39,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,86,        return (DateTimeZone)getParam();,0,0,0,2,4,1,8,0,0,8,32,5,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,8,12,0,22,66,1,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,157,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00034,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,2,1,0,0,0,0,0,0,0,3,48,4,0.05556,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.05556,0,0,-1
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0,0,0,1,2,0,0,0,0,3,61,4,0.03333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",6,1,0,1,3,0,8,0,0,15,36,3,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",2,0,0,3,6,0,16,0,0,21,79,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,8,1,0,0,0,0,8,0,0,19,31,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,6,0,0,0,0,0,10,0,0,17,21,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,4,2,0,13,25,3,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,    },6,1,0,0,1,0,4,0,0,11,1,5,0.01471,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,3,4,12,0,21,37,1,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,10,2,0,1,3,0,2,0,0,16,25,3,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,18,63,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.01282,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,18,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.00833,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0,0,0,1,2,1,0,0,0,4,57,4,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,194,            cutoverInstant = gregorianCutover.toInstant();,0,0,0,1,2,0,10,0,0,10,46,7,0.00129,0,0,-1
defect4j,time,org/joda/time/Instant,18,144,        return this;,0,1,1,0,0,1,0,0,0,5,12,6,0.00129,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,12,2,0,1,2,0,0,0,0,15,36,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",10,0,0,2,4,0,16,2,0,29,99,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,496,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,102,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,498,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,500,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",8,0,0,1,2,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,923,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",2,1,0,1,2,0,4,0,0,9,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,934,        },4,0,0,0,1,0,0,0,0,4,1,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,944,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",12,1,0,1,2,0,10,4,0,29,69,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,946,            if (durationField == null) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,2,0,0,0,0,0,6,0,0,9,31,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,950,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,601,        },2,0,0,0,1,0,2,2,0,7,1,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,610,"                     long cutoverMillis, boolean convertByWeekyear) {",0,0,0,0,2,0,0,0,0,2,48,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,611,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,8,0,0,0,0,0,0,2,0,11,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,614,            iCutover = cutoverMillis;,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,6,0,0,0,0,0,6,0,0,14,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,4,0,0,10,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,4,0,0,1,2,0,4,2,0,10,66,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,621,            if (rangeField == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,622,                rangeField = julianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,49,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,625,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,1,0,1,2,0,0,0,0,3,126,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,83,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,4,0,0,1,2,0,6,0,0,12,35,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,191,        if (gregorianCutover == null) {,0,0,0,1,3,0,10,0,0,10,31,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,2,2,1,1,2,0,10,4,0,22,51,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,6,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,202,"            cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,10,1,0,1,3,0,6,2,0,20,31,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,215,            chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,228,        chronos.add(chrono);,0,0,0,1,2,0,0,0,0,3,20,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,230,        return chrono;,10,5,0,0,0,1,4,0,0,20,14,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,453,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,12,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,455,        JulianChronology julian = (JulianChronology)params[0];,0,0,0,2,4,0,0,0,0,6,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,456,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,0,0,0,6,63,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,457,        Instant cutoverInstant = (Instant)params[2];,0,0,0,2,4,0,0,0,0,6,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0,0,0,1,2,0,14,0,0,14,44,8,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,460,        iJulianChronology = julian;,0,0,0,0,0,0,0,0,0,0,27,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,8,1,0,0,0,0,8,0,0,19,33,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,462,        iCutoverInstant = cutoverInstant;,0,0,0,0,0,0,0,0,0,0,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,464,        if (getBase() != null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,468,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,0,0,3,7,0,0,0,0,10,82,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,473,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,10,1,0,1,2,0,0,2,0,13,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,479,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,0,0,0,3,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,485,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,0,0,3,7,0,0,0,0,10,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,505,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",12,0,0,2,4,0,4,2,0,19,72,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,514,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,61,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,515,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,520,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,521,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,529,            fields.year = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,40,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,531,            fields.years = fields.year.getDurationField();,0,0,0,1,2,0,0,0,0,3,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,532,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,45,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,534,            fields.yearOfCentury = new ImpreciseCutoverField(,8,4,0,0,1,0,0,0,0,12,49,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,537,            fields.centuryOfEra = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,48,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,539,            fields.centuries = fields.centuryOfEra.getDurationField();,0,0,0,1,2,0,0,0,0,3,58,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,541,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,4,0,0,4,47,7,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,543,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,545,            fields.weekyear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,44,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,547,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,53,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,549,            fields.weekyears = fields.weekyear.getDurationField();,2,1,0,1,2,0,0,0,0,3,54,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,555,            CutoverField cf = new CutoverField,0,0,0,0,0,0,0,0,0,0,34,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,557,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,558,            fields.dayOfMonth = cf;,6,0,0,0,0,0,8,0,0,15,23,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,560,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,563,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1071,"            super(durationField, durationField.getType());",0,0,0,2,4,0,0,0,0,6,46,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1072,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,18,1073,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,127,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,129,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,133,        return instant;,8,2,0,0,0,1,2,0,0,12,15,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,72,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,80,        int value = super.get(millis);,0,0,0,1,2,0,0,0,0,3,30,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,81,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00104,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,84,        return value;,4,0,0,0,0,1,0,0,0,5,13,3,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,211,        return (year & 3) == 0;,2,2,0,1,2,1,0,0,0,4,23,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,219,        int relativeYear = year - 1968;,0,0,0,0,0,0,4,0,0,4,31,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,221,        if (relativeYear <= 0) {,24,11,0,1,3,0,0,0,0,37,24,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,2,0,2,4,0,0,0,0,7,89,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,1,2,1,0,0,0,4,64,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,253,        return MILLIS_PER_YEAR / 2;,4,1,0,0,0,1,0,0,0,5,27,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0,0,0,1,2,1,0,0,0,4,79,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,133,        int thisWeekyear = get( instant );,4,1,0,1,2,0,2,4,0,11,34,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,134,        if ( thisWeekyear == year ) {,0,0,0,1,3,0,0,0,0,4,29,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,140,        int thisDow = iChronology.getDayOfWeek(instant);,8,0,0,1,2,0,0,2,0,11,48,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0,0,0,1,2,0,0,0,0,3,65,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0,0,0,1,2,0,0,0,0,3,53,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,155,        if ( setToWeek > maxOutWeeks ) {,8,0,0,1,3,0,0,0,0,9,32,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,162,        long workInstant = instant; // Get a copy,16,2,0,0,0,0,14,6,0,40,41,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,168,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,173,        int workWoyYear = get( workInstant );,0,0,0,1,2,0,0,0,0,3,37,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,179,        if ( workWoyYear < year ) {,8,1,0,1,3,0,4,0,0,14,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,181,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,10,1,0,1,2,0,10,2,0,23,64,1,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0,0,0,1,2,0,0,0,0,3,56,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",4,1,0,2,4,0,10,0,0,16,66,3,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,204,        return workInstant;,0,0,0,0,0,1,0,0,0,1,19,4,0.00103,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,96,        return iField.get(instant);,0,0,0,1,2,1,0,0,0,4,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,60,        return iChronology.getWeekyear(instant);,2,0,0,1,2,2,0,0,0,3,40,2,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,493,        int year = getYear(instant);,0,0,0,1,2,0,0,0,0,3,28,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,494,"        int week = getWeekOfWeekyear(instant, year);",2,1,0,1,2,0,6,0,0,9,44,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,495,        if (week == 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,185,        return iMinDaysInFirstWeek;,0,0,0,0,0,1,0,0,0,1,27,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,344,            return jan1millis + (8 - jan1dayOfWeek),0,0,0,1,2,1,0,0,0,4,39,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0,0,0,2,4,0,0,0,0,6,70,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,539,            if (daysSince19700101 < -3) {,10,0,0,1,3,0,0,2,0,14,29,6,0.00103,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,163,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0,0,0,2,4,0,0,0,0,6,59,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,0,0,0,0,3,49,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,236,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,239,        return instant;,2,1,0,0,0,1,0,0,0,3,15,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),10,3,0,1,2,1,0,0,0,13,71,3,0.00103,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,18,792,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,103,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,112,        return DateTimeConstants.SUNDAY;,0,0,0,0,0,1,0,0,0,1,32,4,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,272,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,2,4,1,8,0,0,8,52,5,0.00102,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,18,269,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,339,        long jan1millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,38,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,4,0,0,1,2,0,0,0,0,5,45,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0,0,0,2,5,0,0,0,0,7,48,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,2,0,0,1,2,0,4,0,0,6,55,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,0,0,0,0,3,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,59,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,521,        if (instant >= firstWeekMillis2) {,4,1,0,1,3,0,0,0,0,5,34,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,8,3,0,3,6,1,0,0,0,11,84,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,50,public final class JulianChronology extends BasicGJChronology {,0,0,0,0,1,0,0,0,0,1,63,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,8,0,0,8,28,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,95,            instant += 1;,2,0,0,0,0,0,0,0,0,3,13,6,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,96,            return instant - instant % iUnitMillis - iUnitMillis;,2,0,0,0,0,1,0,0,0,2,53,4,0.00102,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,18,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0,0,0,5,10,1,0,0,0,16,71,4,0.00101,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),4,1,0,1,2,1,0,0,0,5,45,8,0.00101,0,0,-1
defect4j,time,org/joda/time/Instant,18,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,119,        iMillis = instant;,0,0,0,0,0,0,0,0,0,0,18,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,120,    },4,0,0,0,1,0,0,0,0,5,1,4,0.00099,0,0,-1
defect4j,time,org/joda/time/Instant,18,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,162,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,45,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,0,0,0,4,28,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,125,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,129,        synchronized (cCache) {,4,0,0,1,3,0,4,0,0,9,23,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,130,            JulianChronology[] chronos = cCache.get(zone);,0,0,0,2,4,0,0,0,0,6,46,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,131,            if (chronos == null) {,6,1,0,1,3,0,0,0,0,8,22,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,132,                chronos = new JulianChronology[7];,0,0,0,1,2,0,0,0,0,3,34,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,136,                chrono = chronos[minDaysInFirstWeek - 1];,0,0,0,1,2,0,0,0,0,3,41,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,140,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,141,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,149,                chronos[minDaysInFirstWeek - 1] = chrono;,6,2,1,1,2,0,0,0,0,11,41,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,152,        return chrono;,6,0,0,0,0,1,10,2,0,18,14,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,241,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,245,        return MAX_YEAR;,22,11,0,0,0,1,4,0,0,37,16,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,249,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,257,        return MILLIS_PER_MONTH;,4,0,0,0,0,1,6,2,0,13,24,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,265,        if (getBase() == null) {,2,0,0,2,5,0,0,0,0,2,24,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,266,            super.assemble(fields);,4,0,1,1,2,0,0,4,0,10,23,1,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,268,"            fields.year = new SkipDateTimeField(this, fields.year);",10,0,0,1,2,0,6,2,0,19,55,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0,0,0,1,2,0,0,0,0,3,63,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,18,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,18,224,        return iChronology.getMinYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,54,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,196,        return iField.getRangeDurationField();,0,0,0,1,2,1,0,0,0,4,38,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,65,        super(field);,22,1,0,1,2,0,12,0,0,37,13,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,66,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,67,        int min = super.getMinimumValue();,6,0,0,1,2,0,4,0,0,10,34,3,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,68,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,69,            iMinValue = min - 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,75,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,18,76,    },2,0,1,0,1,0,0,2,0,7,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,212,        return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,52,"        this(field, null);",2,0,0,1,2,0,0,0,0,2,18,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,62,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,63,        if (field == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,66,        iField = field;,4,0,0,0,0,0,0,0,0,5,15,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,67,        iType = (type == null ? field.getType() : type);,0,0,0,2,4,0,0,0,0,6,48,4,0.00087,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,18,68,    },2,0,0,0,1,0,6,0,0,9,1,9,0.00087,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,92,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,115,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.00084,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,167,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,2,4,0,0,0,0,6,78,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,2,4,0,0,0,0,6,84,4,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,2,4,0,10,0,0,10,88,5,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,2,4,0,10,0,0,10,89,5,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,0,0,1,2,1,8,0,0,8,59,9,0.00082,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,18,213,                leapYears--;,0,0,0,0,0,0,0,0,0,0,12,4,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,2,4,1,0,0,0,7,47,4,0.00078,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,0,0,0,4,43,4,0.00078,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,18,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,6,0,0,6,41,5,0.00075,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,18,534,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00075,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,0,8,0,0,8,60,5,0.00071,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,18,80,        return instant + (value - get(instant)) * iUnitMillis;,6,3,0,2,4,1,4,0,0,13,54,4,0.00071,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,18,252,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00071,0,0,-1
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0,0,-1
defect4j,time,org/joda/time/DateTime,19,333,    },4,0,0,0,1,0,0,0,0,4,1,7,0.06667,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,6,0,0,6,33,8,0.008,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.008,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,0,0,0,7,48,4,0.00446,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,6,2,0,1,3,0,8,0,0,18,18,1,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,10,0,0,10,26,5,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00422,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0,1,0,0,0,0,20,0,0,23,12,3,0.00412,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00341,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,954,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.0031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0,1,0,1,3,0,8,0,0,10,16,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,4,0,10,34,6,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1483,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1490,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1691,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,4,0,0,1,3,0,4,0,0,9,26,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,2,0,0,1,2,0,0,4,0,6,50,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1909,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1913,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },2,0,0,0,1,0,0,2,0,5,1,6,0.00289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1923,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00289,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,6,1,0,0,0,1,18,0,0,26,29,3,0.00276,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00258,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1358,        if (ymd == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,4,1,0,1,2,0,8,0,0,15,29,1,0.00253,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,4,1,0,3,6,0,12,2,0,20,29,3,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,10,1,0,5,10,0,4,0,0,17,55,1,0.00244,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,78,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00244,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1180,            buf.append(iValue);,0,0,0,1,2,0,6,0,0,6,19,6,0.00243,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00243,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,2,0,0,1,2,1,12,2,0,17,32,1,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2614,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,8,0,0,1,3,0,6,0,0,17,23,3,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,6,0,0,0,0,0,14,0,0,20,26,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,10,1,0,1,3,0,4,2,0,18,31,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0,0,0,0,1,0,10,0,0,10,1,7,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,4,0,0,1,2,0,10,2,0,16,50,1,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00241,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,18,0,0,19,78,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,582,"        printTo(buf, instant);",0,0,0,1,2,0,6,0,0,6,22,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,2,0,0,1,2,1,8,0,0,10,22,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,6,1,0,1,2,0,6,0,0,13,54,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,6,0,0,6,64,5,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,16,0,0,17,29,3,0.00239,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00239,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,83,                digits = 4;,2,0,0,0,0,0,6,0,0,9,11,3,0.00236,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,82,            } else if (value < 10000) {,0,0,0,1,4,0,0,0,0,5,27,4,0.00236,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,6,2,0,10,43,7,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,621,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,622,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,16,4,0,43,65,1,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,8,0,0,14,79,3,0.00235,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,631,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00235,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,8,2,0,1,3,0,4,2,0,18,19,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,12,1,0,1,3,0,12,2,0,30,31,3,0.00233,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.00233,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,28,6,0,1,3,0,10,0,0,46,18,1,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,8,2,0,15,36,3,0.00216,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1658,        return lte;,0,0,0,0,0,1,0,0,0,1,11,4,0.00216,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,6,0,0,0,0,1,18,2,0,27,30,1,0.00199,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1703,        if (ze == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.00193,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1708,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.00193,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,2,0,0,0,0,0,0,0,0,2,22,7,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00189,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,64,                buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.00188,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,2,0,0,3,6,0,4,0,0,7,32,11,0.00187,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,656,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,10,3,0,1,3,0,12,0,0,25,22,1,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,19,660,        return printer;,0,0,0,0,0,1,0,0,0,1,15,4,0.00185,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,10,2,0,1,3,0,0,0,0,12,24,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,535,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,2,0,0,1,3,0,0,0,0,2,38,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",2,0,0,2,4,1,10,0,0,12,62,6,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,77,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,6,1,0,1,2,0,0,0,0,7,8,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,4,0,1,1,3,0,6,0,0,15,21,1,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0,0,0,0,0,0,0,0,0,1,23,7,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1864,            iMaxDigits = maxDigits;,0,0,0,0,0,0,0,0,0,0,23,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1865,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1868,            return iMaxDigits;,0,0,0,0,0,1,0,0,0,1,18,4,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,4,1,0,0,0,1,0,0,0,5,18,5,0.00184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,18,0,0,1,3,0,12,0,0,31,22,1,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0,0,0,2,5,0,0,0,0,7,74,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2106,            return est;,4,1,0,0,0,1,0,0,0,5,11,4,0.00182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2236,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.00182,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,167,        Chronology chrono = instant.getChronology();,0,0,0,1,2,0,0,0,0,3,44,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,168,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00178,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,171,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00178,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00174,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2083,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2085,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,10,0,0,12,43,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2086,            iShowSeparators = showSeparators;,0,0,0,0,0,0,0,0,0,0,33,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2087,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2090,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2094,            iMinFields = minFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2095,            iMaxFields = maxFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.00173,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2096,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00173,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,164,        if (instant == null) {,12,7,0,1,3,0,0,0,0,21,22,1,0.0017,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1681,        if (sme == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1682,            sme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1687,        return sme;,6,0,0,0,0,1,0,0,0,7,11,1,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1672,            mhe = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,2,0,8,36,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1677,        return mhe;,0,0,0,0,0,1,0,0,0,1,11,4,0.00169,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1662,        if (hde == null) {,6,1,0,1,3,0,0,0,0,9,18,3,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1663,            hde = new DateTimeFormatterBuilder(),4,1,0,1,2,0,0,0,0,5,36,4,0.00168,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00168,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,149,        return instant.getMillis();,8,1,0,1,2,1,4,2,0,16,27,3,0.00166,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.00162,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,50,        if (value < 0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,62,        if (value < 10) {,4,1,0,1,3,0,0,2,0,8,17,3,0.00159,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,19,92,    },12,1,0,0,1,0,4,2,0,21,1,3,0.00159,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,19,146,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00158,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,147,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00152,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1604,        if (dme == null) {,0,0,0,1,3,0,6,0,0,6,18,5,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1605,            dme = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,11,36,3,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1610,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,139,        DateTimeZone zone = getZone();,0,0,0,1,2,0,0,0,0,3,30,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,140,        int offset = zone.getOffsetFromLocal(instant);,8,0,0,1,2,0,4,0,0,13,46,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,141,        instant -= offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,142,        if (offset != zone.getOffset(instant)) {,2,1,0,2,5,0,6,0,0,9,40,4,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,19,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00151,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,188,                if (isLeapYear(year)) {,2,1,0,2,5,0,8,0,0,12,23,4,0.00151,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1594,        if (mye == null) {,10,6,0,1,3,0,4,0,0,21,18,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.0015,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1600,        return mye;,0,0,0,0,0,1,0,0,0,1,11,4,0.0015,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,19,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,0,0,0,4,35,4,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,170,            periodStart = next;,12,1,0,0,0,0,0,4,0,20,19,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",8,1,0,2,4,0,10,0,0,21,57,3,0.00149,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",8,0,0,2,4,1,12,0,0,21,69,3,0.00147,0,0,-1
