dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,        return MIN;,0,0,0,0,0,1,0,0,0,1,11,4,0.00329,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.00327,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,8,4,0,16,87,1,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,4,0,0,1,3,0,6,2,0,12,32,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,152,        if (thisMillis < otherMillis) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00233,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",2,1,0,1,2,0,4,0,0,7,59,7,0.0021,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,2,0,0,0,0,0,0,2,0,5,32,10,0.0021,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,294,                    return chronology.months();,0,0,0,1,2,1,0,0,0,4,27,4,0.00197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,2,0,0,1,2,1,4,0,0,6,32,4,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,4,0,0,5,1,12,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,2,0,0,1,2,0,0,0,0,2,22,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,4,0,0,1,2,0,0,0,0,5,42,1,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00121,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,480,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00081,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,2,1,0,1,3,0,0,0,0,3,19,7,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,6,1,0,0,0,1,0,0,0,7,14,3,0.00075,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,285,            return ISOChronology.getInstance();,0,0,0,1,2,1,0,0,0,4,35,4,0.00067,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,0,2,0,0,2,8,5,0.00063,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },8,1,0,0,1,0,0,0,0,10,1,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,116,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.0006,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,166,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00058,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,5,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,221,        return MIN_YEAR;,8,0,0,0,0,1,8,0,0,18,16,1,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,77,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,6,0,0,6,46,5,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,108,"                cCache.put(zone, chrono);",4,2,0,1,2,0,0,0,0,6,25,6,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,96,        if (zone == null) {,2,0,0,1,3,0,4,0,0,6,19,5,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,100,        ISOChronology chrono = cFastCache[index];,4,0,0,1,2,0,10,0,0,15,41,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,104,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,105,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,106,            if (chrono == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,111,        cFastCache[index] = chrono;,0,0,0,1,2,0,0,0,0,3,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,112,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00037,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,129,            return iRangeDurationField;,2,0,0,0,0,1,4,0,0,7,27,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,547,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,548,            iMillis = fixedMillis;,12,1,0,0,0,0,10,2,0,29,22,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,549,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,114,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,6,1,0,1,2,0,12,0,0,20,55,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,100,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,1,0,0,0,4,0,0,11,41,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,102,    },2,0,0,0,1,0,8,0,0,10,1,6,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,161,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,3,0,4,0,9,49,2,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,162,        if (sm != null) {,0,0,0,1,3,0,4,0,0,4,17,8,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,287,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,6,1,0,2,4,1,2,0,0,9,70,5,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,132,        return null;,6,0,0,0,0,1,0,2,0,9,12,3,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,133,        return INSTANCE_UTC;,2,0,0,0,0,1,10,0,0,13,20,9,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,175,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,0,0,6,49,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,176,        if (sm != null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,179,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,182,        synchronized(DateTimeZone.class) {,2,0,0,1,3,0,0,0,0,2,34,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,183,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,184,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,123,        return iZone.hashCode();,0,0,1,1,2,1,4,0,0,13,24,3,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,1273,        return 57 + getID().hashCode();,4,1,0,2,4,1,0,0,0,6,31,6,0.00032,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,404,            super(field.getType());,8,1,0,2,4,0,0,0,0,10,23,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,405,            if (!field.isSupported()) {,6,1,1,2,5,0,0,0,0,10,27,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,408,            iField = field;,4,0,0,0,0,0,0,4,0,8,15,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,409,            iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,410,            iDurationField = durationField;,2,0,0,0,0,0,0,0,0,3,31,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,411,            iTimeField = useTimeArithmetic(durationField);,2,1,0,1,2,0,0,0,0,3,46,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,412,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,413,            iLeapDurationField = leapDurationField;,12,2,0,0,0,0,14,4,0,34,39,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,414,        },2,0,0,0,1,0,0,2,0,5,1,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,81,"        super(base, zone);",0,0,0,1,2,0,0,0,0,3,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,55,        if (base == null) {,2,0,0,1,3,0,0,0,0,2,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,58,        base = base.withUTC();,2,0,0,1,2,0,6,0,0,8,22,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,59,        if (base == null) {,6,0,0,1,3,0,0,0,0,6,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,62,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,65,"        return new ZonedChronology(base, zone);",6,1,0,1,2,1,0,4,0,11,39,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,85,        return (DateTimeZone)getParam();,0,0,0,2,4,1,0,0,0,7,32,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0,0,0,1,2,0,0,0,0,3,66,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,154,"        fields.eras = convertField(fields.eras, converted);",4,0,0,1,2,0,0,0,0,5,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,155,"        fields.centuries = convertField(fields.centuries, converted);",14,1,0,1,2,0,4,0,0,21,61,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,156,"        fields.years = convertField(fields.years, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,157,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,159,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,160,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,163,"        fields.hours = convertField(fields.hours, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,164,"        fields.minutes = convertField(fields.minutes, converted);",2,0,0,1,2,0,0,2,0,5,57,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,165,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,166,"        fields.millis = convertField(fields.millis, converted);",4,0,0,1,2,0,0,0,0,5,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,170,"        fields.year = convertField(fields.year, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",2,0,0,1,2,0,0,0,0,2,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,69,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,174,"        fields.era = convertField(fields.era, converted);",4,0,0,1,2,1,0,2,0,7,49,2,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",18,0,0,1,2,0,8,2,0,30,63,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",10,0,0,1,2,0,8,0,0,19,65,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,180,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,77,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",12,0,0,1,2,0,8,0,0,22,65,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,1,2,0,4,2,0,11,61,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,0,0,1,2,0,4,2,0,19,69,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",2,0,0,1,2,0,4,2,0,9,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,197,        if (field == null || !field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,44,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,198,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,200,        if (converted.containsKey(field)) {,0,0,0,2,5,0,14,0,0,14,35,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,201,            return (DurationField)converted.get(field);,4,1,0,2,4,4,10,2,0,20,43,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",10,0,0,2,4,0,2,4,0,16,73,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,204,"        converted.put(field, zonedField);",0,0,0,1,2,0,0,0,0,3,33,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,205,        return zonedField;,0,0,0,0,0,1,0,0,0,1,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,209,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,8,0,0,13,44,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,212,        if (converted.containsKey(field)) {,0,0,0,2,5,0,0,0,0,7,35,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,215,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,220,"        converted.put(field, zonedField);",0,0,0,1,2,0,8,0,0,8,33,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,221,        return zonedField;,0,0,0,0,0,1,0,0,0,1,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,281,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,282,            if (!field.isSupported()) {,4,0,0,2,5,0,0,2,0,7,27,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,285,            iField = field;,6,1,0,0,0,0,8,0,0,16,15,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,286,            iTimeField = useTimeArithmetic(field);,4,0,0,1,2,0,4,0,0,10,38,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,287,            iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,295,            return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,4,30,6,0.00032,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,202,        if (types.length == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,323,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00629,0,0,-1
defect4j,time,org/joda/time/Partial,2,311,        return iTypes.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.00625,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,                    return chronology.years();,4,0,0,1,2,1,16,4,0,24,26,1,0.00459,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.002,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,4,3,0,1,2,1,6,0,0,15,32,1,0.00167,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,2,1,0,1,2,1,2,0,0,5,25,3,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,    },2,0,0,0,1,0,10,0,0,12,1,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,10,1,0,1,3,0,8,0,0,21,32,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,8,1,1,1,2,0,22,0,0,36,22,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,2,0,0,1,2,1,4,0,0,7,32,3,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,            if (value > field.getMaximumValue()) {,0,0,0,2,5,0,0,0,0,7,38,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,4,1,0,2,5,0,10,0,0,15,38,1,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,2,0,0,0,0,1,8,0,0,10,20,1,0.00163,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,4,1,0,2,4,1,8,0,0,13,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,532,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.00131,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,16,1,1,1,2,0,16,4,0,41,53,1,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00128,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,209,                for (int i = chronos.size(); --i >= 0;) {,0,0,0,2,5,0,0,0,0,7,41,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,210,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,10,1,0,1,3,0,28,4,0,44,63,1,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,214,                        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,400,        return iCutoverInstant;,0,0,0,0,0,1,0,0,0,1,23,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",2,1,0,3,6,0,6,0,0,10,62,6,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,285,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,75,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,225,                chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,490,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,514,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00124,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,2,0,0,1,2,1,6,0,0,8,32,5,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,2,0,0,1,2,1,8,0,0,10,32,6,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,310,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,320,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,6,1,0,2,5,0,2,2,0,12,24,3,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,324,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,489,            return result;,2,0,0,0,0,1,0,0,0,2,14,5,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,6,0,0,11,33,1,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,299,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,4,0,0,1,2,0,0,2,0,7,46,5,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",6,0,0,3,6,0,10,4,0,20,105,1,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,197,            if (cutoverDate.getYear() <= 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.00121,0,0,-1
defect4j,time,org/joda/time/Instant,2,144,        return this;,8,0,0,0,0,1,0,0,0,8,12,1,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,0,0,0,2,68,7,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,2,0,0,2,5,0,0,2,0,5,27,6,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",6,1,1,1,2,1,8,2,0,19,47,1,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,999,        int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1001,        int offset = getOffset(instantLocal - offsetLocal);,2,1,0,1,2,0,0,0,0,3,51,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1032,        long instantUTC = instantLocal - offset;,2,0,0,0,0,0,0,0,0,4,40,8,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,492,                    return chronology.year();,8,1,0,1,2,1,0,0,0,9,25,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,480,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00119,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,335,"    public LocalDate(long instant, Chronology chronology) {",6,0,0,1,3,1,0,2,0,9,55,2,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,336,        chronology = DateTimeUtils.getChronology(chronology);,2,0,1,1,2,0,6,0,0,18,53,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",6,0,0,2,4,0,8,0,0,14,86,5,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,339,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0,0,0,2,4,0,0,0,0,6,63,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,341,        iChronology = chronology;,10,1,0,0,0,0,0,0,0,12,25,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,342,    },4,0,0,0,1,0,4,4,0,12,1,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,1462,        return getChronology().year().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,52,4,0.00113,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,259,        if (this == readableInstant) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00109,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,211,            return iRangeDurationField;,6,1,0,0,0,1,32,0,0,39,27,1,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,64,        super(field);,0,0,0,1,2,0,0,0,0,3,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,65,        iChronology = chronology;,6,4,0,0,0,0,4,0,0,15,25,8,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,68,            iMinValue = min + 1;,6,2,0,0,0,0,0,0,0,9,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,74,        iSkip = skip;,0,0,0,0,0,0,0,0,0,0,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,88,        if (value <= iSkip) {,2,0,0,1,3,1,0,4,0,7,21,2,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,91,"        return super.set(millis, value);",4,0,0,1,2,1,4,0,0,8,32,3,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,133,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",4,0,0,1,2,0,0,0,0,5,116,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,4,0,0,1,2,0,8,0,0,14,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,106,        if (zone == null) {,2,1,0,1,3,0,2,2,0,7,19,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,111,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,112,            if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",8,1,0,2,4,0,0,0,0,10,76,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,12,91,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,118,"                cCache.put(zone, chrono);",0,0,0,1,2,0,0,0,0,3,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,120,        },0,0,0,0,1,0,6,0,0,6,1,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,121,        return chrono;,6,0,0,0,0,1,8,2,0,16,14,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,217,        if (getParam() == null) {,2,0,0,2,5,0,0,0,0,2,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,222,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,223,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,227,            field = fields.yearOfEra;,6,0,0,0,0,0,0,0,0,7,25,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,232,            field = fields.weekyear;,28,5,0,0,0,0,6,2,0,45,24,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,42,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,237,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,246,            field = new RemainderDateTimeField(,10,0,0,0,1,0,0,4,0,16,35,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,251,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,253,    },4,1,0,0,1,0,0,0,0,5,1,6,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,619,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,174,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,6,0,0,6,46,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,823,            return iJulianField.getMinimumValue();,8,6,0,1,2,1,10,0,0,26,38,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",2,0,0,1,2,0,0,0,0,4,54,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,154,"        return super.set(instant, value - iOffset);",4,1,0,1,2,1,0,0,0,5,43,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,193,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,2,83,"        return iField.set(instant, value);",4,2,0,1,2,1,14,0,0,20,34,3,0.00107,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,100,        return iMinValue;,0,0,0,0,0,1,10,0,0,10,17,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",10,1,0,2,4,0,4,0,0,16,48,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,2,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,742,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,743,                        instant = gregorianToJulian(instant);,4,0,0,1,2,0,12,0,0,17,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,746,                    if (get(instant) != value) {,4,1,0,2,5,0,0,0,0,5,28,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,675,                return iJulianField.get(instant);,0,1,0,1,2,1,8,0,0,9,33,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,229,        return iChronology.getMaxYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00107,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,186,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,83,            year++;,6,0,0,0,0,0,0,0,0,8,7,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,752,"                instant = iJulianField.set(instant, value);",2,1,0,1,2,0,10,0,0,15,43,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,739,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,740,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,940,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,738,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,765,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,672,            if (instant >= iCutover) {,6,2,0,1,3,0,0,0,0,8,26,1,0.00106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,6,0,0,1,2,3,0,10,0,20,99,1,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,2,1,0,2,4,0,8,0,0,12,51,6,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,52,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,4,0,0,2,4,0,0,0,0,5,55,5,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0,0,0,2,4,0,0,0,0,6,51,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0,0,0,2,4,0,0,0,0,6,55,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1055,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.00105,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,78,        if (year <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,410,            i2 = i2 - unitMillis + 1;,0,0,0,0,0,0,12,0,0,12,25,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,2,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,2,0,0,4,8,0,4,0,0,6,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,146,                    chrono = new CopticChronology,2,0,0,0,0,0,0,2,0,5,29,10,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,816,            return iGregorianField.getLeapDurationField();,0,0,0,1,2,1,10,0,0,10,46,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,796,            return iRangeDurationField;,2,0,0,0,0,1,8,0,0,10,27,1,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,542,            return iLeapDurationField;,2,0,0,0,0,1,0,0,0,2,26,5,0.00101,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,528,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,132,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,514,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,515,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,516,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,517,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,518,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,519,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,520,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,521,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,522,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,20,105,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,523,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,525,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,524,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,128,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,129,        long yearStartMillis = iChronology.getYearMillis(year);,8,1,1,1,2,0,6,0,0,17,55,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,130,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,134,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,274,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",10,3,0,3,6,0,0,0,0,13,62,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,275,    },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",4,3,0,1,2,0,0,0,0,7,126,7,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,84,        return to.getDateTimeMillis,0,0,0,0,0,1,4,0,0,4,27,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,190,        zone = DateTimeUtils.getZone(zone);,0,0,0,1,2,0,0,0,0,3,35,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,192,        if (gregorianCutover == null) {,2,1,0,1,3,0,0,0,0,3,31,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,203,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,204,            ArrayList<GJChronology> chronos = cCache.get(zone);,2,0,0,1,2,0,6,4,0,12,51,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,205,            if (chronos == null) {,4,1,0,1,3,0,2,0,0,7,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,206,                chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,8,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,207,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,218,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,2,0,11,31,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,219,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,231,            chronos.add(chrono);,0,0,0,1,2,0,0,0,0,3,20,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,232,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,233,        return chrono;,0,0,0,0,0,1,8,0,0,8,14,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,478,        Object[] params = (Object[])getParam();,2,0,0,4,8,0,2,4,0,8,39,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,480,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,481,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,0,0,0,6,63,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,482,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,483,        iCutoverMillis = cutoverInstant.getMillis();,4,0,0,1,2,0,4,2,0,12,44,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,485,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,486,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,487,        iCutoverInstant = cutoverInstant;,0,0,0,0,0,0,0,0,0,0,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,489,        if (getBase() != null) {,6,1,0,2,5,0,12,0,0,21,24,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,493,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,498,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.001,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.14368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0,0,0,0,0,1,10,0,0,12,7,3,0.13298,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,636,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11161,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",10,0,0,0,1,0,6,2,0,18,46,3,0.11062,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,4,0,0,1,2,0,0,2,0,6,16,4,0.10593,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,            if (iMaxFields == 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,10,1,0,0,0,0,0,0,0,12,66,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,4,1,0,1,4,0,0,0,0,6,26,5,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,2,1,0,0,0,0,0,0,0,3,11,10,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,4,1,0,1,3,0,0,0,0,5,19,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",6,6,0,2,4,0,4,0,0,17,52,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",2,0,0,1,2,0,12,0,0,15,34,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",4,1,0,1,2,0,6,0,0,12,35,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,10,1,0,0,0,1,0,0,0,12,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,4,2,0,10,46,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,                start = startRecurrence.previous,0,0,0,0,0,0,0,0,0,0,32,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,6,3,0,1,3,0,6,2,0,17,31,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,                end = endRecurrence.previous,0,0,0,0,0,0,0,0,0,0,28,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,                if (instant < 0 && end > 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,12,4,0,2,4,1,0,0,0,16,41,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,                long prev = iTailZone.previousTransition(instant);,0,0,0,1,2,0,0,0,0,3,50,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,                if (prev < instant) {,0,0,0,1,3,0,0,0,0,4,21,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,                    return prev;,0,0,0,0,0,1,0,0,0,1,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,61,4,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,4,0,0,0,0,1,0,0,0,4,20,5,0.0947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,            if (iTailZone != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.09363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,2,0,5,10,0,0,0,0,8,55,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,78,        } else {,4,0,1,0,2,0,0,4,0,13,8,3,0.09058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,128,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.08993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1946,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1947,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1951,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1959,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1961,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08961,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,127,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08929,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,12,5,0,1,2,0,0,0,0,19,34,1,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0,0,0,1,3,0,0,2,0,2,13,8,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1599,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.08834,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0,0,1,1,2,0,0,0,0,9,50,9,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",4,1,0,2,4,0,0,0,0,6,76,7,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1479,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1480,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2660,            DateTimePrinter[] elements = iPrinters;,2,1,0,1,2,0,0,0,0,3,39,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2661,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2665,            if (locale == null) {,2,0,0,1,3,0,0,0,0,2,21,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2670,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2671,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,0,0,0,6,78,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2674,        },2,0,0,0,1,0,0,0,0,2,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1218,            buf.append(iValue);,0,0,0,1,2,0,0,0,0,3,19,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1219,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,592,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,0,0,0,9,78,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,593,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,594,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,469,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,470,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,471,"        printTo(buf, millis, chrono);",2,0,0,1,2,0,0,0,0,2,29,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,472,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,628,        DateTimePrinter printer = requirePrinter();,0,0,0,1,2,0,0,0,0,3,43,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,629,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,632,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,633,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,634,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,635,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,6,1,0,3,7,0,0,2,0,9,65,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,641,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,0,0,2,4,0,0,0,0,5,79,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,642,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08418,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,926,            long prev = previousTransition(instantAdjusted);,8,0,0,1,2,0,0,0,0,9,48,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,927,            if (prev < instantAdjusted) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,928,                int offsetPrev = getOffset(prev);,18,1,0,1,2,0,4,4,0,27,33,1,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,929,                int diff = offsetPrev - offsetLocal;,8,1,0,0,0,0,0,12,0,21,36,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,930,                if (instantAdjusted - prev <= diff) {,0,0,0,1,3,0,0,0,0,4,37,4,0.08389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,83,                digits = 4;,4,1,0,0,0,0,4,0,0,12,11,9,0.08224,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,80,            if (value < 1000) {,4,1,0,1,3,3,0,4,0,13,19,1,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,82,            } else if (value < 10000) {,2,0,0,1,4,0,0,0,0,2,27,6,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.08197,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,0,0,0,13,50,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,199,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,200,        if (chrono == null) {,2,0,0,1,3,0,6,2,0,10,21,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,203,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07669,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,0.07645,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,196,        if (instant == null) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0753,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07508,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,63,            for (; size > 1; size--) {,0,1,0,1,3,0,8,0,0,9,26,5,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,66,            buf.append((char)(value + '0'));,16,2,0,3,6,0,12,0,0,33,32,1,0.07418,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,181,        return instant.getMillis();,0,0,0,1,2,1,0,0,0,4,27,4,0.07184,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,551,            } else if (iMode == 's') {,14,2,0,1,4,0,2,2,0,23,26,3,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,554,                offset = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,726,                        daysToAdd -= 7;,2,0,0,0,0,0,0,0,0,3,15,11,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,725,                    if (daysToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,20,9,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,144,        return localInstant;,2,0,0,0,0,1,0,0,0,2,20,4,0.07102,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1307,            int standardOffset = iStandardOffset;,0,0,0,0,0,0,0,0,0,0,37,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1308,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1309,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1314,                start = startRecurrence.next,2,0,0,0,0,0,0,0,0,2,28,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1322,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1325,                end = endRecurrence.next,12,3,0,0,0,0,0,0,0,15,24,1,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1333,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1335,            return (start > end) ? startRecurrence : endRecurrence;,2,0,0,1,2,1,4,0,0,6,55,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1546,            return iTailZone.getOffset(instant);,2,1,0,1,2,1,0,0,0,3,36,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,138,        DateTimeZone zone = getZone();,8,1,0,1,2,0,4,0,0,14,30,1,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,139,        int offset = zone.getOffsetFromLocal(localInstant);,2,0,0,1,2,0,0,2,0,5,51,6,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,141,        if (offset != zone.getOffset(localInstant)) {,0,0,0,2,5,0,0,0,0,7,45,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.07003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,178,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06983,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.06983,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,524,                    return chronology.secondOfMinute();,12,2,0,1,2,1,0,0,0,14,35,1,0.06944,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,162,            periodStart = next;,0,0,0,0,0,0,0,0,0,0,19,4,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",16,0,0,2,4,0,12,8,0,38,57,3,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2654,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.06887,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,            yearToUse = thisYear + (monthToUse / iMax);,10,2,0,1,2,0,0,2,0,15,43,3,0.0672,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,            monthToUse = (monthToUse % iMax) + 1;,8,3,0,1,2,0,0,0,0,12,37,1,0.0672,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,667,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,668,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,671,        return printer;,4,1,0,0,0,1,8,0,0,14,15,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,        if (months == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,        if (monthToUse >= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",8,0,0,1,2,0,0,0,0,10,67,1,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,        if (dayToUse > maxDay) {,8,1,0,1,3,0,10,2,0,23,24,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,        return datePart + timePart;,0,0,0,0,0,1,0,0,0,1,27,4,0.06702,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,925,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.06614,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1202,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1203,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1204,            Recurrence endRecurrence = iEndRecurrence;,10,0,0,0,0,0,0,2,0,13,42,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1209,                start = startRecurrence.next,0,1,0,0,0,0,4,0,0,5,28,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1211,                if (instant > 0 && start < 0) {,4,3,0,1,3,0,0,0,0,7,31,7,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1221,            },6,1,0,0,1,0,4,0,0,12,1,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1224,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1226,                if (instant > 0 && end < 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1236,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1238,            return (start > end) ? end : start;,0,0,0,1,2,1,0,0,0,4,35,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1582,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1583,            if (instant < end) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1586,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,6,0,0,6,41,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,4,0,0,6,34,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);",4,0,0,1,2,0,10,0,0,15,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0,0,0,2,4,0,0,0,0,6,48,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,4,1,0,0,0,3,0,16,0,24,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,4,0,0,7,21,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,720,                if (iAdvance) {,4,0,0,1,3,0,6,2,0,12,15,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",2,1,0,2,4,0,18,0,0,22,53,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,731,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,549,            if (iMode == 'w') {,24,2,0,1,3,0,4,6,0,40,19,1,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,563,"            next = chrono.millisOfDay().set(next, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,565,"            next = setDayOfMonthNext(chrono, next);",2,0,0,1,2,0,6,0,0,9,39,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,567,            if (iDayOfWeek == 0) {,2,1,0,1,3,0,0,0,0,3,22,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,583,            return next - offset;,2,0,0,0,0,1,6,0,0,8,21,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,682,            },10,0,0,0,1,0,4,2,0,17,1,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,683,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,706,            if (iDayOfMonth >= 0) {,16,5,0,1,3,2,0,0,0,23,23,1,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,713,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,10,0,0,10,57,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,776,            return iSaveMillis;,10,0,0,0,0,1,4,0,0,15,19,1,0.06562,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,3,253,"        return getDurationField().add(instant, value);",6,1,0,2,4,1,0,0,0,8,46,7,0.06562,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,50,        if (value < 0) {,10,1,0,1,3,0,4,0,0,16,16,3,0.06494,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.06494,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06494,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,3,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,1,2,1,0,0,0,4,42,4,0.06427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,951,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,952,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,955,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,958,        return chrono;,8,0,0,0,0,1,0,2,0,11,14,1,0.06394,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,907,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,4,0,0,4,48,9,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,909,        final long instantAdjusted = instantLocal - offsetLocal;,2,0,0,0,0,0,0,12,0,14,56,4,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,910,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,912,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.06361,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,3,4,0,0,9,50,2,0.06297,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,59,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,62,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,64,"        return set(instant, newYear);",0,0,0,1,2,1,0,0,0,4,29,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,64,        int sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,22,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,70,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,3,543,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0,0,0,0,0,0,0,0,0,0,63,4,0.06068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,3,552,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0,0,0,3,6,1,14,0,0,14,47,5,0.06068,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,0,0,0,4,33,4,0.05938,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.05855,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.05841,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,164,        return iPrinter;,10,0,0,0,0,1,0,0,0,11,16,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,182,        return iParser;,4,0,0,0,0,1,0,0,0,4,15,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2730,            return iParsedLengthEstimate;,4,0,0,0,0,1,4,0,0,8,29,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",2,0,0,3,6,0,8,0,0,11,58,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2778,            if (array != null) {,2,1,0,1,3,0,4,0,0,7,20,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2780,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,153,        Object f = getFormatter();,10,3,0,1,2,0,6,4,0,24,26,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,154,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,155,            return (DateTimeParser) f;,6,0,0,1,2,1,0,2,0,9,26,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,217,        if (formatter == null) {,4,3,0,1,3,0,0,0,0,7,24,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,0,0,0,10,62,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,257,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.0576,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,        return getWrappedField().getMaximumValue() + 1;,4,2,0,2,4,1,16,0,0,23,47,1,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,0,0,0,4,35,4,0.25,0,0,-1
defect4j,time,org/joda/time/Partial,4,447,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,2,0,0,2,4,0,0,0,0,2,82,5,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,448,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,10,1,0,2,4,0,20,2,0,34,85,3,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,449,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,0,6,0,0,7,47,15,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,4,445,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,            return iRangeType;,2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,4,446,                        } else if (compare == 0) {,6,4,0,1,4,0,0,0,0,10,26,4,0.05263,0,0,-1
defect4j,time,org/joda/time/Partial,4,443,                        int compare = unitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,49,13,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,444,                        if (compare > 0) {,4,1,0,1,3,0,0,0,0,6,18,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,4,439,                for (; i < iTypes.length; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,440,                    DateTimeFieldType loopType = iTypes[i];,2,1,0,1,2,0,0,0,0,3,39,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,441,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,442,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,0,6,0,0,6,34,6,0.04348,0,0,-1
defect4j,time,org/joda/time/Partial,4,432,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,2,0,0,2,4,1,0,2,0,5,72,8,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,433,            int[] newValues = new int[newTypes.length];,10,0,0,2,4,0,0,0,0,11,43,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,436,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,437,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,8,0,0,2,4,0,8,2,0,19,76,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,438,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,458,            newTypes[i] = fieldType;,0,0,0,1,2,0,0,0,0,3,24,4,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,459,            newValues[i] = value;,2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",10,2,0,1,2,0,18,0,0,31,73,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0,0,0,1,2,0,0,0,0,3,67,4,0.04167,1,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,466,            return newPartial;,16,2,0,0,0,1,2,0,0,22,18,3,0.04167,0,0,-1
defect4j,time,org/joda/time/Partial,4,430,        int index = indexOf(fieldType);,6,0,0,1,2,0,4,0,0,10,31,3,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,431,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,0,-1
defect4j,time,org/joda/time/Partial,4,427,        if (fieldType == null) {,4,1,0,1,3,0,0,0,0,6,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,4,296,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,297,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,298,        iTypes = types;,0,0,0,0,0,0,0,0,0,0,15,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,299,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.03333,0,0,-1
defect4j,time,org/joda/time/Partial,4,300,    },10,0,0,0,1,0,6,2,0,19,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,0,-1
defect4j,time,org/joda/time/Partial,4,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,5,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,0,-1
defect4j,time,org/joda/time/Partial,4,221,                } else if (compare == 0) {,0,0,0,1,4,0,0,0,0,5,26,4,0.00826,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.00787,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Partial,4,248,        iValues = (int[]) values.clone();,2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,249,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00769,0,0,-1
defect4j,time,org/joda/time/Partial,4,246,        iTypes = (DateTimeFieldType[]) types.clone();,4,0,0,3,6,0,4,4,0,14,45,3,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,0,-1
defect4j,time,org/joda/time/Partial,4,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,213,        for (int i = 0; i < types.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,2,0,0,2,4,0,4,0,0,7,79,8,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,216,            if (i > 0) {,6,1,0,1,3,0,6,0,0,15,12,3,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,243,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00752,0,0,-1
defect4j,time,org/joda/time/Partial,4,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,0,0,0,22,40,3,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,0,-1
defect4j,time,org/joda/time/Partial,4,202,        if (types.length == 0) {,6,1,0,1,3,0,6,0,0,13,24,3,0.00741,0,0,-1
defect4j,time,org/joda/time/Partial,4,199,        if (values.length != types.length) {,8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,0,-1
defect4j,time,org/joda/time/Partial,4,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,        if (thisMillis == otherMillis) {,4,1,0,1,3,0,0,0,0,5,32,4,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,        if (thisMillis < otherMillis) {,2,0,0,1,3,0,0,0,0,3,31,8,0.0073,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,1,0,0,1,0,0,0,0,3,87,4,0.0073,0,0,-1
defect4j,time,org/joda/time/Partial,4,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,192,        iChronology = chronology;,6,0,0,0,0,0,0,0,0,7,25,3,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00725,0,0,-1
defect4j,time,org/joda/time/Partial,4,344,        return iTypes[index];,4,0,1,1,2,1,12,4,0,24,21,3,0.00709,0,0,-1
defect4j,time,org/joda/time/Partial,4,333,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,4,321,        return iChronology;,2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,4,309,        return iTypes.length;,8,0,0,0,0,1,0,0,0,9,21,3,0.00637,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,304,                    return chronology.minutes();,0,0,0,1,2,1,4,0,0,4,28,7,0.00629,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.0061,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,            if (getFieldType(i) == type) {,6,1,0,2,5,0,4,0,0,12,30,3,0.00585,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.00565,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,302,                    return chronology.hours();,0,0,0,1,2,1,4,0,0,4,26,7,0.00549,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,282,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00392,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,0,0,0,2,53,6,0.00324,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,482,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00324,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,818,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00284,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,804,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,200,            int value = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,202,"            if (value < field.getMinimumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00281,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.0028,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,        return getMinimumValue(instant);,8,1,0,1,2,1,6,0,0,15,32,1,0.0028,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,184,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,            int value = values[i];,10,1,1,1,2,0,8,0,0,24,22,1,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00279,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.00265,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.00228,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00228,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,59,"        super(base, param, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,39,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,101,        return ((month - 1) * MILLIS_PER_MONTH);,0,0,0,2,4,1,0,0,0,7,40,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,        return 13;,10,1,0,0,0,1,0,0,0,12,10,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,148,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,158,        return MILLIS_PER_MONTH;,0,0,0,0,0,1,0,0,0,1,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,524,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,            return iRangeDurationField;,8,1,0,0,0,1,4,0,0,13,27,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,            return iLeapDurationField;,8,2,0,0,0,1,18,0,0,29,26,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);",8,0,0,1,2,3,0,4,0,15,39,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",4,1,0,1,2,3,0,4,0,13,85,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",4,1,0,3,6,0,4,0,0,9,116,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,2,1,0,1,2,0,0,0,0,3,45,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,108,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,        if (zone == null) {,10,1,0,1,3,0,4,2,0,18,19,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,123,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,            CopticChronology[] chronos = cCache.get(zone);,4,0,0,2,4,0,10,2,0,16,46,1,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,125,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);",6,1,0,1,2,0,0,0,0,7,26,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,                chrono = chronos[minDaysInFirstWeek - 1];,4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,            },10,2,0,0,1,0,0,2,0,14,1,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,135,            if (chrono == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,136,                if (zone == DateTimeZone.UTC) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,62,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,141,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,146,                    chrono = new CopticChronology,0,0,0,0,0,0,0,0,0,0,29,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0,0,0,1,2,0,0,0,0,3,41,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,152,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,209,        int relativeYear = year - 1687;,0,0,0,0,0,0,0,0,0,0,31,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,211,        if (relativeYear <= 0) {,2,0,0,1,3,0,0,0,0,2,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,214,            leapYears = (relativeYear + 3) >> 2;,8,0,0,1,2,0,14,0,0,25,36,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,223,        long millis = (relativeYear * 365L + leapYears),16,3,0,1,2,0,4,2,0,26,47,3,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,2,0,0,1,2,1,0,4,0,6,64,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,233,        return MIN_YEAR;,0,0,0,0,0,1,0,0,0,1,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,248,        if (getBase() == null) {,0,0,0,2,5,0,0,0,0,7,24,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,252,"            fields.year = new SkipDateTimeField(this, fields.year);",0,0,0,1,2,0,0,0,0,3,55,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,255,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",4,0,0,1,2,0,0,2,0,7,65,6,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,257,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,259,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00204,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,51,public final class CopticChronology extends BasicFixedMonthChronology {,0,0,0,0,1,0,0,0,0,1,71,4,0.00204,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,982,"        return convertLocalToUTC(instantLocal, strict);",4,0,0,1,2,1,8,0,0,13,47,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,999,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1001,        int offset = getOffset(instantLocal - offsetLocal);,10,1,0,1,2,0,2,0,0,14,51,3,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1032,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,10,6,0,3,7,0,0,0,0,16,69,5,0.00203,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,4,0,0,7,35,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",8,0,0,2,4,0,8,0,0,17,48,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,135,"        instant = hourOfDay().set(instant, hourOfDay);",2,0,0,2,4,0,8,0,0,11,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",20,5,0,2,4,0,18,4,0,52,52,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",4,1,0,2,4,0,18,0,0,25,56,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,4,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,378,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,480,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",10,0,0,1,2,0,8,2,0,21,68,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,483,            if (get(result) != value) {,4,1,0,2,5,0,4,2,0,12,27,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,489,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,532,            return iLeapDurationField;,18,1,0,0,0,1,6,2,0,28,26,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,565,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,582,            return iField.getMaximumValue();,10,0,0,1,2,1,4,2,0,17,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,4,83,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,174,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,6,0,0,8,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,193,            cutoverInstant = DEFAULT_CUTOVER;,0,0,0,0,0,0,0,0,0,0,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",2,0,0,1,2,1,4,0,0,7,71,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,672,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,675,                return iJulianField.get(instant);,0,0,0,1,2,1,0,0,0,4,33,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,742,                    if (instant + iGapDuration < iCutover) {,6,1,0,1,3,0,2,0,0,9,40,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,743,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,14,0,0,17,37,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,746,                    if (get(instant) != value) {,2,1,0,2,5,0,4,0,0,7,28,9,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,752,"                instant = iJulianField.set(instant, value);",2,0,0,1,2,0,4,2,0,9,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,940,            if (iConvertByWeekyear) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,4,154,"        return super.set(instant, value - iOffset);",0,0,0,1,2,1,0,0,0,4,43,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,82,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,186,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,211,            return iRangeDurationField;,4,0,0,0,0,1,0,0,0,4,27,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,133,"        super(base, param);",6,1,0,1,2,0,0,0,0,7,19,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,134,    },2,0,0,0,1,0,8,0,0,11,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",8,0,0,1,2,3,4,4,0,21,85,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0,0,0,1,2,0,0,0,0,3,116,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,106,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,111,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,112,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",10,0,0,2,4,0,2,0,0,14,76,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,15,91,8,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,118,"                cCache.put(zone, chrono);",8,1,0,1,2,0,0,0,0,10,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,120,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,121,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,217,        if (getParam() == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,222,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,223,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,227,            field = fields.yearOfEra;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,232,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,4,0,0,4,42,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",12,2,0,1,2,0,2,2,0,19,54,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,237,            fields.centuryOfEra = new DividedDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,246,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,8,0,0,8,51,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,251,            fields.era = ERA_FIELD;,20,0,0,0,0,0,12,6,0,40,23,1,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,253,    },28,2,1,0,1,0,6,0,0,40,1,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,53,"        this(chronology, field, 0);",0,0,0,1,2,0,0,0,0,3,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,54,    },0,0,0,0,1,0,0,2,0,4,1,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,65,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,66,        int min = super.getMinimumValue();,12,0,0,1,2,0,4,0,0,17,34,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,74,        iSkip = skip;,4,0,0,0,0,0,0,0,0,5,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",2,0,1,2,4,0,10,0,0,15,72,3,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,88,        if (value <= iSkip) {,16,1,0,1,3,0,4,0,0,23,21,1,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,4,95,        return iMinValue;,0,0,0,0,0,1,0,0,0,1,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,410,            i2 = i2 - unitMillis + 1;,6,2,0,0,0,0,6,0,0,15,25,3,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,421,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,422,            return iField.get(localInstant);,0,0,0,1,2,1,6,0,0,6,32,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,514,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,4,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,4,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0,0,0,4,8,0,0,0,0,12,71,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,738,            if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,739,"                instant = iGregorianField.set(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,740,                if (instant < iCutover) {,4,1,0,1,3,0,0,0,0,5,25,7,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,765,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,823,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,38,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,78,        if (year <= 0) {,2,1,0,1,3,0,0,2,0,5,16,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,85,        return year;,0,0,0,0,0,1,0,0,0,1,12,4,0.00203,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,4,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0,0,0,2,4,1,0,0,0,7,84,4,0.00203,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,4,100,        return iMinValue;,2,2,0,0,0,1,8,0,0,12,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,4,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,527,        return this;,4,1,0,0,0,1,0,0,0,5,12,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,209,                for (int i = chronos.size(); --i >= 0;) {,4,1,0,2,5,0,4,0,0,10,41,8,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,210,                    chrono = chronos.get(i);,8,0,0,1,2,0,4,0,0,13,24,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,4,2,0,1,3,0,12,0,0,18,63,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,214,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,400,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,4,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,51,        super(DateTimeFieldType.era());,2,0,0,2,4,3,4,16,0,25,31,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,52,        iEraText = text;,8,0,0,0,0,0,0,2,0,12,16,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,53,    },4,0,0,0,1,0,0,0,0,4,1,7,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,8,0,0,8,70,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,4,111,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,454,                           DurationField leapDurationField) {,2,0,0,0,2,0,0,2,0,4,34,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,455,"            super(field, field.getType());",6,0,0,2,4,0,4,0,0,11,30,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,456,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,457,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,458,            iLeapDurationField = leapDurationField;,0,0,0,0,0,0,0,0,0,0,39,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,459,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,391,        LimitDurationField(DurationField field) {,0,0,0,1,3,0,0,0,0,4,41,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,392,"            super(field, field.getType());",2,0,0,2,4,0,4,0,0,6,30,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,393,        },0,0,0,0,1,0,0,2,0,4,1,6,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,99,"        super(base, null);",4,0,0,1,2,0,0,0,0,5,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,101,        iLowerLimit = lowerLimit;,4,0,0,0,0,0,0,0,0,5,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,102,        iUpperLimit = upperLimit;,0,0,0,0,0,0,0,0,0,0,25,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,67,        if (base == null) {,4,2,0,1,3,0,8,0,0,15,19,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,8,1,0,1,2,0,4,0,0,15,65,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,74,        if (lowerLimit != null && upperLimit != null) {,4,3,0,1,3,0,0,0,0,7,47,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",8,0,0,3,6,4,0,10,0,21,77,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",6,0,0,1,2,0,0,12,0,19,66,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,213,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,214,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,215,"        fields.years = convertField(fields.years, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,216,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,217,"        fields.weekyears = convertField(fields.weekyears, converted);",14,0,0,1,2,0,4,0,0,20,61,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,218,"        fields.weeks = convertField(fields.weeks, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,219,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,221,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,222,"        fields.hours = convertField(fields.hours, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,223,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,224,"        fields.seconds = convertField(fields.seconds, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,225,"        fields.millis = convertField(fields.millis, converted);",10,1,0,1,2,0,4,0,0,16,55,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,229,"        fields.year = convertField(fields.year, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",14,2,0,1,2,0,4,0,0,21,69,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",10,0,0,1,2,0,4,0,0,15,67,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,233,"        fields.era = convertField(fields.era, converted);",0,0,0,1,2,0,4,0,0,4,49,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0,0,0,1,2,0,0,0,0,3,63,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,239,"        fields.weekyear = convertField(fields.weekyear, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",16,0,0,1,2,0,8,0,0,26,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",12,0,0,1,2,0,4,0,0,18,71,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",16,0,0,1,2,0,8,0,0,26,67,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,256,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,257,            return field;,4,0,0,0,0,1,6,4,0,14,13,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,259,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,260,            return (DurationField)converted.get(field);,4,1,0,2,4,1,6,2,0,13,43,1,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,262,        LimitDurationField limitField = new LimitDurationField(field);,4,0,0,1,2,0,6,4,0,14,62,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,263,"        converted.put(field, limitField);",2,0,0,1,2,0,12,0,0,14,33,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,264,        return limitField;,2,0,0,0,0,1,4,0,0,6,18,3,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,268,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,271,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,274,        LimitDateTimeField limitField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,279,"        converted.put(field, limitField);",0,0,0,1,2,0,8,0,0,8,33,5,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,280,        return limitField;,2,0,0,0,0,1,0,0,0,3,18,4,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,94,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,102,        return iField.isSupported();,2,0,0,1,2,1,8,0,0,10,28,3,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,206,        return iField.getDurationField();,0,0,0,1,2,1,4,0,0,4,33,5,0.00202,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,4,225,        return iField.getLeapDurationField();,0,0,0,1,2,1,4,0,0,4,37,5,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,516,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,6,2,0,16,36,3,0.00202,0,0,-1
defect4j,time,org/joda/time/DateTime,4,518,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00202,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,4,229,        return iChronology.getMaxYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.00202,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,4,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.00201,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,6,1,0,0,0,0,0,0,0,8,50,9,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,432,                year++;,2,0,0,0,0,0,0,0,0,3,7,9,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,422,            if (isLeapYear(year)) {,8,0,0,2,5,0,8,0,0,17,23,3,0.00198,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,428,            yearStart += oneYear;,0,0,0,0,0,0,0,0,0,0,21,4,0.00198,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,4,430,            if (yearStart <= instant) {,4,1,0,1,3,0,0,0,0,5,27,7,0.00198,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,4,301,        if (zone == null) {,6,1,0,1,3,0,0,0,0,8,19,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,4,304,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,4,1055,            return oldInstant;,2,2,0,0,0,1,4,0,0,9,18,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,119,        iMillis = instant;,4,0,0,0,0,0,0,0,0,5,18,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,144,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00195,0,0,-1
defect4j,time,org/joda/time/Instant,4,256,        return iMillis;,0,0,0,0,0,1,0,0,0,1,15,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,335,"    public LocalDate(long instant, Chronology chronology) {",10,0,0,1,3,1,6,2,0,20,55,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,336,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",6,0,0,2,4,0,8,0,0,14,86,5,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,339,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,341,        iChronology = chronology;,8,0,0,0,0,3,4,6,0,24,25,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,342,    },12,1,0,0,1,0,0,0,0,15,1,1,0.00195,0,0,-1
defect4j,time,org/joda/time/LocalDate,4,1462,        return getChronology().year().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,52,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,4,164,        return getMaximumValue(instant);,0,0,0,1,2,1,0,0,0,4,32,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,886,        long newInstant = roundFloor(instant);,2,0,0,1,2,0,4,0,0,6,38,5,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,888,"            instant = add(newInstant, 1);",0,0,0,1,2,0,0,0,0,3,29,4,0.00195,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,890,        return instant;,4,0,0,0,0,1,0,0,0,6,15,3,0.00195,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,0,0,2,0,3,66,7,3.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1631,                result = result.withYears(years);,0,0,0,1,2,0,0,0,0,3,33,4,1.125,1,0,-1
defect4j,time,org/joda/time/Period,5,895,        int[] values = getValues();  // cloned,4,1,0,2,4,0,0,0,0,5,38,4,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",6,0,0,2,4,0,8,0,0,14,76,3,1.0,0,0,-1
defect4j,time,org/joda/time/Period,5,1629,            months = months % 12;,4,1,0,0,0,0,0,0,0,6,21,6,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1630,            if (years != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,1,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,1,0,-1
defect4j,time,org/joda/time/Period,5,1625,        int years = getYears();,2,0,0,1,2,0,2,0,0,4,23,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1626,        int months = getMonths();,2,0,0,1,2,0,2,0,0,4,25,5,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1627,        if (years != 0 || months != 0) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5625,0,0,-1
defect4j,time,org/joda/time/Period,5,1617,        type = DateTimeUtils.getPeriodType(type);,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",2,0,0,1,2,0,2,0,0,4,83,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1619,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0,0,0,6,12,0,0,0,0,18,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1620,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,6,1,0,6,12,0,2,0,0,10,81,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1621,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,2,0,0,6,12,0,0,0,0,2,77,9,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1622,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0,0,0,6,12,0,0,0,0,18,75,4,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1623,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0,0,0,6,12,0,8,0,0,8,77,5,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());",8,1,0,2,4,0,4,4,0,17,73,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,        if (cached != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,        PeriodType type = standard();,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,2,0,0,2,4,0,6,8,0,16,86,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,            type = type.withYearsRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,        if (list.remove(DurationFieldType.months()) == false) {,6,1,0,3,7,0,4,0,0,12,55,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,0,8,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,        if (list.remove(DurationFieldType.days()) == false) {,0,0,0,3,7,0,0,0,0,10,53,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,0,0,3,7,0,0,0,0,10,54,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,            type = type.withHoursRemoved();,2,0,0,1,2,0,4,0,0,7,31,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,0,0,3,7,0,0,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,            type = type.withMinutesRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,0,8,0,0,10,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,            type = type.withSecondsRemoved();,2,0,0,1,2,0,4,0,0,7,33,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,        if (list.remove(DurationFieldType.millis()) == false) {,2,1,0,3,7,0,8,0,0,13,55,3,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,            type = type.withMillisRemoved();,2,0,0,1,2,0,4,0,0,7,32,6,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,564,        if (list.size() > 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",6,0,0,1,2,0,0,4,0,11,67,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,2,0,0,2,4,0,6,4,0,12,63,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,        if (checkedType != null) {,8,3,0,1,3,0,12,0,0,24,26,1,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);",0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,            if (obj instanceof StandardDurationFieldType) {,2,0,0,1,3,0,0,2,0,4,47,6,0.5,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,6,1,0,2,4,1,0,2,0,9,62,7,0.5,0,0,-1
defect4j,time,org/joda/time/Period,5,445,    },0,0,0,0,1,0,0,0,0,1,1,4,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,        int realIndex = iIndices[index];,2,0,1,1,2,0,0,0,0,6,32,5,0.375,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,        if (realIndex == -1) {,2,1,0,1,3,0,0,0,0,4,22,4,0.375,0,0,-1
defect4j,time,org/joda/time/Period,5,444,"        super(duration, type, chronology);",0,0,0,1,2,0,0,0,0,3,34,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,372,        PeriodType type = cMonths;,0,0,0,0,0,0,0,0,0,0,26,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,        if (type == null) {,2,1,0,1,3,0,6,0,0,9,19,3,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,            type = new PeriodType(,0,0,0,0,1,0,4,0,0,4,22,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,            cMonths = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,        return type;,4,0,0,0,0,1,0,0,0,4,12,4,0.34615,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,0,0,2,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,224,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,            cYWD = type;,2,0,0,0,0,0,4,2,0,8,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,234,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,        PeriodType type = cYD;,6,0,0,0,0,0,6,2,0,15,22,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,280,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,            cYD = type;,4,0,0,0,0,0,0,2,0,7,11,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,        if (types == null || types.length == 0) {,14,4,0,1,3,0,0,0,0,19,41,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,505,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,        if (cache.isEmpty()) {,0,0,0,2,5,0,8,0,0,8,22,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,3,6,0,8,0,0,8,50,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,3,6,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,3,6,0,0,0,0,9,48,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());",2,0,0,3,6,0,0,0,0,2,40,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,3,6,0,0,0,0,9,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());",2,0,0,3,6,3,0,16,0,21,32,2,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,520,"            cache.put(time(), time());",0,0,0,3,6,0,0,0,0,9,26,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,521,"            cache.put(years(), years());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,522,"            cache.put(months(), months());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,523,"            cache.put(weeks(), weeks());",0,0,0,3,6,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,524,"            cache.put(days(), days());",2,1,0,3,6,0,8,0,0,12,26,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,525,"            cache.put(hours(), hours());",2,0,0,3,6,0,4,0,0,6,28,5,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,526,"            cache.put(minutes(), minutes());",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,527,"            cache.put(seconds(), seconds());",0,0,0,3,6,0,0,0,0,9,32,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,528,"            cache.put(millis(), millis());",0,0,0,3,6,0,8,0,0,8,30,7,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,530,"        PeriodType inPartType = new PeriodType(null, types, null);",6,0,0,1,2,0,6,4,0,18,58,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,531,        Object cached = cache.get(inPartType);,2,0,0,1,2,0,6,2,0,10,38,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,532,        if (cached instanceof PeriodType) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,725,"        return withFieldRemoved(0, ""NoYears"");",2,0,0,1,2,1,0,2,0,5,38,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,1,2,1,6,0,0,7,38,3,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,770,"        return withFieldRemoved(5, ""NoMinutes"");",0,0,0,1,2,1,0,0,0,4,40,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,851,        int hash = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,852,        for (int i = 0; i < iTypes.length; i++) {,24,3,1,1,3,0,32,4,0,69,41,1,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,853,            hash += iTypes[i].hashCode();,2,0,1,2,4,0,2,0,0,9,29,6,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,855,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,779,"        return withFieldRemoved(6, ""NoSeconds"");",0,0,0,1,2,1,0,0,0,4,40,4,0.125,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,809,                types[i - 1] = iTypes[i];,8,1,1,2,4,0,4,2,0,26,25,1,0.11111,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,163,        PeriodType type = cYMD;,0,0,0,0,0,0,0,0,0,0,23,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,164,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,165,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,173,            cYMD = type;,4,0,0,0,0,0,0,0,0,5,12,6,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,175,        return type;,2,1,1,0,0,1,8,0,0,15,12,3,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,193,        PeriodType type = cYWDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,194,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,195,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,205,            cYWDTime = type;,4,0,0,0,0,0,0,0,0,5,16,5,0.08333,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,207,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.08333,0,0,-1
defect4j,time,org/joda/time/Period,5,737,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",6,1,0,2,4,1,4,0,0,11,68,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,746,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",8,0,1,2,4,1,4,0,0,17,69,3,0.07692,0,0,-1
defect4j,time,org/joda/time/Period,5,755,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",8,0,0,2,4,1,4,0,0,13,68,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,764,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0,0,0,2,4,1,0,0,0,7,67,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,774,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",6,0,0,2,4,1,4,0,0,10,68,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,783,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",4,1,0,2,4,1,0,0,0,5,70,3,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,801,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0,0,0,2,4,1,0,0,0,7,69,4,0.07627,0,0,-1
defect4j,time,org/joda/time/Period,5,792,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0,0,0,2,4,1,0,0,0,7,70,4,0.075,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,95,        int[] result = new int[size()];,4,0,0,3,6,0,2,0,0,7,31,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,96,        for (int i = 0; i < result.length; i++) {,4,1,0,1,3,0,8,0,0,13,41,1,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,97,            result[i] = getValue(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.072,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,99,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.072,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,2,0,0,4,8,0,6,0,0,9,56,3,0.07143,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,480,        PeriodType type = cMillis;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,481,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,482,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,487,            cMillis = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,489,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,1,2,1,2,0,0,3,39,5,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,266,            if (this == obj) {,4,2,0,1,3,0,0,0,0,6,18,1,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,267,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04762,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,134,        PeriodType type = cYMDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,135,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,136,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,146,            cYMDTime = type;,0,0,0,0,0,0,0,0,0,0,16,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,148,        return type;,4,0,0,0,0,1,4,2,0,10,12,3,0.04348,0,0,-1
defect4j,time,org/joda/time/Period,5,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0,0,0,2,4,0,0,0,0,6,90,4,0.04306,0,0,-1
defect4j,time,org/joda/time/Period,5,330,    },2,0,0,0,1,3,0,4,0,10,1,2,0.04306,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,807,                types[i] = iTypes[i];,0,0,0,2,4,0,0,0,0,6,21,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,816,                indices[i] = iIndices[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.03704,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,305,        PeriodType type = cDTime;,4,0,0,0,0,0,0,2,0,6,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,306,        if (type == null) {,12,1,0,1,3,0,0,4,0,19,19,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,307,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,316,            cDTime = type;,12,0,0,0,0,0,0,2,0,17,14,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,318,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,354,        PeriodType type = cYears;,0,0,0,0,0,0,0,0,0,0,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,355,        if (type == null) {,4,1,0,1,3,0,4,0,0,10,19,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,356,            type = new PeriodType(,4,0,0,0,1,0,0,2,0,7,22,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,361,            cYears = type;,12,3,0,0,0,0,6,2,0,23,14,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,363,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,608,        return iName;,4,0,0,0,0,1,2,2,0,10,13,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,799,        int fieldIndex = iIndices[indicesIndex];,4,1,1,1,2,0,4,0,0,14,40,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,800,        if (fieldIndex == -1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,0,0,0,3,6,0,0,0,0,9,62,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,805,        for (int i = 0; i < iTypes.length; i++) {,0,0,0,1,3,0,0,2,0,2,41,8,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,806,            if (i < fieldIndex) {,20,10,0,1,3,0,0,0,0,34,21,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,808,            } else if (i > fieldIndex) {,4,1,0,1,4,0,0,0,0,5,28,7,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,813,        int[] indices = new int[8];,2,0,0,2,4,0,0,0,0,2,27,5,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,814,        for (int i = 0; i < indices.length; i++) {,26,3,0,1,3,3,0,12,0,46,42,1,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,815,            if (i < indicesIndex) {,6,1,0,1,3,0,6,0,0,13,23,3,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,817,            } else if (i > indicesIndex) {,0,0,0,1,4,0,0,0,0,5,30,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,820,                indices[i] = -1;,0,0,0,1,2,0,0,0,0,3,16,4,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,823,"        return new PeriodType(getName() + name, types, indices);",4,0,0,2,4,1,0,0,0,4,56,6,0.03571,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,674,        int realIndex = iIndices[index];,6,1,0,1,2,0,0,0,0,7,32,5,0.03321,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,0,0,0,2,4,1,0,0,0,7,58,4,0.03321,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,94,    },2,0,0,0,1,0,6,0,0,9,1,4,0.03,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,91,        type = checkPeriodType(type);,0,0,0,1,2,0,0,0,0,3,29,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,92,        iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",2,0,0,1,2,0,18,0,0,21,108,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,2,4,0,10,0,0,10,58,5,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0,0,0,2,4,0,0,0,0,6,60,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",2,2,0,2,4,0,4,0,0,8,64,8,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,2,4,0,10,0,0,10,64,5,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0,0,0,2,4,0,0,0,0,6,62,4,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,462,        return newValues;,4,0,0,0,0,2,0,0,0,5,17,1,0.0298,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",10,1,0,2,4,0,0,8,0,19,62,4,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",2,0,0,2,4,0,14,0,0,16,60,3,0.0297,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,453,        int[] newValues = new int[size()];,8,0,0,3,6,1,2,0,0,11,34,1,0.02941,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,2,4,0,10,0,0,10,60,5,0.02941,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,390,        PeriodType type = cWeeks;,0,0,0,0,0,0,0,0,0,0,25,4,0.02632,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,391,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.02632,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,392,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.02632,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,397,            cWeeks = type;,0,0,0,0,0,0,0,0,0,0,14,4,0.02632,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,399,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.02632,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,397,            values[index] = newValue;,4,0,1,1,2,0,0,4,0,14,25,3,0.02624,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,399,    },2,0,0,0,1,0,0,4,0,7,1,4,0.02624,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,390,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.02601,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,391,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.02601,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,444,        PeriodType type = cMinutes;,4,0,0,0,0,0,0,2,0,6,27,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,445,        if (type == null) {,4,2,0,1,3,0,0,0,0,6,19,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,446,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,451,            cMinutes = type;,4,0,0,0,0,0,0,0,0,5,16,6,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,453,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,462,        PeriodType type = cSeconds;,0,0,0,0,0,0,0,0,0,0,27,4,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,463,        if (type == null) {,4,0,0,1,3,0,0,0,0,4,19,5,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,464,            type = new PeriodType(,6,0,0,0,1,0,4,4,0,15,22,3,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,469,            cSeconds = type;,10,0,0,0,0,0,2,2,0,16,16,5,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,471,        return type;,2,0,0,0,0,1,18,0,0,20,12,3,0.02564,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,426,        PeriodType type = cHours;,0,0,0,0,0,0,4,0,0,4,25,5,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,427,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,428,            type = new PeriodType(,6,0,0,0,1,0,0,4,0,11,22,1,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,433,            cHours = type;,4,0,0,0,0,0,0,0,0,5,14,6,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,435,        return type;,4,0,0,0,0,1,0,0,0,5,12,5,0.025,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,650,                return i;,0,0,0,0,0,1,0,0,0,1,9,4,0.02368,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,5,137,        return getPeriodType().indexOf(type);,0,0,0,2,4,1,6,0,0,6,37,5,0.0235,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,648,"        for (int i = 0, isize = size(); i < isize; i++) {",2,0,0,2,5,0,8,2,0,13,49,8,0.0235,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,0,0,0,7,24,6,0.0235,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,408,        PeriodType type = cDays;,4,0,0,0,0,0,0,2,0,6,24,4,0.02273,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,409,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.02273,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,410,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.02273,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,415,            cDays = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.02273,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,417,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.02273,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,321,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.02074,0,0,-1
defect4j,time,org/joda/time/Period,5,298,"        super(0L, null, null);",2,0,0,1,2,0,0,0,0,3,22,3,0.01982,0,0,-1
defect4j,time,org/joda/time/Period,5,299,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01982,0,0,-1
defect4j,time,org/joda/time/Period,5,65,    public static final Period ZERO = new Period();,4,0,0,1,2,6,0,16,0,26,47,2,0.01982,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,70,        return sum;,12,3,0,0,0,1,0,0,0,16,11,3,0.01903,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,64,        int sum = val1 + val2;,8,2,1,0,0,0,0,0,0,12,22,3,0.01895,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,5,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,8,5,0,3,7,0,0,0,0,13,45,4,0.01895,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,5,319,            return PeriodType.standard();,4,1,0,1,2,1,4,0,0,9,29,3,0.01844,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,254,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01804,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,255,        type = checkPeriodType(type);,6,3,0,1,2,0,0,2,0,11,29,1,0.01804,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,5,256,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.01804,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.18182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,0,0,0,3,78,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.17241,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0,0,0,1,3,0,0,0,0,4,18,4,0.10256,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0,0,0,2,4,1,0,0,0,7,32,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0,0,0,0,0,1,0,0,0,1,42,4,0.05634,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,2,1,0,0,0,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,2,1,1,1,2,0,0,0,0,5,33,8,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,0,0,0,6,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,531,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05519,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,48,    },2,1,0,0,1,0,0,0,0,3,1,5,0.05519,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,632,        if (this == partial) {,6,2,0,1,3,0,8,0,0,16,22,1,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,635,        if (partial instanceof LocalDate) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,636,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,0.05479,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,4,1,0,0,0,0,0,0,0,6,30,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,229,                leapYears++;,0,0,0,0,0,0,0,0,0,0,12,4,0.05,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,41,        StringBuilder buf = new StringBuilder(),0,0,0,1,2,0,0,0,0,3,39,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,63,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,4,1,0,1,3,0,0,0,0,5,22,3,0.04327,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04327,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.04318,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.03863,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,55,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03704,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.03551,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,50,4,0.03279,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,6,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.03226,0,0,-1
defect4j,time,org/joda/time/Instant,6,144,        return this;,2,0,1,0,0,1,0,4,0,8,12,4,0.03045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,8,0,0,11,46,1,0.03045,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,54,        super();,6,1,0,1,2,0,4,0,0,12,8,4,0.027,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.027,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.02629,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,8,4,0,1,2,0,4,0,0,19,36,1,0.0252,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",20,3,0,2,4,0,4,4,0,32,105,1,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,511,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,512,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,21,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,515,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,516,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,518,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,519,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.02518,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,886,        long newInstant = roundFloor(instant);,0,0,0,1,2,0,0,0,0,3,38,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,888,"            instant = add(newInstant, 1);",6,1,0,1,2,0,18,0,0,26,29,3,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,890,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,943,"            this(julianField, gregorianField, null, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,944,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,954,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",10,0,0,1,2,0,4,2,0,17,71,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,955,        },8,2,0,0,1,0,0,0,0,10,1,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,965,        {,2,1,0,0,1,0,0,0,0,3,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,966,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0,0,0,1,2,0,0,0,0,3,69,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,967,            if (durationField == null) {,0,0,0,1,3,0,6,0,0,7,28,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,968,"                durationField = new LinkedDurationField(iDurationField, this);",6,0,1,1,2,0,0,2,0,17,62,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,970,            iDurationField = durationField;,4,0,0,0,0,0,0,0,0,5,31,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,971,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,621,"            this(julianField, gregorianField, cutoverMillis, false);",2,0,0,1,2,0,8,0,0,10,56,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,622,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,631,"                     long cutoverMillis, boolean convertByWeekyear) {",6,0,0,0,2,0,6,0,0,12,48,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,632,            super(gregorianField.getType());,0,0,0,2,4,0,0,0,0,6,32,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,633,            iJulianField = julianField;,14,2,0,0,0,0,4,2,0,24,27,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,634,            iGregorianField = gregorianField;,0,0,0,0,0,0,0,0,0,0,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,635,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,4,25,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,636,            iConvertByWeekyear = convertByWeekyear;,0,0,0,0,0,0,0,0,0,0,39,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,639,            iDurationField = gregorianField.getDurationField();,4,0,0,1,2,0,16,0,0,22,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,641,            DurationField rangeField = gregorianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,66,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,642,            if (rangeField == null) {,2,0,0,1,3,0,0,4,0,7,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,643,                rangeField = julianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,49,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,645,            iRangeDurationField = rangeField;,4,0,0,0,0,0,0,0,0,5,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,646,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,773,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,270,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0,0,0,3,6,0,0,0,0,9,62,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,271,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,6,1,0,1,2,2,0,4,0,14,69,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",2,0,0,1,2,3,0,16,0,21,126,2,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,84,        return to.getDateTimeMillis,0,0,0,0,0,1,0,0,0,1,27,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,190,        zone = DateTimeUtils.getZone(zone);,8,0,0,1,2,0,6,0,0,15,35,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,192,        if (gregorianCutover == null) {,0,0,0,1,3,0,0,0,0,4,31,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,199,        synchronized (cCache) {,2,0,0,1,3,0,8,0,0,10,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,200,            ArrayList<GJChronology> chronos = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,51,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,201,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,202,                chronos = new ArrayList<GJChronology>(2);,4,0,0,1,2,1,4,4,0,14,41,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,203,"                cCache.put(zone, chronos);",0,0,0,1,2,0,0,0,0,3,26,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,214,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,215,                chrono = new GJChronology,2,1,0,0,0,0,0,0,0,3,25,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,227,            chronos.add(chrono);,0,0,0,1,2,0,6,0,0,6,20,7,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,228,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,229,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,474,        Object[] params = (Object[])getParam();,0,0,0,4,8,0,0,0,0,1,39,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,476,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,477,        GregorianChronology gregorian = (GregorianChronology)params[1];,6,0,1,2,4,0,4,6,0,18,63,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,478,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,479,        iCutoverMillis = cutoverInstant.getMillis();,2,0,0,1,2,0,4,0,0,7,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,481,        iJulianChronology = julian;,10,3,0,0,0,0,0,0,0,14,27,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,482,        iGregorianChronology = gregorian;,0,0,0,0,0,0,0,0,0,0,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,483,        iCutoverInstant = cutoverInstant;,4,0,0,0,0,0,0,0,0,5,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,485,        if (getBase() != null) {,2,1,0,2,5,0,0,0,0,4,24,9,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,489,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,0,0,3,7,0,0,0,0,10,82,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,494,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,500,        fields.copyFieldsFrom(gregorian);,4,2,0,1,2,0,0,0,0,6,33,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,506,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,10,6,0,3,7,0,2,2,0,20,55,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,526,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",14,0,0,2,4,0,12,2,0,30,72,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,535,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,536,            fields.dayOfYear = new CutoverField(,0,0,0,0,1,0,0,0,0,1,36,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,541,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0,0,0,2,4,0,0,0,0,6,65,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,542,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,550,            fields.year = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,40,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,552,            fields.years = fields.year.getDurationField();,14,0,0,1,2,0,2,0,0,19,46,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,553,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,45,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,555,            fields.yearOfCentury = new ImpreciseCutoverField(,6,0,0,0,1,0,4,2,0,14,49,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,558,            fields.centuryOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,48,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,560,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,562,            fields.monthOfYear = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,47,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,564,            fields.months = fields.monthOfYear.getDurationField();,0,0,0,1,2,0,0,0,0,3,54,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,566,            fields.weekyear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,44,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,568,            fields.weekyearOfCentury = new ImpreciseCutoverField(,4,0,0,0,1,0,0,2,0,7,53,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,570,            fields.weekyears = fields.weekyear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,576,            CutoverField cf = new CutoverField,4,0,0,0,0,0,8,4,0,17,34,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,578,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,579,            fields.dayOfMonth = cf;,10,0,0,0,0,0,0,2,0,14,23,3,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,581,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,584,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,2,0,0,2,71,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1094,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1095,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1096,        },12,1,0,0,1,0,10,0,0,24,1,1,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,127,        int year = get(instant);,0,0,0,1,2,0,0,0,0,3,24,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,128,        long yearStartMillis = iChronology.getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,129,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,133,        return instant;,4,0,0,0,0,1,0,0,0,4,15,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,72,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,75,"        return set(instant, get(instant) + years);",2,1,0,2,4,1,8,0,0,11,42,5,0.02515,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,8,2,0,1,2,1,2,0,0,12,60,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,80,        int value = super.get(millis);,6,0,0,1,2,0,0,0,0,6,30,5,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,81,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0251,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,84,        return value;,4,0,0,0,0,1,16,0,0,20,13,1,0.0251,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,10,0,0,10,50,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,133,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,134,        if ( thisWeekyear == year ) {,0,0,0,1,3,0,0,0,0,4,29,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,140,        int thisDow = iChronology.getDayOfWeek(instant);,6,0,1,1,2,0,6,0,0,17,48,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,4,0,0,1,2,0,10,0,0,15,65,3,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0,0,0,1,2,0,0,0,0,3,55,4,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,14,2,1,1,2,2,4,2,0,28,53,1,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,0,0,0,2,55,8,0.02508,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,6,155,        if ( setToWeek > maxOutWeeks ) {,4,1,0,1,3,0,0,0,0,5,32,4,0.02508,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0,0,0,2,4,1,0,0,0,7,47,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.03361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0,0,0,1,2,0,0,0,0,3,74,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,0,0,0,3,40,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0,0,0,0,0,0,0,0,0,0,33,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0,0,0,1,2,1,0,0,0,4,23,4,0.01375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,0,0,3,7,0,0,0,0,10,77,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.01303,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,2,0,0,1,2,0,6,0,0,8,31,6,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,4,0,0,0,0,0,0,0,0,5,16,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1247,            if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.0127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1240,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01266,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1359,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1367,            if (length >= 9) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1372,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1373,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },4,1,0,0,1,0,0,0,0,5,1,6,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1382,                while (i < position) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1385,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1390,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,6,1,0,0,0,1,0,0,0,8,16,1,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,6,0,0,1,2,0,6,2,0,15,40,3,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,363,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,419,            for (int i=0; i<high; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,262,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,6,3,0,0,0,0,0,0,0,9,41,10,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,274,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,276,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,468,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,6,0,0,0,0,0,0,0,0,8,15,1,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,471,            iLocale = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,8,1,0,1,3,0,10,2,0,21,23,1,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,2,0,0,0,0,0,0,0,0,3,26,6,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,4,3,0,1,3,0,4,0,0,11,44,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",2,0,0,2,4,0,0,0,0,2,57,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2743,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1356,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.01208,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1332,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1333,            int length = 0;,0,0,0,0,0,0,4,0,0,4,15,5,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1334,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,6,1,0,1,2,0,4,0,0,11,40,8,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,18,11,0,2,5,0,6,0,0,37,55,1,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1362,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,932,        return parser;,4,1,0,0,0,1,0,0,0,5,14,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,120,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,121,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,4,0,0,1,2,0,8,0,0,14,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,6,0,0,0,0,0,0,0,0,9,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,128,    },4,0,0,0,1,0,0,0,0,5,1,5,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,8,0,0,0,0,0,0,4,0,13,32,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,4,1,0,0,0,1,0,0,0,5,24,1,0.01064,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.01058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1401,"            super(fieldType, maxParsedDigits, signed);",4,0,0,1,2,0,0,2,0,6,42,7,0.0105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0105,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,155,            return 1;,2,0,0,0,0,1,2,2,0,6,9,4,0.01039,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,146,        long otherMillis = otherField.getUnitMillis();,0,0,0,1,2,0,0,0,0,3,46,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,147,        long thisMillis = getUnitMillis();,2,0,0,1,2,0,2,0,0,4,34,5,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,149,        if (thisMillis == otherMillis) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.01018,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,87,4,0.01018,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,866,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.00988,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1358,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1359,            ymd = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00976,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1365,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.00976,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,294,                    return chronology.months();,2,1,0,1,2,1,4,0,0,7,27,3,0.00966,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,298,                    return chronology.days();,4,0,0,1,2,1,4,0,0,9,25,1,0.00917,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1653,        if (lte == null) {,6,2,0,1,3,0,0,0,0,9,18,6,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1654,            lte = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,36,3,0.00832,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1658,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.00832,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,129,        super();,8,0,0,1,2,0,4,0,0,13,8,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,130,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,131,        iParser = parser;,2,0,0,0,0,0,0,0,0,2,17,6,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,132,        iLocale = locale;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,133,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,134,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,135,        iZone = zone;,10,1,0,0,0,0,10,0,0,23,13,3,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,136,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,137,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,138,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00797,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1703,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1704,            ze = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.00745,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1708,        return ze;,2,0,0,0,0,1,4,0,0,7,10,7,0.00745,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2139,                est += iMinFields - 1;,12,1,0,0,0,0,4,0,0,19,22,1,0.00733,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2137,            int est = 1 + iMinFields << 1;,0,0,0,0,0,0,0,0,0,0,30,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2138,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,6,4,0,2,5,0,4,0,0,14,74,5,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2144,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2274,            return estimatePrintedLength();,8,0,0,1,2,1,6,0,0,15,31,1,0.00704,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1091,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.00676,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,4,0,0,0,0,0,0,0,0,5,43,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,4,0,0,11,33,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2125,            if (minFields <= 0 || maxFields < minFields) {,8,3,0,1,3,0,0,0,0,11,46,1,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2128,            if (minFields > 4) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2133,            iMaxFields = maxFields;,2,1,0,0,0,0,0,0,0,3,23,8,0.00671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2134,        },4,1,0,0,1,0,0,0,0,5,1,4,0.00671,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,282,            chronology = DateTimeUtils.getChronology(chronology);,8,3,0,1,2,2,6,4,0,25,53,1,0.00661,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,7,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1681,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1682,            sme = new DateTimeFormatterBuilder(),8,4,0,1,2,0,0,2,0,15,36,3,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1687,        return sme;,2,0,0,0,0,1,0,0,0,2,11,4,0.00657,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1671,        if (mhe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1672,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.00654,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1677,        return mhe;,2,0,0,0,0,1,0,0,0,2,11,4,0.00654,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,144,        return localInstant;,6,0,0,0,0,1,0,0,0,7,20,1,0.00653,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1662,        if (hde == null) {,4,0,0,1,3,0,0,4,0,8,18,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1663,            hde = new DateTimeFormatterBuilder(),8,5,0,1,2,0,0,0,0,13,36,4,0.00651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1667,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.00651,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,138,        DateTimeZone zone = getZone();,6,0,0,1,2,0,8,2,0,16,30,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,139,        int offset = zone.getOffsetFromLocal(localInstant);,10,0,0,1,2,0,6,4,0,20,51,1,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,141,        if (offset != zone.getOffset(localInstant)) {,4,1,1,2,5,0,6,0,0,16,45,3,0.00646,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.00645,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,71,4,0.00627,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00625,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,7,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,7,0.0062,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,928,        } else if (offsetLocal >= 0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.00593,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,938,        return offsetAdjusted;,10,0,1,0,0,1,0,0,0,14,22,1,0.00589,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,910,        final int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,1,4,0,0,7,48,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,912,        final long instantAdjusted = instantLocal - offsetLocal;,6,1,0,0,0,1,0,0,0,8,56,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,913,        final int offsetAdjusted = getOffset(instantAdjusted);,0,0,0,1,2,0,0,0,0,3,54,4,0.00579,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,915,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.00579,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1605,            dme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1610,        return dme;,0,0,0,0,0,1,0,0,0,1,11,4,0.00576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1594,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1600,        return mye;,2,0,0,0,0,1,0,0,0,2,11,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.00569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,66,4,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,514,            return iLeapDurationField;,4,0,0,0,0,1,0,0,0,5,26,5,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,547,            return iField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00557,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,564,            return iField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.00557,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1585,        if (ye == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1586,            ye = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,2,0,10,35,5,0.00556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1590,        return ye;,6,2,0,0,0,1,0,0,0,9,10,1,0.00556,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.00552,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,943,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,944,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,947,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,950,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00543,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,7,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00541,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,204,                for (int i = chronos.size(); --i >= 0;) {,6,2,0,2,5,0,4,0,0,13,41,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,205,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,206,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,2,2,0,1,3,0,16,0,0,20,63,3,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,209,                        return chrono;,2,0,0,0,0,1,0,0,0,2,14,12,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,395,        return iCutoverInstant;,2,0,0,0,0,1,0,0,0,2,23,4,0.0054,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,404,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,4,0,0,4,56,5,0.00538,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,496,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.00533,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,500,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.00533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,279,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",12,5,0,3,6,0,0,2,0,19,62,3,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,219,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,220,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,485,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00532,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,305,        return withZone(DateTimeZone.UTC);,4,0,0,1,2,1,2,0,0,6,34,5,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,315,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,318,        if (zone == getZone()) {,0,0,0,2,5,0,6,2,0,8,24,7,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,319,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00526,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,291,        if ((base = getBase()) != null) {,0,0,0,3,7,0,0,0,0,10,33,4,0.00524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,294,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,7,194,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,4,0,0,7,46,6,0.00522,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,471,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.00522,0,0,-1
defect4j,time,org/joda/time/Instant,7,144,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00522,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,67,5,0.00517,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.00515,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,1,2,0,0,0,0,3,68,4,0.00515,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,465,            if (get(result) != value) {,4,1,0,2,5,0,4,0,0,10,27,1,0.00515,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,492,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.00512,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,462,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00506,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,7,463,"            localInstant = iField.set(localInstant, value);",2,0,0,1,2,0,8,0,0,11,47,5,0.00506,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,985,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,1,2,1,6,0,0,6,47,5,0.00505,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1002,        int offsetLocal = getOffset(instantLocal);,2,0,0,1,2,0,4,0,0,6,42,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1004,        int offset = getOffset(instantLocal - offsetLocal);,0,0,0,1,2,0,0,0,0,3,51,4,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1006,        if (offsetLocal != offset) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1035,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1037,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,12,6,0,3,7,2,0,4,0,24,69,1,0.00504,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,7,1040,        return instantUTC;,2,0,0,0,0,1,0,0,0,2,18,4,0.00504,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.00503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,8,2,0,14,60,1,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",0,0,0,3,6,0,0,0,0,9,58,4,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2778,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2779,                for (int i=0; i<array.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2780,                    list.add(array[i]);,0,0,1,2,4,0,4,0,0,8,19,10,0.00493,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00493,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,7,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,0,0,0,2,60,4,0.00492,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,486,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,489,        if (maxDigits < minDigits) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.00491,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0,0,0,0,0,0,0,0,0,0,38,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0,0,0,1,2,1,0,0,0,4,31,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0,0,0,1,3,0,0,0,0,4,62,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0,0,0,1,2,0,0,0,0,3,38,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0,0,0,1,4,0,0,0,0,5,22,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0,0,0,1,2,0,0,0,0,3,71,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0,0,0,1,2,0,8,0,0,8,56,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,59,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,669,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,742,        Chronology chrono = selectChronology(iChrono);,0,0,0,1,2,0,0,0,0,3,46,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",14,0,0,1,2,0,0,4,0,19,101,3,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,744,"        int newPos = parser.parseInto(bucket, text, 0);",0,0,0,1,2,0,0,0,0,3,47,4,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,26,10,0,1,3,0,22,4,0,66,18,1,0.0045,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,6,1,0,1,3,3,0,12,0,22,24,1,0.00433,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,10,1,0,1,3,1,0,4,0,17,33,1,0.00336,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,2,0,1,0,0,1,0,0,0,7,14,4,0.00323,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,2,0,0,1,2,0,8,0,0,11,40,7,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",6,3,1,1,2,0,0,0,0,12,25,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,6,0,0,0,0,0,0,0,0,6,22,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,365,            for (int i = 0; i < count; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,4,2,0,1,3,0,0,0,0,7,18,6,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,378,        },8,0,0,0,1,0,0,0,0,10,1,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,380,        if (iOffset != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,8,1,0,1,3,0,0,0,0,9,16,1,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,6,0,0,16,28,3,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,427,    },4,0,0,0,1,0,0,0,0,4,1,4,0.00321,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,929,        return parser;,0,0,0,0,0,1,0,2,0,2,14,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,120,        super();,0,0,0,1,2,0,10,0,0,10,8,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,18,0,0,18,54,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,0,2,0,5,45,6,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,122,        iMillis = instantLocal;,0,0,0,0,0,0,8,0,0,8,23,5,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,2,1,0,1,2,0,0,0,0,3,27,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,126,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,12,1,0,0,0,0,0,0,0,15,27,1,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,128,    },8,0,0,0,1,0,0,0,0,10,1,4,0.00283,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,925,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,926,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00282,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,10,0,0,10,39,5,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,75,            buf.append((char) (d + '0'));,0,0,0,3,6,0,0,0,0,9,29,4,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,4,0,5,10,0,4,0,0,15,55,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,78,        } else {,2,0,0,0,2,0,6,2,0,12,8,8,0.00242,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,128,        super();,2,0,0,1,2,0,0,2,0,4,8,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,129,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,130,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,131,        iLocale = locale;,2,0,0,0,0,0,4,0,0,7,17,7,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,132,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,133,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,134,        iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,135,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,136,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,2,0,5,27,6,0.00203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,137,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00203,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,67,        } else if (value < 100) {,0,0,0,1,4,0,0,0,0,5,25,4,0.00187,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,63,            for (; size > 1; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00186,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,66,            buf.append((char)(value + '0'));,10,0,0,3,6,0,4,2,0,17,32,6,0.00186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,1091,        return append0(new TimeZoneOffset,4,0,0,0,1,1,6,4,0,15,33,3,0.00172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2121,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0,0,0,0,0,0,0,0,0,0,43,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2124,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2125,            if (minFields <= 0 || maxFields < minFields) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2128,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2132,            iMinFields = minFields;,4,0,0,0,0,0,0,0,0,5,23,5,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2133,            iMaxFields = maxFields;,0,0,0,0,0,0,0,0,0,0,23,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2134,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0017,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,50,        if (value < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,92,    },6,1,0,0,1,1,0,0,0,8,1,4,0.00158,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,940,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,941,        if (iChrono != null) {,4,1,0,1,3,0,0,0,0,5,22,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,944,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,947,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00137,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.00122,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,0,0,0,0,0,0,0,0,0,0,8,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,7,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
