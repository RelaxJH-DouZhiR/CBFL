dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,0,0,0,0,0,1,0,0,0,1,29,4,0.1,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,8,2,0,12,28,15,0.1,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,6,0,0,1,2,1,4,0,0,10,24,1,0.04545,0,0,-1
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.01316,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.0102,0,0,-1
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,0,0,0,2,53,6,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,0,-1
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,10,1,0,1,4,0,2,0,0,13,26,3,0.00714,1,0,-1
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,0,0,0,3,6,0,0,0,0,9,33,4,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,10,0,0,11,1,5,0.00667,0,0,-1
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,0,0,0,1,2,0,0,0,0,3,38,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,18,1,0,1,3,0,4,0,0,25,40,3,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,0,0,2,5,0,0,0,0,7,23,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,0,1,0,1,3,0,8,0,0,10,24,4,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,0,0,0,1,3,0,0,0,0,4,36,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00637,0,0,-1
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,6,0,0,0,0,1,0,0,0,7,19,3,0.00625,0,0,-1
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,6,0.00621,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,        return MIN;,0,0,0,0,0,1,0,0,0,1,11,4,0.00329,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.00327,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,2,0,0,0,1,2,8,4,0,16,87,1,0.00234,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,4,0,0,1,3,0,6,2,0,12,32,4,0.00233,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,152,        if (thisMillis < otherMillis) {,0,0,0,1,3,0,0,0,0,4,31,4,0.00233,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",2,1,0,1,2,0,4,0,0,7,59,7,0.0021,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,2,0,0,0,0,0,0,2,0,5,32,10,0.0021,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,294,                    return chronology.months();,0,0,0,1,2,1,0,0,0,4,27,4,0.00197,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,298,                    return chronology.days();,0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,2,0,0,1,2,1,4,0,0,6,32,4,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,4,0,0,5,1,12,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,2,0,0,1,2,0,0,0,0,2,22,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,4,0,0,1,2,0,0,0,0,5,42,1,0.00164,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00121,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,492,                    return chronology.year();,0,0,0,1,2,1,0,0,0,4,25,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,480,            chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.00081,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,2,1,0,1,3,0,0,0,0,3,19,7,0.00081,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,6,1,0,0,0,1,0,0,0,7,14,3,0.00075,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,285,            return ISOChronology.getInstance();,0,0,0,1,2,1,0,0,0,4,35,4,0.00067,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,0,2,0,0,2,8,5,0.00063,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },8,1,0,0,1,0,0,0,0,10,1,4,0.00063,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,116,        return iChronology.getMinYear();,0,0,0,1,2,1,4,0,0,4,32,5,0.0006,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,166,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00058,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,2,0,0,1,2,1,0,0,0,2,37,5,0.00057,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0005,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,221,        return MIN_YEAR;,8,0,0,0,0,1,8,0,0,18,16,1,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,77,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00046,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,6,0,0,6,46,5,0.00045,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0,0,0,2,4,0,0,0,0,6,76,4,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,108,"                cCache.put(zone, chrono);",4,2,0,1,2,0,0,0,0,6,25,6,0.00038,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,96,        if (zone == null) {,2,0,0,1,3,0,4,0,0,6,19,5,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,8,2,0,2,4,0,6,0,0,17,66,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,100,        ISOChronology chrono = cFastCache[index];,4,0,0,1,2,0,10,0,0,15,41,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,101,        if (chrono != null && chrono.getZone() == zone) {,0,0,0,2,5,0,0,0,0,7,49,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,104,        synchronized (cCache) {,0,0,0,1,3,0,0,0,0,4,23,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,105,            chrono = cCache.get(zone);,0,0,0,1,2,0,0,0,0,3,26,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,106,            if (chrono == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,111,        cFastCache[index] = chrono;,0,0,0,1,2,0,0,0,0,3,27,4,0.00037,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,112,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00037,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,129,            return iRangeDurationField;,2,0,0,0,0,1,4,0,0,7,27,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,547,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,548,            iMillis = fixedMillis;,12,1,0,0,0,0,10,2,0,29,22,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,549,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,114,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,6,1,0,1,2,0,12,0,0,20,55,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,100,        checkPermission();,0,0,0,1,2,0,0,0,0,3,18,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,1,0,0,0,4,0,0,11,41,1,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,102,    },2,0,0,0,1,0,8,0,0,10,1,6,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,161,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,3,0,4,0,9,49,2,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,162,        if (sm != null) {,0,0,0,1,3,0,4,0,0,4,17,8,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,287,        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00035,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,6,1,0,2,4,1,2,0,0,9,70,5,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,132,        return null;,6,0,0,0,0,1,0,2,0,9,12,3,0.00033,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,133,        return INSTANCE_UTC;,2,0,0,0,0,1,10,0,0,13,20,9,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,175,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,0,0,6,49,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,176,        if (sm != null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,179,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,182,        synchronized(DateTimeZone.class) {,2,0,0,1,3,0,0,0,0,2,34,5,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,183,            cDefault = zone;,4,0,0,0,0,0,0,0,0,5,16,6,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,184,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00033,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,123,        return iZone.hashCode();,0,0,1,1,2,1,4,0,0,13,24,3,0.00033,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,1273,        return 57 + getID().hashCode();,4,1,0,2,4,1,0,0,0,6,31,6,0.00032,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,404,            super(field.getType());,8,1,0,2,4,0,0,0,0,10,23,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,405,            if (!field.isSupported()) {,6,1,1,2,5,0,0,0,0,10,27,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,408,            iField = field;,4,0,0,0,0,0,0,4,0,8,15,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,409,            iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,410,            iDurationField = durationField;,2,0,0,0,0,0,0,0,0,3,31,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,411,            iTimeField = useTimeArithmetic(durationField);,2,1,0,1,2,0,0,0,0,3,46,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,412,            iRangeDurationField = rangeDurationField;,0,0,0,0,0,0,0,0,0,0,41,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,413,            iLeapDurationField = leapDurationField;,12,2,0,0,0,0,14,4,0,34,39,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,414,        },2,0,0,0,1,0,0,2,0,5,1,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,81,"        super(base, zone);",0,0,0,1,2,0,0,0,0,3,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,55,        if (base == null) {,2,0,0,1,3,0,0,0,0,2,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,58,        base = base.withUTC();,2,0,0,1,2,0,6,0,0,8,22,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,59,        if (base == null) {,6,0,0,1,3,0,0,0,0,6,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,62,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,65,"        return new ZonedChronology(base, zone);",6,1,0,1,2,1,0,4,0,11,39,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,85,        return (DateTimeZone)getParam();,0,0,0,2,4,1,0,0,0,7,32,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0,0,0,1,2,0,0,0,0,3,66,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,154,"        fields.eras = convertField(fields.eras, converted);",4,0,0,1,2,0,0,0,0,5,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,155,"        fields.centuries = convertField(fields.centuries, converted);",14,1,0,1,2,0,4,0,0,21,61,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,156,"        fields.years = convertField(fields.years, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,157,"        fields.months = convertField(fields.months, converted);",0,0,0,1,2,0,0,0,0,3,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,159,"        fields.weeks = convertField(fields.weeks, converted);",8,0,0,1,2,0,4,0,0,13,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,160,"        fields.days = convertField(fields.days, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0,0,0,1,2,0,0,0,0,3,59,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,163,"        fields.hours = convertField(fields.hours, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,164,"        fields.minutes = convertField(fields.minutes, converted);",2,0,0,1,2,0,0,2,0,5,57,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,165,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,166,"        fields.millis = convertField(fields.millis, converted);",4,0,0,1,2,0,0,0,0,5,55,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,170,"        fields.year = convertField(fields.year, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",2,0,0,1,2,0,0,0,0,2,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,69,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0,0,0,1,2,0,0,0,0,3,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,174,"        fields.era = convertField(fields.era, converted);",4,0,0,1,2,1,0,2,0,7,49,2,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",18,0,0,1,2,0,8,2,0,30,63,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",10,0,0,1,2,0,8,0,0,19,65,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,180,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0,0,0,1,2,0,0,0,0,3,77,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0,0,0,1,2,0,0,0,0,3,65,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",12,0,0,1,2,0,8,0,0,22,65,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,1,2,0,4,2,0,11,61,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",12,0,0,1,2,0,4,2,0,19,69,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",8,0,0,1,2,0,4,0,0,13,79,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",2,0,0,1,2,0,4,2,0,9,67,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,197,        if (field == null || !field.isSupported()) {,0,0,0,2,5,0,0,0,0,7,44,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,198,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,200,        if (converted.containsKey(field)) {,0,0,0,2,5,0,14,0,0,14,35,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,201,            return (DurationField)converted.get(field);,4,1,0,2,4,4,10,2,0,20,43,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",10,0,0,2,4,0,2,4,0,16,73,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,204,"        converted.put(field, zonedField);",0,0,0,1,2,0,0,0,0,3,33,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,205,        return zonedField;,0,0,0,0,0,1,0,0,0,1,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,209,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,8,0,0,13,44,3,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,212,        if (converted.containsKey(field)) {,0,0,0,2,5,0,0,0,0,7,35,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,215,        ZonedDateTimeField zonedField =,2,0,0,0,0,0,0,2,0,4,31,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,220,"        converted.put(field, zonedField);",0,0,0,1,2,0,8,0,0,8,33,5,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,221,        return zonedField;,0,0,0,0,0,1,0,0,0,1,18,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,281,            super(field.getType());,0,0,0,2,4,0,4,0,0,4,23,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,282,            if (!field.isSupported()) {,4,0,0,2,5,0,0,2,0,7,27,6,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,285,            iField = field;,6,1,0,0,0,0,8,0,0,16,15,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,286,            iTimeField = useTimeArithmetic(field);,4,0,0,1,2,0,4,0,0,10,38,1,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,287,            iZone = zone;,0,0,0,0,0,0,0,0,0,0,13,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,1,295,            return iField.getUnitMillis();,0,0,0,1,2,1,4,0,0,4,30,6,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,109,        return getWrappedField().getUnitMillis() * iScalar;,0,0,0,2,4,1,0,0,0,7,51,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00032,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,161,            return iUnitMillis;,0,0,0,0,0,1,0,0,0,1,19,4,0.00032,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,59,        return iChronology.weekyears();,0,0,0,1,2,1,4,0,0,4,31,5,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,57,        return iChronology.years();,4,0,0,1,2,1,4,2,0,10,27,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,335,        return iChronology.days();,0,0,0,1,2,1,4,0,0,4,26,5,0.00031,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,1,142,        long millis = iUnitMillis;,0,0,0,0,0,0,0,0,0,0,26,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,1,143,        int hash = (int) (millis ^ (millis >>> 32));,0,0,0,3,6,0,0,0,0,9,44,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,1,144,        hash += getType().hashCode();,6,0,0,2,4,0,4,0,0,12,29,1,0.00031,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,1,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,102,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,112,        return iChronology.days();,0,0,0,1,2,1,4,0,0,4,26,5,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,221,        return iChronology.weeks();,0,0,0,1,2,1,4,0,0,4,27,5,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,147,        long scalar = iScalar;,4,0,0,0,0,0,0,0,0,4,22,5,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0,0,0,3,6,0,0,0,0,9,44,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,149,        hash += getType().hashCode();,0,0,0,2,4,0,0,0,0,6,29,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,150,        hash += getWrappedField().hashCode();,0,0,0,2,4,0,6,0,0,6,37,5,0.00031,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,1,151,        return hash;,0,0,0,0,0,1,0,0,0,1,12,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,1,155,        return (int) getUnitMillis();,8,0,0,2,4,1,6,0,0,14,29,3,0.00031,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,1,49,        return DurationFieldType.millis();,0,0,0,1,2,1,4,0,0,4,34,5,0.00031,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,95,        return iChronology.weeks();,0,0,0,1,2,1,0,0,0,4,27,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,1,69,        return iField;,4,0,0,0,0,1,12,0,0,17,14,1,0.00031,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,1,284,        if (chrono == null) {,4,1,0,1,3,0,6,2,0,13,21,1,0.00031,0,0,-1
defect4j,time,org/joda/time/field/DividedDateTimeField,1,128,        if (iRangeDurationField != null) {,2,0,0,1,3,0,4,2,0,8,34,8,0.00031,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,173,        return iDurationField;,10,0,0,0,0,1,4,0,0,15,22,3,0.00031,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,180,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,209,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,55,        return iType;,2,0,0,0,0,1,0,0,0,2,13,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,316,        return iChronology.years();,0,0,0,1,2,1,10,0,0,10,27,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,52,        return iChronology.months();,0,0,0,1,2,1,0,0,0,4,28,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,96,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,122,"        super(base, null);",2,0,0,1,2,0,0,0,0,3,18,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,123,    },4,1,1,0,1,0,14,4,0,25,1,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",10,1,0,1,2,3,4,12,0,31,106,1,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,4,1,0,1,2,0,4,2,0,11,48,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,2,0,0,2,4,0,4,2,0,9,71,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",4,0,0,1,2,0,6,0,0,10,43,5,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,68,    },8,2,1,0,1,0,0,2,0,14,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,169,        if (getBase().getZone() == DateTimeZone.UTC) {,4,1,0,3,7,0,4,0,0,9,46,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,171,            fields.centuryOfEra = new DividedDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,173,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,175,            fields.yearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,0,2,0,7,50,6,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,177,            fields.weekyearOfCentury = new RemainderDateTimeField(,4,0,0,0,1,0,6,2,0,13,54,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,1,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,48,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,4,8,0,12,0,0,12,82,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,42,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,2,0,0,1,2,2,0,4,0,8,70,2,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,53,        return GregorianChronology.getInstanceUTC().eras();,8,0,0,2,4,1,10,0,0,19,51,3,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,94,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,98,        return getWrappedField().getMaximumValue();,4,1,0,2,4,1,0,0,0,5,43,5,0.00031,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,81,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00031,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,123,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,142,        return iUnitField;,0,0,0,0,0,1,0,0,0,1,18,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,1,146,        return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,5,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,1,143,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,45,public final class GregorianChronology extends BasicGJChronology {,0,0,0,0,1,0,0,0,0,1,66,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,148,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,12,39,3,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,149,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",2,0,0,3,6,3,0,12,0,17,122,2,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,45,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,100,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,111,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,115,        synchronized (cCache) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,116,            GregorianChronology[] chronos = cCache.get(zone);,6,1,0,2,4,0,6,2,0,15,49,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,117,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,118,                chronos = new GregorianChronology[7];,0,0,0,1,2,0,0,0,0,3,37,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,119,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,122,                chrono = chronos[minDaysInFirstWeek - 1];,0,0,0,1,2,0,0,0,0,3,41,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,126,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,127,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,128,                if (zone == DateTimeZone.UTC) {,10,5,0,1,3,0,4,0,0,19,31,3,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",4,0,0,1,2,0,0,2,0,8,65,10,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,135,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,137,        },6,0,0,0,1,0,0,0,0,7,1,3,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,138,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,191,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,192,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,225,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,229,        return MILLIS_PER_YEAR;,0,0,0,0,0,1,0,0,0,1,23,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,237,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,1,699,        return 12;,0,0,0,0,0,1,0,0,0,1,10,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,75,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,2,0,0,1,3,3,0,0,0,5,55,2,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,10,1,0,1,3,3,14,0,0,29,55,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,4,0,0,1,2,0,0,2,0,8,47,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,2,0,0,1,2,0,0,0,0,3,47,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,56,        long minSum = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,57,        long maxSum = 0;,6,0,0,0,0,0,0,2,0,9,16,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,58,        for (int i = 0; i < 11; i++) {,6,1,0,1,3,0,10,0,0,18,30,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0,0,0,1,2,0,0,0,0,3,41,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,61,            minSum += millis;,12,3,0,0,0,0,0,0,0,16,17,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0,0,0,1,2,0,0,0,0,3,48,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],2,0,1,1,2,0,0,0,0,7,36,6,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,66,            maxSum += millis;,0,0,0,0,0,0,0,0,0,0,17,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,4,1,1,1,2,0,8,0,0,16,48,1,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0003,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,6,0,0,6,29,7,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,372,            flags = ,8,0,0,0,0,0,2,2,0,13,7,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,148,                        },0,0,0,0,1,0,4,0,0,4,1,6,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,134,        DateTimeZone zone = cDefault;,4,0,0,0,0,0,0,2,0,6,29,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,135,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,136,            synchronized(DateTimeZone.class) {,4,0,0,1,3,0,0,4,0,9,34,3,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,137,                zone = cDefault;,0,0,0,0,0,0,0,0,0,0,16,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,138,                if (zone == null) {,0,0,1,1,3,0,0,0,0,9,19,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,139,                    DateTimeZone temp = null;,2,0,0,0,0,0,0,2,0,4,25,10,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,142,"                            String id = System.getProperty(""user.timezone"");",0,0,0,1,2,0,0,0,0,3,48,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,143,                            if (id != null) {  // null check avoids stack overflow,0,0,0,1,3,0,0,0,0,4,54,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,144,                                temp = forID(id);,0,0,0,1,2,0,0,0,0,3,17,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,149,                        if (temp == null) {,6,1,0,1,3,0,0,0,0,9,19,1,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,154,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,155,                    if (temp == null) {,2,1,0,1,3,0,0,0,0,3,19,10,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,158,                    cDefault = zone = temp;,6,0,0,0,0,0,0,0,0,8,23,10,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,160,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00029,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,1,162,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.00029,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,92,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,156,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,160,        return iMillisOfSecond;,2,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,164,        return iMillisOfDay;,0,0,0,0,0,1,0,0,0,1,20,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,168,        return iSeconds;,2,0,0,0,0,1,0,0,0,2,16,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,172,        return iSecondOfMinute;,2,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,176,        return iSecondOfDay;,2,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,180,        return iMinutes;,2,0,0,0,0,1,0,0,0,2,16,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,184,        return iMinuteOfHour;,2,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,188,        return iMinuteOfDay;,0,0,0,0,0,1,0,0,0,1,20,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,192,        return iHours;,0,0,0,0,0,1,0,0,0,1,14,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,196,        return iHourOfDay;,8,0,0,0,0,1,6,2,0,17,18,3,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,200,        return iClockhourOfDay;,2,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,204,        return iHalfdays;,2,0,0,0,0,1,0,0,0,2,17,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,208,        return iHourOfHalfday;,0,0,0,0,0,1,0,0,0,1,22,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,212,        return iClockhourOfHalfday;,0,0,0,0,0,1,0,0,0,1,27,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,216,        return iHalfdayOfDay;,0,0,0,0,0,1,0,0,0,1,21,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,220,        return iDays;,0,0,0,0,0,1,0,0,0,1,13,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,224,        return iDayOfWeek;,2,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,228,        return iDayOfMonth;,0,0,0,0,0,1,0,0,0,1,19,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,232,        return iDayOfYear;,2,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,236,        return iWeeks;,10,0,0,0,0,1,0,0,0,10,14,1,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,240,        return iWeekOfWeekyear;,2,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,244,        return iWeekyears;,0,0,0,0,0,1,0,0,0,1,18,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,248,        return iWeekyear;,4,0,0,0,0,1,0,0,0,6,17,3,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,252,        return iWeekyearOfCentury;,2,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,256,        return iMonths;,2,0,0,0,0,1,0,0,0,2,15,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,260,        return iMonthOfYear;,2,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,264,        return iYears;,2,0,0,0,0,1,0,0,0,2,14,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,272,        return iYearOfEra;,2,0,0,0,0,1,4,0,0,6,18,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,276,        return iYearOfCentury;,2,0,0,0,0,1,0,0,0,2,22,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,280,        return iCenturies;,2,0,0,0,0,1,0,2,0,5,18,6,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,284,        return iCenturyOfEra;,2,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,292,        return iEra;,4,0,0,0,0,1,0,2,0,6,12,1,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,445,                if (isSupported(f = chrono.millis())) {,2,0,0,3,7,0,6,0,0,9,39,7,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,446,                    millis = f;,4,0,0,0,0,0,0,0,0,5,11,8,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,448,                if (isSupported(f = chrono.seconds())) {,2,0,0,3,7,0,6,0,0,9,40,7,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,449,                    seconds = f;,4,0,0,0,0,0,0,0,0,5,12,8,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,451,                if (isSupported(f = chrono.minutes())) {,2,0,0,3,7,0,6,0,0,9,40,7,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,452,                    minutes = f;,4,0,0,0,0,0,0,0,0,5,12,8,0.00029,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,1,454,                if (isSupported(f = chrono.hours())) {,2,0,0,3,7,0,6,0,0,9,38,7,0.00029,0,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,0,0,2,0,4,79,16,1.0,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,1,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,91,4,0.2,0,0,-1
defect4j,time,org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,0,4,0,0,5,46,13,0.2,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0,0,0,1,2,1,4,0,0,4,25,7,0.125,0,0,-1
defect4j,time,org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0,0,0,3,7,0,0,0,0,10,50,4,0.07692,0,0,-1
defect4j,time,org/joda/time/Partial,2,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,time,org/joda/time/Partial,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,0,-1
defect4j,time,org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,6,0,1,2,4,0,12,2,0,26,40,3,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,160,        iValues = new int[] {value};,4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,0,-1
defect4j,time,org/joda/time/Partial,2,153,        super();,4,0,0,1,2,0,0,0,0,5,8,5,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,12,1,0,2,4,0,8,0,0,23,63,3,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,155,        iChronology = chronology;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,156,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05,0,0,-1
defect4j,time,org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0,0,0,2,4,0,0,0,0,6,72,4,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,14,5,0,2,4,0,0,0,0,19,43,1,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,438,            int i = 0;,6,1,0,0,0,0,0,0,0,7,10,5,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.03704,1,1,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,1,2,0,0,2,0,2,46,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,6,0,1,1,2,0,0,0,0,12,24,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,461,            newValues[i] = value;,10,1,1,1,2,0,6,0,0,22,21,3,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,0,-1
defect4j,time,org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,433,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03448,0,0,-1
defect4j,time,org/joda/time/Partial,2,429,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0,0,0,0,0,1,0,0,0,1,18,4,0.01923,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,        return -1;,4,1,0,0,0,1,0,0,0,6,10,3,0.0137,0,0,-1
defect4j,time,org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,8,5,0,3,7,0,4,0,0,18,76,3,0.00719,1,0,-1
defect4j,time,org/joda/time/Partial,2,221,                } else if (compare == 0) {,2,1,0,1,4,0,6,0,0,9,26,3,0.00719,0,0,-1
defect4j,time,org/joda/time/Partial,2,346,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0,-1
defect4j,time,org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,6,1,0,0,0,0,4,0,0,13,35,1,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,12,1,0,1,3,0,4,2,0,20,40,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0,0,0,2,4,0,0,0,0,6,79,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,216,            if (i > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0,0,0,0,0,0,0,0,0,0,30,4,0.00662,0,0,-1
defect4j,time,org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,208,            if (types[i] == null) {,0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,0,-1
defect4j,time,org/joda/time/Partial,2,202,        if (types.length == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00654,0,0,-1
defect4j,time,org/joda/time/Partial,2,199,        if (values.length != types.length) {,10,1,0,1,3,0,0,0,0,13,36,1,0.00649,0,0,-1
defect4j,time,org/joda/time/Partial,2,196,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,0,-1
defect4j,time,org/joda/time/Partial,2,190,        super();,4,0,0,1,2,0,0,2,0,7,8,6,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,192,        iChronology = chronology;,4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,193,        if (types == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.00641,0,0,-1
defect4j,time,org/joda/time/Partial,2,323,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00629,0,0,-1
defect4j,time,org/joda/time/Partial,2,311,        return iTypes.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.00625,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,                    return chronology.years();,4,0,0,1,2,1,16,4,0,24,26,1,0.00459,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.002,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,                return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00199,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,4,3,0,1,2,1,6,0,0,15,32,1,0.00167,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,2,1,0,1,2,1,2,0,0,5,25,3,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,    },2,0,0,0,1,0,10,0,0,12,1,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,10,1,0,1,3,0,8,0,0,21,32,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,8,1,1,1,2,0,22,0,0,36,22,1,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00165,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,2,0,0,1,2,1,4,0,0,7,32,3,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,            if (value > field.getMaximumValue()) {,0,0,0,2,5,0,0,0,0,7,38,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,186,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,4,1,0,2,5,0,10,0,0,15,38,1,0.00165,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,2,0,0,0,0,1,8,0,0,10,20,1,0.00163,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());",0,0,0,2,4,1,0,0,0,7,40,4,0.00156,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,632,            return iField.hashCode() ^ iZone.hashCode();,0,0,0,2,4,1,0,0,0,7,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,4,1,0,2,4,1,8,0,0,13,44,4,0.00134,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,532,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.00131,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,16,1,1,1,2,0,16,4,0,41,53,1,0.00128,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,284,            switch (iOrdinal) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00128,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,260,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,209,                for (int i = chronos.size(); --i >= 0;) {,0,0,0,2,5,0,0,0,0,7,41,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,210,                    chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,10,1,0,1,3,0,28,4,0,44,63,1,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,214,                        return chrono;,0,0,0,0,0,1,0,0,0,1,14,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,400,        return iCutoverInstant;,0,0,0,0,0,1,0,0,0,1,23,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.00127,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",2,1,0,3,6,0,6,0,0,10,62,6,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,285,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,75,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,225,                chrono = new GJChronology,0,0,0,0,0,0,0,0,0,0,25,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,490,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,518,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.00125,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,514,            return iDurationField;,0,0,0,0,0,1,0,0,0,1,22,4,0.00124,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,2,0,0,1,2,1,6,0,0,8,32,5,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,2,0,0,1,2,1,8,0,0,10,32,6,0.00123,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,310,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,320,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,6,1,0,2,5,0,2,2,0,12,24,3,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,324,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,489,            return result;,2,0,0,0,0,1,0,0,0,2,14,5,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,2,1,0,3,7,0,6,0,0,11,33,1,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,299,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.00122,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,4,0,0,1,2,0,0,2,0,7,46,5,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",6,0,0,3,6,0,10,4,0,20,105,1,0.00121,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,197,            if (cutoverDate.getYear() <= 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.00121,0,0,-1
defect4j,time,org/joda/time/Instant,2,144,        return this;,8,0,0,0,0,1,0,0,0,8,12,1,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,0,0,0,2,68,7,0.0012,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,2,0,0,2,5,0,0,2,0,5,27,6,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",6,1,1,1,2,1,8,2,0,19,47,1,0.0012,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,999,        int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,0,0,0,3,42,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1001,        int offset = getOffset(instantLocal - offsetLocal);,2,1,0,1,2,0,0,0,0,3,51,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1003,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1032,        long instantUTC = instantLocal - offset;,2,0,0,0,0,0,0,0,0,4,40,8,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,69,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1037,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.00119,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,492,                    return chronology.year();,8,1,0,1,2,1,0,0,0,9,25,1,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,480,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.00119,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,481,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.00119,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,335,"    public LocalDate(long instant, Chronology chronology) {",6,0,0,1,3,1,0,2,0,9,55,2,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,336,        chronology = DateTimeUtils.getChronology(chronology);,2,0,1,1,2,0,6,0,0,18,53,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",6,0,0,2,4,0,8,0,0,14,86,5,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,339,        chronology = chronology.withUTC();,0,0,0,1,2,0,0,0,0,3,34,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0,0,0,2,4,0,0,0,0,6,63,4,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,341,        iChronology = chronology;,10,1,0,0,0,0,0,0,0,12,25,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,342,    },4,0,0,0,1,0,4,4,0,12,1,3,0.00114,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,1462,        return getChronology().year().get(getLocalMillis());,0,0,0,4,8,1,0,0,0,13,52,4,0.00113,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,259,        if (this == readableInstant) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00109,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,82,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,211,            return iRangeDurationField;,6,1,0,0,0,1,32,0,0,39,27,1,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,64,        super(field);,0,0,0,1,2,0,0,0,0,3,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,65,        iChronology = chronology;,6,4,0,0,0,0,4,0,0,15,25,8,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,67,        if (min < skip) {,4,1,0,1,3,0,0,0,0,5,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,68,            iMinValue = min + 1;,6,2,0,0,0,0,0,0,0,9,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,74,        iSkip = skip;,0,0,0,0,0,0,0,0,0,0,13,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,88,        if (value <= iSkip) {,2,0,0,1,3,1,0,4,0,7,21,2,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,89,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,91,"        return super.set(millis, value);",4,0,0,1,2,1,4,0,0,8,32,3,0.00108,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,2,95,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,133,"        super(base, param);",4,0,0,1,2,0,0,0,0,4,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",4,0,0,1,2,0,0,0,0,5,116,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,4,0,0,1,2,0,8,0,0,14,85,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,106,        if (zone == null) {,2,1,0,1,3,0,2,2,0,7,19,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,110,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,111,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,112,            if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",8,1,0,2,4,0,0,0,0,10,76,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",2,0,0,2,4,0,8,2,0,12,91,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,118,"                cCache.put(zone, chrono);",0,0,0,1,2,0,0,0,0,3,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,120,        },0,0,0,0,1,0,6,0,0,6,1,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,121,        return chrono;,6,0,0,0,0,1,8,2,0,16,14,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,217,        if (getParam() == null) {,2,0,0,2,5,0,0,0,0,2,25,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,4,0,0,2,4,0,8,0,0,13,77,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,222,            DateTimeField field = fields.year;,0,0,0,0,0,0,0,0,0,0,34,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,223,            fields.year = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,38,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,227,            field = fields.yearOfEra;,6,0,0,0,0,0,0,0,0,7,25,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,228,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,232,            field = fields.weekyear;,28,5,0,0,0,0,6,2,0,45,24,3,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,233,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,42,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,237,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,239,            fields.centuries = fields.centuryOfEra.getDurationField();,8,0,0,1,2,0,2,0,0,11,58,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,241,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,243,            fields.yearOfCentury = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,47,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,246,            field = new RemainderDateTimeField(,10,0,0,0,1,0,0,4,0,16,35,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,251,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,253,    },4,1,0,0,1,0,0,0,0,5,1,6,0.00108,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,619,        return iChronology;,0,0,0,0,0,1,0,0,0,1,19,4,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,174,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,1,2,1,6,0,0,6,46,5,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,823,            return iJulianField.getMinimumValue();,8,6,0,1,2,1,10,0,0,26,38,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,854,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",2,0,0,1,2,0,0,0,0,4,54,4,0.00108,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,2,154,"        return super.set(instant, value - iOffset);",4,1,0,1,2,1,0,0,0,5,43,1,0.00108,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,193,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.00108,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,2,83,"        return iField.set(instant, value);",4,2,0,1,2,1,14,0,0,20,34,3,0.00107,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,100,        return iMinValue;,0,0,0,0,0,1,10,0,0,10,17,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,133,"        instant = monthOfYear().set(instant, monthOfYear);",0,0,0,2,4,0,0,0,0,6,50,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",10,1,0,2,4,0,4,0,0,16,48,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,135,"        instant = hourOfDay().set(instant, hourOfDay);",0,0,0,2,4,0,0,0,0,6,46,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",2,0,0,2,4,0,8,0,0,11,52,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",2,0,0,2,4,0,8,0,0,11,56,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,2,4,1,0,0,0,7,53,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,2,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",8,0,0,0,1,1,0,0,0,8,61,5,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,742,                    if (instant + iGapDuration < iCutover) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,743,                        instant = gregorianToJulian(instant);,4,0,0,1,2,0,12,0,0,17,37,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,746,                    if (get(instant) != value) {,4,1,0,2,5,0,0,0,0,5,28,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,675,                return iJulianField.get(instant);,0,1,0,1,2,1,8,0,0,9,33,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,229,        return iChronology.getMaxYear();,0,0,0,1,2,1,0,0,0,4,32,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,71,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,943,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,4,0,0,4,40,8,0.00107,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,186,"        return iField.set(instant, value);",0,0,0,1,2,1,0,0,0,4,34,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,79,            if (year == 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,83,            year++;,6,0,0,0,0,0,0,0,0,8,7,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,752,"                instant = iJulianField.set(instant, value);",2,1,0,1,2,0,10,0,0,15,43,1,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,753,                if (instant >= iCutover) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00107,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,739,"                instant = iGregorianField.set(instant, value);",0,0,0,1,2,0,0,0,0,3,46,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,740,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,940,            if (iConvertByWeekyear) {,2,0,0,1,3,0,0,0,0,2,25,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,75,public final class GJChronology extends AssembledChronology {,2,0,0,0,1,2,0,2,0,6,61,1,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,738,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,765,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.00106,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,672,            if (instant >= iCutover) {,6,2,0,1,3,0,0,0,0,8,26,1,0.00106,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,245,        return iField.getMaximumValue();,0,0,0,1,2,1,0,0,0,4,32,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,6,0,0,1,2,3,0,10,0,20,99,1,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,2,1,0,2,4,0,8,0,0,12,51,6,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,0,0,0,6,52,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,4,0,0,2,4,0,0,0,0,5,55,5,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0,0,0,2,4,0,0,0,0,6,51,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0,0,0,2,4,0,0,0,0,6,55,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,0,0,0,6,50,4,0.00106,0,0,-1
defect4j,time,org/joda/time/LocalDate,2,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00106,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1055,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.00105,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,78,        if (year <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,85,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",6,0,0,2,4,1,4,0,0,10,84,5,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,410,            i2 = i2 - unitMillis + 1;,0,0,0,0,0,0,12,0,0,12,25,1,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,2,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,2,0,0,4,8,0,4,0,0,6,71,4,0.00104,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",6,0,0,1,2,0,4,0,0,11,59,10,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,146,                    chrono = new CopticChronology,2,0,0,0,0,0,0,2,0,5,29,10,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,184,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00103,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,816,            return iGregorianField.getLeapDurationField();,0,0,0,1,2,1,10,0,0,10,46,5,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,796,            return iRangeDurationField;,2,0,0,0,0,1,8,0,0,10,27,1,0.00102,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,542,            return iLeapDurationField;,2,0,0,0,0,1,0,0,0,2,26,5,0.00101,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,528,            return iRangeDurationField;,0,0,0,0,0,1,0,0,0,1,27,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,132,            instant = iChronology.getYearMillis(year + 1);,4,1,0,1,2,0,4,0,0,10,46,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,514,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,105,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,515,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,516,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,517,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,518,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,99,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,519,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,96,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,520,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,521,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,522,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,20,105,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,523,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,525,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,2,524,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,128,        int year = get(instant);,2,0,0,1,2,0,4,0,0,6,24,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,129,        long yearStartMillis = iChronology.getYearMillis(year);,8,1,1,1,2,0,6,0,0,17,55,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,130,        if (instant != yearStartMillis) {,0,0,0,1,3,0,0,0,0,4,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,2,134,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,274,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",10,3,0,3,6,0,0,0,0,13,62,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,275,    },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0,0,0,1,2,0,0,0,0,3,69,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",4,3,0,1,2,0,0,0,0,7,126,7,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,84,        return to.getDateTimeMillis,0,0,0,0,0,1,4,0,0,4,27,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,190,        zone = DateTimeUtils.getZone(zone);,0,0,0,1,2,0,0,0,0,3,35,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,192,        if (gregorianCutover == null) {,2,1,0,1,3,0,0,0,0,3,31,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,203,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,204,            ArrayList<GJChronology> chronos = cCache.get(zone);,2,0,0,1,2,0,6,4,0,12,51,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,205,            if (chronos == null) {,4,1,0,1,3,0,2,0,0,7,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,206,                chronos = new ArrayList<GJChronology>(2);,2,0,0,1,2,0,0,4,0,7,41,8,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,207,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,218,            if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,2,0,11,31,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,219,                chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,8,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,231,            chronos.add(chrono);,0,0,0,1,2,0,0,0,0,3,20,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,232,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,233,        return chrono;,0,0,0,0,0,1,8,0,0,8,14,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,478,        Object[] params = (Object[])getParam();,2,0,0,4,8,0,2,4,0,8,39,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,480,        JulianChronology julian = (JulianChronology)params[0];,2,0,1,2,4,0,0,4,0,8,54,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,481,        GregorianChronology gregorian = (GregorianChronology)params[1];,0,0,0,2,4,0,0,0,0,6,63,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,482,        Instant cutoverInstant = (Instant)params[2];,2,0,1,2,4,0,0,4,0,8,44,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,483,        iCutoverMillis = cutoverInstant.getMillis();,4,0,0,1,2,0,4,2,0,12,44,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,485,        iJulianChronology = julian;,4,0,0,0,0,0,0,0,0,5,27,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,486,        iGregorianChronology = gregorian;,4,0,0,0,0,0,0,0,0,5,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,487,        iCutoverInstant = cutoverInstant;,0,0,0,0,0,0,0,0,0,0,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,489,        if (getBase() != null) {,6,1,0,2,5,0,12,0,0,21,24,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,493,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,3,7,0,8,0,0,9,82,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,498,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,4,1,0,1,2,0,4,0,0,10,72,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,504,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,0,0,0,3,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,510,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,4,0,0,3,7,0,0,0,0,5,55,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,530,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,72,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,537,            fields.year = new ImpreciseCutoverField(,10,3,0,0,1,0,6,4,0,24,40,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,539,            fields.years = fields.year.getDurationField();,16,0,0,1,2,0,2,0,0,20,46,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,540,            fields.yearOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,4,0,0,4,45,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,543,            fields.centuryOfEra = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,48,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,545,            fields.centuries = fields.centuryOfEra.getDurationField();,2,2,0,1,2,0,4,0,0,8,58,8,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,547,            fields.yearOfCentury = new ImpreciseCutoverField(,4,0,1,0,1,0,4,2,0,13,49,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,550,            fields.monthOfYear = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,47,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,552,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,554,            fields.weekyear = new ImpreciseCutoverField(,8,0,0,0,1,0,4,2,0,15,44,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,556,            fields.weekyears = fields.weekyear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,557,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0,0,0,0,1,0,0,0,0,1,53,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,567,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,61,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,568,            fields.dayOfYear = new CutoverField(,10,0,0,0,1,0,6,2,0,20,36,3,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,573,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,2,0,0,2,4,0,8,0,0,10,65,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,574,            fields.weekOfWeekyear = new CutoverField(,4,0,0,0,1,0,0,2,0,7,41,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,581,            CutoverField cf = new CutoverField,8,0,0,0,0,0,0,4,0,13,34,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,583,            cf.iRangeDurationField = fields.months;,0,0,0,0,0,0,0,0,0,0,39,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,584,            fields.dayOfMonth = cf;,6,0,0,0,0,0,0,0,0,7,23,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,586,    },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,589,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,1,2,1,8,0,0,8,71,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1148,"            super(durationField, durationField.getType());",2,0,0,2,4,0,4,0,0,6,46,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1149,            iField = dateTimeField;,0,0,0,0,0,0,0,0,0,0,23,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1150,        },2,0,0,0,1,2,0,4,0,8,1,2,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,627,"            this(julianField, gregorianField, cutoverMillis, false);",6,0,0,1,2,0,0,0,0,7,56,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,628,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,638,"            this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);",0,0,0,1,2,0,0,0,0,3,74,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,639,        },4,4,0,0,1,0,0,0,0,9,1,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,649,"                     DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {",0,0,0,0,2,0,0,0,0,2,74,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,650,            super(gregorianField.getType());,0,0,0,2,4,0,4,0,0,4,32,6,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,651,            iJulianField = julianField;,4,0,0,0,0,0,0,0,0,5,27,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,652,            iGregorianField = gregorianField;,0,0,0,0,0,0,0,0,0,0,33,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,653,            iCutover = cutoverMillis;,4,0,0,0,0,0,0,0,0,5,25,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,654,            iConvertByWeekyear = convertByWeekyear;,0,0,0,0,0,0,0,0,0,0,39,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,657,            iDurationField = gregorianField.getDurationField();,2,0,0,1,2,0,4,0,0,7,51,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,658,            if (rangeField == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,659,                rangeField = gregorianField.getRangeDurationField();,2,0,0,1,2,0,4,0,0,7,52,7,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,660,                if (rangeField == null) {,2,1,0,1,3,0,0,0,0,3,25,7,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,661,                    rangeField = julianField.getRangeDurationField();,0,0,0,1,2,0,0,0,0,3,49,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,664,            iRangeDurationField = rangeField;,8,1,0,0,0,0,0,0,0,10,33,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,665,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,792,            return iDurationField;,2,0,0,0,0,1,0,0,0,2,22,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,963,"            this(julianField, gregorianField, null, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,62,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,964,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,974,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,71,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,975,        },0,0,0,0,1,0,4,0,0,4,1,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,985,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0,0,0,1,2,0,0,0,0,3,71,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,986,            iRangeDurationField = rangeDurationField;,4,0,0,0,0,0,0,0,0,5,41,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,987,        },6,0,0,0,1,0,0,0,0,6,1,5,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,997,        {,0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,998,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0,0,0,1,2,0,0,0,0,3,69,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,999,            if (durationField == null) {,0,0,0,1,3,0,0,0,0,4,28,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1000,"                durationField = new LinkedDurationField(iDurationField, this);",4,0,1,1,2,0,4,2,0,16,62,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1002,            iDurationField = durationField;,4,0,0,0,0,0,6,0,0,11,31,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,1003,        },0,0,0,0,1,0,0,0,0,1,1,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,73,        if (years == 0) {,2,1,0,1,3,0,6,0,0,9,17,1,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,76,"        return set(instant, get(instant) + years);",0,0,0,2,4,1,0,0,0,7,42,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,253,        return MILLIS_PER_YEAR / 2;,2,1,0,0,0,1,0,0,0,3,27,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,6,4,0,1,2,1,0,0,0,10,79,4,0.001,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,224,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,182,        } else if ( workWoyYear > year ) {,4,1,0,1,4,0,0,0,0,5,34,5,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,238,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,8,2,0,3,6,0,0,0,0,11,66,6,0.00099,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,886,        long newInstant = roundFloor(instant);,4,0,0,1,2,0,4,2,0,10,38,3,0.00099,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,887,        if (newInstant != instant) {,4,1,0,1,3,0,0,0,0,5,28,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,888,"            instant = add(newInstant, 1);",4,1,0,1,2,0,4,0,0,10,29,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,890,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,211,        return (year & 3) == 0;,6,2,0,1,2,1,0,0,0,9,23,3,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,219,        int relativeYear = year - 1968;,4,1,0,0,0,0,0,0,0,5,31,5,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,221,        if (relativeYear <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,0,0,0,0,6,89,4,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,80,        int value = super.get(millis);,2,1,0,1,2,0,0,0,0,3,30,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,81,        if (value <= iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.00099,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,2,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,548,                return 7 + (int) ((daysSince19700101 + 4) % 7);,2,3,0,3,6,1,0,0,0,5,47,8,0.00099,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,504,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,6,1,0,1,2,1,2,0,0,9,60,7,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,545,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),8,2,0,2,4,0,0,0,0,11,70,6,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,547,            if (daysSince19700101 < -3) {,2,1,0,1,3,0,0,0,0,4,29,6,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,2,304,        return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,2,301,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,0,0,0,0,4,50,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,134,        int thisWeekyear = get( instant );,2,0,0,1,2,0,4,0,0,6,34,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,135,        if ( thisWeekyear == year ) {,4,1,0,1,3,0,0,0,0,5,29,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,141,        int thisDow = iChronology.getDayOfWeek(instant);,2,0,0,1,2,0,6,0,0,8,48,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,6,0,0,1,2,0,6,0,0,13,65,1,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,2,0,0,1,2,0,6,0,0,8,55,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,6,1,0,1,2,0,0,0,0,7,53,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,2,0,0,1,2,0,6,0,0,8,55,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,156,        if ( setToWeek > maxOutWeeks ) {,4,1,0,1,3,0,0,0,0,5,32,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,163,        long workInstant = instant; // Get a copy,6,0,0,0,0,0,0,0,0,6,41,3,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,169,"        workInstant = iChronology.setYear( workInstant, year );",2,0,0,1,2,0,8,0,0,11,55,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,174,        int workWoyYear = get( workInstant );,6,0,0,1,2,1,12,2,0,21,37,2,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,180,        if ( workWoyYear < year ) {,0,0,0,1,3,0,0,0,0,4,27,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,2,0,0,1,2,0,6,0,0,8,64,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),0,0,0,1,2,0,0,0,0,3,56,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",2,0,0,2,4,0,10,0,0,13,66,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,205,        return workInstant;,2,0,0,0,0,1,0,0,0,2,19,4,0.00098,0,0,-1
defect4j,time,org/joda/time/field/DelegatedDateTimeField,2,110,        return iField.get(instant);,0,0,0,1,2,1,6,0,0,6,27,5,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1051,        if (newZone == null) {,4,2,0,1,3,0,0,0,0,6,22,4,0.00098,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,1054,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,2,0,0,2,4,0,8,0,0,11,59,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,236,        int wow = iChronology.getWeekOfWeekyear(instant);,4,0,0,1,2,0,6,0,0,11,49,3,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,237,        if (wow > 1) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,240,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0,0,0,1,2,1,0,0,0,4,71,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,335,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0,0,0,1,2,0,0,0,0,3,55,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,336,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,337,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0,0,0,3,6,1,0,0,0,10,89,4,0.00098,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,185,        return iMinDaysInFirstWeek;,2,0,0,0,0,1,0,0,0,2,27,4,0.00097,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,2,96,            instant += 1;,0,0,0,0,0,0,0,0,0,0,13,4,0.00097,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,2,97,            return instant - instant % iUnitMillis - iUnitMillis;,8,3,0,0,0,1,0,0,0,11,53,6,0.00097,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,50,public final class JulianChronology extends BasicGJChronology {,2,0,0,0,1,2,0,2,0,6,63,1,0.00097,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,2,164,        return getMaximumValue(instant);,0,0,0,1,2,1,4,0,0,4,32,5,0.00097,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,2,61,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,40,4,0.00097,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,562,            return (DateTimeConstants.MILLIS_PER_DAY - 1),8,2,0,1,2,1,0,0,0,10,45,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,501,        int year = getYear(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,502,"        int week = getWeekOfWeekyear(instant, year);",2,0,0,1,2,0,6,0,0,8,44,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,503,        if (week == 1) {,4,2,1,1,3,0,0,0,0,8,16,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,6,1,0,0,0,0,8,0,0,16,50,3,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,432,                year++;,4,0,0,0,0,0,0,0,0,5,7,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,2,113,        return DateTimeConstants.SUNDAY;,0,0,0,0,0,1,0,0,0,1,32,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,352,            return jan1millis + (8 - jan1dayOfWeek),0,0,0,1,2,1,0,0,0,4,39,4,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,2,104,        return DateTimeConstants.MONDAY;,4,0,0,0,0,1,0,0,0,4,32,5,0.00096,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,422,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,8,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,428,            yearStart += oneYear;,4,0,0,0,0,0,0,0,0,5,21,7,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,430,            if (yearStart <= instant) {,4,1,0,1,3,0,2,0,0,7,27,3,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,516,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,2,4,1,8,0,0,8,52,5,0.00095,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,980,            return instantUTC;,4,0,0,0,0,1,0,2,0,6,18,5,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,153,        if ((base = getBase()) != null) {,2,1,0,3,7,0,2,0,0,7,33,4,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,4,0,0,4,28,5,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",2,1,0,1,2,1,8,0,0,11,74,4,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,524,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,6,2,0,1,2,0,6,0,0,14,55,5,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,525,        if (instant < firstWeekMillis1) {,6,1,0,1,3,0,8,0,0,16,33,3,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,528,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,4,1,0,1,2,0,2,0,0,7,59,5,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,529,        if (instant >= firstWeekMillis2) {,0,0,0,1,3,0,0,0,0,4,34,4,0.00095,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,532,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0,0,0,3,6,1,0,0,0,10,84,4,0.00095,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,2,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,6,5,0,5,10,1,2,0,0,13,71,6,0.00094,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,347,        long jan1millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.00094,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,348,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,2,0,0,1,2,0,4,0,0,6,45,5,0.00094,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,2,350,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,4,2,0,2,5,0,0,0,0,6,48,4,0.00094,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,161,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,2,0,8,39,1,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",2,0,0,1,2,3,0,4,0,10,85,2,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,0,2,0,0,9,45,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,108,"        return getInstance(zone, 4);",2,0,0,1,2,2,4,0,0,7,28,1,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,119,        if (zone == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,123,        synchronized (cCache) {,4,0,0,1,3,1,0,0,0,5,23,1,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,124,            CopticChronology[] chronos = cCache.get(zone);,0,0,0,2,4,0,0,0,0,6,46,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,125,            if (chronos == null) {,4,1,0,1,3,0,4,0,0,10,22,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,126,                chronos = new CopticChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,127,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,130,                chrono = chronos[minDaysInFirstWeek - 1];,0,0,0,1,2,0,0,0,0,3,41,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,134,            },2,0,0,0,1,0,0,0,0,2,1,5,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,135,            if (chrono == null) {,4,1,0,1,3,1,0,0,0,6,21,2,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,136,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,62,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,141,                    chrono = new CopticChronology,2,0,0,0,0,0,0,2,0,5,29,10,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,144,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,209,        int relativeYear = year - 1687;,4,1,0,0,0,0,0,0,0,5,31,5,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,211,        if (relativeYear <= 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,214,            leapYears = (relativeYear + 3) >> 2;,4,2,0,1,2,0,0,0,0,7,36,6,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,223,        long millis = (relativeYear * 365L + leapYears),0,0,0,1,2,0,0,0,0,3,47,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,6,3,0,1,2,1,0,0,0,9,64,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,233,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,238,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,248,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,249,            super.assemble(fields);,4,0,0,1,2,0,0,0,0,4,23,7,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,252,"            fields.year = new SkipDateTimeField(this, fields.year);",8,0,0,1,2,0,0,2,0,11,55,6,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",8,0,0,1,2,0,0,2,0,11,63,6,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,255,            fields.era = ERA_FIELD;,0,0,0,0,0,0,0,0,0,0,23,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",8,0,0,1,2,0,0,4,0,14,65,3,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,257,            fields.months = fields.monthOfYear.getDurationField();,8,0,0,1,2,0,2,0,0,11,54,6,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,259,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,51,public final class CopticChronology extends BasicFixedMonthChronology {,2,0,0,0,1,2,0,2,0,6,71,1,0.00093,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,792,        return getMaximumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.00093,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,59,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,60,    },2,0,0,0,1,0,6,2,0,10,1,6,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,101,        return ((month - 1) * MILLIS_PER_MONTH);,4,2,0,2,4,1,0,0,0,6,40,5,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0,0,0,3,6,1,0,0,0,10,65,4,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,143,        return 13;,2,0,0,0,0,1,4,0,0,6,10,8,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,148,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.00092,0,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,2,158,        return MILLIS_PER_MONTH;,4,0,0,0,0,1,0,0,0,4,24,4,0.00092,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,976,        int offsetOriginal = getOffset(originalInstantUTC);,2,0,0,1,2,0,4,0,0,6,51,5,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,977,        long instantUTC = instantLocal - offsetOriginal;,6,1,0,0,0,0,0,0,0,7,48,5,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,2,0,0,1,2,0,4,0,0,6,52,5,0.0009,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,2,979,        if (offsetLocalFromOriginal == offsetOriginal) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0009,0,0,-1
defect4j,time,org/joda/time/Instant,2,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0009,0,0,-1
defect4j,time,org/joda/time/Instant,2,119,        iMillis = instant;,0,0,0,0,0,0,0,0,0,0,18,4,0.0009,0,0,-1
defect4j,time,org/joda/time/Instant,2,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0009,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,2,171,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,421,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.0009,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,422,            return iField.get(localInstant);,0,0,0,1,2,1,6,0,0,6,32,6,0.0009,0,0,-1
defect4j,time,org/joda/time/Instant,2,256,        return iMillis;,2,0,0,0,0,1,0,0,0,2,15,4,0.00089,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,2,101,        return iField.getUnitMillis();,0,0,0,1,2,1,0,0,0,4,30,4,0.00086,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,2,48,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00085,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,2,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,162,"        super(base, param, minDaysInFirstWeek);",6,0,0,1,2,0,0,0,0,6,39,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",2,0,0,3,6,3,0,12,0,17,116,2,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0,0,0,1,2,0,0,0,0,3,45,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,114,"        return getInstance(zone, 4);",0,0,0,1,2,1,4,0,0,4,28,5,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,125,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,129,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,130,            JulianChronology[] chronos = cCache.get(zone);,0,0,0,2,4,0,0,0,0,6,46,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,131,            if (chronos == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,132,                chronos = new JulianChronology[7];,2,0,0,1,2,0,0,2,0,5,34,8,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,133,"                cCache.put(zone, chronos);",0,0,0,1,2,0,8,0,0,8,26,9,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,136,                chrono = chronos[minDaysInFirstWeek - 1];,6,1,1,1,2,3,0,4,0,17,41,1,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,140,            },0,0,0,0,1,0,0,0,0,1,1,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,141,            if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,142,                if (zone == DateTimeZone.UTC) {,6,1,0,1,3,0,0,0,0,7,31,8,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0,0,0,1,2,0,0,0,0,3,62,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,149,                chronos[minDaysInFirstWeek - 1] = chrono;,4,1,1,1,2,0,0,0,0,8,41,8,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,151,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,152,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,241,        return MIN_YEAR;,8,0,0,0,0,1,0,0,0,9,16,3,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,245,        return MAX_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,249,        return MILLIS_PER_YEAR;,2,0,0,0,0,1,0,0,0,2,23,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,257,        return MILLIS_PER_MONTH;,2,0,0,0,0,1,0,0,0,2,24,4,0.00085,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,2,265,        if (getBase() == null) {,0,1,0,2,5,0,2,0,0,4,24,4,0.00085,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,    },0,0,0,0,1,0,0,0,0,1,1,4,2.77778,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0,0,0,0,0,1,6,0,0,6,18,5,0.92593,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,12,0,0,1,2,0,4,0,0,16,52,1,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0,0,0,0,0,0,0,0,0,0,29,4,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,            return offset;,2,0,0,0,0,1,8,0,0,10,14,9,0.45455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",8,0,0,0,1,0,0,0,0,8,36,3,0.43103,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.43103,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0,0,0,2,4,1,0,0,0,7,79,4,0.26042,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,2,4,1,6,0,0,6,48,5,0.2551,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.24038,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,43,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0,0,0,3,7,0,0,0,0,10,53,4,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,            return offset;,4,0,0,0,0,1,2,2,0,8,14,1,0.22523,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,5,10,0,0,0,0,15,67,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",2,1,0,5,10,0,12,0,0,15,59,3,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",14,2,0,5,10,0,18,0,0,35,59,1,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0,0,0,5,10,0,0,0,0,15,57,4,0.16667,1,1,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0,0,0,0,0,1,0,0,0,1,32,4,0.16667,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.1634,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.15723,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.15723,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,    },0,1,0,0,1,0,4,0,0,6,1,4,0.15723,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.14368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,6,1,0,1,3,0,0,0,0,8,18,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,2,0,0,1,2,0,8,2,0,13,16,1,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0,0,0,0,0,1,10,0,0,12,7,3,0.13298,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,636,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.125,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11161,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",10,0,0,0,1,0,6,2,0,18,46,3,0.11062,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10638,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,4,0,0,1,2,0,0,2,0,6,16,4,0.10593,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,            if (iMaxFields == 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,10,1,0,0,0,0,0,0,0,12,66,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.10549,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,4,1,0,1,4,0,0,0,0,6,26,5,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,2,1,0,0,0,0,0,0,0,3,11,10,0.10163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,4,1,0,1,3,0,0,0,0,5,19,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,6,1,0,0,0,0,0,0,0,8,18,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,60,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",6,6,0,2,4,0,4,0,0,17,52,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,            if (iDayOfWeek == 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",2,0,0,1,2,0,12,0,0,15,34,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",4,1,0,1,2,0,6,0,0,12,35,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,10,1,0,0,0,1,0,0,0,12,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,4,0,0,0,0,0,4,2,0,10,46,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,            Recurrence endRecurrence = iEndRecurrence;,0,0,0,0,0,0,0,0,0,0,42,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,                start = startRecurrence.previous,0,0,0,0,0,0,0,0,0,0,32,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,6,3,0,1,3,0,6,2,0,17,31,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,                end = endRecurrence.previous,0,0,0,0,0,0,0,0,0,0,28,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,                if (instant < 0 && end > 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,12,4,0,2,4,1,0,0,0,16,41,1,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,                long prev = iTailZone.previousTransition(instant);,0,0,0,1,2,0,0,0,0,3,50,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,                if (prev < instant) {,0,0,0,1,3,0,0,0,0,4,21,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,                    return prev;,0,0,0,0,0,1,0,0,0,1,12,4,0.10121,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,1,2,1,0,0,0,4,61,4,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,4,0,0,0,0,1,0,0,0,4,20,5,0.0947,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09434,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,            if (iTailZone != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.09363,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.09294,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,68,            for (; size > 2; size--) {,0,0,0,1,3,0,0,0,0,4,26,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,74,            int d = ((value + 1) * 13421772) >> 27;,0,0,0,2,4,0,0,0,0,6,39,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,6,2,0,5,10,0,0,0,0,8,55,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,78,        } else {,4,0,1,0,2,0,0,4,0,13,8,3,0.09058,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,128,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.08993,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1946,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1947,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1951,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1959,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1961,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08961,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,127,        if (instant >= 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08929,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,12,5,0,1,2,0,0,0,0,19,34,1,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);",0,0,0,1,2,0,0,0,0,3,50,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0,0,0,1,3,0,0,2,0,2,13,8,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1599,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08834,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,2,0,0,1,2,1,6,0,0,8,41,1,0.08834,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0,0,1,1,2,0,0,0,0,9,50,9,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",4,1,0,2,4,0,0,0,0,6,76,7,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1479,            },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1480,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2660,            DateTimePrinter[] elements = iPrinters;,2,1,0,1,2,0,0,0,0,3,39,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2661,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2665,            if (locale == null) {,2,0,0,1,3,0,0,0,0,2,21,5,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2670,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2671,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,0,0,0,6,78,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2674,        },2,0,0,0,1,0,0,0,0,2,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1218,            buf.append(iValue);,0,0,0,1,2,0,0,0,0,3,19,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1219,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08591,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,0,0,0,4,32,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,592,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0,0,0,3,6,0,0,0,0,9,78,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,593,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,594,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.08532,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,469,        long millis = DateTimeUtils.getInstantMillis(instant);,2,0,0,1,2,0,6,0,0,8,54,5,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,470,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0,0,0,1,2,0,0,0,0,3,64,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,471,"        printTo(buf, millis, chrono);",2,0,0,1,2,0,0,0,0,2,29,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,472,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08503,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,628,        DateTimePrinter printer = requirePrinter();,0,0,0,1,2,0,0,0,0,3,43,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,629,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,632,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,633,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,634,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,635,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,6,1,0,3,7,0,0,2,0,9,65,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,641,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,0,0,2,4,0,0,0,0,5,79,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,642,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08418,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,926,            long prev = previousTransition(instantAdjusted);,8,0,0,1,2,0,0,0,0,9,48,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,927,            if (prev < instantAdjusted) {,0,0,0,1,3,0,0,0,0,4,29,4,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,928,                int offsetPrev = getOffset(prev);,18,1,0,1,2,0,4,4,0,27,33,1,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,929,                int diff = offsetPrev - offsetLocal;,8,1,0,0,0,0,0,12,0,21,36,3,0.08389,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,930,                if (instantAdjusted - prev <= diff) {,0,0,0,1,3,0,0,0,0,4,37,4,0.08389,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,83,                digits = 4;,4,1,0,0,0,0,4,0,0,12,11,9,0.08224,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,80,            if (value < 1000) {,4,1,0,1,3,3,0,4,0,13,19,1,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,82,            } else if (value < 10000) {,2,0,0,1,4,0,0,0,0,2,27,6,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,87,            for (; size > digits; size--) {,6,1,0,1,3,0,0,0,0,8,31,7,0.08197,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,10,0,0,10,36,8,0.08197,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,8,2,1,1,2,1,0,0,0,13,50,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,199,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,200,        if (chrono == null) {,2,0,0,1,3,0,6,2,0,10,21,4,0.07669,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,203,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07669,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,9,0.07645,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,196,        if (instant == null) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0753,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.07508,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,63,            for (; size > 1; size--) {,0,1,0,1,3,0,8,0,0,9,26,5,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,64,                buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,9,0.07418,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,66,            buf.append((char)(value + '0'));,16,2,0,3,6,0,12,0,0,33,32,1,0.07418,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,181,        return instant.getMillis();,0,0,0,1,2,1,0,0,0,4,27,4,0.07184,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,551,            } else if (iMode == 's') {,14,2,0,1,4,0,2,2,0,23,26,3,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,554,                offset = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,726,                        daysToAdd -= 7;,2,0,0,0,0,0,0,0,0,3,15,11,0.07163,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0,0,0,2,4,0,0,0,0,6,46,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);",0,0,0,2,4,0,0,0,0,6,47,4,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",2,0,0,2,4,0,10,0,0,13,56,7,0.07143,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,725,                    if (daysToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,20,9,0.07143,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,144,        return localInstant;,2,0,0,0,0,1,0,0,0,2,20,4,0.07102,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,2,1,0,2,4,1,6,0,0,9,73,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1307,            int standardOffset = iStandardOffset;,0,0,0,0,0,0,0,0,0,0,37,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1308,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1309,            Recurrence endRecurrence = iEndRecurrence;,4,0,0,0,0,0,0,2,0,6,42,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1314,                start = startRecurrence.next,2,0,0,0,0,0,0,0,0,2,28,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1322,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1325,                end = endRecurrence.next,12,3,0,0,0,0,0,0,0,15,24,1,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1333,            },0,0,0,0,1,0,0,0,0,1,1,4,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1335,            return (start > end) ? startRecurrence : endRecurrence;,2,0,0,1,2,1,4,0,0,6,55,5,0.07022,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1546,            return iTailZone.getOffset(instant);,2,1,0,1,2,1,0,0,0,3,36,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,138,        DateTimeZone zone = getZone();,8,1,0,1,2,0,4,0,0,14,30,1,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,139,        int offset = zone.getOffsetFromLocal(localInstant);,2,0,0,1,2,0,0,2,0,5,51,6,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,140,        localInstant -= offset;,4,0,0,0,0,0,0,0,0,5,23,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,141,        if (offset != zone.getOffset(localInstant)) {,0,0,0,2,5,0,0,0,0,7,45,4,0.07022,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,6,0,0,6,45,5,0.07003,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,3,178,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06983,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,67,        } else if (value < 100) {,2,1,0,1,4,0,0,0,0,3,25,5,0.06983,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,524,                    return chronology.secondOfMinute();,12,2,0,1,2,1,0,0,0,14,35,1,0.06944,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,162,            periodStart = next;,0,0,0,0,0,0,0,0,0,0,19,4,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",16,0,0,2,4,0,12,8,0,38,57,3,0.06887,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2654,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.06887,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,            yearToUse = thisYear + (monthToUse / iMax);,10,2,0,1,2,0,0,2,0,15,43,3,0.0672,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,            monthToUse = (monthToUse % iMax) + 1;,8,3,0,1,2,0,0,0,0,12,37,1,0.0672,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,667,        DateTimePrinter printer = iPrinter;,0,0,0,0,0,0,0,0,0,0,35,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,668,        if (printer == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,671,        return printer;,4,1,0,0,0,1,8,0,0,14,15,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,        if (months == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,        long timePart = iChronology.getMillisOfDay(instant);,2,0,0,1,2,0,6,0,0,8,52,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,        int thisYear = iChronology.getYear(instant);,2,0,0,1,2,0,6,0,0,8,44,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,8,0,0,10,62,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,        int monthToUse = thisMonth - 1 + months;,6,2,0,0,0,0,0,0,0,8,40,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,        if (monthToUse >= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",2,0,0,1,2,0,10,0,0,12,71,5,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",8,0,0,1,2,0,0,0,0,10,67,1,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,        if (dayToUse > maxDay) {,8,1,0,1,3,0,10,2,0,23,24,3,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,        long datePart =,0,0,0,0,0,0,0,0,0,0,15,4,0.06702,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,        return datePart + timePart;,0,0,0,0,0,1,0,0,0,1,27,4,0.06702,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,925,        } else if (offsetLocal >= 0) {,2,1,0,1,4,0,0,0,0,3,30,5,0.06614,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1202,            int standardOffset = iStandardOffset;,4,0,0,0,0,0,0,0,0,4,37,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1203,            Recurrence startRecurrence = iStartRecurrence;,0,0,0,0,0,0,0,0,0,0,46,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1204,            Recurrence endRecurrence = iEndRecurrence;,10,0,0,0,0,0,0,2,0,13,42,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1209,                start = startRecurrence.next,0,1,0,0,0,0,4,0,0,5,28,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1211,                if (instant > 0 && start < 0) {,4,3,0,1,3,0,0,0,0,7,31,7,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1221,            },6,1,0,0,1,0,4,0,0,12,1,1,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1224,                end = endRecurrence.next,0,0,0,0,0,0,0,0,0,0,24,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1226,                if (instant > 0 && end < 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1236,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1238,            return (start > end) ? end : start;,0,0,0,1,2,1,0,0,0,4,35,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1582,            long end = transitions[transitions.length - 1];,0,0,0,1,2,0,0,0,0,3,47,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1583,            if (instant < end) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1586,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,6,0,0,6,41,6,0.06596,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,574,                if (next <= instant) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);",2,0,0,2,4,0,4,0,0,6,34,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0,0,0,2,4,0,0,0,0,6,52,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);",4,0,0,1,2,0,10,0,0,15,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);",0,0,0,1,2,0,0,0,0,3,34,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0,0,0,2,4,0,0,0,0,6,48,4,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,4,1,0,0,0,3,0,16,0,24,39,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,719,            if (daysToAdd != 0) {,2,1,0,1,3,0,4,0,0,7,21,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,720,                if (iAdvance) {,4,0,0,1,3,0,6,2,0,12,15,1,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",2,1,0,2,4,0,18,0,0,22,53,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,731,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.06579,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,549,            if (iMode == 'w') {,24,2,0,1,3,0,4,6,0,40,19,1,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,558,            instant += offset;,0,0,0,0,0,0,0,0,0,0,18,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0,0,0,1,2,0,0,0,0,3,51,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",2,0,0,2,4,0,10,0,0,12,60,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,563,"            next = chrono.millisOfDay().set(next, 0);",0,0,0,2,4,0,0,0,0,6,41,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",2,0,0,2,4,0,10,0,0,13,52,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,565,"            next = setDayOfMonthNext(chrono, next);",2,0,0,1,2,0,6,0,0,9,39,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,567,            if (iDayOfWeek == 0) {,2,1,0,1,3,0,0,0,0,3,22,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,583,            return next - offset;,2,0,0,0,0,1,6,0,0,8,21,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,672,"                next = setDayOfMonth(chrono, next);",2,0,0,1,2,0,6,0,0,9,35,7,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,682,            },10,0,0,0,1,0,4,2,0,17,1,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,683,            return next;,0,0,0,0,0,1,0,0,0,1,12,4,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,706,            if (iDayOfMonth >= 0) {,16,5,0,1,3,2,0,0,0,23,23,1,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,713,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,1,2,1,10,0,0,10,57,6,0.06562,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,776,            return iSaveMillis;,10,0,0,0,0,1,4,0,0,15,19,1,0.06562,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,3,253,"        return getDurationField().add(instant, value);",6,1,0,2,4,1,0,0,0,8,46,7,0.06562,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,50,        if (value < 0) {,10,1,0,1,3,0,4,0,0,16,16,3,0.06494,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.06494,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06494,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,3,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,1,2,1,0,0,0,4,42,4,0.06427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,951,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,952,        if (iChrono != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,955,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,958,        return chrono;,8,0,0,0,0,1,0,2,0,11,14,1,0.06394,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,907,        final int offsetLocal = getOffset(instantLocal);,0,0,0,1,2,0,4,0,0,4,48,9,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,909,        final long instantAdjusted = instantLocal - offsetLocal;,2,0,0,0,0,0,0,12,0,14,56,4,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,910,        final int offsetAdjusted = getOffset(instantAdjusted);,2,0,0,1,2,1,4,0,0,7,54,4,0.06361,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,912,        if (offsetLocal != offsetAdjusted) {,4,1,0,1,3,0,0,0,0,5,36,4,0.06361,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,3,4,0,0,9,50,2,0.06297,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,59,        if (years == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,62,        int thisYear = get(instant);,2,0,0,1,2,0,4,0,0,6,28,5,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",2,0,0,1,2,0,8,0,0,10,50,5,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,64,"        return set(instant, newYear);",0,0,0,1,2,1,0,0,0,4,29,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,64,        int sum = val1 + val2;,0,0,0,0,0,0,0,0,0,0,22,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0,0,0,3,7,0,0,0,0,10,45,4,0.06188,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,3,70,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.06188,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,3,543,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0,0,0,0,0,0,0,0,0,0,63,4,0.06068,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,3,552,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0,0,0,3,6,1,14,0,0,14,47,5,0.06068,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,0,0,0,4,33,4,0.05938,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.05855,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,3,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.05841,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,164,        return iPrinter;,10,0,0,0,0,1,0,0,0,11,16,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,3,182,        return iParser;,4,0,0,0,0,1,0,0,0,4,15,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2730,            return iParsedLengthEstimate;,4,0,0,0,0,1,4,0,0,8,29,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,4,2,0,10,60,10,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",2,0,0,3,6,0,8,0,0,11,58,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2778,            if (array != null) {,2,1,0,1,3,0,4,0,0,7,20,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2779,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2780,                    list.add(array[i]);,0,0,0,2,4,0,0,0,0,6,19,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2783,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,153,        Object f = getFormatter();,10,3,0,1,2,0,6,4,0,24,26,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,154,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,155,            return (DateTimeParser) f;,6,0,0,1,2,1,0,2,0,9,26,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,217,        if (formatter == null) {,4,3,0,1,3,0,0,0,0,7,24,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,0,0,0,10,62,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,257,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,258,"        return append0(null, parser);",0,0,0,1,2,1,4,0,0,5,29,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,305,        if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,308,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,311,        int length = parsers.length;,0,0,0,0,0,0,8,0,0,8,28,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,312,        if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,321,        for (i = 0; i < length - 1; i++) {,8,2,0,1,3,0,0,0,0,12,34,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,0,0,4,9,0,0,0,0,13,46,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,326,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,328,"        return append0(printer, new MatchingParser(copyOfParsers));",2,0,0,2,4,1,4,2,0,8,59,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,345,        checkParser(parser);,0,0,0,1,2,0,0,0,0,3,20,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,347,"        return append0(null, new MatchingParser(parsers));",2,0,0,2,4,1,2,2,0,8,50,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,357,        if (parser == null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,360,    },4,1,0,0,1,0,0,0,0,5,1,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,384,        iElementPairs.add(printer);,0,0,0,1,2,0,0,0,0,3,27,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,385,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,386,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,464,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,467,        if (numDigits <= 0) {,2,0,0,1,3,0,6,4,0,12,21,9,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,470,"        return append0(new FixedNumber(fieldType, numDigits, false));",4,0,0,2,4,1,2,2,0,9,61,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,77,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,75,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,2,4,1,8,0,0,8,66,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,1,0,2,4,1,8,0,0,11,71,3,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,79,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1150,                    f = parser;,6,0,0,0,0,0,0,0,0,7,11,3,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1171,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2794,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2795,            iParsers = parsers;,6,1,0,0,0,0,0,0,0,8,19,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2796,            int est = 0;,6,1,1,0,0,0,4,0,0,17,12,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2797,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2798,                DateTimeParser parser = parsers[i];,2,0,1,1,2,0,0,2,0,8,35,7,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2799,                if (parser != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2800,                    int len = parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,6,40,10,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2801,                    if (len > est) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2802,                        est = len;,4,0,0,0,0,0,0,0,0,5,10,11,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2805,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2806,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2807,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1522,"            super(fieldType, numDigits, signed, numDigits);",10,1,0,1,2,0,0,0,0,11,47,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1523,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1136,    static final class Constants {,4,0,0,0,1,2,4,2,0,12,30,1,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1138,"            ye = yearElement(),  // year element (yyyy)",2,0,0,2,4,0,2,0,0,4,43,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1139,"            mye = monthElement(), // monthOfYear element (-MM)",0,0,0,2,4,0,0,0,0,6,50,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1140,"            dme = dayOfMonthElement(), // dayOfMonth element (-dd)",2,0,0,2,4,0,8,0,0,10,54,2,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1141,"            we = weekyearElement(),  // weekyear element (xxxx)",2,0,0,2,4,0,2,2,0,6,51,2,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1142,"            wwe = weekElement(), // weekOfWeekyear element (-ww)",4,1,1,2,4,0,0,0,0,8,52,8,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1143,"            dwe = dayOfWeekElement(), // dayOfWeek element (-ee)",2,0,0,2,4,0,2,0,0,4,52,4,0.0576,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1144,"            dye = dayOfYearElement(), // dayOfYear element (-DDD)",0,0,0,2,4,0,0,0,0,6,53,4,0.0576,0,0,-1
