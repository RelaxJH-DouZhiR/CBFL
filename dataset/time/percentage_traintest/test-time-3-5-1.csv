dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/PeriodType,5,481,        if (type == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,482,            type = new PeriodType(,2,0,0,0,1,0,0,2,0,5,22,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,487,            cMillis = type;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,489,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,1,2,1,2,0,0,3,39,5,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,266,            if (this == obj) {,4,2,0,1,3,0,0,0,0,6,18,1,0.04762,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,267,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04762,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,134,        PeriodType type = cYMDTime;,0,0,0,0,0,0,0,0,0,0,27,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,135,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,136,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,146,            cYMDTime = type;,0,0,0,0,0,0,0,0,0,0,16,4,0.04348,0,0,-1
defect4j,time,org/joda/time/PeriodType,5,148,        return type;,4,0,0,0,0,1,4,2,0,10,12,3,0.04348,0,0,-1
defect4j,time,org/joda/time/Period,5,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0,0,0,2,4,0,0,0,0,6,90,4,0.04306,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",2,0,0,1,2,0,8,0,0,11,46,7,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,0,0,0,1,3,0,0,0,0,4,25,4,4.0,1,1,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,14,2,0,1,3,0,10,2,0,28,40,1,4.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,2,0,0,1,2,0,4,0,0,7,37,11,4.0,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,2,0,0,0,0,0,4,0,0,7,45,6,1.6,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,32,6,1.6,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",2,1,0,3,6,1,0,0,0,3,78,4,1.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,1.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,2,1,0,4,8,1,12,0,0,18,62,1,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0,0,0,4,8,1,8,0,0,8,57,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0,0,0,5,10,1,0,0,0,16,95,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0,0,0,5,10,1,0,0,0,16,85,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",2,1,0,3,6,1,6,2,0,11,54,3,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,            super();,2,0,0,1,2,0,6,0,0,9,8,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,            iInstant = instant;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,            iField = field;,4,0,0,0,0,0,0,0,0,5,15,5,1.0,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,2,0,0,1,2,1,0,4,0,6,44,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",8,0,0,4,8,3,10,6,0,28,64,1,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,1,2,1,0,0,0,4,75,4,0.8,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0,0,0,1,3,0,0,0,0,4,21,4,0.8,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,2,2,0,3,7,0,10,0,0,16,33,3,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,2,0,0,0,0,0,0,0,0,2,53,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,4,1,0,1,3,0,0,0,0,5,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,8,1,0,2,4,1,6,0,0,16,44,1,0.36364,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,        if (years == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",2,1,0,1,2,0,4,0,0,8,31,3,0.26667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0,0,0,2,4,0,0,0,0,6,59,4,0.26471,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0,0,0,1,4,0,0,0,0,5,23,4,0.26471,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,            value++;,0,0,0,0,0,0,0,0,0,0,8,4,0.25,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0,0,0,2,5,0,0,0,0,7,38,4,0.22222,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),4,2,0,1,2,1,0,0,0,6,39,6,0.1875,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.18182,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,        super();,2,0,0,1,2,0,10,0,0,14,8,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0,0,0,2,4,0,0,0,0,6,63,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0,0,0,1,2,0,0,0,0,3,78,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,        iChronology = chronology;,8,0,0,0,0,0,12,0,0,21,25,4,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,2,0,0,0,0,0,0,0,0,2,23,9,0.1773,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,    },8,2,0,0,1,0,0,0,0,10,1,5,0.1773,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,2,1,0,1,2,0,0,0,0,3,43,7,0.17647,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,9,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0,0,0,1,2,0,0,0,0,3,51,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0,0,0,1,3,0,0,0,0,4,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,        return iLocalMillis;,0,0,0,0,0,1,0,0,0,1,20,4,0.17241,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,        return newInstant;,2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,        return iChronology;,4,1,0,0,0,1,0,0,0,5,19,3,0.15823,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,            return year;,2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,            return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",2,1,1,1,2,1,0,0,0,5,34,7,0.13333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,1,1,1,2,1,0,0,0,5,57,7,0.12563,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,2,1,0,1,2,0,0,0,0,4,99,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0,0,0,2,4,0,0,0,0,6,50,4,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0,0,0,2,4,0,16,0,0,16,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,2,0,0,2,4,0,10,2,0,14,51,3,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,2,0,0,2,4,0,12,0,0,14,55,1,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12255,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,2,1,0,1,3,0,0,0,0,3,26,7,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,            return instant;,2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,0,0,0,4,46,4,0.11111,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0,0,0,1,3,0,0,0,0,4,18,4,0.10256,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0,0,0,2,4,1,0,0,0,7,32,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",8,0,0,1,3,1,4,2,0,16,55,2,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",10,0,0,2,4,0,10,4,0,24,86,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,34,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,2,0,0,2,4,0,8,0,0,11,63,4,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,        iChronology = chronology;,6,0,0,0,0,0,4,2,0,13,25,3,0.1,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,342,    },2,1,1,0,1,0,8,4,0,18,1,3,0.1,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",8,1,0,2,4,0,18,0,0,27,72,1,0.09524,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.09524,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0,0,0,1,2,1,6,0,0,6,36,8,0.08333,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,4,4,0,1,2,1,8,0,0,17,32,3,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1058,            return oldInstant;,2,0,0,0,0,1,0,0,0,2,18,6,0.07377,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,6,0,0,2,4,1,8,0,0,14,66,5,0.06667,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,4,1,0,1,2,0,6,0,0,12,35,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,2,0,0,2,4,0,6,2,0,10,51,4,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,1,2,0,12,2,0,31,77,1,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",4,3,0,1,2,0,0,0,0,9,58,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,2,0,0,2,4,0,0,0,0,3,50,7,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",6,0,0,1,2,1,0,2,0,8,37,3,0.05882,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0,0,0,0,0,1,0,0,0,1,42,4,0.05634,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",4,3,0,3,6,0,16,0,0,25,79,3,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,2,1,0,0,0,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,2,1,1,1,2,0,0,0,0,5,33,8,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,6,0,0,0,0,0,0,0,0,6,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05556,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,531,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05519,0,0,-1
defect4j,time,org/joda/time/base/BaseLocal,6,48,    },2,1,0,0,1,0,0,0,0,3,1,5,0.05519,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,632,        if (this == partial) {,6,2,0,1,3,0,8,0,0,16,22,1,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,635,        if (partial instanceof LocalDate) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,636,            LocalDate other = (LocalDate) partial;,0,0,0,1,2,0,0,0,0,3,38,4,0.05479,0,0,-1
defect4j,time,org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,4,0,0,2,5,0,4,0,0,8,44,7,0.05479,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,4,1,0,0,0,0,0,0,0,6,30,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,5,24,6,0.05,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,229,                leapYears++;,0,0,0,0,0,0,0,0,0,0,12,4,0.05,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,41,        StringBuilder buf = new StringBuilder(),0,0,0,1,2,0,0,0,0,3,39,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,63,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.04878,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,4,1,0,1,3,0,0,0,0,5,22,3,0.04327,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04327,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,188,                if (isLeapYear(year)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.04318,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,2,0,0,0,0,0,0,0,0,3,12,10,0.03863,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,55,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03704,0,0,-1
defect4j,time,org/joda/time/field/AbstractReadableInstantFieldProperty,6,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,0,4,0,0,4,27,7,0.03551,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,6,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,50,4,0.03279,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,6,378,        return iName;,2,0,0,0,0,1,0,0,0,2,13,4,0.03226,0,0,-1
defect4j,time,org/joda/time/Instant,6,144,        return this;,2,0,1,0,0,1,0,4,0,8,12,4,0.03045,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,8,0,0,11,46,1,0.03045,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,54,        super();,6,1,0,1,2,0,4,0,0,12,8,4,0.027,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,6,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.027,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,8,7,0,4,8,0,0,0,0,16,71,6,0.02629,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,8,4,0,1,2,0,4,0,0,19,36,1,0.0252,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",20,3,0,2,4,0,4,4,0,32,105,1,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,511,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,512,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",12,1,0,2,4,0,4,2,0,21,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",18,0,0,2,4,0,8,2,0,30,99,3,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,515,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,96,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,516,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,90,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,102,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,518,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0,0,0,2,4,0,0,0,0,6,105,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,519,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0,0,0,1,3,0,0,0,0,4,73,4,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",10,0,0,2,4,0,4,2,0,17,99,6,0.02518,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,6,131,            instant = iChronology.getYearMillis(year + 1);,0,0,0,1,2,0,0,0,0,3,46,4,0.02518,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,886,        long newInstant = roundFloor(instant);,0,0,0,1,2,0,0,0,0,3,38,4,0.02515,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,6,887,        if (newInstant != instant) {,0,0,0,1,3,0,0,0,0,4,28,4,0.02515,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,4,0,0,2,4,0,0,2,0,6,78,5,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,2,0,0,2,4,0,4,0,0,7,50,4,0.17391,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,16,0,0,0,1,0,14,6,0,38,55,3,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,0.17391,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0,0,0,0,1,0,0,0,0,1,36,4,0.10811,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,    },8,1,1,0,1,0,10,8,0,31,1,3,0.10811,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,0,0,0,36,4,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09756,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0,0,0,0,0,0,0,0,0,0,17,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,10,1,1,1,2,0,4,0,0,18,15,3,0.07273,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,            year--;,2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,4,0,0,5,36,12,0.0678,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,4,2,0,1,3,0,0,0,0,6,18,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,6,1,0,0,0,0,0,0,0,8,31,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,4,1,0,0,0,0,0,0,0,6,26,3,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),6,0,0,1,2,0,0,0,0,6,36,5,0.05,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,4,1,0,1,3,0,0,0,0,5,18,4,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0,0,0,0,0,1,0,0,0,1,11,4,0.04651,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),4,0,0,1,2,0,6,4,0,14,39,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0,0,0,1,2,1,8,0,0,9,22,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0,0,0,2,4,1,0,0,0,7,47,4,0.04,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0,0,0,5,11,0,0,0,0,16,78,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0,0,0,0,1,1,0,0,0,2,55,4,0.03738,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",8,1,0,1,2,1,6,0,0,15,47,1,0.03636,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0,0,0,1,2,1,0,0,0,4,31,4,0.03361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,2,0,0,0,0,0,0,2,0,4,17,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },2,0,0,0,1,0,8,0,0,11,1,6,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0,0,0,1,2,0,0,0,0,3,74,4,0.03077,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,4,1,1,1,2,0,0,0,0,7,31,6,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,28,5,0.0303,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,8,1,0,0,0,1,0,0,0,10,16,5,0.0303,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,        return iName;,4,0,0,0,0,1,0,0,0,5,13,1,0.0226,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,                break;,2,0,0,0,0,0,10,0,0,12,6,5,0.01923,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01887,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,4,1,1,1,3,0,0,2,0,11,20,1,0.01709,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,                    i--;,2,1,0,0,0,0,0,0,0,3,4,5,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01569,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,8,1,0,1,3,0,6,0,0,17,25,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,6,3,0,1,3,0,4,0,0,15,16,3,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,2,0,0,1,2,0,18,0,0,20,14,1,0.01563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,2,1,0,1,2,0,6,0,0,9,34,1,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,0,0,0,3,40,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,        },4,1,0,0,1,0,0,0,0,5,1,3,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.01429,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,2,0,0,1,2,1,4,0,0,7,42,7,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,4,0,0,2,5,0,0,0,0,5,47,5,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,6,0,0,0,0,0,0,2,0,9,35,3,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,2,0,0,1,3,3,4,0,0,9,24,2,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",10,1,0,1,2,0,6,2,0,21,33,1,0.01423,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,                return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0,0,0,0,0,0,0,0,0,0,33,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.01394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,2,0,0,0,0,1,0,2,0,5,20,6,0.01384,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0,0,0,1,2,1,0,0,0,4,23,4,0.01375,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,68,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,4,0,0,2,4,0,8,2,0,14,64,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,6,1,0,2,4,0,0,2,0,10,63,3,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,0,0,3,7,0,0,0,0,10,77,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",6,1,1,2,4,0,0,0,0,12,49,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,5,1,5,11,0,6,0,0,35,63,1,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,2,0,0,2,5,0,0,0,0,2,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0,0,0,0,0,1,0,2,0,2,14,6,0.01351,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01347,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,4,0,0,1,2,0,4,0,0,9,30,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,7,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,10,1,1,1,3,0,0,0,0,14,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,6,2,0,10,45,6,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,4,0,1,1,2,0,0,2,0,9,16,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,2,0,0,1,2,0,14,0,0,16,30,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,10,0,0,1,2,0,0,2,0,12,25,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,6,4,0,1,3,0,0,0,0,10,12,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,4,1,0,1,2,0,8,0,0,13,40,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,10,1,1,1,2,0,0,0,0,14,20,1,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,1,0,1,3,0,0,0,0,8,51,3,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.01342,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,3,0,12,0,17,112,2,0.01329,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.01329,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,225,    },4,1,0,0,1,0,0,0,0,5,1,4,0.01311,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0,0,0,0,1,0,0,0,0,1,46,4,0.01303,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,2,0,0,1,2,0,6,0,0,8,31,6,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,4,0,0,0,0,0,0,0,0,5,16,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1247,            if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01278,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,8,5,0,4,8,0,4,0,0,20,63,9,0.0127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1240,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01266,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1359,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1367,            if (length >= 9) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1372,                int i = position;,0,0,0,0,0,0,0,0,0,0,17,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1373,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },4,1,0,0,1,0,0,0,0,5,1,6,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,4,0,0,0,0,0,0,0,0,5,19,7,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1382,                while (i < position) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1385,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1390,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,6,1,0,0,0,1,0,0,0,8,16,1,0.0125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,6,0,0,1,2,0,6,2,0,15,40,3,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,346,        int count = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,30,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,347,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,351,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,352,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,363,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,419,            for (int i=0; i<high; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,262,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,6,3,0,0,0,0,0,0,0,9,41,10,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,274,        iSavedState = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,2,0,1,1,2,0,0,0,0,7,38,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,276,        iSavedFieldsCount = savedFieldsCount + 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,468,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,6,0,0,0,0,0,0,0,0,8,15,1,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,471,            iLocale = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01238,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,4,0,0,1,2,0,0,2,0,6,37,5,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,8,1,0,1,3,0,10,2,0,21,23,1,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,2,0,0,0,0,0,0,0,0,3,26,6,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,4,3,0,1,3,0,4,0,0,11,44,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",2,0,0,2,4,0,0,0,0,2,57,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,2743,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01212,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1356,                if (c < '0' || c > '9') {,0,0,0,1,3,0,0,0,0,4,25,4,0.01208,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1332,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1333,            int length = 0;,0,0,0,0,0,0,4,0,0,4,15,5,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1334,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,6,1,0,1,2,0,4,0,0,11,40,8,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,18,11,0,2,5,0,6,0,0,37,55,1,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1362,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,932,        return parser;,4,1,0,0,0,1,0,0,0,5,14,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,120,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,73,    private SavedField[] iSavedFields = new SavedField[8];,0,0,0,2,4,0,0,0,0,6,54,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,121,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,2,0,0,1,2,0,4,0,0,7,25,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,4,0,0,1,2,0,8,0,0,14,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,4,0,0,0,0,0,0,0,0,5,23,4,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,6,0,0,0,0,0,0,0,0,9,27,3,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,128,    },4,0,0,0,1,0,0,0,0,5,1,5,0.01105,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,8,0,0,0,0,0,0,4,0,13,32,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,4,1,0,0,0,1,0,0,0,5,24,1,0.01064,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.01058,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,9,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,4,0,1,0,0,1,0,0,0,6,24,3,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,660,            buf.append('-');,4,0,0,1,2,0,4,2,0,10,16,3,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,661,            offset = -offset;,4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,383,            zone = ref.get();,2,0,0,1,2,0,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,384,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,385,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,0,0,3,7,0,0,0,0,10,47,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0,0,0,1,3,0,0,0,0,4,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,634,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,2,0,0,4,8,1,10,4,0,18,72,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0,0,0,1,3,0,10,0,0,10,31,7,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,2,0,0,0,0,1,4,0,0,8,24,3,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0,0,0,1,3,0,0,0,0,4,46,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,        int offset = 0;,6,0,0,0,0,0,4,0,0,11,15,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0,0,0,0,0,0,0,0,0,0,38,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,10,2,0,1,3,0,0,0,0,12,25,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,293,        },6,0,0,0,1,0,10,0,0,17,1,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0,0,0,1,2,1,0,0,0,4,31,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0,0,0,1,3,0,0,0,0,4,62,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0,0,0,1,2,0,0,0,0,3,38,4,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",6,0,0,1,2,1,6,0,0,13,41,3,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,8,0,0,0,0,0,0,0,0,10,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0,0,0,1,4,0,0,0,0,5,22,4,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,2,1,0,0,0,0,0,0,0,3,12,5,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,10,5,0,0,0,0,10,0,0,28,24,1,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,6,0,0,0,0,0,0,0,0,8,11,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0,0,0,0,0,0,8,0,0,8,8,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,4,0,0,0,0,0,0,0,0,5,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0,0,0,0,0,0,2,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,4,1,0,0,0,1,0,0,0,5,16,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,16,0,0,21,55,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,4,1,0,1,3,0,0,0,0,6,28,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,8,4,0,1,3,0,6,0,0,21,25,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,8,2,0,1,2,0,10,0,0,23,40,3,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,658,            buf.append('+');,14,1,1,1,2,0,4,4,0,27,16,1,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0,0,0,1,2,0,0,0,0,3,71,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0,0,0,1,2,0,8,0,0,8,56,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",8,0,0,1,2,0,0,2,0,12,55,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,390,        return zone;,2,0,0,0,0,1,4,0,0,6,12,3,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,2,0,0,1,3,0,0,0,0,2,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,38,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,4,1,0,1,3,0,0,0,0,5,18,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,0,0,0,0,0,0,0,55,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",4,2,0,1,2,0,8,0,0,14,47,3,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,59,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,669,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,8,0,0,8,49,5,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,18,2,0,0,0,0,4,0,0,26,56,1,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,8,673,            return buf.toString();,2,0,0,1,2,1,6,0,0,8,22,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,8,1,0,2,4,0,0,0,0,9,39,6,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,61,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,8,123,        return (int) total;,8,5,0,1,2,1,4,0,0,20,19,9,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,18,8,1,0,0,0,16,4,0,53,19,1,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,4,0,0,0,0,0,0,0,0,5,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,197,    },2,1,0,0,1,0,0,0,0,4,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,4,0,0,1,3,0,0,0,0,4,17,9,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,2,0,0,1,2,0,0,2,0,5,37,6,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,4,2,0,1,3,0,0,0,0,6,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,10,1,0,0,0,0,0,0,0,12,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.00495,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },6,0,0,0,1,0,0,0,0,6,1,4,0.08333,1,1,-1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,2,0,0,0,0,0,0,0,0,4,16,7,0.05,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,1,2,1,0,0,0,4,35,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,0,0,0,1,2,0,0,0,0,3,29,4,0.03448,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,2,0,1,1,3,0,0,2,0,8,31,10,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,0,0,0,1,3,0,0,0,0,4,31,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,619,    },2,0,0,0,1,0,4,0,0,6,1,5,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,7,49,3,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,1,2,0,0,0,0,3,39,4,0.03333,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.03125,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01754,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,0,6,0,0,7,5,6,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01639,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",14,0,0,1,2,0,10,2,0,29,67,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,2,0,0,1,4,0,4,2,0,10,34,3,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,4,1,0,1,2,1,4,0,0,9,31,1,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,4,0,0,0,0,0,8,0,0,14,17,1,0.01282,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,0,0,0,0,0,0,0,0,0,0,24,4,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,0,0,0,0,0,0,0,0,0,0,8,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",20,3,0,2,5,0,6,0,0,31,40,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,14,3,0,0,0,0,4,2,0,24,51,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,4,0,0,1,2,0,6,2,0,14,26,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,6,1,0,1,4,0,0,0,0,8,23,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0,0,0,2,4,0,8,0,0,8,63,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",4,1,0,2,4,0,10,0,0,15,55,6,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,10,2,0,1,3,0,4,0,0,17,28,1,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,6,1,0,1,2,0,4,0,0,11,40,8,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,0,0,0,1,3,0,8,0,0,8,25,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,2,0,0,0,0,0,0,0,0,3,9,7,0.01099,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,2,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,0,0,0,1,2,0,0,0,0,3,40,4,0.01099,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0,0,0,4,8,1,0,0,0,13,71,4,0.01099,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01053,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,6,1,0,0,0,1,0,0,0,7,24,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",2,0,0,1,2,0,0,8,0,11,71,6,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,4,0,0,1,2,0,4,0,0,9,17,1,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",2,0,0,2,4,0,6,4,0,12,65,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,2,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,2,1,0,1,2,0,0,0,0,3,31,5,0.01042,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.01042,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,58,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,56,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,8,4,0,1,3,0,4,0,0,16,18,4,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,7,0.01031,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,0,0,0,2,4,0,0,0,0,6,39,4,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,28,8,0,1,3,0,16,2,0,57,61,1,0.01031,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,4,0,0,1,2,1,0,0,0,5,19,6,0.01031,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,0,0,0,0,0,0,0,0,0,0,17,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },2,0,1,0,1,0,0,2,0,8,1,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,381,            millis -= iOffset;,0,0,0,0,0,0,0,0,0,0,18,4,0.00781,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,6,2,0,1,3,0,0,0,0,8,17,5,0.00725,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,6,0,0,7,40,9,0.00649,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2278,            int limit = text.length() - position;,0,0,0,1,2,0,0,0,0,3,37,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2281,            if (iZeroOffsetParseText != null) {,0,0,0,1,3,0,0,0,0,4,35,4,0.00571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,12,2,0,2,5,0,4,0,0,19,30,1,0.00543,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,4,0,0,0,0,0,6,0,0,11,17,3,0.00498,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,4,2,0,12,56,1,0.00495,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,9,740,        DateTimeParser parser = requireParser();,0,0,0,1,2,0,0,0,0,3,40,4,0.0045,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);",4,0,0,1,2,0,0,0,0,4,36,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,335,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",0,0,0,3,6,0,0,0,0,9,55,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,2,0,0,2,5,3,10,4,0,19,80,1,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,395,        return 2;,2,0,0,0,0,1,6,0,0,8,9,9,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,410,            return chrono.monthOfYear();,0,0,0,1,2,1,4,0,0,4,28,6,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,412,            return chrono.dayOfMonth();,2,0,0,1,2,1,0,0,0,4,27,7,2.0,0,0,-1
defect4j,time,org/joda/time/MonthDay,10,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,43,5,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,                return iChronology.getDaysInMonthMax(month);,6,1,0,1,2,1,8,0,0,16,44,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",2,0,0,1,2,0,8,0,0,11,112,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,4,0,0,4,42,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,        int[] indexRef = new int[1];,8,1,0,2,4,0,4,0,0,13,28,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,        for (int i=0; i<length; i++) {,14,1,0,1,3,0,0,2,0,18,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,            indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);",2,0,0,1,2,0,14,2,0,18,45,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,            i = indexRef[0];,12,0,1,1,2,0,4,2,0,22,16,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,            if (tokenLen == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,            char c = token.charAt(0);,0,0,0,1,2,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,            switch (c) {,2,0,0,1,3,0,0,0,0,2,12,6,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,12,0,0,14,36,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,                break;,14,1,0,0,0,0,4,6,0,26,6,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,14,0,0,14,35,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,                if (sub.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,                    builder.appendLiteral(new String(sub));,0,0,0,2,4,0,0,0,0,6,39,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,                break;,2,1,0,0,0,0,0,0,0,3,6,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,        StringBuilder buf = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,40,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,1,20,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,        int length = pattern.length();,4,1,0,1,2,0,4,0,0,9,30,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,                if (peek == c) {,4,1,0,1,3,0,0,0,0,5,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,                    i++;,18,0,0,0,0,0,4,2,0,27,4,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,            buf.append('\'');,0,0,0,1,2,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,            boolean inLiteral = false;,2,0,0,0,0,0,0,0,0,3,26,7,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,            for (; i < length; i++) {,2,1,0,1,3,0,0,0,0,3,25,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,                if (c == '\'') {,2,1,0,1,3,0,0,0,0,4,16,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,                    i--;,2,0,0,0,0,0,0,0,0,3,4,11,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,                    break;,6,1,0,0,0,0,2,2,0,11,6,1,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,                    buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,        indexRef[0] = i;,2,0,1,1,2,0,0,0,0,5,16,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,        return buf.toString();,0,0,0,1,2,1,4,0,0,4,22,5,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,        synchronized (cPatternedCache) {,2,0,0,1,3,0,0,0,0,2,32,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0,0,0,1,2,0,0,0,0,3,66,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,10,0,0,12,33,3,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,        return formatter;,6,1,0,0,0,1,8,0,0,15,17,1,2.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,            return instant; // the easy case,2,0,0,0,0,1,0,0,0,2,32,6,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,            int subtrahendDom = iChronology.getDayOfMonth,2,0,0,0,0,0,4,0,0,6,45,7,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,            if (subtrahendDom > minuendDom) {,4,1,0,1,3,0,0,0,0,5,33,6,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,        if (ldp == null) {,0,0,0,1,3,0,0,0,0,4,18,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,        return ldp;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,        return withZone(DateTimeZone.UTC);,0,0,0,1,2,1,0,0,0,4,34,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,        if (iZone == zone) {,0,0,0,1,3,0,0,0,0,4,20,4,0.66667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0,0,0,0,1,1,0,0,0,2,56,4,0.66667,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);",2,0,0,1,2,1,8,0,0,11,47,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,        int size = partial.size();,0,0,0,1,2,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,        for (int i = 0; i < size; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,                int month = values[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,                for (int j = 0; j < size; j++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,0,0,3,7,0,0,0,0,10,58,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,        switch (text.length()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,                return append0(new StringLiteral(text));,0,0,0,2,4,1,0,0,0,7,40,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",8,1,0,2,4,1,2,2,0,14,64,5,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,2,4,1,0,0,0,7,66,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",8,2,1,2,4,1,14,0,0,29,66,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,8,0,0,10,71,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,79,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,        },2,0,0,0,1,0,0,0,0,2,1,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,        if (dpe == null) {,10,1,0,1,3,0,6,2,0,22,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,            dpe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,6,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,        return dpe;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1614,        if (we == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1619,        return we;,0,0,0,0,0,1,0,0,0,1,10,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,        if (wwe == null) {,10,2,0,1,3,0,0,0,0,13,18,1,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,3,36,7,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1629,        return wwe;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1633,        if (dwe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,            dwe = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,2,0,6,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,        return dwe;,4,0,0,0,0,1,0,0,0,4,11,3,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,        if (dye == null) {,2,0,0,1,3,0,8,0,0,10,18,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1649,        return dye;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,        Object f = getFormatter();,2,0,0,1,2,0,6,0,0,9,26,9,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,        if (isParser(f)) {,8,2,0,2,5,0,0,0,0,10,18,3,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,            return (DateTimeParser) f;,6,4,0,1,2,1,4,0,0,14,26,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,        if (printer != null) {,2,0,0,1,3,0,0,0,0,2,22,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,308,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,        int length = parsers.length;,4,0,0,0,0,0,0,4,0,8,28,10,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,312,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,321,        for (i = 0; i < length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,1,0,4,9,0,0,0,0,7,46,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,326,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,8,0,0,8,30,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));",12,1,0,2,4,1,4,2,0,20,59,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0,0,0,3,6,0,0,0,0,9,63,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,347,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,357,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1150,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2794,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2795,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2797,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2798,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,                if (parser != null) {,14,2,0,1,3,0,8,4,0,30,21,1,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2800,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2801,                    if (len > est) {,0,0,0,1,3,0,0,0,0,4,16,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2802,                        est = len;,0,0,0,0,0,0,0,0,0,0,10,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2805,            },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2806,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2807,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2623,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2624,                iPrintedLengthEstimate = 0;,0,0,0,0,0,0,0,0,0,0,27,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,364,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,367,        DurationFieldType lastType = null;,2,1,0,0,0,0,0,0,0,3,34,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,368,        for (int i = 0; i < partial.size(); i++) {,16,1,0,2,5,0,8,0,0,27,42,3,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,369,            DateTimeField loopField = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,46,5,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,370,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,371,                if (loopField.getRangeDurationField().getType() != lastType) {,10,0,0,3,7,0,18,0,0,30,62,1,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,375,            lastType = loopField.getDurationField().getType();,0,0,0,2,4,0,0,0,0,6,50,4,0.4,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,10,377,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,        if (start == null || end == null) {,14,3,0,1,3,0,4,2,0,24,35,4,0.4,1,1,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,        if (start.size() != end.size()) {,4,1,0,3,7,0,8,0,0,14,33,1,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,95,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,55,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,96,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,0,0,3,7,0,0,0,0,10,51,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,100,        if (DateTimeUtils.isContiguous(start) == false) {,0,0,0,2,5,0,0,0,0,7,49,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,2,0,0,3,6,0,10,2,0,14,81,4,0.4,0,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",2,0,0,4,8,0,18,0,0,20,84,5,0.4,1,0,-1
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,        return values[0];,20,2,0,1,2,1,4,4,0,32,17,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,        return MIN;,10,0,0,0,0,1,0,4,0,15,11,1,0.4,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,344,        return iMax;,0,0,0,0,0,1,0,0,0,1,12,4,0.4,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,486,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,        if (maxDigits < minDigits) {,2,0,0,1,3,0,2,0,0,5,28,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,495,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1585,        if (ye == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1590,        return ye;,0,0,0,0,0,1,0,0,0,1,10,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,        if (mye == null) {,8,2,0,1,3,0,0,2,0,13,18,3,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,        return mye;,2,0,0,0,0,1,0,0,0,3,11,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,        if (dme == null) {,2,0,0,1,3,0,0,0,0,2,18,4,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,6,0,0,8,36,6,0.36364,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,        return dme;,2,0,0,0,0,1,0,2,0,5,11,6,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",2,0,0,2,5,0,0,0,0,2,57,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,10,242,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,173,        return iParser;,0,0,0,0,0,1,0,0,0,1,15,4,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,155,        if (start instanceof LocalDate && end instanceof LocalDate)   {,12,2,0,1,3,0,0,6,0,21,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Months,10,162,        return Months.months(amount);,0,0,0,1,2,1,6,0,0,6,29,5,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,135,        if (start instanceof LocalDate && end instanceof LocalDate)   {,10,1,0,1,3,0,0,4,0,16,63,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);",4,1,0,1,2,0,14,2,0,21,61,1,0.33333,0,0,-1
defect4j,time,org/joda/time/Days,10,142,        return Days.days(amount);,0,0,0,1,2,1,0,0,0,4,25,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);",16,2,0,1,2,0,0,0,0,18,42,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1464,            iMinPrintedDigits = minPrintedDigits;,0,0,0,0,0,0,0,0,0,0,37,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1465,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1468,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,            super();,10,1,0,1,2,0,8,0,0,20,8,1,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1321,            iMaxParsedDigits = maxParsedDigits;,0,0,0,0,0,0,0,0,0,0,35,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,            iSigned = signed;,4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,        },6,0,0,0,1,0,8,4,0,18,1,3,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1326,            return iMaxParsedDigits;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,217,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());",6,2,0,3,6,1,0,0,0,8,62,5,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,383,        iFormatter = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.33333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,384,        iElementPairs.add(printer);,0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,        int size = period.size();,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,        int[] values = new int[size];,16,3,0,2,4,0,10,0,0,29,29,3,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,        if (startInstant != endInstant) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,            for (int i = 0; i < size; i++) {,18,2,0,1,3,0,4,0,0,26,32,6,1.0,0,0,-1
