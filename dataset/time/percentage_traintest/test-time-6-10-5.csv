dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/base/AbstractPeriod,13,137,        return getPeriodType().indexOf(type);,0,0,0,2,4,1,6,0,0,6,37,5,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,648,"        for (int i = 0, isize = size(); i < isize; i++) {",4,0,0,2,5,0,0,2,0,6,49,4,0.00377,0,0,-1
defect4j,time,org/joda/time/PeriodType,13,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,4,0,0,15,24,1,0.00377,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,66,            cStandard = new PeriodFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,40,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,85,        return cStandard;,0,0,0,0,0,1,0,0,0,1,17,4,0.00373,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0,0,0,1,2,0,0,0,0,3,37,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,501,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,555,        return appendSuffix(new SimpleAffix(text));,2,0,0,2,4,1,4,0,0,7,43,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,652,"        return appendSeparator(text, text, null, false, true);",0,0,0,1,2,1,6,0,0,9,54,4,0.00366,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,552,        if (text == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00365,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1602,                iParsedForms = new String[] {text};,0,0,0,2,4,0,0,0,0,6,35,4,0.00364,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,31,    private static final double LOG_10 = Math.log(10);,2,0,0,1,2,0,4,0,0,7,50,5,0.00364,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,859,        SimpleAffix(String text) {,6,0,0,1,3,0,4,2,0,12,26,1,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,860,            iText = text;,0,0,0,0,0,0,0,0,0,0,13,4,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,861,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00361,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,228,        if (text == null) {,8,1,0,1,3,0,0,4,0,14,19,1,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,231,        clearPrefix();,0,0,0,1,2,0,2,0,0,2,14,5,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,232,        Literal literal = new Literal(text);,0,0,0,1,2,0,0,0,0,3,36,4,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,233,"        append0(literal, literal);",0,0,0,1,2,0,6,0,0,6,26,5,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,234,        return this;,4,0,0,0,0,1,0,2,0,7,12,6,0.00351,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1544,        Literal(String text) {,4,0,0,1,3,0,0,2,0,6,22,3,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1545,            iText = text;,4,0,0,0,0,0,0,0,0,5,13,5,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1546,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0035,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1541,"        static final Literal EMPTY = new Literal("""");",2,0,0,1,2,2,0,4,0,9,45,3,0.0035,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,13,319,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00333,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,2,1,0,2,4,0,8,0,0,12,62,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,6,0,0,2,4,0,2,4,0,12,61,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,605,        clearPrefix();,0,0,0,1,2,0,0,0,0,3,14,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",0,0,0,2,4,0,0,0,0,6,87,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0,0,0,2,4,0,0,0,0,6,54,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",0,0,0,2,4,0,0,0,0,6,54,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,609,        iFieldFormatters[newField.getFieldType()] = newField;,4,0,1,2,4,0,4,2,0,13,53,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,611,        return this;,4,1,0,0,0,1,0,0,0,5,12,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1064,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",14,1,0,1,3,0,0,4,0,20,63,1,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1065,            iMinPrintedDigits = field.iMinPrintedDigits;,6,0,0,0,0,0,14,0,0,21,44,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1066,            iPrintZeroSetting = field.iPrintZeroSetting;,0,0,0,0,0,0,0,0,0,0,44,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1067,            iMaxParsedDigits = field.iMaxParsedDigits;,0,0,0,0,0,0,0,0,0,0,42,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1068,            iRejectSignedValues = field.iRejectSignedValues;,0,0,0,0,0,0,0,0,0,0,48,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1069,            iFieldType = field.iFieldType;,4,0,0,0,0,0,0,0,0,4,30,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1070,            iFieldFormatters = field.iFieldFormatters;,6,0,0,0,0,0,0,0,0,7,42,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1071,            iPrefix = field.iPrefix;,16,1,0,0,0,0,0,0,0,19,24,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1072,            if (field.iSuffix != null) {,4,1,0,1,3,0,0,0,0,5,28,5,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1075,            iSuffix = suffix;,0,0,0,0,0,0,0,0,0,0,17,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1076,        },8,0,0,0,1,0,4,0,0,13,1,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1531,            return iFieldType;,0,0,1,0,0,1,6,0,0,11,18,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,463,        appendField(MINUTES);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,464,        return this;,14,0,1,0,0,1,8,2,0,29,12,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,591,        if (iElementPairs.size() > 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,599,        if (originalPrinter == null || originalParser == null ||,0,0,0,0,1,0,0,0,0,1,56,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,730,        if (text == null || finalText == null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,734,        clearPrefix();,0,0,0,1,2,0,0,0,0,3,14,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,737,        List<Object> pairs = iElementPairs;,4,0,0,0,0,0,0,4,0,8,35,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,738,        if (pairs.size() == 0) {,2,1,0,2,5,0,12,0,0,16,24,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,750,        Separator lastSeparator = null;,4,0,0,0,0,0,0,2,0,6,31,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,751,        for (i=pairs.size(); --i>=0; ) {,0,0,0,2,5,0,0,0,0,7,32,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,752,            if (pairs.get(i) instanceof Separator) {,0,0,0,2,5,0,0,0,0,7,40,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,757,            i--;  // element pairs,6,0,0,0,0,0,0,0,0,8,22,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,761,        if (lastSeparator != null && pairs.size() == 0) {,2,3,0,2,5,0,4,0,0,9,49,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,764,            Object[] comp = createComposite(pairs);,2,0,0,2,4,0,4,2,0,8,39,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,765,            pairs.clear();,0,0,0,1,2,0,4,0,0,4,14,7,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,766,            Separator separator = new Separator(,2,0,0,0,1,0,0,4,0,6,36,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,770,            pairs.add(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,771,            pairs.add(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,774,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,800,            Separator sep = (Separator) elementPairs.get(0);,2,0,0,2,4,0,4,4,0,10,48,6,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,801,            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {,0,0,0,1,3,0,0,0,0,4,60,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,802,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",2,0,0,2,4,0,12,2,0,16,86,8,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,803,"                sep = sep.finish(f.getPrinter(), f.getParser());",0,0,0,3,6,0,0,0,0,9,48,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,804,"                return new PeriodFormatter(sep, sep);",6,0,0,1,2,1,2,4,0,12,37,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1595,"                boolean useBefore, boolean useAfter) {",4,0,0,0,2,0,0,0,0,4,38,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1596,            iText = text;,4,0,0,0,0,0,0,0,0,5,13,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1597,            iFinalText = finalText;,0,0,0,0,0,0,0,0,0,0,23,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1599,            if ((finalText == null || text.equals(finalText)) &&,0,0,0,2,5,0,0,0,0,7,52,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1618,            iBeforePrinter = beforePrinter;,8,0,0,0,0,0,0,0,0,10,31,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1619,            iBeforeParser = beforeParser;,4,0,0,0,0,0,0,2,0,6,29,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1620,            iUseBefore = useBefore;,6,0,0,0,0,0,4,0,0,12,23,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1621,            iUseAfter = useAfter;,8,0,0,0,0,0,0,0,0,10,21,5,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1622,        },2,1,0,0,1,0,0,0,0,3,1,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1750,            iAfterPrinter = afterPrinter;,6,0,0,0,0,0,4,0,0,13,29,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1751,            iAfterParser = afterParser;,6,0,0,0,0,0,0,2,0,9,27,1,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1752,            return this;,4,0,0,0,0,1,0,2,0,6,12,3,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1579,    static class Separator,0,0,0,0,0,0,0,0,0,0,22,4,0.00314,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,437,        appendField(DAYS);,0,0,0,1,2,0,4,0,0,4,18,5,0.00311,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,438,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00311,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,411,        appendField(MONTHS);,0,0,0,1,2,0,4,0,0,4,20,5,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,412,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,424,        appendField(WEEKS);,4,0,0,1,2,0,4,0,0,8,19,3,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,425,        return this;,2,0,0,0,0,1,0,2,0,5,12,6,0.00309,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,146,        return iParser;,0,0,0,0,0,1,0,0,0,1,15,4,0.00308,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,450,        appendField(HOURS);,0,0,0,1,2,0,4,0,0,4,19,5,0.00308,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,451,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00308,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,779,        if (iPrefix != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.00297,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,782,        iPrefix = null;,10,0,0,0,0,0,4,0,0,16,15,4,0.00297,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,783,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00297,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,398,        appendField(YEARS);,6,1,0,1,2,0,12,0,0,20,19,1,0.00296,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,399,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00296,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,530,"        appendField(type, iMinPrintedDigits);",2,0,0,1,2,0,6,0,0,8,37,3,0.00279,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,531,    },2,0,0,0,1,0,4,0,0,7,1,4,0.00279,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,13,128,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",10,0,0,0,1,0,0,4,0,15,72,3,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,536,"        append0(field, field);",4,0,0,1,2,0,0,2,0,7,22,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,537,        iFieldFormatters[type] = field;,2,0,1,1,2,0,0,0,0,7,31,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,538,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,539,    },0,0,0,0,1,0,8,0,0,8,1,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1053,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {",0,0,0,0,2,0,0,0,0,2,51,4,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1054,            iMinPrintedDigits = minPrintedDigits;,4,0,0,0,0,0,0,0,0,5,37,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1055,            iPrintZeroSetting = printZeroSetting;,4,0,0,0,0,0,0,0,0,5,37,5,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1056,            iMaxParsedDigits = maxParsedDigits;,6,1,0,0,0,0,10,0,0,18,35,1,0.00278,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1057,            iRejectSignedValues = rejectSignedValues;,8,0,0,0,0,0,0,0,0,10,41,5,0.00278,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,        return iMessage;,2,0,0,0,0,1,0,0,0,2,16,4,18.0,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,0,0,0,0,7,42,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,            long instant = 0L;,0,0,0,0,0,0,0,0,0,0,18,4,4.92308,1,1,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,57,4,4.92308,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,        int[] newValues = getValues();,2,0,0,2,4,0,8,0,0,10,30,1,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);",0,0,0,2,4,0,0,0,0,6,64,4,4.92308,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,515,        if (amount == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,3.55556,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,514,        int index = indexOfSupported(fieldType);,0,0,0,1,2,0,0,0,0,3,40,4,3.04762,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,2.0,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,        if (partial == null) {,2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,        DurationFieldType lastType = null;,4,0,0,0,0,0,4,2,0,11,34,3,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,        for (int i = 0; i < partial.size(); i++) {,8,1,0,2,5,2,8,4,0,24,42,1,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,339,            DateTimeField loopField = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,46,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0,0,0,3,7,0,0,0,0,10,62,4,1.88235,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,            lastType = loopField.getDurationField().getType();,2,0,0,2,4,0,0,2,0,5,50,6,1.88235,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,1.14286,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,0,0,0,4,44,4,1.14286,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,        return index;,2,0,0,0,0,1,0,2,0,5,13,6,0.95522,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);",6,2,1,3,6,0,0,0,0,14,55,6,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,353,    },0,0,0,0,1,0,0,0,0,1,1,4,0.91429,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);",0,0,0,2,4,1,0,0,0,7,58,4,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));",0,0,0,3,6,1,12,0,0,12,81,5,0.9,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,410,            return chrono.monthOfYear();,0,0,0,1,2,1,0,0,0,4,28,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,412,            return chrono.dayOfMonth();,0,0,0,1,2,1,0,0,0,4,27,4,0.87671,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,        switch (index) {,2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,                return i;,4,1,0,0,0,1,0,0,0,6,9,3,0.82051,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,        int index = indexOf(type);,2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,        if (index == -1) {,2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,426,        return FIELD_TYPES[index];,0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,49,4,0.66667,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,            if (getFieldType(i).getDurationType() == type) {,2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,395,        return 2;,0,0,0,0,0,1,0,0,0,1,9,4,0.64646,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,79,    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {,0,0,0,2,5,0,0,0,0,7,80,4,0.62136,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,84,    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder(),2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,                    builder.appendLiteral(new String(sub));,2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,                break;,4,1,0,0,0,0,4,2,0,11,6,6,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0,0,0,1,2,0,0,0,0,3,50,4,0.52033,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);",4,0,0,1,2,1,6,0,0,11,47,3,0.52033,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,218,            throw new IllegalFieldValueException,0,0,0,0,0,0,0,2,0,2,36,8,0.48,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,237,        return (int[]) iValues.clone();,0,0,0,3,6,1,0,0,0,10,31,4,0.47407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,                int month = values[i];,2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,                for (int j = 0; j < size; j++) {,12,2,0,1,3,0,0,0,0,15,32,1,0.44755,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,        if (ldp == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,            ldp = dateElementParser().withZoneUTC();,0,0,0,2,4,0,0,0,0,6,40,4,0.44444,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,        return ldp;,2,1,0,0,0,1,0,0,0,3,11,4,0.44444,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,        int size = partial.size();,2,0,0,1,2,0,4,0,0,6,26,5,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.4183,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,3,7,0,10,0,0,11,65,6,0.4183,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")",4,1,0,1,3,0,0,0,0,5,36,4,0.37895,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,49,        if (value == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,33,4,0.36364,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,14,52,        return -value;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,4,0.34973,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,                break;,2,0,0,0,0,0,8,0,0,10,6,11,0.34409,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,0,0,0,3,35,4,0.33684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33684,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,780,        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();,2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,781,        fields.add(DateTimeFieldType.monthOfYear());,4,1,0,2,4,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,782,        fields.add(DateTimeFieldType.dayOfMonth());,4,0,0,2,4,0,12,0,0,16,43,1,0.33333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);",2,0,0,2,4,4,0,8,0,13,67,2,0.33333,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,        } else if (upperBound == null) {,2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,        iDateTimeFieldType = fieldType;,4,1,0,0,0,0,4,0,0,10,31,3,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,        iDurationFieldType = null;,4,1,0,0,0,0,14,0,0,21,26,1,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,        iFieldName = fieldType.getName();,2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,        iNumberValue = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,        iStringValue = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,        iLowerBound = lowerBound;,4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,        iUpperBound = upperBound;,2,1,0,0,0,0,0,0,0,3,25,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,        iMessage = super.getMessage();,4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31304,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,                return false;,4,0,0,0,0,1,0,2,0,7,13,1,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,                bld.appendDayOfMonth(2);,0,0,0,1,2,0,0,0,0,3,24,4,0.30769,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,                if (tokenLen >= 3) {,0,0,0,1,3,0,0,0,0,4,20,4,0.30189,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,        StringBuffer buf = new StringBuffer(),2,0,0,1,2,0,0,0,0,2,37,5,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,        if (lowerBound == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,        if (explain != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.288,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,        return buf.toString();,2,0,0,1,2,1,10,4,0,17,22,1,0.288,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,            bld.appendLiteral('-');,2,1,0,1,2,0,4,0,0,8,23,3,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,            bld.appendLiteral('-');,0,0,0,1,2,0,0,0,0,3,23,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,            bld.appendMonthOfYear(2);,2,2,0,1,2,0,4,0,0,8,25,10,0.28571,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,0,0,0,0,10,52,4,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,18,0,0,18,37,5,0.27586,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,                    i--;,8,1,0,0,0,0,0,0,0,11,4,1,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,                    break;,10,4,0,0,0,0,0,0,0,15,6,3,0.27468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,549,                String sub = token.substring(1);,0,0,0,1,2,0,0,0,0,3,32,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,550,                if (sub.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,            buf.append('\'');,0,0,0,1,2,0,10,0,0,10,17,8,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,            boolean inLiteral = false;,2,1,0,0,0,0,0,0,0,4,26,5,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,            for (; i < length; i++) {,6,1,0,1,3,0,0,0,0,8,25,6,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,601,                c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,22,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,                if (c == '\'') {,2,0,0,1,3,0,10,0,0,12,16,1,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,611,                } else if (!inLiteral &&,0,0,0,0,2,0,0,0,0,2,24,4,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,                    buf.append(c);,2,0,0,1,2,0,6,0,0,8,14,3,0.2735,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,                    buf.append(c);,2,0,0,1,2,0,6,0,0,9,14,6,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,589,                    i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,            },0,0,0,0,1,0,8,0,0,8,1,5,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,        return withZone(DateTimeZone.UTC);,6,1,0,1,2,1,0,2,0,10,34,1,0.26667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,586,                char peek = pattern.charAt(i + 1);,0,0,0,1,2,0,0,0,0,3,34,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,587,                if (peek == c) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25703,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2577,                iPrinters = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,                iPrintedLengthEstimate = 0;,10,0,0,0,0,0,26,2,0,40,27,1,0.24806,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,                formatter = builder.toFormatter();,10,0,0,1,2,0,8,2,0,23,34,3,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);",4,1,0,1,2,0,8,0,0,13,40,1,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,687,        },0,0,0,0,1,0,0,0,0,1,1,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,688,        return formatter;,0,0,0,0,0,1,0,0,0,1,17,4,0.24615,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,        return createFormatterForPattern(pattern);,14,1,0,1,2,1,6,4,0,25,42,1,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,        if (pattern == null || pattern.length() == 0) {,2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,        DateTimeFormatter formatter = null;,4,0,0,0,0,0,4,0,0,8,35,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,678,        synchronized (cPatternedCache) {,0,0,0,1,3,0,0,0,0,4,32,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,679,            formatter = cPatternedCache.get(pattern);,0,0,0,1,2,0,0,0,0,3,41,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,4,2,0,1,2,0,0,0,0,6,66,9,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,682,"                parsePatternTo(builder, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.24521,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,        if (iZone == zone) {,10,1,0,1,3,0,12,2,0,27,20,1,0.24427,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",8,1,0,0,1,1,0,2,0,11,56,3,0.24427,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,317,                nextField = instant.getField(fieldIndex - 1);,0,0,0,1,2,0,0,0,0,3,45,4,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,2,1,0,5,11,0,10,0,0,13,82,1,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0,0,0,1,2,0,0,0,0,3,90,4,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,    },14,4,1,0,1,0,12,0,0,37,1,3,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,583,            buf.append(c);,0,0,0,1,2,0,6,0,0,6,14,7,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.23273,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,400,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,        int[] indexRef = new int[1];,2,0,0,2,4,0,8,0,0,11,28,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,            indexRef[0] = i;,2,0,0,1,2,0,14,2,0,20,16,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,            i = indexRef[0];,4,0,1,1,2,0,0,0,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,            int tokenLen = token.length();,2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,            if (tokenLen == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,            char c = token.charAt(0);,2,0,0,1,2,0,12,0,0,14,25,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,            switch (c) {,2,0,0,1,3,0,0,0,0,3,12,6,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,574,        StringBuffer buf = new StringBuffer();,2,0,0,1,2,0,4,0,0,7,38,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,576,        int i = indexRef[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,577,        int length = pattern.length();,14,2,0,1,2,0,10,2,0,30,30,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,579,        char c = pattern.charAt(i);,2,0,0,1,2,0,6,0,0,8,27,5,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,6,3,0,1,3,0,0,2,0,12,51,4,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,621,        indexRef[0] = i;,2,0,1,1,2,0,0,2,0,7,16,3,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,622,        return buf.toString();,10,2,0,1,2,1,12,0,0,25,22,1,0.23188,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",0,0,0,1,2,0,0,0,0,3,112,4,0.22939,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,14,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.22939,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,334,        return MIN;,8,0,0,0,0,1,0,2,0,12,11,1,0.22069,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1133,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,613,        if (dpe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,614,            dpe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,636,        return dpe;,0,0,0,0,0,1,0,0,0,1,11,4,0.21918,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,339,        return iMax;,2,0,0,0,0,1,0,0,0,2,12,4,0.21918,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1643,        if (dye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1644,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1649,        return dye;,4,0,0,0,0,1,0,0,0,5,11,4,0.21477,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1633,        if (dwe == null) {,2,0,0,1,3,0,6,0,0,8,18,5,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1634,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1639,        return dwe;,4,1,0,0,0,1,0,0,0,5,11,3,0.21405,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1623,        if (wwe == null) {,4,0,0,1,3,0,0,4,0,8,18,8,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1624,            wwe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1629,        return wwe;,10,2,0,0,0,1,0,0,0,12,11,4,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,2,4,1,0,0,0,7,66,4,0.21262,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,8,0,0,0,0,11,60,4,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,215,"            instant = add(instant, valueToAdd);",2,0,0,1,2,0,6,0,0,9,35,6,0.21053,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,216,"            return iChronology.get(partial, instant);",0,0,0,1,2,1,0,0,0,4,41,4,0.21053,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,520,"        return new MonthDay(this, newValues);",10,0,0,1,2,1,4,2,0,17,37,6,0.21053,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1614,        if (we == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1615,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1619,        return we;,6,1,0,0,0,1,0,0,0,7,10,1,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",14,8,0,2,4,1,8,0,0,31,66,3,0.20915,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,2,4,1,8,0,0,8,71,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,79,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1261,            return iValue.length();,0,0,0,1,2,1,4,0,0,4,23,6,0.2,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,370,        if (text == null) {,2,0,0,1,3,0,8,2,0,12,19,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,373,        switch (text.length()) {,6,0,0,2,5,0,16,2,0,25,24,1,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,379,                return append0(new StringLiteral(text));,10,0,0,2,4,1,6,2,0,19,40,3,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1232,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1233,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1234,        },0,0,0,0,1,0,0,0,0,1,1,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1237,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.19938,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",4,0,0,1,2,0,0,2,0,7,67,6,0.19048,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,139,            dayToUse = maxDay;,4,0,0,0,0,0,0,0,0,5,18,6,0.19048,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,273,        if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,276,        if (parsers == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,279,        int length = parsers.length;,8,0,0,0,0,0,6,0,0,14,28,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,280,        if (length == 1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0,0,0,2,4,0,0,0,0,6,60,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,289,        for (i = 0; i < length - 1; i++) {,8,2,0,1,3,0,0,0,0,12,34,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,0,0,4,9,0,0,0,0,13,46,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,294,        copyOfParsers[i] = parsers[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,296,"        return append0(printer, new MatchingParser(copyOfParsers));",4,3,0,2,4,1,4,0,0,11,59,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,307,        checkParser(parser);,0,0,0,1,2,0,0,0,0,3,20,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,309,"        return append0(null, new MatchingParser(parsers));",0,0,0,2,4,1,0,0,0,7,50,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,319,        if (parser == null) {,6,1,0,1,3,0,0,0,0,7,21,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,322,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1112,                    f = parser;,0,0,0,0,0,0,0,0,0,0,11,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2752,            super();,6,0,0,1,2,0,0,0,0,6,8,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2753,            iParsers = parsers;,0,0,0,0,0,0,0,0,0,0,19,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2754,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2755,            for (int i=parsers.length; --i>=0 ;) {,8,1,0,1,3,0,0,0,0,10,38,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2756,                DateTimeParser parser = parsers[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2757,                if (parser != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2758,                    int len = parser.estimateParsedLength();,0,0,0,1,2,0,0,0,0,3,40,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2759,                    if (len > est) {,6,0,0,1,3,0,4,0,0,12,16,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2760,                        est = len;,4,0,0,0,0,0,0,0,0,5,10,11,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2763,            },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2764,            iParsedLengthEstimate = est;,0,0,0,0,0,0,0,0,0,0,28,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2765,        },0,0,0,0,1,0,0,0,0,1,1,4,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2768,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2684,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,152,        Object f = getFormatter();,0,0,0,1,2,0,0,0,0,3,26,4,0.18234,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,153,        if (isParser(f)) {,0,0,0,2,5,0,0,0,0,7,18,4,0.18234,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,154,            return (DateTimeParser) f;,0,0,0,1,2,1,0,0,0,4,26,4,0.18234,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,313,            if (nextField == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.18182,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,314,                if (fieldIndex == 0) {,2,1,0,1,3,0,0,0,0,3,22,8,0.18182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1367,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.17978,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.17877,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1363,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.17729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1364,        },0,0,0,0,1,0,6,0,0,6,1,5,0.17729,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,549,        if (extended) {,2,0,0,1,3,0,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,550,            bld.appendLiteral('-');,0,0,0,1,2,0,4,0,0,5,23,7,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,552,    },2,1,0,0,1,0,4,0,0,7,1,3,0.16667,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,293,        boolean reducedPrec = false;,2,0,0,0,0,0,0,0,0,3,28,5,0.14815,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,294,        if (fields.remove(DateTimeFieldType.year())) {,0,0,0,3,7,0,0,0,0,10,46,4,0.14815,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,341,        return reducedPrec;,0,0,0,0,0,1,0,0,0,1,19,4,0.14815,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,184,        iValues = values;,0,0,0,0,0,0,0,0,0,0,17,4,0.1435,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,185,    },4,0,0,0,1,0,0,0,0,5,1,6,0.1435,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,181,        chronology = DateTimeUtils.getChronology(chronology);,2,0,0,1,2,0,6,0,0,9,53,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,182,        iChronology = chronology.withUTC();,2,0,0,1,2,0,4,0,0,7,35,4,0.14318,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,183,"        chronology.validate(this, values);",0,0,0,1,2,0,6,0,0,6,34,5,0.14318,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1541,                return iWallOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,27,4,0.13417,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,127,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,128,        iPrinter = printer;,4,0,0,0,0,0,0,0,0,5,19,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,129,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,130,        iLocale = locale;,4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,131,        iOffsetParsed = offsetParsed;,4,0,0,0,0,0,0,0,0,5,29,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,132,        iChrono = chrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,133,        iZone = zone;,4,0,0,0,0,0,0,0,0,5,13,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,134,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,135,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.13361,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13361,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1577,                return instant;,2,0,0,0,0,1,0,0,0,2,15,7,0.13333,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,362,"        super(partial, values);",4,0,0,1,2,0,0,0,0,4,23,4,0.12903,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,363,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12903,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,14,378,        return iName;,0,0,0,0,0,1,0,0,0,1,13,4,0.12329,0,0,-1
defect4j,time,org/joda/time/base/BasePartial,14,249,        return iChronology;,6,0,0,0,0,1,10,0,0,17,19,3,0.12075,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,818,        return getMaximumValue(instant);,12,2,0,1,2,1,4,2,0,22,32,6,0.10978,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,804,        return getMaximumValue();,0,0,0,1,2,1,12,0,0,12,25,3,0.10959,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10922,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,199,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,200,            int value = values[i];,2,0,1,1,2,0,0,0,0,6,22,7,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,201,            DateTimeField field = partial.getField(i);,0,0,0,1,2,0,0,0,0,3,42,4,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,202,"            if (value < field.getMinimumValue(partial, values)) {",2,1,0,2,5,0,8,0,0,11,53,6,0.10903,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,207,"            if (value > field.getMaximumValue(partial, values)) {",0,0,0,2,5,0,0,0,0,7,53,4,0.10903,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,758,        return getMinimumValue();,0,0,0,1,2,1,0,0,0,4,25,4,0.10884,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,772,        return getMinimumValue(instant);,4,0,0,1,2,1,4,0,0,9,32,3,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,192,            if (value > field.getMaximumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10884,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,183,        int size = partial.size();,4,0,0,1,2,0,10,0,0,15,26,3,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,184,        for (int i = 0; i < size; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,185,            int value = values[i];,6,0,1,1,2,0,0,0,0,10,22,1,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,186,            DateTimeField field = partial.getField(i);,2,0,0,1,2,0,6,2,0,10,42,6,0.10847,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,187,            if (value < field.getMinimumValue()) {,2,1,0,2,5,0,4,0,0,7,38,6,0.10847,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,475,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10811,0,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,105,"        return getField(index, getChronology());",0,0,0,2,4,1,6,0,0,6,40,5,0.10256,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,84,        return INSTANCE_UTC;,0,0,0,0,0,1,0,0,0,1,20,4,0.10191,0,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,14,89,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.1,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,612,"        return withFieldAdded(DurationFieldType.days(), days);",2,0,0,2,4,1,14,4,0,20,54,1,0.1,0,0,-1
defect4j,time,org/joda/time/MonthDay,14,672,"        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));",0,0,0,3,6,1,12,0,0,12,77,5,0.1,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,307,"            int max = getMaximumValue(instant, values);",0,0,0,1,2,0,0,0,0,3,43,4,0.09756,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,308,            long proposed = values[fieldIndex] + valueToAdd;,0,0,0,1,2,0,0,0,0,3,48,4,0.09756,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,309,            if (proposed <= max) {,2,0,0,1,3,0,4,0,0,7,22,4,0.09756,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1604,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1605,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1610,        return dme;,0,0,0,0,0,1,0,0,0,1,11,4,0.0951,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1594,        if (mye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0944,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1595,            mye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.0944,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1600,        return mye;,2,0,0,0,0,1,0,0,0,2,11,4,0.0944,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1585,        if (ye == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.09182,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1586,            ye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.09182,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1590,        return ye;,0,0,0,0,0,1,0,0,0,1,10,4,0.09182,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",2,0,0,2,4,1,14,2,0,18,68,3,0.08791,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,517,            return iLeapDurationField;,0,0,0,0,0,1,0,0,0,1,26,4,0.08696,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,14,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",4,0,0,2,4,1,0,0,0,5,67,5,0.08533,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,14,260,            return true;,2,0,0,0,0,1,6,0,0,10,12,1,0.08399,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,204,            for (int i=chronos.size(); --i>=0; ) {,10,3,0,2,5,0,8,0,0,23,38,1,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,205,                chrono = chronos.get(i);,0,0,0,1,2,0,0,0,0,3,24,4,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0,0,0,1,3,0,0,0,0,4,63,4,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,209,                    return chrono;,2,0,0,0,0,1,0,0,0,2,14,10,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,397,        return iCutoverInstant;,0,0,0,0,0,1,0,0,0,1,23,4,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,406,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,0,0,0,4,56,4,0.08388,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,503,            return iRangeDurationField;,2,0,0,0,0,1,0,0,0,2,27,5,0.08333,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",8,0,0,3,6,0,0,2,0,10,62,4,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,282,    },6,4,0,0,1,0,0,0,0,10,1,4,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",6,0,0,1,2,0,6,0,0,13,75,6,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,221,            chrono = new GJChronology,2,0,0,0,0,0,0,2,0,5,25,6,0.08312,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,477,            return;,2,0,1,0,0,1,0,4,0,8,7,4,0.08312,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,0,0,0,7,75,4,0.0829,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,499,            return iDurationField;,4,0,0,0,0,1,0,0,0,4,22,1,0.0829,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,307,        return withZone(DateTimeZone.UTC);,4,0,0,1,2,1,2,0,0,6,34,5,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,317,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,320,        if (zone == getZone()) {,2,1,0,2,5,0,2,0,0,5,24,4,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,321,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.08216,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,293,        if ((base = getBase()) != null) {,6,2,0,3,7,0,4,2,0,16,33,3,0.08184,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,296,        return DateTimeZone.UTC;,0,0,0,0,0,1,0,0,0,1,24,4,0.08184,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,474,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.08163,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,550,            return iField.getMinimumValue();,2,0,0,1,2,1,8,2,0,12,32,1,0.08142,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,567,            return iField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,32,6,0.08142,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",4,0,0,3,6,0,8,2,0,14,60,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,6,2,0,12,58,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2736,            if (array != null) {,2,1,0,1,3,0,4,0,0,7,20,1,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2737,                for (int i=0; i<array.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,7,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2738,                    list.add(array[i]);,0,0,1,2,4,0,8,0,0,12,19,4,0.08112,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2741,        },8,3,0,0,1,0,0,0,0,11,1,4,0.08112,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,194,            cutoverInstant = gregorianCutover.toInstant();,2,0,0,1,2,0,4,0,0,7,46,6,0.08112,0,0,-1
defect4j,time,org/joda/time/Instant,14,144,        return this;,8,1,0,0,0,1,0,2,0,11,12,1,0.08101,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,448,        if (fieldType == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.08091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,454,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.08091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,457,        if (minDigits <= 1) {,2,1,0,1,3,0,0,0,0,3,21,4,0.08091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0,0,0,2,4,1,0,0,0,7,72,4,0.08091,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,14,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,4,0,0,4,32,7,0.08081,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",2,0,0,1,2,0,8,0,0,11,68,6,0.08071,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,468,            if (get(result) != value) {,2,1,0,2,5,0,4,0,0,7,27,5,0.08071,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,209,        if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,10,0,0,10,62,5,0.0794,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,465,            long localInstant = iZone.convertUTCToLocal(instant);,0,0,0,1,2,0,0,0,0,3,53,4,0.0794,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,14,466,"            localInstant = iField.set(localInstant, value);",2,0,0,1,2,0,8,0,0,11,47,5,0.0794,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,957,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,1,2,1,6,0,0,6,47,5,0.07931,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,974,        int offsetLocal = getOffset(instantLocal);,4,0,0,1,2,0,0,0,0,5,42,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,976,        int offset = getOffset(instantLocal - offsetLocal);,6,1,0,1,2,0,2,0,0,9,51,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,978,        if (offsetLocal != offset) {,0,0,0,1,3,0,0,0,0,4,28,4,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,1009,        long instantUTC = instantLocal - offset;,6,1,0,0,0,0,0,0,0,7,40,5,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,2,0,0,3,7,0,0,0,0,3,69,4,0.07921,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,14,1014,        return instantUTC;,0,0,0,0,0,1,0,0,0,1,18,4,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,172,        return iParser;,10,1,0,0,0,1,4,0,0,16,15,1,0.07911,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,154,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.07767,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,345,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.07729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,346,        iElementPairs.add(printer);,0,0,0,1,2,0,0,0,0,3,27,4,0.07729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,347,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.07729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,348,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07729,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1141,            return true;,2,0,0,0,0,1,2,0,0,5,12,1,0.07583,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1131,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.07565,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1104,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,4,0,0,4,38,5,0.07547,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1105,                Object parser = iElementPairs.get(1);,0,0,0,1,2,0,0,0,0,3,37,4,0.07547,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1107,                if (printer != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.07547,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1108,                    if (printer == parser || parser == null) {,0,0,0,1,3,0,0,0,0,4,42,4,0.07547,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1109,                        f = printer;,0,0,0,0,0,0,0,0,0,0,12,4,0.07547,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,298,        if (valueToAdd == 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07273,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,304,        DateTimeField nextField = null;,4,0,0,0,0,0,0,4,0,8,31,4,0.07273,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,306,        while (valueToAdd > 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.07273,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,14,259,        if (this == readableInstant) {,2,1,0,1,3,0,0,0,0,3,30,4,0.07199,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,82,            value--;,0,0,0,0,0,0,0,0,0,0,8,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,53,"        this(chronology, field, 0);",4,0,0,1,2,0,0,0,0,4,27,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,64,        super(field);,2,0,0,1,2,0,0,0,0,2,13,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,65,        iChronology = chronology;,4,0,0,0,0,0,6,2,0,13,25,3,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,66,        int min = super.getMinimumValue();,4,0,0,1,2,0,0,0,0,4,34,5,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,67,        if (min < skip) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,68,            iMinValue = min + 1;,4,1,0,0,0,0,0,0,0,6,20,6,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,74,        iSkip = skip;,0,0,0,0,0,0,0,0,0,0,13,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,2,4,0,0,0,0,6,72,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,88,        if (value <= iSkip) {,4,1,0,1,3,0,0,0,0,5,21,4,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,89,            value--;,2,0,0,0,0,0,0,0,0,3,8,6,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,91,"        return super.set(millis, value);",6,0,0,1,2,1,0,0,0,6,32,5,0.07002,0,0,-1
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,95,        return iMinValue;,6,0,0,0,0,1,0,0,0,7,17,1,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,128,"        super(base, param);",0,0,0,1,2,0,0,0,0,3,19,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,129,    },4,0,0,0,1,0,0,0,0,4,1,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0,0,0,1,2,0,0,0,0,3,85,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",2,0,0,1,2,3,4,12,0,21,116,1,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,6,0,0,1,2,3,2,2,0,13,85,2,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,104,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,107,        BuddhistChronology chrono = cCache.get(zone);,2,0,0,1,2,0,6,2,0,10,45,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,108,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0,0,0,2,4,0,0,0,0,6,76,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0,0,0,1,2,0,0,0,0,3,64,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0,0,0,2,4,0,0,0,0,6,91,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,114,"            cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,7,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,116,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,204,        if (getParam() == null) {,0,1,0,2,5,0,2,0,0,4,25,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,206,            DateTimeField field = fields.year;,6,0,0,0,0,0,0,2,0,8,34,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,207,            fields.year = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,38,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,211,            field = fields.yearOfEra;,8,0,0,0,0,0,0,0,0,9,25,3,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,212,            fields.yearOfEra = new DelegatedDateTimeField(,0,0,0,0,1,0,0,0,0,1,46,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,216,            field = fields.weekyear;,0,0,0,0,0,0,0,0,0,0,24,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,217,            fields.weekyear = new OffsetDateTimeField(,0,0,0,0,1,0,0,0,0,1,42,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",6,0,0,1,2,0,0,2,0,9,54,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,221,            fields.centuryOfEra = new DividedDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,224,            field = new RemainderDateTimeField(,2,0,0,0,1,0,0,2,0,5,35,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,226,            fields.yearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,229,            field = new RemainderDateTimeField(,0,0,0,0,1,0,0,0,0,1,35,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,4,0,0,0,1,0,0,2,0,7,51,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,234,            fields.era = ERA_FIELD;,6,0,0,0,0,0,0,0,0,7,23,6,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07002,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,173,"        return getInstance(zone, gregorianCutover, 4);",2,0,0,1,2,1,2,0,0,4,46,4,0.06995,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,79,            if (year == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06995,0,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,14,83,            year++;,2,0,0,0,0,0,0,0,0,3,7,6,0.06995,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,0,0,0,4,38,4,0.06987,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,4,0,0,4,41,6,0.06987,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,1,2,0,0,0,0,3,54,4,0.06972,0,0,-1
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,153,"        return super.set(instant, value - iOffset);",8,1,0,1,2,1,0,0,0,9,43,5,0.06972,0,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,14,192,            cutoverInstant = DEFAULT_CUTOVER;,4,0,0,0,0,0,0,0,0,5,33,6,0.06972,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,82,"        return iField.set(instant, value);",0,0,0,1,2,1,8,0,0,8,34,5,0.06964,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0,0,0,2,4,1,0,0,0,7,73,4,0.06957,0,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,14,100,        return iMinValue;,2,0,0,0,0,1,0,0,0,2,17,4,0.06949,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,396,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.06934,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,399,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06934,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,402,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.06934,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,405,        if (minDigits <= 1) {,0,0,0,1,3,0,0,0,0,4,21,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,14,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",12,0,0,0,1,1,0,0,0,13,61,3,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,132,"        long instant = year().set(0, year);",2,0,0,2,4,0,6,0,0,8,35,5,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,133,"        instant = monthOfYear().set(instant, monthOfYear);",2,0,0,2,4,0,8,0,0,11,50,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",2,0,0,2,4,0,8,0,0,11,48,4,0.06934,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,14,135,"        instant = hourOfDay().set(instant, hourOfDay);",4,0,1,2,4,0,8,4,0,19,46,3,0.06934,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,                return -val1;,2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,142,                return val1;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,144,        long total = val1 * val2;,6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,145,        if (total / val2 != val1) {,10,2,0,1,3,0,0,0,0,12,27,3,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,148,        return total;,2,1,0,0,0,1,2,0,0,7,13,4,0.03846,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,15,136,        switch (val2) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01961,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,109,        iDateTimeFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,110,        iDurationFieldType = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,111,        iFieldName = fieldType.getName();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,15,112,        iNumberValue = value;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,0,0,0,1,3,0,0,0,0,4,22,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,0,0,0,1,2,0,0,0,0,3,41,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0,0,0,2,4,0,0,0,0,6,78,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,0,0,0,1,2,0,0,0,0,3,34,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,2,0,0,0,1,0,0,4,0,6,55,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,54,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,2,4,0,0,0,0,6,53,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,4,2,0,2,5,0,8,0,0,15,57,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,2,0,0,2,4,0,8,0,0,11,43,7,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,6,0,0,6,30,5,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,2,1,0,1,3,0,0,0,0,3,20,4,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,4,1,0,0,0,1,0,0,0,5,14,3,6.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,2,4,0,8,0,0,8,50,9,4.45455,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",2,0,0,1,2,1,16,0,0,19,40,1,4.45455,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,4,0,0,1,2,0,12,2,0,19,42,3,3.0625,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,4,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,4,0,0,1,2,0,0,0,0,4,32,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,    },4,0,0,0,1,0,4,0,0,8,1,5,3.0625,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,36,1,2.57895,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,4,2.57895,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,1.88462,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,4,0,0,6,9,7,1.48485,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,2,0,1,1,2,0,0,2,0,8,24,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,2,1,1,2,4,0,0,0,0,10,22,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,4,1,1,1,2,0,0,0,0,8,15,10,1.225,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),4,0,0,1,2,0,4,2,0,12,36,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,10,0,0,0,0,1,0,0,0,10,11,3,0.83051,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,8,1,0,1,3,0,0,0,0,9,18,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,        return ttx;,0,0,0,0,0,1,0,0,0,1,11,4,0.75385,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,0,0,0,7,54,4,0.73134,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,8,0,0,0,0,1,0,6,0,15,10,3,0.72059,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,            hms = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.69014,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,2,0,1,0,0,1,0,0,0,4,11,5,0.69014,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,4,1,0,2,4,1,16,0,0,21,48,1,0.62821,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.57647,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",4,0,0,2,4,1,8,2,0,16,47,1,0.57647,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,0,1,2,0,0,0,0,3,31,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,            if (prev > Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,28,4,0.55172,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,2,1,0,0,0,1,0,0,0,3,16,4,0.55172,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,456,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.42982,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,1,0,1,2,0,6,0,0,7,8,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,            iFieldType = fieldType;,0,0,0,0,0,0,0,0,0,0,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,            iShort = isShort;,0,0,0,0,0,0,0,0,0,0,17,4,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },10,1,0,0,1,0,0,0,0,12,1,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,            return iShort ? 6 : 20;,0,0,0,0,0,1,0,0,0,1,23,4,0.42609,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,318,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,454,        switch (iRoundingMode) {,0,0,0,1,3,0,0,0,0,4,24,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,474,        super.setMillis(instant);,0,0,0,1,2,0,0,0,0,3,25,4,0.40833,0,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,475,    },0,0,0,0,1,0,0,0,0,1,1,4,0.40833,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",10,0,0,0,1,1,0,2,0,13,55,1,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,6,0,0,0,0,1,8,0,0,15,15,3,0.37895,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,10,0,0,0,0,2,30,6,0,50,7,1,0.28571,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,0,0,0,3,36,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.28,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.25654,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,                    while (--minDigits >= 0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,                        buf.append('0');,0,0,0,1,2,0,0,0,0,3,16,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.20588,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,1,2,0,8,0,0,8,40,9,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },2,1,0,0,1,0,0,0,0,3,1,5,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,8,0,0,9,42,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,        if (pattern == null || pattern.length() == 0) {,0,0,0,2,5,0,0,0,0,7,47,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,        DateTimeFormatter formatter = null;,0,0,0,0,0,0,0,0,0,0,35,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,14,5,0,1,3,0,2,2,0,24,32,3,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,4,0,0,1,2,0,6,0,0,12,41,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,            if (formatter == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,2,0,0,1,2,0,0,4,0,6,66,8,0.196,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",2,0,0,1,2,0,6,0,0,8,33,1,0.196,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0,0,0,1,2,0,0,0,0,3,65,4,0.18702,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,6,1,0,0,0,0,8,0,0,16,6,3,0.18702,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,563,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,583,            buf.append(c);,0,0,0,1,2,0,0,0,0,3,14,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,585,            while (i + 1 < length) {,0,0,0,1,3,0,0,0,0,4,24,4,0.18561,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,6,0,0,1,2,0,0,8,0,14,30,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,0,0,0,2,4,0,4,0,0,4,28,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,10,0,0,10,30,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,404,            indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,405,"            String token = parseToken(pattern, indexRef);",0,0,0,1,2,0,0,0,0,3,45,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,408,            int tokenLen = token.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,6,1,0,1,3,0,0,0,0,8,12,3,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,0,1,1,1,2,0,8,0,0,14,38,1,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,577,        int length = pattern.length();,0,0,0,1,2,0,0,0,0,3,30,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,579,        char c = pattern.charAt(i);,0,0,0,1,2,0,0,0,0,3,27,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,621,        indexRef[0] = i;,0,0,0,1,2,0,0,0,0,3,16,4,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,2,0,0,1,2,1,4,2,0,8,22,5,0.18491,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,503,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.18352,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",10,0,0,1,2,3,2,12,0,28,112,1,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,16,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0,0,0,2,4,0,0,0,0,6,81,4,0.18284,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,500,            int result = compareReverse,0,0,0,0,0,0,0,0,0,0,27,4,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,4,1,0,1,3,0,0,0,0,6,18,7,0.18148,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,4,0,0,2,5,0,0,0,0,5,36,5,0.17754,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },2,0,0,0,1,0,0,2,0,4,1,3,0.17626,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,4,0,0,2,4,0,0,0,0,5,68,5,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,4,1,0,2,4,0,4,0,0,9,64,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,365,"                millis = savedFields[i].set(millis, resetFields);",0,0,0,2,4,0,0,0,0,6,49,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0,0,0,5,11,0,0,0,0,16,63,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,6,0,0,11,36,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,482,            if (iText == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,483,"                millis = iField.set(millis, iValue);",0,0,0,1,2,0,0,0,0,3,36,4,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,14,3,0,1,3,0,0,0,0,18,12,1,0.17563,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",6,1,0,0,1,0,0,2,0,9,46,4,0.175,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,14,0,0,1,3,0,0,2,0,18,19,1,0.16388,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,6,1,0,2,5,0,2,0,0,10,24,3,0.16388,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,        int count = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,5,30,5,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,346,        if (iSavedFieldsShared) {,0,0,0,1,3,0,0,0,0,4,25,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,350,"        sort(savedFields, count);",0,0,0,1,2,0,0,0,0,3,25,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,351,        if (count > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,362,        long millis = iMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,364,            for (int i = 0; i < count; i++) {,4,0,0,1,3,0,4,2,0,10,33,3,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,367,            if (resetFields) {,0,0,0,1,3,0,0,0,0,4,18,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,377,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,379,        if (iOffset != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,416,        if (high > 10) {,0,0,0,1,3,0,0,0,0,4,16,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,419,            for (int i=0; i<high; i++) {,6,0,0,1,3,0,0,0,0,7,28,6,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,427,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1321,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1322,            },2,0,0,0,1,0,4,0,0,6,1,10,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1329,            if (length >= 9) {,8,2,0,1,3,0,10,0,0,21,18,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1334,                int i = position;,8,1,0,0,0,0,4,2,0,17,17,3,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1335,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1339,                    value = text.charAt(i++) - '0';,0,0,0,1,2,0,0,0,0,3,31,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1342,                },0,0,0,0,1,0,0,0,0,1,1,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1343,                position += length;,0,0,0,0,0,0,0,0,0,0,19,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1344,                while (i < position) {,6,2,0,1,3,0,0,0,0,8,22,1,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1347,                if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1352,"            bucket.saveField(iFieldType, value);",0,0,0,1,2,0,0,0,0,3,36,4,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1353,            return position;,0,0,0,0,0,1,12,0,0,13,16,6,0.16066,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,247,    },10,5,0,0,1,0,0,0,0,15,1,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,261,        SavedField[] savedFields = iSavedFields;,0,0,0,1,2,0,0,0,0,3,40,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,262,        int savedFieldsCount = iSavedFieldsCount;,0,0,0,0,0,0,0,0,0,0,41,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,6,0,0,1,3,0,4,2,0,12,67,3,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,273,        iSavedState = null;,10,1,0,0,0,0,0,0,0,13,19,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,274,        savedFields[savedFieldsCount] = field;,0,0,0,1,2,0,0,0,0,3,38,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,275,        iSavedFieldsCount = savedFieldsCount + 1;,4,1,0,0,0,0,0,0,0,6,41,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,276,    },2,0,0,0,1,0,0,0,0,2,1,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,467,"        SavedField(DateTimeField field, int value) {",0,0,0,1,3,0,0,0,0,4,44,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,468,            iField = field;,8,2,0,0,0,0,12,0,0,23,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,469,            iValue = value;,6,0,0,0,0,0,0,0,0,7,15,1,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,470,            iText = null;,2,0,0,0,0,0,0,0,0,3,13,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,471,            iLocale = null;,2,0,0,0,0,0,0,0,0,3,15,5,0.15909,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.15909,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,953,        if (dt == null) {,4,2,0,1,3,0,0,0,0,6,17,4,0.15605,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,954,            dt = new DateTimeFormatterBuilder(),12,3,0,1,2,0,0,4,0,21,35,3,0.15605,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,959,        return dt;,0,0,0,0,0,1,0,0,0,1,10,4,0.15605,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1318,                if (c < '0' || c > '9') {,2,1,0,1,3,0,0,0,0,3,25,4,0.15506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",8,3,0,2,4,0,4,0,0,15,65,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1294,            boolean negative = false;,6,1,0,0,0,0,2,0,0,10,25,1,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1295,            int length = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1296,            while (length < limit) {,0,0,0,1,3,0,0,0,0,4,24,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1297,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,2,1,0,2,5,0,10,0,0,13,55,3,0.15457,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1324,            if (length == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.15457,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,916,        if (tt == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,917,            tt = new DateTimeFormatterBuilder(),2,0,0,1,2,0,4,2,0,9,35,1,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,922,        return tt;,2,0,0,0,0,1,0,0,0,2,10,4,0.15123,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,879,        if (t == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,880,            t = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,34,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,885,        return t;,2,0,0,0,0,1,0,0,0,2,9,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1875,"                printTo(buf, null, instant, chrono);",0,1,1,1,2,0,18,0,0,29,36,1,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1878,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1879,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14759,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1482,        if (hmsf == null) {,4,1,0,1,3,0,4,2,0,11,19,3,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1483,            hmsf = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,0,0,2,37,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1490,        return hmsf;,24,7,0,0,0,1,14,4,0,53,12,1,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1691,        if (fse == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1692,            fse = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14583,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1699,        return fse;,0,0,0,0,0,1,0,0,0,1,11,4,0.14583,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2112,            if (displayZone == null) {,4,2,0,1,3,0,4,0,0,10,26,7,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,0,0,1,3,0,6,0,0,8,57,5,0.1437,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,119,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,72,    private SavedField[] iSavedFields = new SavedField[8];,6,0,0,2,4,1,4,8,0,19,54,1,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,120,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,121,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,122,        iZone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,25,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,123,        iChrono = chrono.withUTC();,10,1,0,1,2,0,8,0,0,21,27,3,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,0,0,0,2,4,0,0,0,0,6,58,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,125,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,126,        iDefaultYear = defaultYear;,4,0,0,0,0,0,0,0,0,5,27,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,127,    },10,1,0,0,1,0,0,0,0,12,1,7,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,924,        DateTimeParser parser = iParser;,0,0,0,0,0,0,0,0,0,0,32,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,925,        if (parser == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,928,        return parser;,2,0,0,0,0,1,0,0,0,2,14,4,0.14203,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",4,1,0,2,4,1,0,0,0,5,64,5,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1908,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1909,            int minDigits = iMinDigits;,4,0,0,0,0,0,0,0,0,4,27,6,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1913,                fraction = field.remainder(instant);,2,0,0,1,2,0,6,0,0,9,36,7,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1921,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1923,            if (fraction == 0) {,2,1,0,1,3,0,0,0,0,3,20,5,0.14121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1363,"            super(fieldType, maxParsedDigits, signed);",0,0,0,1,2,0,0,0,0,3,42,4,0.14,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1364,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,127,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.13573,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.13499,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,155,            return 1;,0,1,0,0,0,1,10,0,0,11,9,5,0.13315,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,146,        long otherMillis = otherField.getUnitMillis();,8,1,0,1,2,0,22,0,0,32,46,1,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,147,        long thisMillis = getUnitMillis();,0,0,0,1,2,0,0,0,0,3,34,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,149,        if (thisMillis == otherMillis) {,0,0,0,1,3,0,0,0,0,4,32,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,152,        if (thisMillis < otherMillis) {,4,1,0,1,3,0,0,0,0,5,31,4,0.13032,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0,0,0,0,1,0,0,0,0,1,87,4,0.13032,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,866,        return yearMonthDay();,6,1,0,1,2,2,2,0,0,10,22,3,0.12629,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,294,                    return chronology.months();,0,0,0,1,2,1,4,0,0,4,27,7,0.12596,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1358,        if (ymd == null) {,2,0,0,1,3,0,0,0,0,2,18,7,0.12468,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1359,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.12468,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1365,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.12468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2621,                locale = Locale.getDefault();,4,0,0,1,2,0,4,2,0,11,29,1,0.12343,0,0,-1
defect4j,time,org/joda/time/DurationFieldType,16,298,                    return chronology.days();,0,0,0,1,2,1,0,0,0,4,25,4,0.11922,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1180,            buf.append(iValue);,0,0,0,1,2,0,6,0,0,6,19,6,0.11893,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11893,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,16,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,4,0,0,4,32,7,0.11864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2614,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2615,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2619,            if (locale == null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2624,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2625,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,8,0,0,8,78,5,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2628,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1437,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,76,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1441,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1442,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,582,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,2,0,0,3,6,0,4,4,0,10,78,4,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,583,"        printTo(buf, instant);",0,0,0,1,2,0,6,0,0,6,22,5,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,584,        return buf.toString();,0,0,0,1,2,1,4,2,0,6,22,1,0.11695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,459,        long millis = DateTimeUtils.getInstantMillis(instant);,0,0,0,1,2,0,0,0,0,3,54,4,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,460,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,14,2,0,18,64,3,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,461,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,8,0,0,8,29,5,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,618,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,619,        chrono = selectChronology(chrono);,2,0,0,1,2,0,4,0,0,7,34,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,622,        DateTimeZone zone = chrono.getZone();,0,0,0,1,2,0,0,0,0,3,37,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,623,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,624,        long adjustedInstant = instant + offset;,8,1,0,0,0,0,0,0,0,9,40,3,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,625,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,16,6,0,3,7,0,0,0,0,23,65,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,631,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",4,1,0,2,4,0,18,0,0,23,79,1,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,632,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11475,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,437,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.11111,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2120,                buf.append('+');,10,2,0,1,2,1,4,0,0,18,16,1,0.11111,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1653,        if (lte == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.1056,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1654,            lte = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.1056,0,0,-1
