dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",2,0,0,1,2,0,6,0,0,9,52,4,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,196,        instant += millisOfDay;,0,0,0,0,0,0,0,0,0,0,23,4,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,198,        return instant;,2,0,0,0,0,1,0,0,0,2,15,4,0.00517,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.00513,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,124,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00512,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,125,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.00512,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.00512,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,127,    },2,1,0,0,1,0,8,0,0,11,1,3,0.00512,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,485,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00511,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00511,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,168,                break;,6,0,0,0,0,0,0,0,0,7,6,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1533,            i = ~i;,4,0,0,0,0,0,0,0,0,6,7,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1534,            if (i < transitions.length) {,8,2,0,1,3,0,0,0,0,10,29,1,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,111,        return getInfo(instant).getOffset(instant);,0,0,0,2,4,1,8,0,0,8,43,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,205,                if (iOffset == Integer.MIN_VALUE) {,12,2,0,1,3,0,0,0,0,14,35,1,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,8,0,0,1,2,0,6,0,0,15,43,3,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,208,                return iOffset;,2,0,0,0,0,1,0,0,0,2,15,7,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1528,            long[] transitions = iTransitions;,0,0,0,1,2,0,0,0,0,3,34,4,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1529,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,8,0,0,10,50,6,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1530,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.0051,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1570,            long[] transitions = iTransitions;,6,2,0,1,2,0,0,0,0,9,34,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1571,"            int i = Arrays.binarySearch(transitions, instant);",8,0,0,1,2,0,12,0,0,21,50,1,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1572,            i = (i >= 0) ? (i + 1) : ~i;,12,2,0,2,4,0,0,0,0,17,28,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1573,            if (i < transitions.length) {,6,1,0,1,3,0,0,0,0,7,29,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,148,        int period = (int)(millis >> 32);,4,1,0,2,4,0,0,0,0,5,33,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,149,        Info[] cache = iInfoCache;,4,0,0,1,2,0,10,2,0,16,26,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,150,        int index = period & cInfoCacheMask;,6,1,0,0,0,0,0,0,0,7,36,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,151,        Info info = cache[index];,2,0,1,1,2,0,0,2,0,8,25,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,8,4,0,4,9,0,0,0,0,12,65,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,153,            info = createInfo(millis);,0,0,0,1,2,0,0,0,0,3,26,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,154,            cache[index] = info;,2,0,1,1,2,0,0,0,0,7,20,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,156,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,160,        long periodStart = millis & (0xffffffffL << 32);,4,2,0,1,2,0,0,0,0,6,48,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,161,"        Info info = new Info(iZone, periodStart);",6,0,0,1,2,0,0,4,0,10,41,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,163,        long end = periodStart | 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,164,        Info chain = info;,0,0,0,0,0,0,0,0,0,0,18,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,166,            long next = iZone.nextTransition(periodStart);,2,0,0,1,2,0,6,0,0,8,46,7,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,167,            if (next == periodStart || next > end) {,8,3,0,1,3,0,0,0,0,11,40,6,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,174,        return info;,2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,188,"        Info(DateTimeZone zone, long periodStart) {",6,0,0,1,3,0,0,2,0,8,43,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,185,        private int iOffset = Integer.MIN_VALUE;,0,0,0,0,0,0,0,0,0,0,40,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,186,        private int iStandardOffset = Integer.MIN_VALUE;,6,0,0,0,0,1,0,0,0,7,48,3,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,189,            iPeriodStart = periodStart;,0,0,0,0,0,0,0,0,0,0,27,4,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,190,            iZoneRef = zone;,4,0,0,0,0,0,0,0,0,5,16,5,0.00509,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,191,        },0,0,0,0,1,0,0,2,0,2,1,15,0.00509,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,551,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00506,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0,0,0,1,2,1,0,0,0,4,43,4,0.00474,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,256,"        iMillis = checkInstant(instant, iChronology);",0,0,0,1,2,0,0,0,0,3,45,4,0.00469,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,257,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00469,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,448,        int year = getYear(millis);,2,0,0,1,2,0,4,0,0,6,27,5,0.00468,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,449,"        int month = getMonthOfYear(millis, year);",2,0,0,1,2,0,6,0,0,8,41,5,0.00468,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,450,"        return getDayOfMonth(millis, year, month);",0,0,0,1,2,1,8,0,0,8,42,5,0.00468,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,252,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00468,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,253,        iChronology = checkChronology(chronology);,14,1,0,1,2,0,4,0,0,22,42,3,0.00468,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",2,0,0,0,1,0,10,0,0,12,75,5,0.00468,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,131,        return iRange - 1;,2,1,0,0,0,1,0,0,0,3,18,4,0.00467,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,6,0,0,6,42,5,0.00465,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,6,0,0,6,36,5,0.00464,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,2,1,1,1,2,1,0,0,0,5,50,7,0.00463,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,219,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00463,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,214,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00462,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,468,        long dateMillis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,38,5,0.00462,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,53,4,0.00462,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,8,3,0,3,6,1,0,0,0,11,76,4,0.00462,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,4,2,0,4,8,0,4,0,0,10,52,5,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,93,        return,2,0,0,0,0,0,0,0,0,2,6,4,0.00458,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,25,107,        if ((base = iBase) != null) {,2,0,0,2,5,0,0,0,0,2,29,7,0.00456,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,25,108,            return base.getZone();,0,0,0,1,2,1,4,0,0,4,22,7,0.00456,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,79,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00455,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,3,6,0,16,0,0,16,115,5,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",2,1,0,1,2,1,8,0,0,11,60,3,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,233,        return MILLIS_PER_YEAR / 2;,0,0,0,0,0,1,0,0,0,1,27,4,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,241,        return (1970L * MILLIS_PER_YEAR) / 2;,6,2,0,1,2,1,0,0,0,9,37,1,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,1,0,4,8,0,18,0,0,19,89,3,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,3,6,0,14,2,0,16,97,1,0.00454,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,682,        return getMaxMonth();,0,0,0,1,2,1,2,0,0,2,21,5,0.00454,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,237,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00454,0,0,-1
defect4j,time,org/joda/time/field/FieldUtils,25,232,        if ((value < lowerBound) || (value > upperBound)) {,8,3,0,3,7,0,0,0,0,11,51,4,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,120,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.00453,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,2,0,0,1,2,0,2,0,0,4,56,5,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,6,2,0,2,4,0,6,0,0,14,64,1,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,401,        if (i2 < 0) {,4,1,0,1,3,0,4,0,0,9,13,3,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,404,        int year = (int) (i2 / unitMillis);,0,0,0,2,4,0,0,0,0,6,35,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,406,        long yearStart = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,37,5,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,407,        long diff = instant - yearStart;,6,1,0,0,0,0,0,0,0,7,32,5,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,409,        if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,14,2,0,1,4,0,4,0,0,21,61,3,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,428,        return year;,2,0,0,0,0,1,0,0,0,2,12,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,25,77,        return INSTANCE_UTC;,2,0,0,0,0,1,0,0,0,2,20,4,0.00451,0,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,139,        if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,5,0.00447,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,221,        return MIN_YEAR;,2,0,0,0,0,1,0,0,0,2,16,4,0.00446,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,202,        int leapYears = year / 100;,4,1,0,0,0,0,0,0,0,5,27,5,0.00443,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,203,        if (year < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00443,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0,0,0,2,4,0,0,0,0,6,55,4,0.00443,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,212,            if (isLeapYear(year)) {,0,0,0,2,5,0,4,0,0,4,23,7,0.00443,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0,0,0,2,4,1,0,0,0,7,90,4,0.00443,0,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,25,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,6,8,0,5,10,1,0,0,0,14,69,4,0.00434,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,284,        return instant;,0,0,0,0,0,1,0,0,0,1,15,4,0.00413,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,385,        long millis = getYearMillis(year);,0,0,0,1,2,0,0,0,0,3,34,4,0.00407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,386,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.00407,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,25,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,8,3,0,2,4,1,0,0,0,11,74,4,0.00407,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,25,270,        return DateTimeUtils.getChronology(chronology);,0,0,0,1,2,1,0,0,0,4,47,4,0.00404,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,25,51,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00403,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,5,10,1,12,0,0,12,77,5,1.125,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",2,0,0,5,10,1,6,0,0,9,70,8,1.0,0,0,-1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,        return getZone((String)obj);,2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,0,-1
defect4j,time,org/joda/time/DateTime,26,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.625,0,0,-1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);",0,0,0,1,2,0,0,0,0,3,21,4,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,                    isOptional = true;,2,0,0,0,0,0,6,0,0,9,18,5,0.5814,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5814,0,0,-1
defect4j,time,org/joda/time/DateTime,26,518,        chronology = DateTimeUtils.getChronology(chronology);,0,0,0,1,2,0,0,0,0,3,53,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,519,        if (getChronology() == chronology) {,0,0,0,2,5,0,0,0,0,7,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,522,        return super.toDateTime(chronology);,0,0,0,1,2,1,0,0,0,4,36,4,0.57143,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,5,10,1,0,0,0,16,75,4,0.57143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,            iSavedFieldsShared = false;,0,0,0,0,0,0,4,0,0,4,27,11,0.56818,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.52083,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",2,0,0,2,4,0,10,2,0,14,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,        iChronology = chrono;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",2,0,0,2,4,0,12,0,0,15,76,4,0.5,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,26,843,        return getOffset(instant) == getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,56,4,0.5,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,0,0,0,4,35,4,0.48039,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,        super();,2,0,0,1,2,0,6,0,0,8,8,3,0.4717,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,2,0,0,2,4,0,8,2,0,12,89,4,0.4717,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);",0,0,0,2,4,1,0,0,0,7,45,4,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,10,0,0,10,43,1,0.44444,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,            periodStart = next;,4,0,0,0,0,0,4,0,0,9,19,3,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36842,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,            long[] transitions = iTransitions;,4,1,0,1,2,0,12,0,0,18,34,1,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);",2,0,0,1,2,0,12,0,0,14,50,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,            if (i >= 0) {,2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,            i = ~i;,0,0,0,0,0,0,0,0,0,0,7,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,            if (i < transitions.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,2,4,1,0,0,0,7,51,4,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,                if (iStandardOffset == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0,0,0,1,2,0,4,0,0,5,59,5,0.36364,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,                return iStandardOffset;,0,0,0,0,0,1,0,0,0,1,23,4,0.36364,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,        return ISOChronology.getInstance(zone);,0,0,0,1,2,1,0,0,0,4,39,4,0.35211,0,0,-1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0,0,0,4,8,1,0,0,0,13,84,4,0.34783,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,4,0,0,2,4,0,8,4,0,17,66,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0,0,0,2,4,0,0,0,0,6,59,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,            long value = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0,0,0,2,4,0,0,0,0,6,55,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,            int length = 0;,4,1,1,0,0,0,0,0,0,7,15,6,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,            while (length < limit) {,4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,                if (c < '0' || c > '9') {,0,0,0,1,3,0,4,0,0,5,25,8,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,                long nn = n / 10;,0,0,0,0,0,0,0,0,0,0,17,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,                value += (c - '0') * nn;,6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,                n = nn;,0,0,0,0,0,0,0,0,0,0,7,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,            value /= 10;,0,0,0,0,0,0,0,0,0,0,12,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,            if (length == 0) {,10,1,0,1,3,0,0,4,0,16,18,1,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,            if (value > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,            DateTimeField parseField = new PreciseDateTimeField(,2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2034,"            bucket.saveField(parseField, (int) value);",0,0,0,2,4,0,0,0,0,6,42,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,            return position + length;,4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,        return iChrono;,2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,224,"        saveField(new SavedField(field, value));",0,0,0,2,4,0,0,0,0,6,40,4,0.34722,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,    },2,0,0,0,1,0,4,0,0,7,1,7,0.34722,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,63,        String str = (String) object;,0,0,0,1,2,0,0,0,0,3,29,4,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,6,1,0,1,2,0,14,2,0,23,57,1,0.33784,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,65,        return p.withChronology(chrono).parseMillis(str);,0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,                    expectSeparators = true;,2,0,0,0,0,0,4,0,0,8,24,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,                    limit--;,4,0,0,0,0,0,4,0,0,9,8,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,                    position++;,6,1,0,0,0,0,0,0,0,9,11,1,0.3125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,            limit--;,2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,            position++;,4,0,0,0,0,0,6,0,0,12,11,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2263,"            if (digitCount(text, position, 2) < 2) {",0,0,0,2,5,0,0,0,0,7,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,            if (hours > 23) {,6,2,0,1,3,0,0,0,0,9,17,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,4,2,0,11,51,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2275,            limit -= 2;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,            position += 2;,2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,                if (limit <= 0) {,2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2287,                c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,26,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,                if (c == ':') {,4,1,0,1,3,0,6,2,0,14,15,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2300,"                int count = digitCount(text, position, 2);",0,0,0,1,2,0,0,0,0,3,42,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,                if (count == 0 && !expectSeparators) {,4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2303,                } else if (count < 2) {,0,0,0,1,4,0,0,0,0,5,23,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",2,0,0,1,2,0,6,0,0,9,57,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2309,                if (minutes > 59) {,0,0,0,1,3,0,0,0,0,4,19,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2312,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,56,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,                limit -= 2;,2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2314,                position += 2;,0,0,0,0,0,0,0,0,0,0,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2318,                if (limit <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,                    break parse;,2,0,0,0,0,0,0,0,0,2,12,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2377,            bucket.setOffset(negative ? -offset : offset);,0,0,0,1,2,0,0,0,0,3,46,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,            return position;,6,2,0,0,0,1,2,0,0,10,16,8,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);",12,3,0,2,4,0,20,0,0,38,55,1,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2387,            amount = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2388,            for (; limit > 0; limit--) {,0,0,0,1,3,0,0,0,0,4,28,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2389,                char c = text.charAt(position + amount);,0,0,0,1,2,0,0,0,0,3,40,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,                if (c < '0' || c > '9') {,0,0,0,1,3,0,6,0,0,6,25,7,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,                amount++;,2,0,0,0,0,0,0,0,0,2,9,6,0.30864,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2395,            return amount;,0,0,0,0,0,1,0,0,0,1,14,4,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,352,        int value = text.charAt(position) - '0';,2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,8,7,0,4,8,1,4,0,0,21,71,3,0.30864,0,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,26,424,        return ISODateTimeFormat.dateTime().print(this);,14,2,0,2,4,1,12,2,0,31,48,3,0.30622,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2239,            char c = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.2907,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,            if (c == '-') {,2,1,0,1,3,0,0,0,0,4,15,5,0.2907,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,        if (dtp == null) {,8,3,0,1,3,0,4,0,0,15,18,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,            DateTimeParser time = new DateTimeFormatterBuilder(),6,1,0,1,2,0,10,0,0,18,52,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,            dtp = new DateTimeFormatterBuilder(),10,1,0,1,2,0,0,4,0,16,36,1,0.26316,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,778,        return dtp;,0,0,0,0,0,1,0,0,0,1,11,4,0.26316,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,8,1,0,0,0,0,0,0,0,10,63,5,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2116,            if (displayOffset == 0 && iMinFields <= 2) {,0,0,0,1,3,0,0,0,0,4,44,4,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,                return;,8,0,0,0,0,1,4,0,0,12,7,1,0.25,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2109,                buf.append(':');,0,0,0,1,2,0,0,0,0,3,16,4,0.24903,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2090,            if (displayOffset >= 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,2,0,1,0,0,0,0,4,0,8,62,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,1,2,0,0,0,0,3,47,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,            if (iMaxFields == 1) {,2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0,0,0,1,2,0,0,0,0,3,64,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2103,            if (displayOffset == 0 && iMinFields <= 1) {,0,0,0,1,3,0,0,0,0,4,44,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0,0,0,0,0,0,0,0,0,0,66,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2108,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,1,2,0,0,0,0,3,49,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2112,            if (iMaxFields == 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.23881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,                negative = false;,8,1,0,0,0,0,0,0,0,10,17,6,0.22857,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,                            bestInvalidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,            SavedField[] newArray = new SavedField,2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,256,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0,0,0,1,2,0,0,0,0,3,64,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,257,            iSavedFields = savedFields = newArray;,0,0,0,0,0,0,0,0,0,0,38,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,258,            iSavedFieldsShared = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.22523,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,        if (dotp == null) {,0,0,0,1,3,0,8,0,0,8,19,9,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),8,3,0,1,2,0,0,0,0,11,60,6,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,805,            dotp = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,810,        return dotp;,0,0,0,0,0,1,0,0,0,1,12,4,0.22321,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,936,        if (dt == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,937,            dt = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,942,        return dt;,0,0,0,0,0,1,0,0,0,1,10,4,0.21695,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2721,            return ~bestInvalidPos;,0,0,0,0,0,1,0,0,0,1,23,4,0.21368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2242,            } else if (c == '+') {,0,1,1,1,4,0,0,0,0,10,22,6,0.21333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,181,        iSavedState = null;,4,0,0,0,0,0,0,0,0,5,19,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,182,        iOffset = offset;,4,1,0,0,0,0,0,0,0,5,17,5,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,183,        iZone = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.21186,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,437,                enclosing.iSavedFieldsShared = true;,0,0,0,0,0,0,0,0,0,0,36,4,0.21008,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,901,        if (tt == null) {,0,0,0,1,3,0,0,0,0,4,17,4,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,902,            tt = new DateTimeFormatterBuilder(),4,0,0,1,2,0,0,0,0,5,35,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,907,        return tt;,6,0,0,0,0,1,0,0,0,7,10,5,0.20984,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2715,                if (bestValidState != null) {,2,1,0,1,3,0,0,0,0,3,29,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2716,                    bucket.restoreState(bestValidState);,0,0,0,1,2,0,6,0,0,6,36,10,0.20661,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2718,                return bestValidPos;,2,0,0,0,0,1,0,0,0,2,20,7,0.20661,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,866,        if (t == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.20447,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,867,            t = new DateTimeFormatterBuilder(),4,1,0,1,2,0,4,0,0,10,34,6,0.20447,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,872,        return t;,0,0,0,0,0,1,0,0,0,1,9,4,0.20447,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1846,"                printTo(buf, null, instant, chrono);",6,0,0,1,2,0,0,0,0,7,36,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1849,            },0,0,0,0,1,0,0,0,0,1,1,4,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1850,        },2,1,0,0,1,0,4,0,0,7,1,5,0.20317,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2083,            if (displayZone == null) {,0,0,0,1,3,0,0,0,0,4,26,4,0.20126,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0,0,0,1,3,0,0,0,0,4,57,4,0.20126,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1450,        if (hmsf == null) {,10,3,0,1,3,0,0,0,0,14,19,1,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1451,            hmsf = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,37,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1458,        return hmsf;,0,0,0,0,0,1,0,0,0,1,12,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1659,        if (fse == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1660,            fse = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1667,        return fse;,2,0,0,0,0,1,0,0,0,2,11,4,0.20063,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1236,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",8,0,0,3,7,0,4,0,0,13,69,4,0.19841,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2234,            if (limit <= 1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.19531,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1879,            DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1880,            int minDigits = iMinDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1884,                fraction = field.remainder(instant);,0,0,0,1,2,0,0,0,0,3,36,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1892,            },8,2,0,0,1,0,0,0,0,10,1,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1894,            if (fraction == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.19394,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2699,                        bestValidPos = parsePos;,4,0,0,0,0,0,0,0,0,5,24,11,0.1938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2700,                        bestValidState = bucket.saveState();,0,0,0,1,2,0,0,0,0,3,36,4,0.1938,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1932,                while (minDigits < digits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1933,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0,0,0,2,5,0,0,0,0,7,51,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1936,                    digits--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1937,                    length--;,2,0,0,0,0,0,0,0,0,3,9,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1939,                if (length < str.length()) {,2,1,0,2,5,0,4,0,0,7,28,7,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1940,                    if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,9,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1941,                        for (int i=0; i<length; i++) {,4,0,0,1,3,0,0,0,0,4,30,6,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1942,                            buf.append(str.charAt(i));,0,0,0,2,4,0,10,0,0,10,26,14,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1949,                    return;,0,0,0,0,0,1,0,0,0,1,7,4,0.19231,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1975,                case 9:  scalar = 1000000000L; break;,0,0,0,0,0,0,0,0,0,0,37,4,0.19231,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,163,            return converter;,0,0,0,0,0,1,0,0,0,1,17,4,0.19084,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,26,127,            return instant % iUnitMillis;,0,0,0,0,0,1,0,0,0,1,29,4,0.18497,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1908,"            long[] fractionData = getFractionData(fraction, field);",2,0,0,2,4,0,6,0,0,8,55,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1909,            long scaled = fractionData[0];,2,0,1,1,2,0,0,0,0,4,30,6,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1910,            int maxDigits = (int) fractionData[1];,0,0,0,2,4,0,0,0,0,6,38,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1912,            if ((scaled & 0x7fffffff) == scaled) {,2,0,0,2,5,0,8,0,0,11,38,7,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1913,                str = Integer.toString((int) scaled);,0,0,0,2,4,0,10,0,0,10,37,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1918,            int length = str.length();,10,1,0,1,2,0,4,0,0,15,26,1,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1919,            int digits = maxDigits;,2,0,1,0,0,0,0,4,0,8,23,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1920,            while (length < digits) {,0,0,0,1,3,0,0,0,0,4,25,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1930,            if (minDigits < digits) {,4,1,0,1,3,0,0,0,0,5,25,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1961,            long rangeMillis = field.getDurationField().getUnitMillis();,0,0,0,2,4,0,0,0,0,6,60,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1963,            int maxDigits = iMaxDigits;,0,0,0,0,0,0,0,0,0,0,27,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1965,                switch (maxDigits) {,2,0,0,1,3,0,0,0,0,2,20,5,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1986,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,4,0,0,3,7,0,4,2,0,10,55,12,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1987,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.18382,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1993,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0,0,0,2,4,1,0,0,0,7,63,4,0.18382,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,26,126,        if (instant >= 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18338,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,475,                    return chronology.dayOfYear();,0,0,0,1,2,1,8,0,0,9,30,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2215,                if (iZeroOffsetParseText.length() == 0) {,4,1,0,2,5,0,4,0,0,10,41,4,0.18248,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2226,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",2,0,0,3,7,0,4,2,0,8,97,7,0.18248,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,854,        return yearMonthDay();,0,0,0,1,2,1,2,0,0,2,22,5,0.17729,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,162,        if (converter != null) {,10,2,0,1,3,0,0,2,0,16,24,3,0.17606,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1326,        if (ymd == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.17486,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1327,            ymd = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.17486,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1333,        return ymd;,0,0,0,0,0,1,0,0,0,1,11,4,0.17486,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,26,160,        InstantConverter converter =,2,0,0,0,0,0,0,2,0,4,28,4,0.17483,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2091,                buf.append('+');,0,0,0,1,2,0,0,0,0,3,16,4,0.17308,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2517,                locale = Locale.getDefault();,0,0,0,1,2,0,0,0,0,3,29,4,0.17204,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,68,            for (; size > 2; size--) {,4,1,0,1,3,0,0,0,0,6,26,7,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,74,            int d = ((value + 1) * 13421772) >> 27;,4,3,0,2,4,0,0,0,0,7,39,8,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,75,            buf.append((char) (d + '0'));,2,1,1,3,6,0,8,0,0,16,29,1,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,12,4,0,5,10,0,4,0,0,22,55,4,0.16798,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,78,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.16798,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,483,                    return chronology.weekyear();,0,0,0,1,2,1,4,0,0,4,29,7,0.16779,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1151,            buf.append(iValue);,8,0,0,1,2,0,8,4,0,22,19,1,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1152,        },2,0,0,0,1,0,0,0,0,2,1,4,0.1671,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,736,"                return bucket.computeMillis(true, text);",0,0,0,1,2,1,0,0,0,4,40,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2510,            DateTimePrinter[] elements = iPrinters;,0,0,0,1,2,0,0,0,0,3,39,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2511,            if (elements == null) {,16,2,1,1,3,0,2,2,0,27,23,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2515,            if (locale == null) {,2,1,0,1,3,0,0,0,0,3,21,5,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2520,            int len = elements.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2521,            for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,2,4,0,0,0,0,6,78,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2524,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1408,                DateTimeField field = iFieldType.getField(chrono);,0,0,0,1,2,0,0,0,0,3,50,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,2,4,0,0,0,0,6,76,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1412,            },0,0,0,0,1,0,0,0,0,1,1,4,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1413,        },2,0,0,0,1,2,0,6,0,10,1,1,0.16537,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,10,1,0,3,6,0,4,4,0,20,78,3,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,581,"        printTo(buf, instant);",0,0,0,1,2,0,0,0,0,3,22,4,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,582,        return buf.toString();,0,0,0,1,2,1,0,0,0,4,22,4,0.1641,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,457,        long millis = DateTimeUtils.getInstantMillis(instant);,6,0,0,1,2,0,16,4,0,27,54,3,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,2,0,0,1,2,0,6,2,0,10,64,4,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,459,"        printTo(buf, millis, chrono);",0,0,0,1,2,0,8,0,0,8,29,5,0.16368,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,460,    },2,0,0,0,1,0,4,2,0,8,1,5,0.16368,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,83,                digits = 4;,2,0,0,0,0,0,0,0,0,3,11,10,0.16203,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,503,                    return chronology.secondOfDay();,0,0,0,1,2,1,4,0,0,4,32,7,0.16162,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,82,            } else if (value < 10000) {,2,1,0,1,4,0,0,0,0,3,27,8,0.16162,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,616,        DateTimePrinter printer = requirePrinter();,2,0,0,1,2,0,2,2,0,6,43,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,617,        chrono = selectChronology(chrono);,8,1,0,1,2,0,0,0,0,10,34,5,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,620,        DateTimeZone zone = chrono.getZone();,2,0,0,1,2,0,4,2,0,8,37,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,621,        int offset = zone.getOffset(instant);,0,0,0,1,2,0,0,0,0,3,37,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,622,        long adjustedInstant = instant + offset;,0,0,0,0,0,0,0,0,0,0,40,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,8,0,0,3,7,0,4,0,0,13,65,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,2,4,0,28,0,0,28,79,3,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,630,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16121,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2713,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,10,4,0,2,5,0,0,0,0,14,74,5,0.16026,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,80,            if (value < 1000) {,6,1,0,1,3,0,4,0,0,12,19,1,0.1596,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,87,            for (; size > digits; size--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.1596,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,0,0,0,6,36,4,0.1596,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2697,                            return parsePos;,0,0,0,0,0,1,0,0,0,1,16,4,0.15823,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2211,            int limit = text.length() - position;,6,1,0,1,2,0,4,0,0,11,37,1,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2214,            if (iZeroOffsetParseText != null) {,2,1,0,1,3,0,0,0,0,3,35,6,0.15152,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1181,                a = Character.toUpperCase(a);,2,0,0,1,2,0,6,0,0,9,29,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1182,                b = Character.toUpperCase(b);,0,0,0,1,2,0,4,0,0,4,29,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1183,                if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,7,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1184,                    a = Character.toLowerCase(a);,0,0,0,1,2,0,0,0,0,3,29,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1185,                    b = Character.toLowerCase(b);,2,0,0,1,2,0,6,0,0,9,29,9,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1186,                    if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1187,                        return ~position;,0,0,0,0,0,1,0,0,0,1,17,4,0.1506,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2691,                    if (parsePos > bestValidPos) {,4,1,0,1,3,0,0,0,0,5,30,9,0.14881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2692,                        if (parsePos >= text.length() ||,2,0,0,1,3,0,0,0,0,2,32,4,0.14881,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2683,                    if (bestValidPos <= position) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14706,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1621,        if (lte == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.14645,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1622,            lte = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.14645,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1626,        return lte;,2,0,0,0,0,1,0,0,0,2,11,4,0.14645,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,495,            if (b == null || !b.isSupported()) {,2,2,0,2,5,0,4,0,0,9,36,6,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,498,            return -1;,0,0,0,0,0,1,0,0,0,1,10,6,0.14286,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,735,            if (newPos >= text.length()) {,6,1,0,2,5,0,4,0,0,12,30,1,0.13889,0,0,-1
defect4j,time,org/joda/time/DateTime,26,174,"        super(instant, chronology);",4,0,0,1,2,0,0,0,0,4,27,4,0.13763,0,0,-1
defect4j,time,org/joda/time/DateTime,26,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13763,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,575,        int thisYear = getYear(instant);,0,0,0,1,2,0,0,0,0,3,32,4,0.13559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",2,0,0,1,2,0,6,0,0,8,50,5,0.13559,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0,0,0,1,2,1,0,0,0,4,47,4,0.13559,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2504,            return iPrintedLengthEstimate;,0,0,0,0,0,1,0,0,0,1,30,4,0.13445,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2703,                    if (parsePos < 0) {,2,1,0,1,3,0,0,0,0,3,19,9,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2704,                        parsePos = ~parsePos;,4,0,0,0,0,0,0,0,0,6,21,11,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2705,                        if (parsePos > bestInvalidPos) {,4,1,0,1,3,0,0,0,0,5,32,11,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2710,                bucket.restoreState(originalState);,2,0,0,1,2,0,20,0,0,23,35,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,289,        if (savedState instanceof SavedState) {,2,0,0,1,3,0,0,2,0,4,39,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,290,            if (((SavedState) savedState).restoreState(this)) {,2,0,0,4,9,0,2,2,0,6,51,7,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,291,                iSavedState = savedState;,0,0,0,0,0,0,0,0,0,0,25,4,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,292,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,426,            if (enclosing != DateTimeParserBucket.this) {,4,1,0,1,3,0,0,0,0,5,45,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,429,            enclosing.iZone = this.iZone;,6,0,0,0,0,0,0,0,0,7,29,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,430,            enclosing.iOffset = this.iOffset;,8,2,0,0,0,0,0,0,0,11,33,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,431,            enclosing.iSavedFields = this.iSavedFields;,0,0,0,0,0,0,0,0,0,0,43,4,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,432,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,14,1,0,1,3,0,4,0,0,20,59,1,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,439,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,2,0,0,0,0,0,4,2,0,8,53,6,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,440,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.13369,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,917,            chrono = iChrono;,0,0,0,0,0,0,0,0,0,0,17,4,0.13298,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,26,343,        int year = iChronology.getYear(instant);,6,0,0,1,2,0,20,0,0,27,40,1,0.13298,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,26,344,"        int month = iChronology.getMonthOfYear(instant, year);",2,0,0,1,2,0,8,0,0,10,54,5,0.13298,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,26,345,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,1,2,1,0,0,0,4,51,4,0.13298,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",6,0,0,0,1,1,0,2,0,8,56,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2668,            DateTimeParser[] parsers = iParsers;,0,0,0,1,2,0,0,0,0,3,36,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2669,            int length = parsers.length;,8,0,0,0,0,0,0,0,0,8,28,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2671,            final Object originalState = bucket.saveState();,2,0,0,1,2,1,4,2,0,9,48,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2672,            boolean isOptional = false;,4,0,0,0,0,0,0,0,0,6,27,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2674,            int bestValidPos = position;,0,0,0,0,0,0,0,0,0,0,28,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2675,            Object bestValidState = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2677,            int bestInvalidPos = position;,2,0,0,0,0,0,0,2,0,4,30,6,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2679,            for (int i=0; i<length; i++) {,8,1,0,1,3,0,0,0,0,10,30,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2680,                DateTimeParser parser = parsers[i];,4,1,1,1,2,0,0,2,0,11,35,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2681,                if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,7,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2689,"                int parsePos = parser.parseInto(bucket, text, position);",0,0,0,1,2,0,0,0,0,3,56,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2690,                if (parsePos >= position) {,0,0,0,1,3,0,0,0,0,4,27,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,274,        if (iSavedState == null) {,2,1,0,1,3,0,0,0,0,3,26,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,275,            iSavedState = new SavedState();,2,0,0,1,2,0,0,2,0,5,31,6,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,277,        return iSavedState;,2,0,0,0,0,1,0,0,0,2,19,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,55,public class DateTimeParserBucket {,0,0,0,0,1,0,0,0,0,1,35,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,418,        SavedState() {,0,0,0,1,3,0,0,0,0,4,14,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,419,            this.iZone = DateTimeParserBucket.this.iZone;,6,0,0,0,0,0,0,0,0,7,45,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,420,            this.iOffset = DateTimeParserBucket.this.iOffset;,8,0,0,0,0,0,2,0,0,11,49,1,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,421,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,0,0,0,0,0,0,0,0,0,0,59,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,422,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,6,0,0,0,0,0,0,0,0,7,69,5,0.13228,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,423,        },0,0,0,0,1,0,0,0,0,1,1,4,0.13228,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1671,        if (ze == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.13061,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1672,            ze = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,35,6,0.13061,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1676,        return ze;,0,0,0,0,0,1,0,0,0,1,10,4,0.13061,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2072,                est += iMinFields - 1;,4,1,0,0,0,0,0,0,0,6,22,7,0.13008,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,67,        } else if (value < 100) {,8,3,0,1,4,0,0,0,0,12,25,4,0.12774,0,0,-1
defect4j,time,org/joda/time/DateTime,26,1678,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",4,1,0,5,10,1,16,0,0,22,77,1,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,237,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,238,"        return append0(null, parser);",0,0,0,1,2,1,4,0,0,5,29,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",8,0,0,2,4,1,14,0,0,23,77,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",4,0,0,2,4,1,10,2,0,17,75,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,695,        if (tpe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,697,            DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,60,4,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,708,            tpe = new DateTimeFormatterBuilder(),10,0,0,1,2,0,4,2,0,18,36,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,744,        return tpe;,6,0,0,0,0,1,0,2,0,8,11,3,0.125,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,655,        DateTimePrinter printer = iPrinter;,8,0,0,0,0,0,0,2,0,11,35,1,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,656,        if (printer == null) {,4,1,0,1,3,0,4,0,0,10,22,7,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,659,        return printer;,2,0,0,0,0,1,0,0,0,2,15,4,0.12476,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2070,            int est = 1 + iMinFields << 1;,4,2,0,0,0,0,0,0,0,6,30,6,0.12451,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2071,            if (iShowSeparators) {,0,0,0,1,3,0,0,0,0,4,22,4,0.12451,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2074,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,4,3,0,2,5,0,4,0,0,11,74,5,0.12451,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2077,            return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.12451,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2207,            return estimatePrintedLength();,0,0,0,1,2,1,2,0,0,2,31,6,0.12451,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,64,                buf.append('0');,4,0,0,1,2,0,4,0,0,10,16,3,0.12403,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,63,            for (; size > 1; size--) {,4,1,0,1,3,0,0,0,0,6,26,6,0.12379,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,66,            buf.append((char)(value + '0'));,2,1,0,3,6,0,4,0,0,8,32,7,0.12379,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,26,132,        return Calendar.class;,0,0,0,0,0,1,0,0,0,1,22,4,0.12315,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,532,        if (fieldType == null) {,4,1,0,1,3,0,4,2,0,11,24,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,535,        if (maxDigits < minDigits) {,6,1,0,1,3,0,4,2,0,13,28,3,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,538,        if (minDigits < 0 || maxDigits <= 0) {,0,0,0,1,3,0,0,0,0,4,38,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0,0,0,2,4,1,0,0,0,7,62,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,77,5,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1828,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1829,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1831,            if (maxDigits > 18) {,4,1,0,1,3,0,0,0,0,5,21,1,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1834,            iMinDigits = minDigits;,4,0,0,0,0,0,0,0,0,5,23,5,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1835,            iMaxDigits = maxDigits;,0,0,0,0,0,0,0,0,0,0,23,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1836,        },0,0,0,0,1,0,0,0,0,1,1,4,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1839,            return iMaxDigits;,4,0,0,0,0,1,0,0,0,5,18,1,0.12144,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1997,            return iMaxDigits;,2,0,0,0,0,1,0,0,0,2,18,5,0.12144,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,26,123,        return iChronology.getYearMillis(get(instant));,2,0,0,2,4,1,8,0,0,10,47,4,0.12077,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,167,        Chronology chrono = instant.getChronology();,2,0,0,1,2,0,4,2,0,8,44,4,0.11985,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,168,        if (chrono == null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.11985,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,171,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.11985,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1024,        return append0(new TimeZoneOffset,0,0,0,0,1,1,0,0,0,2,33,4,0.11896,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2054,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2055,            iZeroOffsetPrintText = zeroOffsetPrintText;,6,1,0,0,0,0,0,0,0,8,43,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2056,            iZeroOffsetParseText = zeroOffsetParseText;,4,0,0,0,0,0,0,0,0,5,43,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2057,            iShowSeparators = showSeparators;,4,0,0,0,0,0,0,0,0,5,33,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2058,            if (minFields <= 0 || maxFields < minFields) {,6,3,0,1,3,0,0,0,0,9,46,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2061,            if (minFields > 4) {,2,1,0,1,3,0,0,0,0,3,20,5,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2065,            iMinFields = minFields;,6,0,0,0,0,0,0,2,0,9,23,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2066,            iMaxFields = maxFields;,8,2,0,0,0,0,6,0,0,17,23,1,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2067,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11808,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,255,        if (iChrono == chrono) {,6,1,0,1,3,0,0,0,0,7,24,3,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,729,        DateTimeParser parser = requireParser();,2,0,0,1,2,0,2,2,0,6,40,4,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,731,        Chronology chrono = selectChronology(iChrono);,2,0,0,1,2,0,4,2,0,8,46,4,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,732,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",12,0,0,1,2,0,6,4,0,22,101,1,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,733,"        int newPos = parser.parseInto(bucket, text, 0);",2,0,0,1,2,0,8,0,0,10,47,5,0.11468,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,734,        if (newPos >= 0) {,8,0,0,1,3,0,4,0,0,13,18,4,0.11468,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,164,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11429,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1649,        if (sme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1650,            sme = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.11368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1655,        return sme;,18,2,0,0,0,1,0,0,0,21,11,1,0.11368,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1639,        if (mhe == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11307,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1640,            mhe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.11307,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1645,        return mhe;,0,0,0,0,0,1,0,0,0,1,11,4,0.11307,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1630,        if (hde == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.11268,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1631,            hde = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.11268,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1635,        return hde;,0,0,0,0,0,1,0,0,0,1,11,4,0.11268,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,149,        return instant.getMillis();,0,0,0,1,2,1,4,0,0,4,27,5,0.11169,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,363,            millis -= iOffset;,6,0,0,0,0,0,0,0,0,7,18,3,0.11013,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1895,                if (buf != null) {,2,1,0,1,3,0,0,0,0,3,18,7,0.10965,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1896,                    while (--minDigits >= 0) {,6,1,0,1,3,0,0,2,0,11,26,1,0.10965,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1897,                        buf.append('0');,0,0,0,1,2,0,4,0,0,5,16,12,0.10965,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1904,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.10965,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,71,4,0.10811,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,26,146,        if (instant == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.10649,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,50,        if (value < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.10492,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,62,        if (value < 10) {,2,1,0,1,3,0,0,0,0,3,17,4,0.10492,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10492,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,486,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.10417,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,482,            DateTimeField other = obj.iField;,6,0,0,0,0,0,0,2,0,8,33,5,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,483,            int result = compareReverse,2,0,0,0,0,0,2,0,0,4,27,6,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,485,            if (result != 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.10288,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,471,                millis = iField.roundFloor(millis);,2,0,0,1,2,0,6,0,0,9,35,7,0.10204,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,503,        return -a.compareTo(b);,0,0,0,1,2,1,6,0,0,7,23,4,0.10121,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1572,        if (dme == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.10095,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1573,            dme = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.10095,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1578,        return dme;,2,0,0,0,0,1,0,0,0,2,11,4,0.10095,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1192,            return position + 1;,2,1,0,0,0,1,0,0,0,3,20,5,0.10081,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,500,        if (b == null || !b.isSupported()) {,2,2,0,2,5,0,4,0,0,9,36,4,0.1004,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1562,        if (mye == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.10016,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1563,            mye = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.10016,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1568,        return mye;,6,1,0,0,0,1,0,0,0,7,11,1,0.10016,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,26,66,        return Date.class;,2,1,0,0,0,1,0,0,0,3,18,5,0.1,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1550,                return iStandardOffsets[i];,0,0,1,1,2,1,0,0,0,4,27,8,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,69,4,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2473,                iPrinters = null;,2,0,0,0,0,0,0,0,0,3,17,7,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2474,                iPrintedLengthEstimate = 0;,2,0,0,0,0,0,16,0,0,19,27,1,0.1,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,341,            DurationField months = DurationFieldType.months().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,68,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,342,            DurationField days = DurationFieldType.days().getField(iChrono);,2,0,0,2,4,0,8,2,0,12,64,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,343,            DurationField first = savedFields[0].iField.getDurationField();,0,0,0,2,4,0,0,0,0,6,63,4,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,344,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,3,7,0,12,0,0,15,77,6,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,353,"                millis = savedFields[i].set(millis, resetFields);",4,0,1,2,4,0,12,2,0,23,49,3,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,403,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,14,4,1,5,11,0,2,0,0,28,63,1,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,494,        if (a == null || !a.isSupported()) {,2,2,0,2,5,0,4,0,0,9,36,4,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,465,            if (iText == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,466,"                millis = iField.set(millis, iValue);",2,0,0,1,2,0,8,0,0,11,36,7,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,470,            if (reset) {,0,0,0,1,3,0,0,0,0,4,12,4,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,473,            return millis;,2,0,0,0,0,1,0,0,0,2,14,5,0.09921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",2,0,0,2,4,1,0,4,0,6,66,4,0.09771,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,505,                    return chronology.secondOfMinute();,0,0,0,1,2,1,4,0,0,4,35,7,0.09756,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1553,        if (ye == null) {,0,0,0,1,3,0,4,0,0,4,17,8,0.09726,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1554,            ye = new DateTimeFormatterBuilder(),12,1,0,1,2,0,0,2,0,17,35,1,0.09726,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1558,        return ye;,10,0,0,0,0,1,4,0,0,15,10,3,0.09726,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,371,        long millis = getYearMillis(year);,2,0,0,1,2,0,4,0,0,6,34,5,0.0969,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,372,"        millis += getTotalMillisByYearMonth(year, month);",2,0,0,1,2,0,6,0,0,9,49,4,0.0969,0,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,26,373,        return millis;,2,0,0,0,0,1,0,0,0,2,14,4,0.0969,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,26,77,        return Long.class;,2,0,0,0,0,1,0,2,0,5,18,3,0.09542,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,915,        chrono = DateTimeUtils.getChronology(chrono);,2,0,0,1,2,0,6,0,0,9,45,4,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,916,        if (iChrono != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,919,        if (iZone != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,922,        return chrono;,14,1,0,0,0,1,0,0,0,17,14,3,0.09524,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,68,4,0.09496,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,2,4,1,0,0,0,7,67,4,0.09195,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,377,        return millis;,0,0,0,0,0,1,0,0,0,1,14,4,0.09191,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1177,            char a = text.charAt(position);,0,0,0,1,2,0,0,0,0,3,31,4,0.09191,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1178,            char b = iValue;,6,0,0,0,0,0,4,4,0,15,16,3,0.09191,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1180,            if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09191,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,479,                    return chronology.dayOfMonth();,0,0,0,1,2,1,4,0,0,4,31,7,0.09143,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,332,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,333,        int count = iSavedFieldsCount;,6,0,0,0,0,0,0,0,0,6,30,3,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,334,        if (iSavedFieldsShared) {,2,0,0,1,3,0,0,0,0,2,25,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,338,"        sort(savedFields, count);",0,0,0,1,2,0,6,0,0,6,25,5,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,339,        if (count > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,350,        long millis = iMillis;,6,0,0,0,0,0,6,0,0,13,22,1,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,352,            for (int i=0; i<count; i++) {,0,0,0,1,3,0,8,0,0,8,29,5,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,360,        },12,1,0,0,1,0,0,0,0,15,1,5,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,362,        if (iZone == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,399,        if (high > 10) {,4,2,0,1,3,0,0,0,0,6,16,4,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,402,            for (int i=0; i<high; i++) {,8,1,0,1,3,0,0,0,0,10,28,6,0.09124,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,410,    },2,0,0,0,1,0,0,0,0,2,1,4,0.09124,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1554,                if (i > 0) {,4,2,0,1,3,0,0,0,0,6,12,5,0.09091,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1555,                    return iStandardOffsets[i - 1];,0,0,0,1,2,1,0,0,0,4,31,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1316,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,10,6,0,4,8,0,4,0,0,23,63,1,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1173,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.09091,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1292,                length++;,10,0,0,0,0,0,4,0,0,16,9,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1293,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1300,            if (length >= 9) {,2,1,0,1,3,0,0,0,0,3,18,5,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1305,                int i = position;,4,0,0,0,0,0,0,0,0,4,17,8,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1306,                if (negative) {,2,0,0,1,3,0,0,0,0,2,15,7,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1310,                    value = text.charAt(i++) - '0';,4,1,0,1,2,0,4,0,0,12,31,9,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1313,                },0,0,0,0,1,0,0,0,0,1,1,4,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1314,                position += length;,6,0,0,0,0,0,0,2,0,10,19,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1315,                while (i < position) {,4,1,0,1,3,0,10,0,0,15,22,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1318,                if (negative) {,6,0,0,1,3,0,4,0,0,11,15,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1323,"            bucket.saveField(iFieldType, value);",6,0,0,1,2,0,8,0,0,14,36,1,0.09058,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1324,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.09058,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,253,                return converter;,2,0,0,0,0,1,0,2,0,4,17,8,0.09025,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,234,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0,0,0,3,6,0,0,0,0,9,62,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,235,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,249,        SavedField[] savedFields = iSavedFields;,4,0,0,1,2,0,0,2,0,6,40,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,250,        int savedFieldsCount = iSavedFieldsCount;,4,0,0,0,0,0,0,0,0,4,41,5,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,252,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,8,2,0,1,3,0,0,0,0,10,67,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,261,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,262,        savedFields[savedFieldsCount] = field;,6,0,1,1,2,0,0,2,0,13,38,3,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,263,        iSavedFieldsCount = savedFieldsCount + 1;,4,1,0,0,0,0,0,0,0,6,41,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,264,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,450,"        SavedField(DateTimeField field, int value) {",6,0,0,1,3,0,0,2,0,8,44,3,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,451,            iField = field;,0,0,0,0,0,0,0,0,0,0,15,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,452,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,453,            iText = null;,0,0,0,0,0,0,0,0,0,0,13,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,454,            iLocale = null;,4,1,0,0,0,0,0,0,0,6,15,1,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,455,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08961,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,75,5,0.08914,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1104,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.08803,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,611,        if (dpe == null) {,4,1,0,1,3,0,6,0,0,12,18,3,0.08803,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,612,            dpe = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.08803,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,634,        return dpe;,4,0,0,0,0,4,0,4,0,11,11,1,0.08803,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,501,                    return chronology.minuteOfHour();,0,0,0,1,2,1,4,0,0,4,33,7,0.08791,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1289,                if (c < '0' || c > '9') {,4,3,0,1,3,0,0,0,0,9,25,7,0.08711,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,448,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,451,        if (maxDigits < minDigits) {,0,0,0,1,3,0,0,0,0,4,28,4,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,454,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,457,        if (minDigits <= 1) {,4,2,0,1,3,0,4,0,0,10,21,3,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",6,0,0,2,4,1,2,2,0,11,72,7,0.08684,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1263,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",4,1,0,2,4,0,10,0,0,15,65,6,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1265,            boolean negative = false;,10,0,0,0,0,0,8,0,0,20,25,1,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1266,            int length = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1267,            while (length < limit) {,4,1,0,1,3,0,8,0,0,13,24,1,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1268,                char c = text.charAt(position + length);,8,2,0,1,2,0,4,0,0,14,40,4,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1269,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0,0,0,2,5,0,0,0,0,7,55,4,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1295,            if (length == 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.08681,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2584,            DateTimeParser[] elements = iParsers;,18,0,0,1,2,0,22,6,0,49,37,1,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2585,            if (elements == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2589,            int len = elements.length;,6,0,0,0,0,0,0,0,0,6,26,6,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2590,            for (int i=0; i<len && position >= 0; i++) {,10,3,0,1,3,0,0,0,0,14,44,5,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2591,"                position = elements[i].parseInto(bucket, text, position);",0,0,0,2,4,0,0,0,0,6,57,4,0.08651,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2593,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.08651,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,477,                    return chronology.monthOfYear();,2,0,0,1,2,1,6,0,0,9,32,7,0.08649,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1611,        if (dye == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08621,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1612,            dye = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,36,4,0.08621,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1617,        return dye;,2,0,0,0,0,1,0,0,0,2,11,4,0.08621,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1601,        if (dwe == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1602,            dwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1607,        return dwe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08591,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1591,        if (wwe == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08562,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1592,            wwe = new DateTimeFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,36,6,0.08562,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1597,        return wwe;,2,0,0,0,0,1,0,0,0,2,11,4,0.08562,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,473,                    return chronology.year();,0,0,0,1,2,1,4,0,0,4,25,7,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2614,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0,0,0,3,6,0,0,0,0,9,60,4,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);",4,0,0,3,6,0,4,2,0,10,58,12,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2632,            if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2633,                for (int i=0; i<array.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2634,                    list.add(array[i]);,0,0,1,2,4,0,4,0,0,8,19,10,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2637,        },2,1,0,0,1,0,0,0,0,3,1,4,0.08533,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,2,4,1,8,0,0,8,66,5,0.08532,0,0,-1
defect4j,time,org/joda/time/base/AbstractDateTime,26,183,        return getChronology().hourOfDay().get(getMillis());,0,0,0,4,8,1,0,0,0,13,52,4,0.08511,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,474,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.08477,0,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,26,497,                    return chronology.hourOfDay();,0,0,0,1,2,1,4,0,0,4,30,7,0.08477,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",2,0,0,2,4,1,14,2,0,18,71,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1582,        if (we == null) {,12,1,0,1,3,0,4,0,0,18,17,3,0.08418,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1583,            we = new DateTimeFormatterBuilder(),0,0,0,1,2,0,0,0,0,3,35,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,1587,        return we;,2,0,0,0,0,1,0,0,0,2,10,4,0.08418,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",2,0,0,2,4,1,12,0,0,15,66,1,0.08389,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",2,0,0,1,2,0,6,0,0,9,59,6,0.08377,1,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,468,            if (get(result) != value) {,0,0,0,2,5,0,0,0,0,7,27,4,0.08377,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,209,        if (formatter == null) {,6,1,0,1,3,0,0,0,0,7,24,3,0.08344,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,1,0,0,0,10,62,4,0.08344,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1559,            if (iTailZone == null) {,2,0,0,1,3,0,4,0,0,6,24,5,0.08333,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1562,            return iTailZone.getStandardOffset(instant);,4,0,0,1,2,1,6,0,0,11,44,1,0.08333,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1191,            return iStandardOffset;,4,1,0,0,0,1,4,0,0,10,23,4,0.08333,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,171,        return iParser;,2,0,0,0,0,1,0,0,0,2,15,4,0.08312,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,124,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.08279,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,125,        iChronology = checkChronology(chronology);,2,0,0,1,2,0,4,0,0,7,42,4,0.08279,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,126,"        iMillis = checkInstant(instant, iChronology);",2,0,0,1,2,0,6,0,0,9,45,4,0.08279,0,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,26,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08279,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,345,        iFormatter = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.08247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,346,        iElementPairs.add(printer);,4,0,0,1,2,0,10,2,0,17,27,3,0.08247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,347,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.08247,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,348,        return this;,8,0,0,0,0,1,4,0,0,13,12,4,0.08247,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,465,            long localInstant = iZone.convertUTCToLocal(instant);,2,0,0,1,2,0,6,0,0,8,53,6,0.08237,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,466,"            localInstant = iField.set(localInstant, value);",0,0,0,1,2,0,0,0,0,3,47,4,0.08237,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,2,4,1,10,0,0,10,79,5,0.08224,0,0,-1
defect4j,time,org/joda/time/format/FormatUtils,26,31,    private static final double LOG_10 = Math.log(10);,0,0,0,1,2,0,0,0,0,3,50,4,0.08184,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,153,        return iPrinter;,2,0,0,0,0,1,0,0,0,2,16,4,0.08153,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1232,            return iValue.length();,0,0,0,1,2,1,4,0,0,4,23,6,0.08013,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1203,            super();,2,0,0,1,2,0,0,0,0,2,8,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1204,            iValue = value;,0,0,0,0,0,0,0,0,0,0,15,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1205,        },10,0,0,0,1,1,0,2,0,13,1,1,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1208,            return iValue.length();,0,0,0,1,2,1,0,0,0,4,23,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,370,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,373,        switch (text.length()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,379,                return append0(new StringLiteral(text));,0,0,0,2,4,1,0,0,0,7,40,4,0.07987,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1112,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0796,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1102,            return true;,6,1,0,0,0,1,8,0,0,16,12,3,0.0794,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,900,        DateTimeParser parser = iParser;,12,0,0,0,0,0,4,2,0,19,32,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,901,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,26,904,        return parser;,2,0,0,0,0,1,0,0,0,2,14,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,118,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,71,    private SavedField[] iSavedFields = new SavedField[8];,14,1,0,2,4,1,0,4,0,22,54,1,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,119,        chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,120,        iMillis = instantLocal;,4,0,0,0,0,0,0,0,0,5,23,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,121,        iChrono = chrono.withUTC();,0,0,0,1,2,0,0,0,0,3,27,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,122,        iLocale = (locale == null ? Locale.getDefault() : locale);,6,1,0,2,4,0,10,0,0,18,58,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,123,        setZone(chrono.getZone());,0,0,0,2,4,0,0,0,0,6,26,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,124,        iPivotYear = pivotYear;,0,0,0,0,0,0,0,0,0,0,23,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,125,        iDefaultYear = defaultYear;,6,1,0,0,0,0,4,0,0,13,27,3,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,126,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,162,        iSavedState = null;,2,0,0,0,0,0,0,0,0,3,19,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,163,        iZone = zone == DateTimeZone.UTC ? null : zone;,10,1,0,0,0,0,0,0,0,12,47,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,164,        iOffset = 0;,2,0,0,0,0,0,0,0,0,3,12,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07937,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1075,                Object printer = iElementPairs.get(0);,0,0,0,1,2,0,0,0,0,3,38,4,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1076,                Object parser = iElementPairs.get(1);,2,0,0,1,2,0,4,2,0,8,37,8,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1078,                if (printer != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1079,                    if (printer == parser || parser == null) {,6,3,0,1,3,0,0,0,0,9,42,10,0.07921,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1080,                        f = printer;,4,0,0,0,0,0,0,0,0,5,12,12,0.07921,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,26,241,        return String.class;,0,0,0,0,0,1,0,2,0,2,20,6,0.07813,0,0,-1
defect4j,time,org/joda/time/DateTime,26,285,"        super(year, monthOfYear, dayOfMonth,",6,0,0,0,1,0,0,0,0,6,36,4,0.07692,0,0,-1
defect4j,time,org/joda/time/DateTime,26,287,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1531,                return iWallOffsets[i];,0,0,1,1,2,1,0,0,0,4,23,8,0.07407,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",6,0,0,2,4,1,2,2,0,11,73,7,0.0739,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,396,        if (fieldType == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.07365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,399,        if (maxDigits < minDigits) {,12,1,0,1,3,0,4,0,0,18,28,3,0.07365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,402,        if (minDigits < 0 || maxDigits <= 0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.07365,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,405,        if (minDigits <= 1) {,4,0,0,1,3,0,0,2,0,7,21,5,0.07365,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,258,"                set = set.remove(i, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.07353,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,259,                converters = set.iConverters;,6,0,0,0,0,0,0,0,0,7,29,8,0.07353,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,260,                length = converters.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.07353,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,273,        if (printer != null) {,4,0,0,1,3,0,0,0,0,5,22,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,276,        if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,279,        int length = parsers.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,280,        if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,2,0,1,2,4,0,0,4,0,8,60,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,289,        for (i = 0; i < length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,6,3,1,4,9,0,0,0,0,18,46,3,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,294,        copyOfParsers[i] = parsers[i];,2,1,1,2,4,0,4,0,0,16,30,1,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,296,"        return append0(printer, new MatchingParser(copyOfParsers));",0,0,0,2,4,1,0,0,0,7,59,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,307,        checkParser(parser);,0,0,0,1,2,0,4,0,0,4,20,5,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",4,0,0,3,6,0,0,4,0,8,63,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,309,"        return append0(null, new MatchingParser(parsers));",2,0,0,2,4,1,2,2,0,8,50,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,319,        if (parser == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,322,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1083,                    f = parser;,4,0,0,0,0,0,4,0,0,9,11,3,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2648,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2649,            iParsers = parsers;,4,0,0,0,0,0,0,0,0,5,19,5,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2650,            int est = 0;,2,0,0,0,0,0,0,0,0,2,12,6,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2651,            for (int i=parsers.length; --i>=0 ;) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2652,                DateTimeParser parser = parsers[i];,2,0,1,1,2,0,0,2,0,8,35,7,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2653,                if (parser != null) {,22,1,0,1,3,0,8,2,0,36,21,1,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2654,                    int len = parser.estimateParsedLength();,2,0,0,1,2,0,4,0,0,6,40,10,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2655,                    if (len > est) {,4,1,0,1,3,0,0,0,0,5,16,9,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2656,                        est = len;,0,0,0,0,0,0,0,0,0,0,10,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2659,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2660,            iParsedLengthEstimate = est;,6,1,0,0,0,0,0,0,0,8,28,1,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2661,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2664,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2580,            return iParsedLengthEstimate;,2,0,0,0,0,1,0,0,0,2,29,5,0.0731,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,152,        Object f = getFormatter();,2,0,0,1,2,0,2,2,0,6,26,4,0.07289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,153,        if (isParser(f)) {,2,1,0,2,5,0,4,0,0,7,18,4,0.07289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,154,            return (DateTimeParser) f;,0,0,0,1,2,1,0,0,0,4,26,4,0.07289,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0,0,0,2,4,1,0,0,0,7,64,4,0.07289,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,256,            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {,18,5,0,3,7,3,6,4,0,39,87,1,0.07246,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,26,262,        },2,0,0,0,1,0,6,0,0,8,1,5,0.07246,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1334,"            super(fieldType, maxParsedDigits, signed);",8,0,0,1,2,0,0,0,0,8,42,1,0.07225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1335,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1338,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.07225,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1145,            return 1;,8,0,0,0,0,1,4,0,0,13,9,4,0.07183,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1169,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.07183,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1259,            return iMaxParsedDigits;,2,0,0,0,0,1,0,0,0,2,24,5,0.07151,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,359,        return append0(new CharacterLiteral(c));,0,0,0,2,4,1,0,0,0,7,40,4,0.07127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1140,            super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1141,            iValue = value;,4,0,0,0,0,0,0,0,0,5,15,5,0.07127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1142,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07127,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2476,                int size = printerList.size();,4,0,0,1,2,0,8,0,0,12,30,1,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2477,                iPrinters = new DateTimePrinter[size];,2,0,1,1,2,0,0,2,0,7,38,7,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2478,                int printEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2479,                for (int i=0; i<size; i++) {,14,1,0,1,3,0,0,0,0,17,28,1,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2480,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,2,0,0,2,4,0,6,4,0,12,63,9,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2481,                    printEst += printer.estimatePrintedLength();,2,0,0,1,2,0,4,0,0,7,44,9,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2482,                    iPrinters[i] = printer;,6,0,1,1,2,0,0,2,0,14,23,1,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2484,                iPrintedLengthEstimate = printEst;,2,1,0,0,0,0,4,0,0,7,34,6,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2491,                int size = parserList.size();,2,0,0,1,2,0,4,0,0,6,29,8,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2492,                iParsers = new DateTimeParser[size];,0,0,0,1,2,0,0,0,0,3,36,4,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2493,                int parseEst = 0;,2,0,0,0,0,0,0,0,0,2,17,8,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2494,                for (int i=0; i<size; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.07119,0,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2495,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,2,0,0,2,4,0,6,4,0,12,59,9,0.07119,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,2,1,0,1,3,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,2,0,0,1,2,0,6,0,0,9,14,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,3,6,0,0,0,0,9,55,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",8,0,0,2,4,1,10,2,0,20,51,3,1.0,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0,0,0,1,2,0,0,0,0,3,33,4,0.14286,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,926,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",4,1,0,2,4,0,8,0,0,14,51,3,0.04545,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,948,    },2,0,0,0,1,0,0,0,0,2,1,5,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,2,0,0,1,2,1,6,2,0,11,25,1,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0,0,0,0,0,0,0,0,0,0,13,4,0.03226,1,1,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,8,1,0,1,2,0,0,0,0,10,32,3,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0,0,0,0,0,0,0,0,0,0,13,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02941,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.02439,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0,0,0,1,2,1,0,0,0,4,24,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,                return period;,0,0,0,0,0,1,0,0,0,1,14,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,2,5,0,4,0,0,4,67,6,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,12,0,1,0,0,1,0,4,0,21,18,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,2,0,0,0,0,1,6,0,0,8,11,1,0.02326,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0,0,0,1,2,0,0,0,0,3,31,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,2,5,0,0,0,0,7,62,4,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,3,7,0,0,0,0,10,72,4,0.02174,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,                return position + iText.length();,0,0,0,1,2,1,0,0,0,4,33,4,0.02174,0,0,-1
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);",0,0,0,1,2,0,0,0,0,3,26,4,0.02128,0,0,-1
defect4j,time,org/joda/time/Period,27,595,    },4,2,0,0,1,0,0,0,0,6,1,6,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,        checkParser();,0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",4,1,0,2,4,0,4,0,0,10,61,1,0.02128,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,6,1,0,1,3,0,0,0,0,8,18,4,0.02128,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,4,0,0,1,2,0,0,4,0,8,48,4,0.02,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,71,        return period.getPeriodType();,0,0,0,1,2,1,4,0,0,4,30,5,0.02,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,173,    },2,0,0,0,1,0,0,2,0,4,1,5,0.01961,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,418,        iValues = newValues;,0,0,0,0,0,0,0,0,0,0,20,4,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,419,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,404,            setPeriodInternal(period);,0,0,0,1,2,0,0,0,0,3,26,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,412,        int[] newValues = new int[size()];,0,0,0,3,6,0,0,0,0,9,34,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0,0,0,2,5,0,0,0,0,7,56,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,414,            DurationFieldType type = period.getFieldType(i);,0,0,0,1,2,0,0,0,0,3,48,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,415,            int value = period.getValue(i);,0,0,0,1,2,0,0,0,0,3,31,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);",0,0,0,1,2,0,0,0,0,3,39,4,0.01818,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,58,        duration.setPeriod((ReadablePeriod) object);,0,0,0,2,4,0,0,0,0,6,44,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,4,1,0,0,0,0,0,0,0,7,17,4,0.01818,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);",0,0,0,1,2,0,0,0,0,3,57,4,0.01818,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,466,    },0,0,0,0,1,0,6,0,0,6,1,5,0.01786,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,399,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,6,0,0,0,0,0,4,0,0,11,22,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);",0,0,0,1,2,0,0,0,0,3,72,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1712,                String[] parsedForms = iParsedForms;,0,0,0,1,2,0,0,0,0,3,36,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,2,0,0,1,3,0,0,0,0,2,32,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1715,                    String parsedForm = parsedForms[i];,0,0,0,1,2,0,0,0,0,3,35,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",4,1,0,1,2,0,12,0,0,18,71,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1730,            if (position < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1212,"                suffixPos = iSuffix.scan(text, position);",0,0,0,1,2,0,0,0,0,3,41,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1213,                if (suffixPos >= 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1246,                char c = text.charAt(position + length);,0,0,0,1,2,0,0,0,0,3,40,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1248,                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {,0,0,0,2,5,0,0,0,0,7,68,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,6,3,0,1,3,0,4,0,0,16,27,1,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1270,                    hasDigits = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1285,                length++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1286,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1292,            if (suffixPos >= 0 && position + length != suffixPos) {,0,0,0,1,3,0,0,0,0,4,55,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1300,            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {,0,0,0,1,3,0,0,0,0,4,76,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1333,            position += length;,0,0,0,0,0,0,0,0,0,0,19,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1335,            if (position >= 0 && iSuffix != null) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1339,            return position;,0,0,0,0,0,1,0,0,0,1,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1349,            if (length >= 10) {,0,0,0,1,3,0,10,0,0,10,19,5,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1498,            switch (field) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01786,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1526,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01786,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,252,"            iValues = new MutablePeriod(period, type, chrono).getValues();",0,0,0,2,4,0,4,0,0,4,62,6,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,484,            values[index] = value;,4,3,0,1,2,0,0,0,0,7,22,8,0.01754,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,398,"        super(period, type, chrono);",0,0,0,1,2,0,0,0,0,3,28,4,0.01754,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,406,    },10,0,0,0,1,0,18,2,0,32,1,3,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,441,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",16,3,0,3,7,0,22,6,0,50,69,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,10,1,0,1,3,0,0,0,0,11,20,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,2,1,0,0,0,0,0,0,0,3,15,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1243,            int fractPos = -1;,0,0,0,0,0,0,0,0,0,0,18,4,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,8,0,0,0,0,0,0,0,0,9,26,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,14,2,0,1,3,0,2,0,0,18,24,1,0.01724,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,401,        if (period == null) {,14,1,0,1,3,0,6,4,0,25,21,1,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,478,        if (index == -1) {,0,0,0,1,3,0,0,0,0,4,18,4,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,57,                return e.iConverter;,0,0,0,0,0,1,0,0,0,1,20,4,0.01695,0,0,-1
defect4j,time,org/joda/time/MutablePeriod,27,440,        super.setPeriod(period);,24,4,0,1,2,0,42,0,0,73,24,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,338,    },8,0,0,0,1,3,0,12,0,23,1,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1822,            PeriodParser[] parsers = iParsers;,4,0,0,1,2,0,0,2,0,6,34,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1823,            if (parsers == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1827,            int len = parsers.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1828,            for (int i=0; i<len && position >= 0; i++) {,0,0,0,1,3,0,0,0,0,4,44,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1829,"                position = parsers[i].parseInto(period, periodStr, position, locale);",4,1,1,2,4,0,18,0,0,28,69,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1831,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1184,            boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);,0,0,0,1,2,0,0,0,0,3,61,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1187,            if (position >= text.length()) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1191,            if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1208,            int suffixPos = -1;,16,1,1,0,0,4,6,2,0,33,19,1,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1209,            if (iSuffix != null && !mustParse) {,10,2,0,1,3,1,0,0,0,14,36,2,0.01695,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,335,        if (iParser == null) {,4,2,0,1,3,0,4,0,0,11,22,4,0.01667,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,88,        return ReadableDuration.class;,0,0,0,0,0,1,4,2,0,6,30,1,0.01639,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,81,        return ReadablePeriod.class;,0,0,0,0,0,1,0,0,0,1,28,4,0.01639,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,254,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01471,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,242,        super();,0,0,0,1,2,0,8,0,0,8,8,5,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,243,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,2,0,0,2,4,0,12,0,0,14,86,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,244,        type = (type == null ? converter.getPeriodType(period) : type);,6,1,0,2,4,0,6,0,0,14,63,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,245,        type = checkPeriodType(type);,0,0,0,1,2,0,0,0,0,3,29,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,246,        iType = type;,8,0,0,0,0,0,0,4,0,13,13,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,247,        if (this instanceof ReadWritablePeriod) {,6,0,0,1,3,0,0,4,0,11,41,3,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,248,            iValues = new int[size()];,4,0,0,2,4,0,2,0,0,7,26,1,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,249,            chrono = DateTimeUtils.getChronology(chrono);,0,0,0,1,2,0,0,0,0,3,45,4,0.01449,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,250,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",6,0,0,2,4,0,0,4,0,12,61,1,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,421,        PeriodConverter converter =,2,0,0,0,0,0,0,2,0,4,27,4,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,423,        if (converter != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,424,            return converter;,12,0,0,0,0,1,4,2,0,19,17,5,0.01449,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,113,        return ReadableInterval.class;,0,0,0,0,0,1,0,0,0,1,30,4,0.01333,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,266,        if (type == null || length == 0) {,8,3,0,1,3,0,0,0,0,11,34,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,269,        if (length == 1) {,10,2,0,1,3,0,0,0,0,13,18,4,0.01266,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,271,            return converters[0];,0,0,1,1,2,1,0,0,0,2,21,7,0.01266,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,72,        int[] result = new int[size()];,0,0,0,3,6,0,0,0,0,9,31,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,73,        for (int i = 0; i < result.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,74,            result[i] = getValue(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0119,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,76,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0119,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,251,        PeriodType type = cYDTime;,8,1,0,0,0,0,0,0,0,10,26,5,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,252,        if (type == null) {,4,1,0,1,3,0,4,0,0,9,19,3,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,253,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,262,            cYDTime = type;,0,0,0,0,0,0,0,0,0,0,15,4,0.01176,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,264,        return type;,2,0,0,0,0,1,0,0,0,2,12,4,0.01176,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,216,        Converter[] converters = iConverters;,0,0,0,1,2,0,0,0,0,3,37,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,217,        int length = converters.length;,0,0,0,0,0,0,0,0,0,0,31,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,218,        if (index >= length) {,4,1,0,1,3,0,0,0,0,5,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,222,        if (removed != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,226,        Converter[] copy = new Converter[length - 1];,4,1,0,2,4,0,0,4,0,9,45,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,228,        int j = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,229,        for (int i=0; i<length; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,230,            if (i != index) {,8,0,0,1,3,0,4,0,0,13,17,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,231,                copy[j++] = converters[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,235,        return new ConverterSet(copy);,0,0,0,1,2,1,0,0,0,4,30,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,256,            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {,2,1,0,3,7,0,0,0,0,3,87,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,258,"                set = set.remove(i, null);",0,0,0,1,2,0,10,0,0,10,26,5,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,259,                converters = set.iConverters;,6,0,0,0,0,0,0,0,0,7,29,8,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,260,                length = converters.length;,8,0,0,0,0,0,4,0,0,13,27,3,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01064,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,241,        return String.class;,2,0,1,0,0,1,0,2,0,9,20,3,0.01042,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,1,8,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableIntervalConverter,27,36,    static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();,4,1,0,1,2,2,0,4,0,11,82,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,105,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,107,        iInstantConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,55,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,116,        iPartialConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,55,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,126,        iDurationConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,56,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,134,        iPeriodConverters = new ConverterSet(new Converter[] {,2,0,0,1,4,0,0,4,0,7,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,142,        iIntervalConverters = new ConverterSet(new Converter[] {,0,0,0,1,4,0,0,0,0,5,56,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,147,    },2,0,0,0,1,0,6,0,0,9,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,89,        if (INSTANCE == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,90,            INSTANCE = new ConverterManager();,0,0,0,1,2,0,0,0,0,3,34,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterManager,27,92,        return INSTANCE;,0,0,0,0,0,1,0,0,0,1,16,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,32,    ConverterSet(Converter[] converters) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,35,        iConverters = converters;,16,3,0,0,0,0,4,2,0,28,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,36,        iSelectEntries = new Entry[1 << 4]; // 16,2,1,0,1,2,0,0,2,0,6,41,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,49,        Entry[] entries = iSelectEntries;,2,0,0,1,2,0,0,0,0,2,33,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,50,        int length = entries.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,51,        int index = type == null ? 0 : type.hashCode() & (length - 1);,0,0,0,2,4,0,0,0,0,6,62,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,55,        while ((e = entries[index]) != null) {,0,0,0,3,7,0,0,0,0,10,38,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,66,"        Converter converter = selectSlow(this, type);",4,0,0,1,2,0,10,2,0,16,45,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,67,"        e = new Entry(type, converter);",6,0,0,1,2,0,0,2,0,9,31,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,79,        entries = (Entry[])entries.clone();,0,0,0,3,6,0,0,0,0,9,35,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,82,        entries[index] = e;,0,0,0,1,2,0,0,0,0,3,19,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,85,        for (int i=0; i<length; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,86,            if (entries[i] == null) {,0,0,0,2,5,0,0,0,0,7,25,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,88,                iSelectEntries = entries;,10,0,0,0,0,0,0,2,0,14,25,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,89,                return converter;,2,0,0,0,0,1,8,0,0,10,17,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,243,        Converter[] converters = set.iConverters;,0,0,0,1,2,0,0,0,0,3,41,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,244,        int length = converters.length;,12,3,0,0,0,0,0,2,0,20,31,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,247,        for (int i=length; --i>=0; ) {,2,0,0,1,3,0,4,2,0,8,30,8,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,248,            converter = converters[i];,2,0,1,1,2,0,0,0,0,7,26,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,249,            Class<?> supportedType = converter.getSupportedType();,2,0,0,1,2,0,0,0,0,2,54,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,251,            if (supportedType == type) {,4,1,0,1,3,0,0,0,0,5,28,6,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,322,"        Entry(Class<?> type, Converter converter) {",6,0,0,1,3,0,0,4,0,10,43,3,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,323,            iType = type;,0,0,0,0,0,0,0,0,0,0,13,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,324,            iConverter = converter;,0,0,0,0,0,0,0,0,0,0,23,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ConverterSet,27,325,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableDurationConverter,27,36,    static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();,0,0,0,1,2,0,0,0,0,3,82,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,45,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,46,    },0,1,0,0,1,0,4,0,0,5,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,39,    static final NullConverter INSTANCE = new NullConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/NullConverter,27,95,        return null;,2,0,0,0,0,1,8,0,0,11,12,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/CalendarConverter,27,43,    static final CalendarConverter INSTANCE = new CalendarConverter();,2,0,0,1,2,2,0,4,0,8,66,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,41,        super();,2,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,42,    },4,0,0,0,1,0,0,0,0,5,1,5,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePartialConverter,27,35,    static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,41,        super();,8,0,0,1,2,0,4,4,0,17,8,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/DateConverter,27,35,    static final DateConverter INSTANCE = new DateConverter();,4,1,0,1,2,2,0,4,0,11,58,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,7,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadableInstantConverter,27,36,    static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();,2,0,0,1,2,2,0,4,0,8,80,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,40,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,41,    },12,0,0,0,1,0,4,8,0,24,1,1,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/LongConverter,27,34,    static final LongConverter INSTANCE = new LongConverter();,2,0,0,1,2,2,0,4,0,8,58,2,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,42,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0102,0,0,-1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,36,    static final ReadablePeriodConverter INSTANCE = new ReadablePeriodConverter();,6,3,0,1,2,2,0,4,0,15,78,1,0.0102,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,384,            if (newValue != 0) {,4,0,0,1,3,0,0,8,0,12,20,6,0.00926,0,0,-1
defect4j,time,org/joda/time/Period,27,326,    },2,0,0,0,1,0,8,0,0,11,1,9,0.00877,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,653,        return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0087,0,0,-1
defect4j,time,org/joda/time/Period,27,325,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0,0,0,1,2,0,0,0,0,3,73,4,0.0087,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,27,38,        super();,2,0,0,1,2,0,10,2,0,14,8,4,0.00787,0,0,-1
defect4j,time,org/joda/time/convert/AbstractConverter,27,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00787,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,50,        super();,2,0,0,1,2,0,0,0,0,2,8,4,0.00787,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00787,0,0,-1
defect4j,time,org/joda/time/convert/StringConverter,27,44,    static final StringConverter INSTANCE = new StringConverter();,0,0,0,1,2,0,0,0,0,3,62,4,0.00787,0,0,-1
defect4j,time,org/joda/time/Period,27,302,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0,0,0,2,4,0,0,0,0,6,90,4,0.00694,0,0,-1
defect4j,time,org/joda/time/Period,27,303,    },12,8,0,0,1,0,0,0,0,21,1,4,0.00694,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,446,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0,0,0,2,4,0,10,0,0,10,62,5,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,447,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",6,0,0,2,4,0,12,4,0,22,60,1,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,448,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,2,4,0,0,0,0,6,58,4,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,449,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0,0,0,2,4,0,10,0,0,10,60,5,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,450,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0,0,0,2,4,0,10,0,0,10,64,5,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,451,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,2,4,0,10,0,0,10,64,5,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,452,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0,0,0,2,4,0,10,0,0,10,62,5,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,453,        iValues = newValues;,4,0,0,0,0,0,0,0,0,5,20,4,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,454,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00541,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,80,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,81,        type = checkPeriodType(type);,2,0,0,1,2,0,4,0,0,7,29,4,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,82,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,83,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",2,0,0,1,2,0,20,4,0,26,98,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,444,        int[] newValues = new int[size()];,10,1,0,3,6,0,6,2,0,21,34,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,445,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",6,5,0,2,4,0,0,0,0,11,60,3,0.00535,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,310,        return iType.getFieldType(index);,0,0,0,1,2,1,0,0,0,4,33,4,0.00469,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,628,        return iTypes[index];,0,0,1,1,2,1,0,0,0,4,21,5,0.00469,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,389,            values[index] = newValue;,0,0,0,1,2,0,0,0,0,3,25,4,0.00467,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00467,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,382,        int index = indexOf(type);,0,0,0,1,2,0,0,0,0,3,26,4,0.00463,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,383,        if (index == -1) {,8,1,0,1,3,0,4,0,0,14,18,3,0.00463,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,650,                return i;,4,0,0,0,0,1,0,0,0,5,9,3,0.00422,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,114,        return getPeriodType().indexOf(type);,0,0,0,2,4,1,6,0,0,6,37,5,0.00418,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,648,"        for (int i = 0, isize = size(); i < isize; i++) {",10,1,0,2,5,0,2,0,0,14,49,4,0.00418,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,649,            if (iTypes[i] == type) {,2,1,1,2,5,0,0,0,0,7,24,6,0.00418,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,65,        if (cStandard == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.00397,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,66,            cStandard = new PeriodFormatterBuilder(),2,0,0,1,2,0,0,2,0,5,40,6,0.00397,0,0,-1
defect4j,time,org/joda/time/format/ISOPeriodFormat,27,85,        return cStandard;,8,0,0,0,0,1,2,0,0,11,17,1,0.00397,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0,0,0,1,2,0,0,0,0,3,37,4,0.00389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,501,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,555,        return appendSuffix(new SimpleAffix(text));,0,0,0,2,4,1,0,0,0,7,43,4,0.00389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,652,"        return appendSeparator(text, text, null, false, true);",0,0,0,1,2,1,6,0,0,9,54,4,0.00389,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,552,        if (text == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00388,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1600,                iParsedForms = new String[] {text};,0,0,0,2,4,0,0,0,0,6,35,4,0.00386,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,857,        SimpleAffix(String text) {,4,0,0,1,3,0,0,2,0,6,26,3,0.00383,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,858,            iText = text;,0,0,0,0,0,0,0,0,0,0,13,4,0.00383,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,859,        },4,0,0,0,1,0,0,0,0,5,1,5,0.00383,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,228,        if (text == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,231,        clearPrefix();,0,0,0,1,2,0,2,0,0,2,14,5,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,232,        Literal literal = new Literal(text);,0,0,0,1,2,0,0,0,0,3,36,4,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,233,"        append0(literal, literal);",0,0,0,1,2,0,0,0,0,3,26,4,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,234,        return this;,6,0,0,0,0,1,0,0,0,7,12,3,0.00372,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1542,        Literal(String text) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0037,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1543,            iText = text;,10,1,1,0,0,0,0,0,0,16,13,1,0.0037,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1544,        },4,1,0,0,1,0,0,0,0,5,1,6,0.0037,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1539,"        static final Literal EMPTY = new Literal("""");",2,0,0,1,2,2,0,4,0,9,45,3,0.0037,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,289,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.00369,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,102,            return chrono;,4,0,0,0,0,1,0,2,0,6,14,3,0.00361,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,27,107,        if ((base = iBase) != null) {,4,1,0,2,5,0,0,0,0,6,29,4,0.00347,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,27,108,            return base.getZone();,0,0,0,1,2,1,0,0,0,4,22,4,0.00347,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,0,0,0,2,4,0,0,0,0,6,62,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,2,1,0,2,4,0,8,0,0,12,61,6,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,605,        clearPrefix();,4,0,0,1,2,0,0,2,0,7,14,7,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",6,0,0,2,4,0,0,6,0,12,87,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0,1,0,2,4,0,10,0,0,11,54,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",2,0,0,2,4,0,0,2,0,4,54,8,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,609,        iFieldFormatters[newField.getFieldType()] = newField;,0,0,0,2,4,0,0,0,0,6,53,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,611,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1062,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",0,0,0,1,3,0,0,0,0,4,63,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1063,            iMinPrintedDigits = field.iMinPrintedDigits;,6,0,0,0,0,0,0,0,0,7,44,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1064,            iPrintZeroSetting = field.iPrintZeroSetting;,6,0,0,0,0,0,0,0,0,7,44,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1065,            iMaxParsedDigits = field.iMaxParsedDigits;,6,0,0,0,0,0,0,0,0,7,42,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1066,            iRejectSignedValues = field.iRejectSignedValues;,6,0,0,0,0,0,0,0,0,7,48,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1067,            iFieldType = field.iFieldType;,10,3,0,0,0,0,0,0,0,14,30,1,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1068,            iFieldFormatters = field.iFieldFormatters;,0,0,0,0,0,0,0,0,0,0,42,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1069,            iPrefix = field.iPrefix;,4,0,0,0,0,0,0,0,0,4,24,6,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1070,            if (field.iSuffix != null) {,4,1,0,1,3,0,0,0,0,5,28,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1073,            iSuffix = suffix;,0,0,0,0,0,0,0,0,0,0,17,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1074,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1529,            return iFieldType;,2,0,0,0,0,1,0,0,0,2,18,5,0.00339,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,463,        appendField(MINUTES);,0,0,0,1,2,0,0,0,0,3,21,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,464,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,591,        if (iElementPairs.size() > 0) {,4,2,0,2,5,0,4,0,0,10,31,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,599,        if (originalPrinter == null || originalParser == null ||,0,0,0,0,1,0,0,0,0,1,56,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,730,        if (text == null || finalText == null) {,0,0,0,1,3,0,0,0,0,4,40,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,734,        clearPrefix();,6,0,0,1,2,0,2,0,0,9,14,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,737,        List<Object> pairs = iElementPairs;,12,0,0,0,0,0,10,4,0,27,35,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,738,        if (pairs.size() == 0) {,8,1,0,2,5,0,8,0,0,18,24,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,750,        Separator lastSeparator = null;,10,0,0,0,0,0,4,2,0,17,31,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,751,        for (i=pairs.size(); --i>=0; ) {,4,1,0,2,5,0,4,0,0,10,32,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,752,            if (pairs.get(i) instanceof Separator) {,0,0,0,2,5,0,0,0,0,7,40,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,757,            i--;  // element pairs,0,0,0,0,0,0,0,0,0,0,22,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,761,        if (lastSeparator != null && pairs.size() == 0) {,2,3,0,2,5,0,4,0,0,9,49,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,764,            Object[] comp = createComposite(pairs);,2,0,0,2,4,0,4,2,0,8,39,6,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,765,            pairs.clear();,0,0,0,1,2,0,8,0,0,8,14,3,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,766,            Separator separator = new Separator(,0,0,0,0,1,0,0,0,0,1,36,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,770,            pairs.add(separator);,0,0,0,1,2,0,2,0,0,2,21,7,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,771,            pairs.add(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,774,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,800,            Separator sep = (Separator) elementPairs.get(0);,2,0,0,2,4,0,4,4,0,10,48,6,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,801,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",0,0,0,2,4,0,0,0,0,6,86,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,802,"                sep = sep.finish(f.getPrinter(), f.getParser());",0,0,0,3,6,0,0,0,0,9,48,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,803,"                return new PeriodFormatter(sep, sep);",0,0,0,1,2,1,0,0,0,4,37,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1593,"                boolean useBefore, boolean useAfter) {",4,0,0,0,2,0,0,0,0,4,38,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1594,            iText = text;,0,0,0,0,0,0,0,0,0,0,13,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1595,            iFinalText = finalText;,0,0,0,0,0,0,0,0,0,0,23,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1597,            if ((finalText == null || text.equals(finalText)) &&,0,0,0,2,5,0,0,0,0,7,52,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1616,            iBeforePrinter = beforePrinter;,2,0,0,0,0,0,4,0,0,7,31,11,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1617,            iBeforeParser = beforeParser;,4,0,0,0,0,0,0,0,0,5,29,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1618,            iUseBefore = useBefore;,12,0,0,0,0,0,4,0,0,18,23,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1619,            iUseAfter = useAfter;,4,0,0,0,0,0,0,0,0,5,21,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1620,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1748,            iAfterPrinter = afterPrinter;,4,0,0,0,0,0,0,0,0,5,29,5,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1749,            iAfterParser = afterParser;,6,0,0,0,0,0,0,0,0,8,27,1,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1750,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00337,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,437,        appendField(DAYS);,0,0,0,1,2,0,0,0,0,3,18,4,0.00332,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,438,        return this;,2,0,0,0,0,1,2,0,0,4,12,4,0.00332,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,411,        appendField(MONTHS);,0,0,0,1,2,0,0,0,0,3,20,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,412,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,424,        appendField(WEEKS);,0,0,0,1,2,0,0,0,0,3,19,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,425,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0033,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,146,        return iParser;,4,1,0,0,0,1,0,0,0,5,15,3,0.00329,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,450,        appendField(HOURS);,0,0,0,1,2,0,4,0,0,4,19,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,451,        return this;,4,0,0,0,0,1,0,0,0,5,12,5,0.00329,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,779,        if (iPrefix != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,782,        iPrefix = null;,4,1,0,0,0,0,0,0,0,6,15,6,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,783,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00316,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,398,        appendField(YEARS);,0,0,0,1,2,0,0,0,0,3,19,4,0.00315,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,399,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00315,0,0,-1
defect4j,time,org/joda/time/Period,27,271,"        super(0L, null, null);",0,0,0,1,2,0,0,0,0,1,22,3,0.00302,0,0,-1
defect4j,time,org/joda/time/Period,27,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00302,0,0,-1
defect4j,time,org/joda/time/Period,27,63,    public static final Period ZERO = new Period();,4,0,0,1,2,3,0,4,0,12,47,1,0.00302,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,530,"        appendField(type, iMinPrintedDigits);",0,0,0,1,2,0,6,0,0,6,37,5,0.00296,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,531,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00296,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,128,        return iPrinter;,2,0,0,0,0,1,10,0,0,12,16,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",8,1,0,0,1,0,0,4,0,13,72,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,536,"        append0(field, field);",0,0,0,1,2,0,6,0,0,6,22,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,537,        iFieldFormatters[type] = field;,0,0,0,1,2,0,0,0,0,3,31,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,538,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,539,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1051,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {",4,0,0,0,2,0,14,6,0,24,51,3,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1052,            iMinPrintedDigits = minPrintedDigits;,4,0,0,0,0,0,0,0,0,5,37,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1053,            iPrintZeroSetting = printZeroSetting;,4,0,0,0,0,0,0,0,0,5,37,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1054,            iMaxParsedDigits = maxParsedDigits;,8,1,0,0,0,0,0,0,0,10,35,1,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1055,            iRejectSignedValues = rejectSignedValues;,4,0,0,0,0,0,0,0,0,5,41,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1056,            iFieldType = fieldType;,4,0,0,0,0,0,0,0,0,5,23,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1057,            iFieldFormatters = fieldFormatters;,4,0,0,0,0,0,0,0,0,5,35,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1058,            iPrefix = prefix;,4,0,0,0,0,0,0,0,0,5,17,5,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1059,            iSuffix = suffix;,0,0,0,0,0,0,0,0,0,0,17,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1060,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00295,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,87,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,88,        iPrinter = printer;,0,0,0,0,0,0,0,0,0,0,19,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,89,        iParser = parser;,4,0,0,0,0,0,0,0,0,5,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,90,        iLocale = null;,6,1,0,0,0,0,0,0,0,8,15,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,91,        iParseType = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatter,27,92,    },2,0,0,0,1,0,4,0,0,6,1,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,123,"        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);",0,0,0,1,2,0,0,0,0,3,80,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,124,        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();,2,0,0,3,6,0,4,2,0,9,63,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,125,        return formatter;,2,0,0,0,0,1,0,0,0,2,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,786,        iElementPairs.add(printer);,0,0,0,1,2,0,0,0,0,3,27,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,787,        iElementPairs.add(parser);,0,0,0,1,2,0,6,0,0,6,26,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,788,        iNotPrinter |= (printer == null);,0,0,0,1,2,0,0,0,0,3,33,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,789,        iNotParser |= (parser == null);,4,1,0,1,2,0,0,0,0,6,31,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,790,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,795,        if (notPrinter && notParser) {,4,1,0,1,3,0,6,0,0,11,30,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,798,        int size = elementPairs.size();,0,0,0,1,2,0,0,0,0,3,31,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,799,        if (size >= 2 && elementPairs.get(0) instanceof Separator) {,2,2,0,2,5,0,4,2,0,10,60,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,805,        Object[] comp = createComposite(elementPairs);,2,0,0,2,4,0,4,2,0,8,46,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,806,        if (notPrinter) {,2,0,0,1,3,0,0,0,0,2,17,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,808,        } else if (notParser) {,0,0,0,1,4,0,0,0,0,5,23,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,811,"            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",0,0,0,5,10,1,0,0,0,16,76,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,816,        switch (elementPairs.size()) {,4,0,0,2,5,0,4,0,0,9,30,1,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,822,                Composite comp = new Composite(elementPairs);,0,0,0,1,2,0,0,0,0,3,45,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,823,"                return new Object[] {comp, comp};",4,0,0,2,4,1,0,2,0,6,33,6,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1764,        Composite(List<Object> elementPairs) {,4,0,0,1,3,0,0,4,0,8,38,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1765,            List<Object> printerList = new ArrayList<Object>();,4,0,0,1,2,0,0,2,0,6,51,3,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1766,            List<Object> parserList = new ArrayList<Object>();,2,0,0,1,2,0,0,8,0,10,50,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1768,"            decompose(elementPairs, printerList, parserList);",0,0,0,1,2,0,8,0,0,8,49,6,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1770,            if (printerList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,30,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1773,                iPrinters = printerList.toArray(,2,0,0,0,1,0,4,0,0,7,32,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1777,            if (parserList.size() <= 0) {,0,1,0,2,5,0,4,0,0,5,29,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1780,                iParsers = parserList.toArray(,0,0,0,0,1,0,0,0,0,1,30,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1783,        },0,0,0,0,1,0,8,2,0,10,1,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1835,            int size = elementPairs.size();,2,0,0,1,2,0,4,0,0,6,31,6,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1836,            for (int i=0; i<size; i+=2) {,8,1,0,1,3,0,0,0,0,10,29,5,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1837,                Object element = elementPairs.get(i);,2,0,0,1,2,0,6,2,0,10,37,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1838,                if (element instanceof PeriodPrinter) {,4,1,0,1,3,0,0,2,0,7,39,4,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1839,                    if (element instanceof Composite) {,2,0,0,1,3,0,0,2,0,4,35,10,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1842,                        printerList.add(element);,0,0,0,1,2,0,6,0,0,6,25,12,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1846,                element = elementPairs.get(i + 1);,4,1,0,1,2,0,4,0,0,10,34,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1847,                if (element instanceof PeriodParser) {,2,0,0,1,3,0,0,2,0,4,38,8,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1848,                    if (element instanceof Composite) {,6,1,0,1,3,0,0,2,0,9,35,1,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1851,                        parserList.add(element);,0,0,0,1,2,0,6,0,0,6,24,12,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1855,        },4,1,0,0,1,0,0,0,0,5,1,7,0.00294,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,101,    public PeriodFormatterBuilder() {,2,0,0,1,3,0,6,0,0,9,33,7,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,102,        clear();,0,0,0,1,2,0,0,0,0,3,8,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,103,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,171,        iMinPrintedDigits = 1;,0,0,0,0,0,0,0,0,0,0,22,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,172,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,4,0,0,0,0,0,0,0,0,5,43,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,173,        iMaxParsedDigits = 10;,0,0,0,0,0,0,0,0,0,0,22,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,174,        iRejectSignedValues = false;,2,0,0,0,0,0,0,0,0,4,28,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,175,        iPrefix = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,176,        if (iElementPairs == null) {,2,1,0,1,3,0,0,0,0,3,28,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,177,            iElementPairs = new ArrayList<Object>();,8,2,0,1,2,0,0,4,0,16,40,6,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,181,        iNotPrinter = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,182,        iNotParser = false;,2,0,0,0,0,0,0,0,0,4,19,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,183,        iFieldFormatters = new FieldFormatter[10];,2,0,0,1,2,0,0,2,0,5,42,4,0.00288,0,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,184,    },4,0,0,0,1,0,0,4,0,8,1,4,0.00288,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,321,        return iValues[index];,0,0,0,1,2,1,0,0,0,4,22,4,0.00282,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,289,        return iType;,0,0,0,0,0,1,0,0,0,1,13,4,0.00275,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,225,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,226,        type = checkPeriodType(type);,6,0,0,1,2,0,4,0,0,12,29,1,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,227,        chrono = DateTimeUtils.getChronology(chrono);,10,1,0,1,2,0,8,0,0,20,45,1,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,228,        iType = type;,4,0,0,0,0,0,0,0,0,5,13,4,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,229,"        iValues = chrono.get(this, duration);",2,0,0,1,2,0,6,0,0,9,37,4,0.00273,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,230,    },2,0,0,0,1,0,0,0,0,2,1,4,0.00273,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,276,        int size = period.size();,2,0,0,1,2,0,4,0,0,6,25,5,0.00272,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,277,        int[] values = new int[size];,0,0,0,2,4,0,0,0,0,6,29,4,0.00272,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,278,        if (duration != 0) {,10,1,0,1,3,0,4,0,0,16,20,3,0.00272,0,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,27,289,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.00272,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,287,            return PeriodType.standard();,2,0,0,1,2,1,10,0,0,13,29,1,0.0027,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,102,        PeriodType type = cStandard;,4,0,0,0,0,0,0,2,0,6,28,4,0.0026,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,103,        if (type == null) {,4,1,0,1,3,0,6,0,0,12,19,1,0.0026,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,104,            type = new PeriodType(,0,0,0,0,1,0,0,0,0,1,22,4,0.0026,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,114,            cStandard = type;,0,0,0,0,0,0,0,0,0,0,17,4,0.0026,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,116,        return type;,0,0,0,0,0,1,0,0,0,1,12,4,0.0026,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,286,        if (type == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00249,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,279,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,6,0,0,6,41,5,0.00249,0,0,-1
defect4j,time,org/joda/time/base/BasePeriod,27,299,        return iType.size();,12,1,0,1,2,1,4,0,0,19,20,3,0.00249,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,44,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00249,0,0,-1
defect4j,time,org/joda/time/base/AbstractPeriod,27,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00249,0,0,-1
defect4j,time,org/joda/time/PeriodType,27,617,        return iTypes.length;,4,0,0,0,0,1,0,0,0,4,21,5,0.00249,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,253,            return ISOChronology.getInstance();,0,0,0,1,2,1,0,0,0,4,35,4,0.00244,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,68,        checkPermission();,0,0,0,1,2,0,2,0,0,2,18,5,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,4,0,0,0,0,0,0,0,0,5,41,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,82,        checkPermission();,0,0,0,1,2,0,2,0,0,2,18,5,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0,0,0,1,2,0,0,0,0,3,55,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,129,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,130,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,414,        FixedMillisProvider(long fixedMillis) {,4,0,0,1,3,0,0,0,0,4,39,3,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,415,            iMillis = fixedMillis;,0,0,0,0,0,0,0,0,0,0,22,4,0.00213,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,416,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00213,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,6,0,0,6,46,5,0.00199,0,0,-1
defect4j,time,org/joda/time/DateTimeUtils,27,252,        if (chrono == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,172,        SecurityManager sm = System.getSecurityManager();,2,0,0,1,2,0,4,2,0,8,49,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,173,        if (sm != null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,176,        if (zone == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,179,        synchronized(DateTimeZone.class) {,0,0,0,1,3,0,0,2,0,2,34,6,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,180,            cDefault = zone;,4,0,0,0,0,0,4,0,0,9,16,3,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,181,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00195,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00195,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,96,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0,0,0,2,4,0,0,0,0,6,66,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,100,        ISOChronology chrono = cFastCache[index];,2,0,1,1,2,0,0,2,0,8,41,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,101,        if (chrono != null && chrono.getZone() == zone) {,4,3,0,2,5,0,4,0,0,11,49,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,104,        synchronized (cCache) {,2,0,0,1,3,0,0,0,0,2,23,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,105,            chrono = cCache.get(zone);,2,0,0,1,2,0,6,0,0,9,26,6,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,106,            if (chrono == null) {,4,1,0,1,3,0,0,2,0,8,21,3,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",2,0,0,2,4,0,8,2,0,13,76,8,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,108,"                cCache.put(zone, chrono);",0,0,0,1,2,0,8,0,0,8,25,9,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,110,        },0,0,0,0,1,0,0,0,0,1,1,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,111,        cFastCache[index] = chrono;,6,1,1,1,2,0,4,0,0,17,27,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,27,112,        return chrono;,2,0,0,0,0,1,0,0,0,2,14,4,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,27,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,1,0,2,4,1,16,0,0,17,70,3,0.00192,0,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,27,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00192,0,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,27,55,        return iType;,4,0,0,0,0,1,4,0,0,9,13,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDateTimeField,27,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,8,0,0,8,38,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,27,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/MillisDurationField,27,49,        return DurationFieldType.millis();,0,0,0,1,2,1,0,0,0,4,34,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,109,        return getWrappedField().getUnitMillis() * iScalar;,4,2,0,2,4,1,4,0,0,10,51,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,147,        long scalar = iScalar;,0,0,0,0,0,0,0,0,0,0,22,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,148,        int hash = (int) (scalar ^ (scalar >>> 32));,8,2,0,3,6,0,6,0,0,17,44,1,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,149,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,150,        hash += getWrappedField().hashCode();,0,0,0,2,4,0,0,0,0,6,37,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ScaledDurationField,27,151,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/DecoratedDurationField,27,69,        return iField;,10,3,0,0,0,1,0,0,0,13,14,3,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,142,        long millis = iUnitMillis;,4,0,0,0,0,0,0,0,0,4,26,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,143,        int hash = (int) (millis ^ (millis >>> 32));,6,2,0,3,6,0,0,0,0,8,44,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,144,        hash += getType().hashCode();,2,0,0,2,4,0,4,0,0,7,29,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationField,27,145,        return hash;,2,0,0,0,0,1,0,0,0,2,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,27,141,        return iUnitField;,2,0,0,0,0,1,0,0,0,2,18,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/RemainderDateTimeField,27,139,        return iRangeField;,2,0,0,0,0,1,0,0,0,2,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/PreciseDateTimeField,27,122,        return iRangeField;,0,0,0,0,0,1,0,0,0,1,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,27,218,        return 0;,0,0,0,0,0,1,4,0,0,4,9,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,27,160,            return iUnitMillis;,2,0,0,0,0,1,0,0,0,2,19,5,0.00191,0,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,27,101,        return getWrappedField().getLeapDurationField();,0,0,0,2,4,1,0,0,0,7,48,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,27,315,        return iParam;,2,0,0,0,0,1,0,0,0,2,14,4,0.00191,0,0,-1
defect4j,time,org/joda/time/DateTimeZone,27,1165,        return 57 + getID().hashCode();,2,1,0,2,4,1,4,0,0,7,31,4,0.00191,0,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,27,131,        return iZone.hashCode();,0,0,0,1,2,1,0,0,0,4,24,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,58,        return iChronology.weekyears();,0,0,0,1,2,1,0,0,0,4,31,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,27,95,        return null;,2,0,0,0,0,1,0,0,0,2,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,27,111,        return iChronology.days();,4,0,0,1,2,1,0,0,0,5,26,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,27,94,        return iChronology.weeks();,0,0,0,1,2,1,4,0,0,4,27,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,51,        return iChronology.months();,0,0,0,1,2,1,4,0,0,4,28,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,27,56,        return iChronology.years();,0,0,0,1,2,1,0,0,0,4,27,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,309,        return iChronology.years();,4,0,0,1,2,1,4,2,0,11,27,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,328,        return iChronology.days();,0,0,0,1,2,1,0,0,0,4,26,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,27,208,        return null;,8,0,0,0,0,1,2,0,0,11,12,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,27,220,        return iChronology.weeks();,2,1,0,1,2,1,10,0,0,13,27,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,82,"        super(base, zone);",4,0,0,1,2,0,0,0,0,4,18,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,56,        if (base == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,59,        base = base.withUTC();,4,0,0,1,2,0,4,0,0,10,22,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,60,        if (base == null) {,4,1,0,1,3,0,6,0,0,12,19,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,63,        if (zone == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,66,"        return new ZonedChronology(base, zone);",4,0,0,1,2,1,0,2,0,6,39,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,6,4,0,1,2,1,4,0,0,14,87,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,86,        return (DateTimeZone)getParam();,0,0,0,2,4,1,4,2,0,6,32,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",2,0,0,1,2,0,0,12,0,14,66,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,157,"        fields.eras = convertField(fields.eras, converted);",0,0,0,1,2,0,0,0,0,3,51,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,158,"        fields.centuries = convertField(fields.centuries, converted);",8,0,0,1,2,0,4,0,0,14,61,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,159,"        fields.years = convertField(fields.years, converted);",0,0,0,1,2,0,0,0,0,3,53,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,160,"        fields.months = convertField(fields.months, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,161,"        fields.weekyears = convertField(fields.weekyears, converted);",10,0,0,1,2,0,4,0,0,15,61,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,162,"        fields.weeks = convertField(fields.weeks, converted);",10,1,0,1,2,0,4,0,0,16,53,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,163,"        fields.days = convertField(fields.days, converted);",10,1,0,1,2,0,4,0,0,16,51,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,165,"        fields.halfdays = convertField(fields.halfdays, converted);",12,0,0,1,2,0,4,0,0,18,59,1,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,166,"        fields.hours = convertField(fields.hours, converted);",16,0,0,1,2,0,8,0,0,26,53,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,167,"        fields.minutes = convertField(fields.minutes, converted);",8,0,0,1,2,0,4,0,0,13,57,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,168,"        fields.seconds = convertField(fields.seconds, converted);",0,0,0,1,2,0,0,0,0,3,57,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,169,"        fields.millis = convertField(fields.millis, converted);",8,0,0,1,2,0,4,0,0,13,55,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,173,"        fields.year = convertField(fields.year, converted);",8,0,0,1,2,0,4,0,0,13,51,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,69,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",10,1,0,1,2,0,4,0,0,16,67,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,177,"        fields.era = convertField(fields.era, converted);",8,0,0,1,2,0,4,0,0,13,49,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0,0,0,1,2,0,0,0,0,3,61,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0,0,0,1,2,0,0,0,0,3,63,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",16,0,0,1,2,0,8,0,0,26,65,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,183,"        fields.weekyear = convertField(fields.weekyear, converted);",8,0,0,1,2,0,4,0,0,13,59,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",8,0,0,1,2,0,4,0,0,13,77,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",10,0,0,1,2,0,4,0,0,15,71,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",8,0,0,1,2,0,12,0,0,21,65,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0,0,0,1,2,0,0,0,0,3,71,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",8,0,0,1,2,0,4,0,0,13,65,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,61,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",10,2,0,1,2,0,8,0,0,22,69,3,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",8,0,0,1,2,0,4,0,0,13,71,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0,0,0,1,2,0,0,0,0,3,79,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",8,0,0,1,2,0,4,0,0,13,67,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,200,        if (field == null || !field.isSupported()) {,2,2,0,2,5,0,4,0,0,9,44,4,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,201,            return field;,2,0,0,0,0,1,0,0,0,2,13,6,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,203,        if (converted.containsKey(field)) {,0,0,0,2,5,0,6,0,0,6,35,5,0.00191,0,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,27,204,            return (DurationField)converted.get(field);,0,0,0,2,4,1,6,2,0,8,43,7,0.00191,0,0,-1
